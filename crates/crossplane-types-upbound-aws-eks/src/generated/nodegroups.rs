// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// NodeGroupSpec defines the desired state of NodeGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "eks.aws.upbound.io", version = "v1beta2", kind = "NodeGroup", plural = "nodegroups")]
#[kube(status = "NodeGroupStatus")]
pub struct NodeGroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<NodeGroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: NodeGroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<NodeGroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<NodeGroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<NodeGroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<NodeGroupWriteConnectionSecretToRef>,
}

/// NodeGroupSpec defines the desired state of NodeGroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProvider {
    /// Type of Amazon Machine Image (AMI) associated with the EKS Node Group. See the AWS documentation for valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiType")]
    pub ami_type: Option<String>,
    /// Type of capacity associated with the EKS Node Group. Valid values: ON_DEMAND, SPOT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityType")]
    pub capacity_type: Option<String>,
    /// –  Name of the EKS Cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    /// Reference to a Cluster in eks to populate clusterName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterNameRef")]
    pub cluster_name_ref: Option<NodeGroupForProviderClusterNameRef>,
    /// Selector for a Cluster in eks to populate clusterName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterNameSelector")]
    pub cluster_name_selector: Option<NodeGroupForProviderClusterNameSelector>,
    /// Disk size in GiB for worker nodes. Defaults to 50 for Windows, 20 all other node groups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSize")]
    pub disk_size: Option<f64>,
    /// Force version update if existing pods are unable to be drained due to a pod disruption budget issue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceUpdateVersion")]
    pub force_update_version: Option<bool>,
    /// List of instance types associated with the EKS Node Group. Defaults to ["t3.medium"].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceTypes")]
    pub instance_types: Option<Vec<String>>,
    /// Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Configuration block with Launch Template settings. See launch_template below for details. Conflicts with remote_access.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    pub launch_template: Option<NodeGroupForProviderLaunchTemplate>,
    /// –  Amazon Resource Name (ARN) of the IAM Role that provides permissions for the EKS Node Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeRoleArn")]
    pub node_role_arn: Option<String>,
    /// Reference to a Role in iam to populate nodeRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeRoleArnRef")]
    pub node_role_arn_ref: Option<NodeGroupForProviderNodeRoleArnRef>,
    /// Selector for a Role in iam to populate nodeRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeRoleArnSelector")]
    pub node_role_arn_selector: Option<NodeGroupForProviderNodeRoleArnSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// –  AMI version of the EKS Node Group. Defaults to latest version for Kubernetes version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseVersion")]
    pub release_version: Option<String>,
    /// Configuration block with remote access settings. See remote_access below for details. Conflicts with launch_template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAccess")]
    pub remote_access: Option<NodeGroupForProviderRemoteAccess>,
    /// Configuration block with scaling settings. See scaling_config below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingConfig")]
    pub scaling_config: Option<NodeGroupForProviderScalingConfig>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRefs")]
    pub subnet_id_refs: Option<Vec<NodeGroupForProviderSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    pub subnet_id_selector: Option<NodeGroupForProviderSubnetIdSelector>,
    /// Identifiers of EC2 Subnets to associate with the EKS Node Group. Amazon EKS managed node groups can be launched in both public and private subnets. If you plan to deploy load balancers to a subnet, the private subnet must have tag kubernetes.io/role/internal-elb, the public subnet must have tag kubernetes.io/role/elb.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The Kubernetes taints to be applied to the nodes in the node group. Maximum of 50 taints per node group. See taint below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taint: Option<Vec<NodeGroupForProviderTaint>>,
    /// Configuration block with update settings. See update_config below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateConfig")]
    pub update_config: Option<NodeGroupForProviderUpdateConfig>,
    /// –  Kubernetes version. Defaults to EKS Cluster Kubernetes version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Reference to a Cluster in eks to populate version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionRef")]
    pub version_ref: Option<NodeGroupForProviderVersionRef>,
    /// Selector for a Cluster in eks to populate version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionSelector")]
    pub version_selector: Option<NodeGroupForProviderVersionSelector>,
}

/// Reference to a Cluster in eks to populate clusterName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderClusterNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderClusterNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderClusterNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderClusterNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderClusterNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderClusterNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderClusterNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in eks to populate clusterName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderClusterNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderClusterNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderClusterNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderClusterNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderClusterNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderClusterNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderClusterNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with Launch Template settings. See launch_template below for details. Conflicts with remote_access.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderLaunchTemplate {
    /// Identifier of the EC2 Launch Template. Conflicts with name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the EC2 Launch Template. Conflicts with id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// EC2 Launch Template version number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Reference to a Role in iam to populate nodeRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderNodeRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderNodeRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderNodeRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderNodeRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderNodeRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderNodeRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderNodeRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate nodeRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderNodeRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderNodeRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderNodeRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderNodeRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderNodeRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderNodeRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderNodeRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with remote access settings. See remote_access below for details. Conflicts with launch_template.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderRemoteAccess {
    /// EC2 Key Pair name that provides access for remote communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify source_security_group_ids when you create an EKS Node Group, either port 3389 for Windows, or port 22 for all other operating systems is opened on the worker nodes to the Internet (0.0.0.0/0). For Windows nodes, this will allow you to use RDP, for all others this allows you to SSH into the worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ec2SshKey")]
    pub ec2_ssh_key: Option<String>,
    /// References to SecurityGroup in ec2 to populate sourceSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroupIdRefs")]
    pub source_security_group_id_refs: Option<Vec<NodeGroupForProviderRemoteAccessSourceSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate sourceSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroupIdSelector")]
    pub source_security_group_id_selector: Option<NodeGroupForProviderRemoteAccessSourceSecurityGroupIdSelector>,
    /// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify ec2_ssh_key, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroupIds")]
    pub source_security_group_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderRemoteAccessSourceSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderRemoteAccessSourceSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderRemoteAccessSourceSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderRemoteAccessSourceSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderRemoteAccessSourceSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderRemoteAccessSourceSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderRemoteAccessSourceSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate sourceSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderRemoteAccessSourceSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderRemoteAccessSourceSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderRemoteAccessSourceSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderRemoteAccessSourceSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderRemoteAccessSourceSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderRemoteAccessSourceSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderRemoteAccessSourceSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with scaling settings. See scaling_config below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderScalingConfig {
    /// Desired number of worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredSize")]
    pub desired_size: Option<f64>,
    /// Maximum number of worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSize")]
    pub max_size: Option<f64>,
    /// Minimum number of worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSize")]
    pub min_size: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderTaint {
    /// The effect of the taint. Valid values: NO_SCHEDULE, NO_EXECUTE, PREFER_NO_SCHEDULE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// The key of the taint. Maximum length of 63.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The value of the taint. Maximum length of 63.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Configuration block with update settings. See update_config below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderUpdateConfig {
    /// Desired max number of unavailable worker nodes during node group update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<f64>,
    /// Desired max percentage of unavailable worker nodes during node group update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailablePercentage")]
    pub max_unavailable_percentage: Option<f64>,
}

/// Reference to a Cluster in eks to populate version.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderVersionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderVersionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderVersionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderVersionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderVersionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderVersionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderVersionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in eks to populate version.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderVersionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderVersionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderVersionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderVersionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderVersionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderVersionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderVersionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProvider {
    /// Type of Amazon Machine Image (AMI) associated with the EKS Node Group. See the AWS documentation for valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiType")]
    pub ami_type: Option<String>,
    /// Type of capacity associated with the EKS Node Group. Valid values: ON_DEMAND, SPOT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityType")]
    pub capacity_type: Option<String>,
    /// Disk size in GiB for worker nodes. Defaults to 50 for Windows, 20 all other node groups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSize")]
    pub disk_size: Option<f64>,
    /// Force version update if existing pods are unable to be drained due to a pod disruption budget issue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceUpdateVersion")]
    pub force_update_version: Option<bool>,
    /// List of instance types associated with the EKS Node Group. Defaults to ["t3.medium"].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceTypes")]
    pub instance_types: Option<Vec<String>>,
    /// Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Configuration block with Launch Template settings. See launch_template below for details. Conflicts with remote_access.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    pub launch_template: Option<NodeGroupInitProviderLaunchTemplate>,
    /// –  Amazon Resource Name (ARN) of the IAM Role that provides permissions for the EKS Node Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeRoleArn")]
    pub node_role_arn: Option<String>,
    /// Reference to a Role in iam to populate nodeRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeRoleArnRef")]
    pub node_role_arn_ref: Option<NodeGroupInitProviderNodeRoleArnRef>,
    /// Selector for a Role in iam to populate nodeRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeRoleArnSelector")]
    pub node_role_arn_selector: Option<NodeGroupInitProviderNodeRoleArnSelector>,
    /// –  AMI version of the EKS Node Group. Defaults to latest version for Kubernetes version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseVersion")]
    pub release_version: Option<String>,
    /// Configuration block with remote access settings. See remote_access below for details. Conflicts with launch_template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAccess")]
    pub remote_access: Option<NodeGroupInitProviderRemoteAccess>,
    /// Configuration block with scaling settings. See scaling_config below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingConfig")]
    pub scaling_config: Option<NodeGroupInitProviderScalingConfig>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRefs")]
    pub subnet_id_refs: Option<Vec<NodeGroupInitProviderSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    pub subnet_id_selector: Option<NodeGroupInitProviderSubnetIdSelector>,
    /// Identifiers of EC2 Subnets to associate with the EKS Node Group. Amazon EKS managed node groups can be launched in both public and private subnets. If you plan to deploy load balancers to a subnet, the private subnet must have tag kubernetes.io/role/internal-elb, the public subnet must have tag kubernetes.io/role/elb.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The Kubernetes taints to be applied to the nodes in the node group. Maximum of 50 taints per node group. See taint below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taint: Option<Vec<NodeGroupInitProviderTaint>>,
    /// Configuration block with update settings. See update_config below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateConfig")]
    pub update_config: Option<NodeGroupInitProviderUpdateConfig>,
    /// –  Kubernetes version. Defaults to EKS Cluster Kubernetes version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Reference to a Cluster in eks to populate version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionRef")]
    pub version_ref: Option<NodeGroupInitProviderVersionRef>,
    /// Selector for a Cluster in eks to populate version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionSelector")]
    pub version_selector: Option<NodeGroupInitProviderVersionSelector>,
}

/// Configuration block with Launch Template settings. See launch_template below for details. Conflicts with remote_access.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderLaunchTemplate {
    /// Identifier of the EC2 Launch Template. Conflicts with name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the EC2 Launch Template. Conflicts with id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// EC2 Launch Template version number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Reference to a Role in iam to populate nodeRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderNodeRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderNodeRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderNodeRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderNodeRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderNodeRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderNodeRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderNodeRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate nodeRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderNodeRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderNodeRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderNodeRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderNodeRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderNodeRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderNodeRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderNodeRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with remote access settings. See remote_access below for details. Conflicts with launch_template.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderRemoteAccess {
    /// EC2 Key Pair name that provides access for remote communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify source_security_group_ids when you create an EKS Node Group, either port 3389 for Windows, or port 22 for all other operating systems is opened on the worker nodes to the Internet (0.0.0.0/0). For Windows nodes, this will allow you to use RDP, for all others this allows you to SSH into the worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ec2SshKey")]
    pub ec2_ssh_key: Option<String>,
    /// References to SecurityGroup in ec2 to populate sourceSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroupIdRefs")]
    pub source_security_group_id_refs: Option<Vec<NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate sourceSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroupIdSelector")]
    pub source_security_group_id_selector: Option<NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdSelector>,
    /// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify ec2_ssh_key, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroupIds")]
    pub source_security_group_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate sourceSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderRemoteAccessSourceSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with scaling settings. See scaling_config below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderScalingConfig {
    /// Desired number of worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredSize")]
    pub desired_size: Option<f64>,
    /// Maximum number of worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSize")]
    pub max_size: Option<f64>,
    /// Minimum number of worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSize")]
    pub min_size: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderTaint {
    /// The effect of the taint. Valid values: NO_SCHEDULE, NO_EXECUTE, PREFER_NO_SCHEDULE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// The key of the taint. Maximum length of 63.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The value of the taint. Maximum length of 63.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Configuration block with update settings. See update_config below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderUpdateConfig {
    /// Desired max number of unavailable worker nodes during node group update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<f64>,
    /// Desired max percentage of unavailable worker nodes during node group update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailablePercentage")]
    pub max_unavailable_percentage: Option<f64>,
}

/// Reference to a Cluster in eks to populate version.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderVersionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderVersionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderVersionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderVersionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderVersionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderVersionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderVersionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in eks to populate version.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderVersionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderVersionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderVersionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderVersionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderVersionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderVersionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderVersionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<NodeGroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<NodeGroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// NodeGroupStatus defines the observed state of NodeGroup.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<NodeGroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProvider {
    /// Type of Amazon Machine Image (AMI) associated with the EKS Node Group. See the AWS documentation for valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiType")]
    pub ami_type: Option<String>,
    /// Amazon Resource Name (ARN) of the EKS Node Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Type of capacity associated with the EKS Node Group. Valid values: ON_DEMAND, SPOT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityType")]
    pub capacity_type: Option<String>,
    /// –  Name of the EKS Cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    /// Disk size in GiB for worker nodes. Defaults to 50 for Windows, 20 all other node groups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSize")]
    pub disk_size: Option<f64>,
    /// Force version update if existing pods are unable to be drained due to a pod disruption budget issue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceUpdateVersion")]
    pub force_update_version: Option<bool>,
    /// EKS Cluster name and EKS Node Group name separated by a colon (:).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// List of instance types associated with the EKS Node Group. Defaults to ["t3.medium"].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceTypes")]
    pub instance_types: Option<Vec<String>>,
    /// Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Configuration block with Launch Template settings. See launch_template below for details. Conflicts with remote_access.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    pub launch_template: Option<NodeGroupStatusAtProviderLaunchTemplate>,
    /// –  Amazon Resource Name (ARN) of the IAM Role that provides permissions for the EKS Node Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeRoleArn")]
    pub node_role_arn: Option<String>,
    /// –  AMI version of the EKS Node Group. Defaults to latest version for Kubernetes version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseVersion")]
    pub release_version: Option<String>,
    /// Configuration block with remote access settings. See remote_access below for details. Conflicts with launch_template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAccess")]
    pub remote_access: Option<NodeGroupStatusAtProviderRemoteAccess>,
    /// List of objects containing information about underlying resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<NodeGroupStatusAtProviderResources>>,
    /// Configuration block with scaling settings. See scaling_config below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingConfig")]
    pub scaling_config: Option<NodeGroupStatusAtProviderScalingConfig>,
    /// Status of the EKS Node Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Identifiers of EC2 Subnets to associate with the EKS Node Group. Amazon EKS managed node groups can be launched in both public and private subnets. If you plan to deploy load balancers to a subnet, the private subnet must have tag kubernetes.io/role/internal-elb, the public subnet must have tag kubernetes.io/role/elb.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The Kubernetes taints to be applied to the nodes in the node group. Maximum of 50 taints per node group. See taint below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taint: Option<Vec<NodeGroupStatusAtProviderTaint>>,
    /// Configuration block with update settings. See update_config below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateConfig")]
    pub update_config: Option<NodeGroupStatusAtProviderUpdateConfig>,
    /// –  Kubernetes version. Defaults to EKS Cluster Kubernetes version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Configuration block with Launch Template settings. See launch_template below for details. Conflicts with remote_access.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderLaunchTemplate {
    /// Identifier of the EC2 Launch Template. Conflicts with name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the EC2 Launch Template. Conflicts with id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// EC2 Launch Template version number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Configuration block with remote access settings. See remote_access below for details. Conflicts with launch_template.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderRemoteAccess {
    /// EC2 Key Pair name that provides access for remote communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify source_security_group_ids when you create an EKS Node Group, either port 3389 for Windows, or port 22 for all other operating systems is opened on the worker nodes to the Internet (0.0.0.0/0). For Windows nodes, this will allow you to use RDP, for all others this allows you to SSH into the worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ec2SshKey")]
    pub ec2_ssh_key: Option<String>,
    /// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify ec2_ssh_key, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroupIds")]
    pub source_security_group_ids: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderResources {
    /// List of objects containing information about AutoScaling Groups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingGroups")]
    pub autoscaling_groups: Option<Vec<NodeGroupStatusAtProviderResourcesAutoscalingGroups>>,
    /// Identifier of the remote access EC2 Security Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAccessSecurityGroupId")]
    pub remote_access_security_group_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderResourcesAutoscalingGroups {
    /// Name of the AutoScaling Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Configuration block with scaling settings. See scaling_config below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderScalingConfig {
    /// Desired number of worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredSize")]
    pub desired_size: Option<f64>,
    /// Maximum number of worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSize")]
    pub max_size: Option<f64>,
    /// Minimum number of worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSize")]
    pub min_size: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderTaint {
    /// The effect of the taint. Valid values: NO_SCHEDULE, NO_EXECUTE, PREFER_NO_SCHEDULE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// The key of the taint. Maximum length of 63.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The value of the taint. Maximum length of 63.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Configuration block with update settings. See update_config below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderUpdateConfig {
    /// Desired max number of unavailable worker nodes during node group update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<f64>,
    /// Desired max percentage of unavailable worker nodes during node group update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailablePercentage")]
    pub max_unavailable_percentage: Option<f64>,
}


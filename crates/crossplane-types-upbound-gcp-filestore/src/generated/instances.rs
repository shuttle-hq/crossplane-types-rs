// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "filestore.gcp.upbound.io", version = "v1beta2", kind = "Instance", plural = "instances")]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProvider {
    /// A description of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// File system shares on the instance. For this version, only a
    /// single file share is supported.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileShares")]
    pub file_shares: Option<InstanceForProviderFileShares>,
    /// KMS key name used for data encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// Reference to a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameRef")]
    pub kms_key_name_ref: Option<InstanceForProviderKmsKeyNameRef>,
    /// Selector for a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameSelector")]
    pub kms_key_name_selector: Option<InstanceForProviderKmsKeyNameSelector>,
    /// Resource labels to represent user-provided metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// VPC networks to which the instance is connected. For this version,
    /// only a single network is supported.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<InstanceForProviderNetworks>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The service tier of the instance.
    /// Possible values include: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD, HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    /// The name of the Filestore zone of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// File system shares on the instance. For this version, only a
/// single file share is supported.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderFileShares {
    /// File share capacity in GiB. This must be at least 1024 GiB
    /// for the standard tier, or 2560 GiB for the premium tier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityGb")]
    pub capacity_gb: Option<f64>,
    /// The name of the fileshare (16 characters or less)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Nfs Export Options. There is a limit of 10 export options per file share.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nfsExportOptions")]
    pub nfs_export_options: Option<Vec<InstanceForProviderFileSharesNfsExportOptions>>,
    /// The resource name of the backup, in the format
    /// projects/{projectId}/locations/{locationId}/backups/{backupId},
    /// that this file share has been restored from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBackup")]
    pub source_backup: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderFileSharesNfsExportOptions {
    /// Either READ_ONLY, for allowing only read requests on the exported directory,
    /// or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
    /// Default value is READ_WRITE.
    /// Possible values are: READ_ONLY, READ_WRITE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessMode")]
    pub access_mode: Option<String>,
    /// An integer representing the anonymous group id with a default value of 65534.
    /// Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
    /// if this field is specified for other squashMode settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonGid")]
    pub anon_gid: Option<f64>,
    /// An integer representing the anonymous user id with a default value of 65534.
    /// Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
    /// if this field is specified for other squashMode settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonUid")]
    pub anon_uid: Option<f64>,
    /// List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
    /// Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
    /// The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipRanges")]
    pub ip_ranges: Option<Vec<String>>,
    /// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
    /// for not allowing root access. The default is NO_ROOT_SQUASH.
    /// Default value is NO_ROOT_SQUASH.
    /// Possible values are: NO_ROOT_SQUASH, ROOT_SQUASH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "squashMode")]
    pub squash_mode: Option<String>,
}

/// Reference to a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderKmsKeyNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderKmsKeyNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderKmsKeyNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderKmsKeyNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderKmsKeyNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderKmsKeyNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderKmsKeyNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderKmsKeyNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderKmsKeyNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderKmsKeyNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderKmsKeyNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderKmsKeyNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderKmsKeyNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderKmsKeyNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderNetworks {
    /// The network connect mode of the Filestore instance.
    /// If not provided, the connect mode defaults to
    /// DIRECT_PEERING.
    /// Default value is DIRECT_PEERING.
    /// Possible values are: DIRECT_PEERING, PRIVATE_SERVICE_ACCESS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMode")]
    pub connect_mode: Option<String>,
    /// IP versions for which the instance has
    /// IP addresses assigned.
    /// Each value may be one of: ADDRESS_MODE_UNSPECIFIED, MODE_IPV4, MODE_IPV6.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<String>>,
    /// The name of the GCE VPC network to which the
    /// instance is connected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// A /29 CIDR block that identifies the range of IP
    /// addresses reserved for this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRange")]
    pub reserved_ip_range: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProvider {
    /// A description of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// File system shares on the instance. For this version, only a
    /// single file share is supported.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileShares")]
    pub file_shares: Option<InstanceInitProviderFileShares>,
    /// KMS key name used for data encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// Reference to a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameRef")]
    pub kms_key_name_ref: Option<InstanceInitProviderKmsKeyNameRef>,
    /// Selector for a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameSelector")]
    pub kms_key_name_selector: Option<InstanceInitProviderKmsKeyNameSelector>,
    /// Resource labels to represent user-provided metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// VPC networks to which the instance is connected. For this version,
    /// only a single network is supported.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<InstanceInitProviderNetworks>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The service tier of the instance.
    /// Possible values include: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD, HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    /// The name of the Filestore zone of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// File system shares on the instance. For this version, only a
/// single file share is supported.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderFileShares {
    /// File share capacity in GiB. This must be at least 1024 GiB
    /// for the standard tier, or 2560 GiB for the premium tier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityGb")]
    pub capacity_gb: Option<f64>,
    /// The name of the fileshare (16 characters or less)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Nfs Export Options. There is a limit of 10 export options per file share.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nfsExportOptions")]
    pub nfs_export_options: Option<Vec<InstanceInitProviderFileSharesNfsExportOptions>>,
    /// The resource name of the backup, in the format
    /// projects/{projectId}/locations/{locationId}/backups/{backupId},
    /// that this file share has been restored from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBackup")]
    pub source_backup: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderFileSharesNfsExportOptions {
    /// Either READ_ONLY, for allowing only read requests on the exported directory,
    /// or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
    /// Default value is READ_WRITE.
    /// Possible values are: READ_ONLY, READ_WRITE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessMode")]
    pub access_mode: Option<String>,
    /// An integer representing the anonymous group id with a default value of 65534.
    /// Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
    /// if this field is specified for other squashMode settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonGid")]
    pub anon_gid: Option<f64>,
    /// An integer representing the anonymous user id with a default value of 65534.
    /// Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
    /// if this field is specified for other squashMode settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonUid")]
    pub anon_uid: Option<f64>,
    /// List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
    /// Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
    /// The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipRanges")]
    pub ip_ranges: Option<Vec<String>>,
    /// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
    /// for not allowing root access. The default is NO_ROOT_SQUASH.
    /// Default value is NO_ROOT_SQUASH.
    /// Possible values are: NO_ROOT_SQUASH, ROOT_SQUASH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "squashMode")]
    pub squash_mode: Option<String>,
}

/// Reference to a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderKmsKeyNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderKmsKeyNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderKmsKeyNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderKmsKeyNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderKmsKeyNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderKmsKeyNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderKmsKeyNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderKmsKeyNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderKmsKeyNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderKmsKeyNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderKmsKeyNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderKmsKeyNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderKmsKeyNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderKmsKeyNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderNetworks {
    /// The network connect mode of the Filestore instance.
    /// If not provided, the connect mode defaults to
    /// DIRECT_PEERING.
    /// Default value is DIRECT_PEERING.
    /// Possible values are: DIRECT_PEERING, PRIVATE_SERVICE_ACCESS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMode")]
    pub connect_mode: Option<String>,
    /// IP versions for which the instance has
    /// IP addresses assigned.
    /// Each value may be one of: ADDRESS_MODE_UNSPECIFIED, MODE_IPV4, MODE_IPV6.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<String>>,
    /// The name of the GCE VPC network to which the
    /// instance is connected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// A /29 CIDR block that identifies the range of IP
    /// addresses reserved for this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRange")]
    pub reserved_ip_range: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProvider {
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// A description of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Server-specified ETag for the instance resource to prevent
    /// simultaneous updates from overwriting each other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// File system shares on the instance. For this version, only a
    /// single file share is supported.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileShares")]
    pub file_shares: Option<InstanceStatusAtProviderFileShares>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/instances/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// KMS key name used for data encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// Resource labels to represent user-provided metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// VPC networks to which the instance is connected. For this version,
    /// only a single network is supported.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<InstanceStatusAtProviderNetworks>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// The service tier of the instance.
    /// Possible values include: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD, HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    /// The name of the Filestore zone of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// File system shares on the instance. For this version, only a
/// single file share is supported.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderFileShares {
    /// File share capacity in GiB. This must be at least 1024 GiB
    /// for the standard tier, or 2560 GiB for the premium tier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityGb")]
    pub capacity_gb: Option<f64>,
    /// The name of the fileshare (16 characters or less)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Nfs Export Options. There is a limit of 10 export options per file share.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nfsExportOptions")]
    pub nfs_export_options: Option<Vec<InstanceStatusAtProviderFileSharesNfsExportOptions>>,
    /// The resource name of the backup, in the format
    /// projects/{projectId}/locations/{locationId}/backups/{backupId},
    /// that this file share has been restored from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBackup")]
    pub source_backup: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderFileSharesNfsExportOptions {
    /// Either READ_ONLY, for allowing only read requests on the exported directory,
    /// or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
    /// Default value is READ_WRITE.
    /// Possible values are: READ_ONLY, READ_WRITE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessMode")]
    pub access_mode: Option<String>,
    /// An integer representing the anonymous group id with a default value of 65534.
    /// Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
    /// if this field is specified for other squashMode settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonGid")]
    pub anon_gid: Option<f64>,
    /// An integer representing the anonymous user id with a default value of 65534.
    /// Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
    /// if this field is specified for other squashMode settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonUid")]
    pub anon_uid: Option<f64>,
    /// List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
    /// Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
    /// The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipRanges")]
    pub ip_ranges: Option<Vec<String>>,
    /// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
    /// for not allowing root access. The default is NO_ROOT_SQUASH.
    /// Default value is NO_ROOT_SQUASH.
    /// Possible values are: NO_ROOT_SQUASH, ROOT_SQUASH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "squashMode")]
    pub squash_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderNetworks {
    /// The network connect mode of the Filestore instance.
    /// If not provided, the connect mode defaults to
    /// DIRECT_PEERING.
    /// Default value is DIRECT_PEERING.
    /// Possible values are: DIRECT_PEERING, PRIVATE_SERVICE_ACCESS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMode")]
    pub connect_mode: Option<String>,
    /// (Output)
    /// A list of IPv4 or IPv6 addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddresses")]
    pub ip_addresses: Option<Vec<String>>,
    /// IP versions for which the instance has
    /// IP addresses assigned.
    /// Each value may be one of: ADDRESS_MODE_UNSPECIFIED, MODE_IPV4, MODE_IPV6.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<String>>,
    /// The name of the GCE VPC network to which the
    /// instance is connected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// A /29 CIDR block that identifies the range of IP
    /// addresses reserved for this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRange")]
    pub reserved_ip_range: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ApplicationSpec defines the desired state of Application
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "appengine.gcp.upbound.io", version = "v1beta2", kind = "Application", plural = "applications")]
#[kube(status = "ApplicationStatus")]
pub struct ApplicationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ApplicationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ApplicationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ApplicationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ApplicationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ApplicationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ApplicationWriteConnectionSecretToRef>,
}

/// ApplicationSpec defines the desired state of Application
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProvider {
    /// The domain to authenticate users with when using App Engine's User API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authDomain")]
    pub auth_domain: Option<String>,
    /// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
    /// Can be CLOUD_FIRESTORE or CLOUD_DATASTORE_COMPATIBILITY for new
    /// instances.  To support old instances, the value CLOUD_DATASTORE is accepted by the provider, but will be rejected by the API.
    /// To create a Cloud Firestore database without creating an App Engine application, use the
    /// google_firestore_database
    /// resource instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseType")]
    pub database_type: Option<String>,
    /// A block of optional settings to configure specific App Engine features:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureSettings")]
    pub feature_settings: Option<ApplicationForProviderFeatureSettings>,
    /// Settings for enabling Cloud Identity Aware Proxy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iap: Option<ApplicationForProviderIap>,
    /// The location
    /// to serve the app from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationId")]
    pub location_id: Option<String>,
    /// The project ID to create the application under.
    /// ~>NOTE: GCP only accepts project ID, not project number. If you are using number,
    /// you may get a "Permission denied" error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reference to a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectRef")]
    pub project_ref: Option<ApplicationForProviderProjectRef>,
    /// Selector for a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectSelector")]
    pub project_selector: Option<ApplicationForProviderProjectSelector>,
    /// The serving status of the app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servingStatus")]
    pub serving_status: Option<String>,
}

/// A block of optional settings to configure specific App Engine features:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderFeatureSettings {
    /// Set to false to use the legacy health check instead of the readiness
    /// and liveness checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splitHealthChecks")]
    pub split_health_checks: Option<bool>,
}

/// Settings for enabling Cloud Identity Aware Proxy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderIap {
    /// Whether the serving infrastructure will authenticate and authorize all incoming requests.
    /// (default is false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// OAuth2 client ID to use for the authentication flow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientId")]
    pub oauth2_client_id: Option<String>,
    /// OAuth2 client secret to use for the authentication flow.
    /// The SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientSecretSecretRef")]
    pub oauth2_client_secret_secret_ref: Option<ApplicationForProviderIapOauth2ClientSecretSecretRef>,
}

/// OAuth2 client secret to use for the authentication flow.
/// The SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderIapOauth2ClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderProjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderProjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderProjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationForProviderProjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderProjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderProjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderProjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderProjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderProjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderProjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationForProviderProjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderProjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderProjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderProjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProvider {
    /// The domain to authenticate users with when using App Engine's User API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authDomain")]
    pub auth_domain: Option<String>,
    /// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
    /// Can be CLOUD_FIRESTORE or CLOUD_DATASTORE_COMPATIBILITY for new
    /// instances.  To support old instances, the value CLOUD_DATASTORE is accepted by the provider, but will be rejected by the API.
    /// To create a Cloud Firestore database without creating an App Engine application, use the
    /// google_firestore_database
    /// resource instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseType")]
    pub database_type: Option<String>,
    /// A block of optional settings to configure specific App Engine features:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureSettings")]
    pub feature_settings: Option<ApplicationInitProviderFeatureSettings>,
    /// Settings for enabling Cloud Identity Aware Proxy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iap: Option<ApplicationInitProviderIap>,
    /// The location
    /// to serve the app from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationId")]
    pub location_id: Option<String>,
    /// The project ID to create the application under.
    /// ~>NOTE: GCP only accepts project ID, not project number. If you are using number,
    /// you may get a "Permission denied" error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reference to a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectRef")]
    pub project_ref: Option<ApplicationInitProviderProjectRef>,
    /// Selector for a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectSelector")]
    pub project_selector: Option<ApplicationInitProviderProjectSelector>,
    /// The serving status of the app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servingStatus")]
    pub serving_status: Option<String>,
}

/// A block of optional settings to configure specific App Engine features:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderFeatureSettings {
    /// Set to false to use the legacy health check instead of the readiness
    /// and liveness checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splitHealthChecks")]
    pub split_health_checks: Option<bool>,
}

/// Settings for enabling Cloud Identity Aware Proxy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderIap {
    /// Whether the serving infrastructure will authenticate and authorize all incoming requests.
    /// (default is false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// OAuth2 client ID to use for the authentication flow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientId")]
    pub oauth2_client_id: Option<String>,
    /// OAuth2 client secret to use for the authentication flow.
    /// The SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field.
    #[serde(rename = "oauth2ClientSecretSecretRef")]
    pub oauth2_client_secret_secret_ref: ApplicationInitProviderIapOauth2ClientSecretSecretRef,
}

/// OAuth2 client secret to use for the authentication flow.
/// The SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderIapOauth2ClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderProjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderProjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderProjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationInitProviderProjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderProjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderProjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderProjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderProjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderProjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderProjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationInitProviderProjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderProjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderProjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderProjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ApplicationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ApplicationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ApplicationStatus defines the observed state of Application.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ApplicationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProvider {
    /// Identifier of the app, usually {PROJECT_ID}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appId")]
    pub app_id: Option<String>,
    /// The domain to authenticate users with when using App Engine's User API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authDomain")]
    pub auth_domain: Option<String>,
    /// The GCS bucket code is being stored in for this app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeBucket")]
    pub code_bucket: Option<String>,
    /// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
    /// Can be CLOUD_FIRESTORE or CLOUD_DATASTORE_COMPATIBILITY for new
    /// instances.  To support old instances, the value CLOUD_DATASTORE is accepted by the provider, but will be rejected by the API.
    /// To create a Cloud Firestore database without creating an App Engine application, use the
    /// google_firestore_database
    /// resource instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseType")]
    pub database_type: Option<String>,
    /// The GCS bucket content is being stored in for this app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultBucket")]
    pub default_bucket: Option<String>,
    /// The default hostname for this app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultHostname")]
    pub default_hostname: Option<String>,
    /// A block of optional settings to configure specific App Engine features:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureSettings")]
    pub feature_settings: Option<ApplicationStatusAtProviderFeatureSettings>,
    /// The GCR domain used for storing managed Docker images for this app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcrDomain")]
    pub gcr_domain: Option<String>,
    /// Settings for enabling Cloud Identity Aware Proxy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iap: Option<ApplicationStatusAtProviderIap>,
    /// an identifier for the resource with format {{project}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The location
    /// to serve the app from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationId")]
    pub location_id: Option<String>,
    /// Unique name of the app, usually apps/{PROJECT_ID}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The project ID to create the application under.
    /// ~>NOTE: GCP only accepts project ID, not project number. If you are using number,
    /// you may get a "Permission denied" error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The serving status of the app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servingStatus")]
    pub serving_status: Option<String>,
    /// A list of dispatch rule blocks. Each block has a domain, path, and service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlDispatchRule")]
    pub url_dispatch_rule: Option<Vec<ApplicationStatusAtProviderUrlDispatchRule>>,
}

/// A block of optional settings to configure specific App Engine features:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderFeatureSettings {
    /// Set to false to use the legacy health check instead of the readiness
    /// and liveness checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splitHealthChecks")]
    pub split_health_checks: Option<bool>,
}

/// Settings for enabling Cloud Identity Aware Proxy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderIap {
    /// Whether the serving infrastructure will authenticate and authorize all incoming requests.
    /// (default is false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// OAuth2 client ID to use for the authentication flow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientId")]
    pub oauth2_client_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderUrlDispatchRule {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}


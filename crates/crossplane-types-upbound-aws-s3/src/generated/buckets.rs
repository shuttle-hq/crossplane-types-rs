// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// BucketSpec defines the desired state of Bucket
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "s3.aws.upbound.io", version = "v1beta2", kind = "Bucket", plural = "buckets")]
#[kube(status = "BucketStatus")]
pub struct BucketSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<BucketDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BucketForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<BucketInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<BucketProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<BucketPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<BucketWriteConnectionSecretToRef>,
}

/// BucketSpec defines the desired state of Bucket
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketForProvider {
    /// Boolean that indicates all objects (including any locked objects) should be deleted from the bucket when the bucket is destroyed so that the bucket can be destroyed without error. These objects are not recoverable. This only deletes objects when the bucket is destroyed, not when setting this parameter to true. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    pub force_destroy: Option<bool>,
    /// Indicates whether this bucket has an Object Lock configuration enabled. Valid values are true or false. This argument is not supported in all regions or partitions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockEnabled")]
    pub object_lock_enabled: Option<bool>,
    /// AWS region this bucket resides in.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketInitProvider {
    /// Boolean that indicates all objects (including any locked objects) should be deleted from the bucket when the bucket is destroyed so that the bucket can be destroyed without error. These objects are not recoverable. This only deletes objects when the bucket is destroyed, not when setting this parameter to true. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    pub force_destroy: Option<bool>,
    /// Indicates whether this bucket has an Object Lock configuration enabled. Valid values are true or false. This argument is not supported in all regions or partitions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockEnabled")]
    pub object_lock_enabled: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<BucketPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BucketPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BucketStatus defines the observed state of Bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<BucketStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProvider {
    /// Sets the accelerate configuration of an existing bucket. Can be Enabled or Suspended. Cannot be used in cn-north-1 or us-gov-west-1.
    /// Use the resource aws_s3_bucket_accelerate_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accelerationStatus")]
    pub acceleration_status: Option<String>,
    /// The canned ACL to apply. Valid values are private, public-read, public-read-write, aws-exec-read, authenticated-read, and log-delivery-write. Defaults to private.  Conflicts with grant. Use the resource aws_s3_bucket_acl instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acl: Option<String>,
    /// ARN of the bucket. Will be of format arn:aws:s3:::bucketname.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Bucket domain name. Will be of format bucketname.s3.amazonaws.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketDomainName")]
    pub bucket_domain_name: Option<String>,
    /// The bucket region-specific domain name. The bucket domain name including the region name. Please refer to the S3 endpoints reference for format. Note: AWS CloudFront allows specifying an S3 region-specific endpoint when creating an S3 origin. This will prevent redirect issues from CloudFront to the S3 Origin URL. For more information, see the Virtual Hosted-Style Requests for Other Regions section in the AWS S3 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRegionalDomainName")]
    pub bucket_regional_domain_name: Option<String>,
    /// Rule of Cross-Origin Resource Sharing. See CORS rule below for details. Use the resource aws_s3_bucket_cors_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "corsRule")]
    pub cors_rule: Option<Vec<BucketStatusAtProviderCorsRule>>,
    /// Boolean that indicates all objects (including any locked objects) should be deleted from the bucket when the bucket is destroyed so that the bucket can be destroyed without error. These objects are not recoverable. This only deletes objects when the bucket is destroyed, not when setting this parameter to true. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    pub force_destroy: Option<bool>,
    /// An ACL policy grant. See Grant below for details. Conflicts with acl. Use the resource aws_s3_bucket_acl instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant: Option<Vec<BucketStatusAtProviderGrant>>,
    /// Route 53 Hosted Zone ID for this bucket's region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostedZoneId")]
    pub hosted_zone_id: Option<String>,
    /// Name of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Configuration of object lifecycle management. See Lifecycle Rule below for details.
    /// Use the resource aws_s3_bucket_lifecycle_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleRule")]
    pub lifecycle_rule: Option<Vec<BucketStatusAtProviderLifecycleRule>>,
    /// Configuration of S3 bucket logging parameters. See Logging below for details.
    /// Use the resource aws_s3_bucket_logging instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<BucketStatusAtProviderLogging>,
    /// Configuration of S3 object locking. See Object Lock Configuration below for details.
    /// Use the object_lock_enabled parameter and the resource aws_s3_bucket_object_lock_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockConfiguration")]
    pub object_lock_configuration: Option<BucketStatusAtProviderObjectLockConfiguration>,
    /// Indicates whether this bucket has an Object Lock configuration enabled. Valid values are true or false. This argument is not supported in all regions or partitions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockEnabled")]
    pub object_lock_enabled: Option<bool>,
    /// Valid bucket policy JSON document. In this case, please make sure you use the verbose/specific version of the policy.
    /// Use the resource aws_s3_bucket_policy instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// AWS region this bucket resides in.
    /// Region is the region you'd like your resource to be created in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Configuration of replication configuration. See Replication Configuration below for details.
    /// Use the resource aws_s3_bucket_replication_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicationConfiguration")]
    pub replication_configuration: Option<BucketStatusAtProviderReplicationConfiguration>,
    /// Specifies who should bear the cost of Amazon S3 data transfer.
    /// Can be either BucketOwner or Requester. By default, the owner of the S3 bucket would incur the costs of any data transfer.
    /// See Requester Pays Buckets developer guide for more information.
    /// Use the resource aws_s3_bucket_request_payment_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestPayer")]
    pub request_payer: Option<String>,
    /// Configuration of server-side encryption configuration. See Server Side Encryption Configuration below for details.
    /// Use the resource aws_s3_bucket_server_side_encryption_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionConfiguration")]
    pub server_side_encryption_configuration: Option<BucketStatusAtProviderServerSideEncryptionConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Configuration of the S3 bucket versioning state. See Versioning below for details. Use the resource aws_s3_bucket_versioning instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub versioning: Option<BucketStatusAtProviderVersioning>,
    /// Configuration of the S3 bucket website. See Website below for details.
    /// Use the resource aws_s3_bucket_website_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub website: Option<BucketStatusAtProviderWebsite>,
    /// (Deprecated) Domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records. Use the resource aws_s3_bucket_website_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "websiteDomain")]
    pub website_domain: Option<String>,
    /// (Deprecated) Website endpoint, if the bucket is configured with a website. If not, this will be an empty string. Use the resource aws_s3_bucket_website_configuration instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "websiteEndpoint")]
    pub website_endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderCorsRule {
    /// List of headers allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<Vec<String>>,
    /// One or more HTTP methods that you allow the origin to execute. Can be GET, PUT, POST, DELETE or HEAD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedMethods")]
    pub allowed_methods: Option<Vec<String>>,
    /// One or more origins you want customers to be able to access the bucket from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedOrigins")]
    pub allowed_origins: Option<Vec<String>>,
    /// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exposeHeaders")]
    pub expose_headers: Option<Vec<String>>,
    /// Specifies time in seconds that browser can cache the response for a preflight request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAgeSeconds")]
    pub max_age_seconds: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderGrant {
    /// Canonical user id to grant for. Used only when type is CanonicalUser.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// List of permissions to apply for grantee. Valid values are READ, WRITE, READ_ACP, WRITE_ACP, FULL_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Vec<String>>,
    /// Type of grantee to apply for. Valid values are CanonicalUser and Group. AmazonCustomerByEmail is not supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Uri address to grant for. Used only when type is Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderLifecycleRule {
    /// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "abortIncompleteMultipartUploadDays")]
    pub abort_incomplete_multipart_upload_days: Option<f64>,
    /// Specifies lifecycle rule status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies a period in the object's expire. See Expiration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expiration: Option<BucketStatusAtProviderLifecycleRuleExpiration>,
    /// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noncurrentVersionExpiration")]
    pub noncurrent_version_expiration: Option<BucketStatusAtProviderLifecycleRuleNoncurrentVersionExpiration>,
    /// Specifies when noncurrent object versions transitions. See Noncurrent Version Transition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noncurrentVersionTransition")]
    pub noncurrent_version_transition: Option<Vec<BucketStatusAtProviderLifecycleRuleNoncurrentVersionTransition>>,
    /// Object key prefix identifying one or more objects to which the rule applies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Specifies object tags key and value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Specifies a period in the object's transitions. See Transition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transition: Option<Vec<BucketStatusAtProviderLifecycleRuleTransition>>,
}

/// Specifies a period in the object's expire. See Expiration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderLifecycleRuleExpiration {
    /// Specifies the date after which you want the corresponding action to take effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// Specifies the number of days after object creation when the specific rule action takes effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub days: Option<f64>,
    /// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expiredObjectDeleteMarker")]
    pub expired_object_delete_marker: Option<bool>,
}

/// Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderLifecycleRuleNoncurrentVersionExpiration {
    /// Specifies the number of days after object creation when the specific rule action takes effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub days: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderLifecycleRuleNoncurrentVersionTransition {
    /// Specifies the number of days after object creation when the specific rule action takes effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub days: Option<f64>,
    /// Specifies the Amazon S3 storage class to which you want the object to transition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderLifecycleRuleTransition {
    /// Specifies the date after which you want the corresponding action to take effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// Specifies the number of days after object creation when the specific rule action takes effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub days: Option<f64>,
    /// Specifies the Amazon S3 storage class to which you want the object to transition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
}

/// Configuration of S3 bucket logging parameters. See Logging below for details.
/// Use the resource aws_s3_bucket_logging instead.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderLogging {
    /// Name of the bucket that will receive the log objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBucket")]
    pub target_bucket: Option<String>,
    /// To specify a key prefix for log objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPrefix")]
    pub target_prefix: Option<String>,
}

/// Configuration of S3 object locking. See Object Lock Configuration below for details.
/// Use the object_lock_enabled parameter and the resource aws_s3_bucket_object_lock_configuration instead.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderObjectLockConfiguration {
    /// Indicates whether this bucket has an Object Lock configuration enabled. Valid value is Enabled. Use the top-level argument object_lock_enabled instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockEnabled")]
    pub object_lock_enabled: Option<String>,
    /// Object Lock rule in place for this bucket (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule: Option<BucketStatusAtProviderObjectLockConfigurationRule>,
}

/// Object Lock rule in place for this bucket (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderObjectLockConfigurationRule {
    /// Default retention period that you want to apply to new objects placed in this bucket (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRetention")]
    pub default_retention: Option<BucketStatusAtProviderObjectLockConfigurationRuleDefaultRetention>,
}

/// Default retention period that you want to apply to new objects placed in this bucket (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderObjectLockConfigurationRuleDefaultRetention {
    /// Number of days that you want to specify for the default retention period.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub days: Option<f64>,
    /// Default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are GOVERNANCE and COMPLIANCE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Number of years that you want to specify for the default retention period.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub years: Option<f64>,
}

/// Configuration of replication configuration. See Replication Configuration below for details.
/// Use the resource aws_s3_bucket_replication_configuration instead.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderReplicationConfiguration {
    /// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Specifies the rules managing the replication (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<BucketStatusAtProviderReplicationConfigurationRules>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderReplicationConfigurationRules {
    /// Whether delete markers are replicated. The only valid value is Enabled. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when filter is used).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteMarkerReplicationStatus")]
    pub delete_marker_replication_status: Option<String>,
    /// Specifies the destination for the rule (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<BucketStatusAtProviderReplicationConfigurationRulesDestination>,
    /// Filter that identifies subset of objects to which the replication rule applies (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<BucketStatusAtProviderReplicationConfigurationRulesFilter>,
    /// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Priority associated with the rule. Priority should only be set if filter is configured. If not provided, defaults to 0. Priority must be unique between multiple rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// Specifies special object selection criteria (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSelectionCriteria")]
    pub source_selection_criteria: Option<BucketStatusAtProviderReplicationConfigurationRulesSourceSelectionCriteria>,
    /// Status of the rule. Either Enabled or Disabled. The rule is ignored if status is not Enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Specifies the destination for the rule (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderReplicationConfigurationRulesDestination {
    /// Specifies the overrides to use for object owners on replication (documented below). Must be used in conjunction with account_id owner override configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessControlTranslation")]
    pub access_control_translation: Option<BucketStatusAtProviderReplicationConfigurationRulesDestinationAccessControlTranslation>,
    /// Account ID to use for overriding the object owner on replication. Must be used in conjunction with access_control_translation override configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Enables replication metrics  (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<BucketStatusAtProviderReplicationConfigurationRulesDestinationMetrics>,
    /// Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
    /// sse_kms_encrypted_objects source selection criteria.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaKmsKeyId")]
    pub replica_kms_key_id: Option<String>,
    /// Enables S3 Replication Time Control (S3 RTC) (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicationTime")]
    pub replication_time: Option<BucketStatusAtProviderReplicationConfigurationRulesDestinationReplicationTime>,
    /// Specifies the Amazon S3 storage class to which you want the object to transition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
}

/// Specifies the overrides to use for object owners on replication (documented below). Must be used in conjunction with account_id owner override configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderReplicationConfigurationRulesDestinationAccessControlTranslation {
    /// Specifies the replica ownership. For default and valid values, see PUT bucket replication in the Amazon S3 API Reference. The only valid value is Destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
}

/// Enables replication metrics  (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderReplicationConfigurationRulesDestinationMetrics {
    /// Threshold within which objects are to be replicated. The only valid value is 15.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
    /// Status of RTC. Either Enabled or Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Enables S3 Replication Time Control (S3 RTC) (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderReplicationConfigurationRulesDestinationReplicationTime {
    /// Threshold within which objects are to be replicated. The only valid value is 15.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
    /// Status of RTC. Either Enabled or Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Filter that identifies subset of objects to which the replication rule applies (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderReplicationConfigurationRulesFilter {
    /// Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// A map of tags that identifies subset of objects to which the rule applies.
    /// The rule applies only to objects having all the tags in its tagset.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Specifies special object selection criteria (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderReplicationConfigurationRulesSourceSelectionCriteria {
    /// Match SSE-KMS encrypted objects (documented below). If specified, replica_kms_key_id
    /// in destination must be specified as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKmsEncryptedObjects")]
    pub sse_kms_encrypted_objects: Option<BucketStatusAtProviderReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects>,
}

/// Match SSE-KMS encrypted objects (documented below). If specified, replica_kms_key_id
/// in destination must be specified as well.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects {
    /// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Configuration of server-side encryption configuration. See Server Side Encryption Configuration below for details.
/// Use the resource aws_s3_bucket_server_side_encryption_configuration instead.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderServerSideEncryptionConfiguration {
    /// Single object for server-side encryption by default configuration. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule: Option<BucketStatusAtProviderServerSideEncryptionConfigurationRule>,
}

/// Single object for server-side encryption by default configuration. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderServerSideEncryptionConfigurationRule {
    /// Single object for setting server-side encryption by default. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyServerSideEncryptionByDefault")]
    pub apply_server_side_encryption_by_default: Option<BucketStatusAtProviderServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault>,
    /// Whether or not to use Amazon S3 Bucket Keys for SSE-KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketKeyEnabled")]
    pub bucket_key_enabled: Option<bool>,
}

/// Single object for setting server-side encryption by default. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault {
    /// AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of sse_algorithm as aws:kms. The default aws/s3 AWS KMS master key is used if this element is absent while the sse_algorithm is aws:kms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsMasterKeyId")]
    pub kms_master_key_id: Option<String>,
    /// Server-side encryption algorithm to use. Valid values are AES256 and aws:kms
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseAlgorithm")]
    pub sse_algorithm: Option<String>,
}

/// Configuration of the S3 bucket versioning state. See Versioning below for details. Use the resource aws_s3_bucket_versioning instead.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderVersioning {
    /// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Enable MFA delete for either Change the versioning state of your bucket or Permanently delete an object version. Default is false. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mfaDelete")]
    pub mfa_delete: Option<bool>,
}

/// Configuration of the S3 bucket website. See Website below for details.
/// Use the resource aws_s3_bucket_website_configuration instead.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketStatusAtProviderWebsite {
    /// Absolute path to the document to return in case of a 4XX error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorDocument")]
    pub error_document: Option<String>,
    /// Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexDocument")]
    pub index_document: Option<String>,
    /// Hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (http:// or https://) to use when redirecting requests. The default is the protocol that is used in the original request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectAllRequestsTo")]
    pub redirect_all_requests_to: Option<String>,
    /// JSON array containing routing rules
    /// describing redirect behavior and when redirects are applied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRules")]
    pub routing_rules: Option<String>,
}


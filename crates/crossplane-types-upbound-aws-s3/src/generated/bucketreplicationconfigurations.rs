// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// BucketReplicationConfigurationSpec defines the desired state of BucketReplicationConfiguration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "s3.aws.upbound.io", version = "v1beta2", kind = "BucketReplicationConfiguration", plural = "bucketreplicationconfigurations")]
#[kube(status = "BucketReplicationConfigurationStatus")]
pub struct BucketReplicationConfigurationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<BucketReplicationConfigurationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BucketReplicationConfigurationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<BucketReplicationConfigurationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<BucketReplicationConfigurationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<BucketReplicationConfigurationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<BucketReplicationConfigurationWriteConnectionSecretToRef>,
}

/// BucketReplicationConfigurationSpec defines the desired state of BucketReplicationConfiguration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProvider {
    /// Name of the source S3 bucket you want Amazon S3 to monitor.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    pub bucket_ref: Option<BucketReplicationConfigurationForProviderBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketSelector")]
    pub bucket_selector: Option<BucketReplicationConfigurationForProviderBucketSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Reference to a Role in iam to populate role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleRef")]
    pub role_ref: Option<BucketReplicationConfigurationForProviderRoleRef>,
    /// Selector for a Role in iam to populate role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleSelector")]
    pub role_selector: Option<BucketReplicationConfigurationForProviderRoleSelector>,
    /// List of configuration blocks describing the rules managing the replication. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<BucketReplicationConfigurationForProviderRule>>,
    /// Token to allow replication to be enabled on an Object Lock-enabled bucket. You must contact AWS support for the bucket's "Object Lock token".
    /// For more details, see Using S3 Object Lock with replication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSecretRef")]
    pub token_secret_ref: Option<BucketReplicationConfigurationForProviderTokenSecretRef>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationForProviderBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationForProviderBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationForProviderBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationForProviderBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationForProviderBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationForProviderBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationForProviderRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationForProviderRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationForProviderRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationForProviderRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationForProviderRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationForProviderRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRule {
    /// Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when filter is used)documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteMarkerReplication")]
    pub delete_marker_replication: Option<BucketReplicationConfigurationForProviderRuleDeleteMarkerReplication>,
    /// Specifies the destination for the rule. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<BucketReplicationConfigurationForProviderRuleDestination>,
    /// Replicate existing objects in the source bucket according to the rule configurations. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "existingObjectReplication")]
    pub existing_object_replication: Option<BucketReplicationConfigurationForProviderRuleExistingObjectReplication>,
    /// Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the rule will default to using prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<BucketReplicationConfigurationForProviderRuleFilter>,
    /// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string ("") if filter is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Priority associated with the rule. Priority should only be set if filter is configured. If not provided, defaults to 0. Priority must be unique between multiple rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// Specifies special object selection criteria. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSelectionCriteria")]
    pub source_selection_criteria: Option<BucketReplicationConfigurationForProviderRuleSourceSelectionCriteria>,
    /// Status of the rule. Either "Enabled" or "Disabled". The rule is ignored if status is not "Enabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when filter is used)documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDeleteMarkerReplication {
    /// Whether delete markers should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Specifies the destination for the rule. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestination {
    /// Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with account owner override configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessControlTranslation")]
    pub access_control_translation: Option<BucketReplicationConfigurationForProviderRuleDestinationAccessControlTranslation>,
    /// Account ID to specify the replica ownership. Must be used in conjunction with access_control_translation override configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// ARN of the bucket where you want Amazon S3 to store the results.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    pub bucket_ref: Option<BucketReplicationConfigurationForProviderRuleDestinationBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketSelector")]
    pub bucket_selector: Option<BucketReplicationConfigurationForProviderRuleDestinationBucketSelector>,
    /// Configuration block that provides information about encryption. See below. If source_selection_criteria is specified, you must specify this element.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    pub encryption_configuration: Option<BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfiguration>,
    /// Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<BucketReplicationConfigurationForProviderRuleDestinationMetrics>,
    /// Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicationTime")]
    pub replication_time: Option<BucketReplicationConfigurationForProviderRuleDestinationReplicationTime>,
    /// The storage class used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
}

/// Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with account owner override configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationAccessControlTranslation {
    /// Specifies the replica ownership. For default and valid values, see PUT bucket replication in the Amazon S3 API Reference. Valid values: Destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationForProviderRuleDestinationBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationForProviderRuleDestinationBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationForProviderRuleDestinationBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRuleDestinationBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRuleDestinationBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationForProviderRuleDestinationBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationForProviderRuleDestinationBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationForProviderRuleDestinationBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRuleDestinationBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRuleDestinationBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block that provides information about encryption. See below. If source_selection_criteria is specified, you must specify this element.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfiguration {
    /// ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaKmsKeyId")]
    pub replica_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate replicaKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaKmsKeyIdRef")]
    pub replica_kms_key_id_ref: Option<BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRef>,
    /// Selector for a Key in kms to populate replicaKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaKmsKeyIdSelector")]
    pub replica_kms_key_id_selector: Option<BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelector>,
}

/// Reference to a Key in kms to populate replicaKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate replicaKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationForProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationMetrics {
    /// Configuration block that specifies the time threshold for emitting the s3:Replication:OperationMissedThreshold event. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventThreshold")]
    pub event_threshold: Option<BucketReplicationConfigurationForProviderRuleDestinationMetricsEventThreshold>,
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Configuration block that specifies the time threshold for emitting the s3:Replication:OperationMissedThreshold event. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationMetricsEventThreshold {
    /// Time in minutes. Valid values: 15.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
}

/// Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with metrics.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationReplicationTime {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<BucketReplicationConfigurationForProviderRuleDestinationReplicationTimeTime>,
}

/// Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleDestinationReplicationTimeTime {
    /// Time in minutes. Valid values: 15.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
}

/// Replicate existing objects in the source bucket according to the rule configurations. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleExistingObjectReplication {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the rule will default to using prefix.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleFilter {
    /// Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<BucketReplicationConfigurationForProviderRuleFilterAnd>,
    /// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string ("") if filter is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Configuration block for specifying a tag key and value. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<BucketReplicationConfigurationForProviderRuleFilterTag>,
}

/// Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleFilterAnd {
    /// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string ("") if filter is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Map of tags (key and value pairs) that identifies a subset of objects to which the rule applies. The rule applies only to objects having all the tags in its tagset.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Configuration block for specifying a tag key and value. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleFilterTag {
    /// Name of the object key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Value of the tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Specifies special object selection criteria. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleSourceSelectionCriteria {
    /// Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaModifications")]
    pub replica_modifications: Option<BucketReplicationConfigurationForProviderRuleSourceSelectionCriteriaReplicaModifications>,
    /// Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, replica_kms_key_id in destination encryption_configuration must be specified as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKmsEncryptedObjects")]
    pub sse_kms_encrypted_objects: Option<BucketReplicationConfigurationForProviderRuleSourceSelectionCriteriaSseKmsEncryptedObjects>,
}

/// Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleSourceSelectionCriteriaReplicaModifications {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, replica_kms_key_id in destination encryption_configuration must be specified as well.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderRuleSourceSelectionCriteriaSseKmsEncryptedObjects {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Token to allow replication to be enabled on an Object Lock-enabled bucket. You must contact AWS support for the bucket's "Object Lock token".
/// For more details, see Using S3 Object Lock with replication.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationForProviderTokenSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProvider {
    /// Name of the source S3 bucket you want Amazon S3 to monitor.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    pub bucket_ref: Option<BucketReplicationConfigurationInitProviderBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketSelector")]
    pub bucket_selector: Option<BucketReplicationConfigurationInitProviderBucketSelector>,
    /// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Reference to a Role in iam to populate role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleRef")]
    pub role_ref: Option<BucketReplicationConfigurationInitProviderRoleRef>,
    /// Selector for a Role in iam to populate role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleSelector")]
    pub role_selector: Option<BucketReplicationConfigurationInitProviderRoleSelector>,
    /// List of configuration blocks describing the rules managing the replication. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<BucketReplicationConfigurationInitProviderRule>>,
    /// Token to allow replication to be enabled on an Object Lock-enabled bucket. You must contact AWS support for the bucket's "Object Lock token".
    /// For more details, see Using S3 Object Lock with replication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSecretRef")]
    pub token_secret_ref: Option<BucketReplicationConfigurationInitProviderTokenSecretRef>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationInitProviderBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationInitProviderBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationInitProviderBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationInitProviderBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationInitProviderBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationInitProviderBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationInitProviderRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationInitProviderRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationInitProviderRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationInitProviderRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationInitProviderRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationInitProviderRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRule {
    /// Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when filter is used)documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteMarkerReplication")]
    pub delete_marker_replication: Option<BucketReplicationConfigurationInitProviderRuleDeleteMarkerReplication>,
    /// Specifies the destination for the rule. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<BucketReplicationConfigurationInitProviderRuleDestination>,
    /// Replicate existing objects in the source bucket according to the rule configurations. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "existingObjectReplication")]
    pub existing_object_replication: Option<BucketReplicationConfigurationInitProviderRuleExistingObjectReplication>,
    /// Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the rule will default to using prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<BucketReplicationConfigurationInitProviderRuleFilter>,
    /// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string ("") if filter is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Priority associated with the rule. Priority should only be set if filter is configured. If not provided, defaults to 0. Priority must be unique between multiple rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// Specifies special object selection criteria. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSelectionCriteria")]
    pub source_selection_criteria: Option<BucketReplicationConfigurationInitProviderRuleSourceSelectionCriteria>,
    /// Status of the rule. Either "Enabled" or "Disabled". The rule is ignored if status is not "Enabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when filter is used)documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDeleteMarkerReplication {
    /// Whether delete markers should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Specifies the destination for the rule. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestination {
    /// Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with account owner override configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessControlTranslation")]
    pub access_control_translation: Option<BucketReplicationConfigurationInitProviderRuleDestinationAccessControlTranslation>,
    /// Account ID to specify the replica ownership. Must be used in conjunction with access_control_translation override configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// ARN of the bucket where you want Amazon S3 to store the results.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    pub bucket_ref: Option<BucketReplicationConfigurationInitProviderRuleDestinationBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketSelector")]
    pub bucket_selector: Option<BucketReplicationConfigurationInitProviderRuleDestinationBucketSelector>,
    /// Configuration block that provides information about encryption. See below. If source_selection_criteria is specified, you must specify this element.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    pub encryption_configuration: Option<BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfiguration>,
    /// Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<BucketReplicationConfigurationInitProviderRuleDestinationMetrics>,
    /// Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicationTime")]
    pub replication_time: Option<BucketReplicationConfigurationInitProviderRuleDestinationReplicationTime>,
    /// The storage class used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
}

/// Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with account owner override configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationAccessControlTranslation {
    /// Specifies the replica ownership. For default and valid values, see PUT bucket replication in the Amazon S3 API Reference. Valid values: Destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationInitProviderRuleDestinationBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationInitProviderRuleDestinationBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationInitProviderRuleDestinationBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRuleDestinationBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRuleDestinationBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationInitProviderRuleDestinationBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationInitProviderRuleDestinationBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationInitProviderRuleDestinationBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRuleDestinationBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRuleDestinationBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block that provides information about encryption. See below. If source_selection_criteria is specified, you must specify this element.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfiguration {
    /// ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaKmsKeyId")]
    pub replica_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate replicaKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaKmsKeyIdRef")]
    pub replica_kms_key_id_ref: Option<BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRef>,
    /// Selector for a Key in kms to populate replicaKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaKmsKeyIdSelector")]
    pub replica_kms_key_id_selector: Option<BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelector>,
}

/// Reference to a Key in kms to populate replicaKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate replicaKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationInitProviderRuleDestinationEncryptionConfigurationReplicaKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationMetrics {
    /// Configuration block that specifies the time threshold for emitting the s3:Replication:OperationMissedThreshold event. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventThreshold")]
    pub event_threshold: Option<BucketReplicationConfigurationInitProviderRuleDestinationMetricsEventThreshold>,
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Configuration block that specifies the time threshold for emitting the s3:Replication:OperationMissedThreshold event. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationMetricsEventThreshold {
    /// Time in minutes. Valid values: 15.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
}

/// Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with metrics.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationReplicationTime {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<BucketReplicationConfigurationInitProviderRuleDestinationReplicationTimeTime>,
}

/// Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleDestinationReplicationTimeTime {
    /// Time in minutes. Valid values: 15.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
}

/// Replicate existing objects in the source bucket according to the rule configurations. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleExistingObjectReplication {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the rule will default to using prefix.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleFilter {
    /// Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<BucketReplicationConfigurationInitProviderRuleFilterAnd>,
    /// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string ("") if filter is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Configuration block for specifying a tag key and value. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<BucketReplicationConfigurationInitProviderRuleFilterTag>,
}

/// Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleFilterAnd {
    /// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string ("") if filter is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Map of tags (key and value pairs) that identifies a subset of objects to which the rule applies. The rule applies only to objects having all the tags in its tagset.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Configuration block for specifying a tag key and value. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleFilterTag {
    /// Name of the object key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Value of the tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Specifies special object selection criteria. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleSourceSelectionCriteria {
    /// Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaModifications")]
    pub replica_modifications: Option<BucketReplicationConfigurationInitProviderRuleSourceSelectionCriteriaReplicaModifications>,
    /// Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, replica_kms_key_id in destination encryption_configuration must be specified as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKmsEncryptedObjects")]
    pub sse_kms_encrypted_objects: Option<BucketReplicationConfigurationInitProviderRuleSourceSelectionCriteriaSseKmsEncryptedObjects>,
}

/// Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleSourceSelectionCriteriaReplicaModifications {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, replica_kms_key_id in destination encryption_configuration must be specified as well.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderRuleSourceSelectionCriteriaSseKmsEncryptedObjects {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Token to allow replication to be enabled on an Object Lock-enabled bucket. You must contact AWS support for the bucket's "Object Lock token".
/// For more details, see Using S3 Object Lock with replication.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationInitProviderTokenSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<BucketReplicationConfigurationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BucketReplicationConfigurationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketReplicationConfigurationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketReplicationConfigurationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketReplicationConfigurationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketReplicationConfigurationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BucketReplicationConfigurationStatus defines the observed state of BucketReplicationConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<BucketReplicationConfigurationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProvider {
    /// Name of the source S3 bucket you want Amazon S3 to monitor.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// S3 source bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// List of configuration blocks describing the rules managing the replication. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<BucketReplicationConfigurationStatusAtProviderRule>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRule {
    /// Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when filter is used)documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteMarkerReplication")]
    pub delete_marker_replication: Option<BucketReplicationConfigurationStatusAtProviderRuleDeleteMarkerReplication>,
    /// Specifies the destination for the rule. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<BucketReplicationConfigurationStatusAtProviderRuleDestination>,
    /// Replicate existing objects in the source bucket according to the rule configurations. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "existingObjectReplication")]
    pub existing_object_replication: Option<BucketReplicationConfigurationStatusAtProviderRuleExistingObjectReplication>,
    /// Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the rule will default to using prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<BucketReplicationConfigurationStatusAtProviderRuleFilter>,
    /// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string ("") if filter is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Priority associated with the rule. Priority should only be set if filter is configured. If not provided, defaults to 0. Priority must be unique between multiple rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// Specifies special object selection criteria. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSelectionCriteria")]
    pub source_selection_criteria: Option<BucketReplicationConfigurationStatusAtProviderRuleSourceSelectionCriteria>,
    /// Status of the rule. Either "Enabled" or "Disabled". The rule is ignored if status is not "Enabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when filter is used)documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleDeleteMarkerReplication {
    /// Whether delete markers should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Specifies the destination for the rule. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleDestination {
    /// Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with account owner override configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessControlTranslation")]
    pub access_control_translation: Option<BucketReplicationConfigurationStatusAtProviderRuleDestinationAccessControlTranslation>,
    /// Account ID to specify the replica ownership. Must be used in conjunction with access_control_translation override configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// ARN of the bucket where you want Amazon S3 to store the results.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Configuration block that provides information about encryption. See below. If source_selection_criteria is specified, you must specify this element.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    pub encryption_configuration: Option<BucketReplicationConfigurationStatusAtProviderRuleDestinationEncryptionConfiguration>,
    /// Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<BucketReplicationConfigurationStatusAtProviderRuleDestinationMetrics>,
    /// Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicationTime")]
    pub replication_time: Option<BucketReplicationConfigurationStatusAtProviderRuleDestinationReplicationTime>,
    /// The storage class used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
}

/// Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with account owner override configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleDestinationAccessControlTranslation {
    /// Specifies the replica ownership. For default and valid values, see PUT bucket replication in the Amazon S3 API Reference. Valid values: Destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
}

/// Configuration block that provides information about encryption. See below. If source_selection_criteria is specified, you must specify this element.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleDestinationEncryptionConfiguration {
    /// ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaKmsKeyId")]
    pub replica_kms_key_id: Option<String>,
}

/// Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleDestinationMetrics {
    /// Configuration block that specifies the time threshold for emitting the s3:Replication:OperationMissedThreshold event. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventThreshold")]
    pub event_threshold: Option<BucketReplicationConfigurationStatusAtProviderRuleDestinationMetricsEventThreshold>,
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Configuration block that specifies the time threshold for emitting the s3:Replication:OperationMissedThreshold event. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleDestinationMetricsEventThreshold {
    /// Time in minutes. Valid values: 15.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
}

/// Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with metrics.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleDestinationReplicationTime {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<BucketReplicationConfigurationStatusAtProviderRuleDestinationReplicationTimeTime>,
}

/// Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleDestinationReplicationTimeTime {
    /// Time in minutes. Valid values: 15.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
}

/// Replicate existing objects in the source bucket according to the rule configurations. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleExistingObjectReplication {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the rule will default to using prefix.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleFilter {
    /// Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<BucketReplicationConfigurationStatusAtProviderRuleFilterAnd>,
    /// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string ("") if filter is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Configuration block for specifying a tag key and value. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<BucketReplicationConfigurationStatusAtProviderRuleFilterTag>,
}

/// Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleFilterAnd {
    /// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string ("") if filter is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Map of tags (key and value pairs) that identifies a subset of objects to which the rule applies. The rule applies only to objects having all the tags in its tagset.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Configuration block for specifying a tag key and value. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleFilterTag {
    /// Name of the object key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Value of the tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Specifies special object selection criteria. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleSourceSelectionCriteria {
    /// Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaModifications")]
    pub replica_modifications: Option<BucketReplicationConfigurationStatusAtProviderRuleSourceSelectionCriteriaReplicaModifications>,
    /// Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, replica_kms_key_id in destination encryption_configuration must be specified as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKmsEncryptedObjects")]
    pub sse_kms_encrypted_objects: Option<BucketReplicationConfigurationStatusAtProviderRuleSourceSelectionCriteriaSseKmsEncryptedObjects>,
}

/// Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleSourceSelectionCriteriaReplicaModifications {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, replica_kms_key_id in destination encryption_configuration must be specified as well.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketReplicationConfigurationStatusAtProviderRuleSourceSelectionCriteriaSseKmsEncryptedObjects {
    /// Whether the existing objects should be replicated. Either "Enabled" or "Disabled".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}


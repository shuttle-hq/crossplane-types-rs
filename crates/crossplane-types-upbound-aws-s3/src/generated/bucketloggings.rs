// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// BucketLoggingSpec defines the desired state of BucketLogging
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "s3.aws.upbound.io", version = "v1beta2", kind = "BucketLogging", plural = "bucketloggings")]
#[kube(status = "BucketLoggingStatus")]
pub struct BucketLoggingSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<BucketLoggingDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BucketLoggingForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<BucketLoggingInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<BucketLoggingProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<BucketLoggingPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<BucketLoggingWriteConnectionSecretToRef>,
}

/// BucketLoggingSpec defines the desired state of BucketLogging
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProvider {
    /// Name of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    pub bucket_ref: Option<BucketLoggingForProviderBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketSelector")]
    pub bucket_selector: Option<BucketLoggingForProviderBucketSelector>,
    /// Account ID of the expected bucket owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedBucketOwner")]
    pub expected_bucket_owner: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Name of the bucket where you want Amazon S3 to store server access logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBucket")]
    pub target_bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate targetBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBucketRef")]
    pub target_bucket_ref: Option<BucketLoggingForProviderTargetBucketRef>,
    /// Selector for a Bucket in s3 to populate targetBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBucketSelector")]
    pub target_bucket_selector: Option<BucketLoggingForProviderTargetBucketSelector>,
    /// Set of configuration blocks with information for granting permissions. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGrant")]
    pub target_grant: Option<Vec<BucketLoggingForProviderTargetGrant>>,
    /// Amazon S3 key format for log objects. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetObjectKeyFormat")]
    pub target_object_key_format: Option<BucketLoggingForProviderTargetObjectKeyFormat>,
    /// Prefix for all log object keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPrefix")]
    pub target_prefix: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingForProviderBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingForProviderBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingForProviderBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingForProviderBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingForProviderBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingForProviderBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingForProviderBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingForProviderBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingForProviderBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingForProviderBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Bucket in s3 to populate targetBucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderTargetBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingForProviderTargetBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderTargetBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingForProviderTargetBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingForProviderTargetBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingForProviderTargetBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingForProviderTargetBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate targetBucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderTargetBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingForProviderTargetBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderTargetBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingForProviderTargetBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingForProviderTargetBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingForProviderTargetBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingForProviderTargetBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderTargetGrant {
    /// Configuration block for the person being granted permissions. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grantee: Option<BucketLoggingForProviderTargetGrantGrantee>,
    /// Logging permissions assigned to the grantee for the bucket. Valid values: FULL_CONTROL, READ, WRITE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,
}

/// Configuration block for the person being granted permissions. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderTargetGrantGrantee {
    /// Email address of the grantee. See Regions and Endpoints for supported AWS regions where this argument can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailAddress")]
    pub email_address: Option<String>,
    /// Canonical user ID of the grantee.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Type of grantee. Valid values: CanonicalUser, AmazonCustomerByEmail, Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// URI of the grantee group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Amazon S3 key format for log objects. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderTargetObjectKeyFormat {
    /// Partitioned S3 key for log objects. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionedPrefix")]
    pub partitioned_prefix: Option<BucketLoggingForProviderTargetObjectKeyFormatPartitionedPrefix>,
    /// Use the simple format for S3 keys for log objects. To use, set simple_prefix {}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "simplePrefix")]
    pub simple_prefix: Option<BucketLoggingForProviderTargetObjectKeyFormatSimplePrefix>,
}

/// Partitioned S3 key for log objects. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderTargetObjectKeyFormatPartitionedPrefix {
    /// Specifies the partition date source for the partitioned prefix. Valid values: EventTime, DeliveryTime.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionDateSource")]
    pub partition_date_source: Option<String>,
}

/// Use the simple format for S3 keys for log objects. To use, set simple_prefix {}.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingForProviderTargetObjectKeyFormatSimplePrefix {
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProvider {
    /// Name of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    pub bucket_ref: Option<BucketLoggingInitProviderBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketSelector")]
    pub bucket_selector: Option<BucketLoggingInitProviderBucketSelector>,
    /// Account ID of the expected bucket owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedBucketOwner")]
    pub expected_bucket_owner: Option<String>,
    /// Name of the bucket where you want Amazon S3 to store server access logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBucket")]
    pub target_bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate targetBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBucketRef")]
    pub target_bucket_ref: Option<BucketLoggingInitProviderTargetBucketRef>,
    /// Selector for a Bucket in s3 to populate targetBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBucketSelector")]
    pub target_bucket_selector: Option<BucketLoggingInitProviderTargetBucketSelector>,
    /// Set of configuration blocks with information for granting permissions. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGrant")]
    pub target_grant: Option<Vec<BucketLoggingInitProviderTargetGrant>>,
    /// Amazon S3 key format for log objects. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetObjectKeyFormat")]
    pub target_object_key_format: Option<BucketLoggingInitProviderTargetObjectKeyFormat>,
    /// Prefix for all log object keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPrefix")]
    pub target_prefix: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingInitProviderBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingInitProviderBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingInitProviderBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingInitProviderBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingInitProviderBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingInitProviderBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingInitProviderBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingInitProviderBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingInitProviderBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingInitProviderBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Bucket in s3 to populate targetBucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderTargetBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingInitProviderTargetBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderTargetBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingInitProviderTargetBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingInitProviderTargetBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingInitProviderTargetBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingInitProviderTargetBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate targetBucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderTargetBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingInitProviderTargetBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderTargetBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingInitProviderTargetBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingInitProviderTargetBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingInitProviderTargetBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingInitProviderTargetBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderTargetGrant {
    /// Configuration block for the person being granted permissions. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grantee: Option<BucketLoggingInitProviderTargetGrantGrantee>,
    /// Logging permissions assigned to the grantee for the bucket. Valid values: FULL_CONTROL, READ, WRITE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,
}

/// Configuration block for the person being granted permissions. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderTargetGrantGrantee {
    /// Email address of the grantee. See Regions and Endpoints for supported AWS regions where this argument can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailAddress")]
    pub email_address: Option<String>,
    /// Canonical user ID of the grantee.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Type of grantee. Valid values: CanonicalUser, AmazonCustomerByEmail, Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// URI of the grantee group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Amazon S3 key format for log objects. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderTargetObjectKeyFormat {
    /// Partitioned S3 key for log objects. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionedPrefix")]
    pub partitioned_prefix: Option<BucketLoggingInitProviderTargetObjectKeyFormatPartitionedPrefix>,
    /// Use the simple format for S3 keys for log objects. To use, set simple_prefix {}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "simplePrefix")]
    pub simple_prefix: Option<BucketLoggingInitProviderTargetObjectKeyFormatSimplePrefix>,
}

/// Partitioned S3 key for log objects. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderTargetObjectKeyFormatPartitionedPrefix {
    /// Specifies the partition date source for the partitioned prefix. Valid values: EventTime, DeliveryTime.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionDateSource")]
    pub partition_date_source: Option<String>,
}

/// Use the simple format for S3 keys for log objects. To use, set simple_prefix {}.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingInitProviderTargetObjectKeyFormatSimplePrefix {
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<BucketLoggingPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BucketLoggingPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BucketLoggingPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BucketLoggingPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BucketLoggingPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketLoggingPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BucketLoggingStatus defines the observed state of BucketLogging.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<BucketLoggingStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingStatusAtProvider {
    /// Name of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Account ID of the expected bucket owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedBucketOwner")]
    pub expected_bucket_owner: Option<String>,
    /// The bucket or bucket and expected_bucket_owner separated by a comma (,) if the latter is provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the bucket where you want Amazon S3 to store server access logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBucket")]
    pub target_bucket: Option<String>,
    /// Set of configuration blocks with information for granting permissions. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGrant")]
    pub target_grant: Option<Vec<BucketLoggingStatusAtProviderTargetGrant>>,
    /// Amazon S3 key format for log objects. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetObjectKeyFormat")]
    pub target_object_key_format: Option<BucketLoggingStatusAtProviderTargetObjectKeyFormat>,
    /// Prefix for all log object keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPrefix")]
    pub target_prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingStatusAtProviderTargetGrant {
    /// Configuration block for the person being granted permissions. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grantee: Option<BucketLoggingStatusAtProviderTargetGrantGrantee>,
    /// Logging permissions assigned to the grantee for the bucket. Valid values: FULL_CONTROL, READ, WRITE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,
}

/// Configuration block for the person being granted permissions. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingStatusAtProviderTargetGrantGrantee {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Email address of the grantee. See Regions and Endpoints for supported AWS regions where this argument can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailAddress")]
    pub email_address: Option<String>,
    /// Canonical user ID of the grantee.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Type of grantee. Valid values: CanonicalUser, AmazonCustomerByEmail, Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// URI of the grantee group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Amazon S3 key format for log objects. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingStatusAtProviderTargetObjectKeyFormat {
    /// Partitioned S3 key for log objects. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionedPrefix")]
    pub partitioned_prefix: Option<BucketLoggingStatusAtProviderTargetObjectKeyFormatPartitionedPrefix>,
    /// Use the simple format for S3 keys for log objects. To use, set simple_prefix {}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "simplePrefix")]
    pub simple_prefix: Option<BucketLoggingStatusAtProviderTargetObjectKeyFormatSimplePrefix>,
}

/// Partitioned S3 key for log objects. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingStatusAtProviderTargetObjectKeyFormatPartitionedPrefix {
    /// Specifies the partition date source for the partitioned prefix. Valid values: EventTime, DeliveryTime.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionDateSource")]
    pub partition_date_source: Option<String>,
}

/// Use the simple format for S3 keys for log objects. To use, set simple_prefix {}.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BucketLoggingStatusAtProviderTargetObjectKeyFormatSimplePrefix {
}


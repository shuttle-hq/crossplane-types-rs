// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DomainSpec defines the desired state of Domain
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "cloudsearch.aws.upbound.io", version = "v1beta2", kind = "Domain", plural = "domains")]
#[kube(status = "DomainStatus")]
pub struct DomainSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<DomainDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DomainForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<DomainInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<DomainProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<DomainPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<DomainWriteConnectionSecretToRef>,
}

/// DomainSpec defines the desired state of Domain
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainForProvider {
    /// Domain endpoint options. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointOptions")]
    pub endpoint_options: Option<DomainForProviderEndpointOptions>,
    /// The index fields for documents added to the domain. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexField")]
    pub index_field: Option<Vec<DomainForProviderIndexField>>,
    /// Whether or not to maintain extra instances for the domain in a second Availability Zone to ensure high availability.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAz")]
    pub multi_az: Option<bool>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Domain scaling parameters. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingParameters")]
    pub scaling_parameters: Option<DomainForProviderScalingParameters>,
}

/// Domain endpoint options. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainForProviderEndpointOptions {
    /// Enables or disables the requirement that all requests to the domain arrive over HTTPS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforceHttps")]
    pub enforce_https: Option<bool>,
    /// The minimum required TLS version. See the AWS documentation for valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecurityPolicy")]
    pub tls_security_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainForProviderIndexField {
    /// The analysis scheme you want to use for a text field. The analysis scheme specifies the language-specific text processing options that are used during indexing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analysisScheme")]
    pub analysis_scheme: Option<String>,
    /// The default value for the field. This value is used when no value is specified for the field in the document data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    /// You can get facet information by enabling this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub facet: Option<bool>,
    /// You can highlight information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub highlight: Option<bool>,
    /// The name of the CloudSearch domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// You can enable returning the value of all searchable fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "return")]
    pub r#return: Option<bool>,
    /// You can set whether this index should be searchable or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<bool>,
    /// You can enable the property to be sortable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sort: Option<bool>,
    /// A comma-separated list of source fields to map to the field. Specifying a source field copies data from one field to another, enabling you to use the same source data in different ways by configuring different options for the fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFields")]
    pub source_fields: Option<String>,
    /// The field type. Valid values: date, date-array, double, double-array, int, int-array, literal, literal-array, text, text-array.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Domain scaling parameters. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainForProviderScalingParameters {
    /// The instance type that you want to preconfigure for your domain. See the AWS documentation for valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredInstanceType")]
    pub desired_instance_type: Option<String>,
    /// The number of partitions you want to preconfigure for your domain. Only valid when you select search.2xlarge as the instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredPartitionCount")]
    pub desired_partition_count: Option<f64>,
    /// The number of replicas you want to preconfigure for each index partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredReplicationCount")]
    pub desired_replication_count: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainInitProvider {
    /// Domain endpoint options. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointOptions")]
    pub endpoint_options: Option<DomainInitProviderEndpointOptions>,
    /// The index fields for documents added to the domain. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexField")]
    pub index_field: Option<Vec<DomainInitProviderIndexField>>,
    /// Whether or not to maintain extra instances for the domain in a second Availability Zone to ensure high availability.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAz")]
    pub multi_az: Option<bool>,
    /// Domain scaling parameters. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingParameters")]
    pub scaling_parameters: Option<DomainInitProviderScalingParameters>,
}

/// Domain endpoint options. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainInitProviderEndpointOptions {
    /// Enables or disables the requirement that all requests to the domain arrive over HTTPS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforceHttps")]
    pub enforce_https: Option<bool>,
    /// The minimum required TLS version. See the AWS documentation for valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecurityPolicy")]
    pub tls_security_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainInitProviderIndexField {
    /// The analysis scheme you want to use for a text field. The analysis scheme specifies the language-specific text processing options that are used during indexing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analysisScheme")]
    pub analysis_scheme: Option<String>,
    /// The default value for the field. This value is used when no value is specified for the field in the document data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    /// You can get facet information by enabling this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub facet: Option<bool>,
    /// You can highlight information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub highlight: Option<bool>,
    /// The name of the CloudSearch domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// You can enable returning the value of all searchable fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "return")]
    pub r#return: Option<bool>,
    /// You can set whether this index should be searchable or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<bool>,
    /// You can enable the property to be sortable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sort: Option<bool>,
    /// A comma-separated list of source fields to map to the field. Specifying a source field copies data from one field to another, enabling you to use the same source data in different ways by configuring different options for the fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFields")]
    pub source_fields: Option<String>,
    /// The field type. Valid values: date, date-array, double, double-array, int, int-array, literal, literal-array, text, text-array.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Domain scaling parameters. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainInitProviderScalingParameters {
    /// The instance type that you want to preconfigure for your domain. See the AWS documentation for valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredInstanceType")]
    pub desired_instance_type: Option<String>,
    /// The number of partitions you want to preconfigure for your domain. Only valid when you select search.2xlarge as the instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredPartitionCount")]
    pub desired_partition_count: Option<f64>,
    /// The number of replicas you want to preconfigure for each index partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredReplicationCount")]
    pub desired_replication_count: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<DomainPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DomainPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DomainStatus defines the observed state of Domain.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<DomainStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainStatusAtProvider {
    /// The domain's ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The service endpoint for updating documents in a search domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentServiceEndpoint")]
    pub document_service_endpoint: Option<String>,
    /// An internally generated unique identifier for the domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    pub domain_id: Option<String>,
    /// Domain endpoint options. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointOptions")]
    pub endpoint_options: Option<DomainStatusAtProviderEndpointOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The index fields for documents added to the domain. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexField")]
    pub index_field: Option<Vec<DomainStatusAtProviderIndexField>>,
    /// Whether or not to maintain extra instances for the domain in a second Availability Zone to ensure high availability.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAz")]
    pub multi_az: Option<bool>,
    /// Domain scaling parameters. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingParameters")]
    pub scaling_parameters: Option<DomainStatusAtProviderScalingParameters>,
    /// The service endpoint for requesting search results from a search domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "searchServiceEndpoint")]
    pub search_service_endpoint: Option<String>,
}

/// Domain endpoint options. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainStatusAtProviderEndpointOptions {
    /// Enables or disables the requirement that all requests to the domain arrive over HTTPS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforceHttps")]
    pub enforce_https: Option<bool>,
    /// The minimum required TLS version. See the AWS documentation for valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecurityPolicy")]
    pub tls_security_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainStatusAtProviderIndexField {
    /// The analysis scheme you want to use for a text field. The analysis scheme specifies the language-specific text processing options that are used during indexing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analysisScheme")]
    pub analysis_scheme: Option<String>,
    /// The default value for the field. This value is used when no value is specified for the field in the document data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    /// You can get facet information by enabling this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub facet: Option<bool>,
    /// You can highlight information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub highlight: Option<bool>,
    /// The name of the CloudSearch domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// You can enable returning the value of all searchable fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "return")]
    pub r#return: Option<bool>,
    /// You can set whether this index should be searchable or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<bool>,
    /// You can enable the property to be sortable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sort: Option<bool>,
    /// A comma-separated list of source fields to map to the field. Specifying a source field copies data from one field to another, enabling you to use the same source data in different ways by configuring different options for the fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFields")]
    pub source_fields: Option<String>,
    /// The field type. Valid values: date, date-array, double, double-array, int, int-array, literal, literal-array, text, text-array.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Domain scaling parameters. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainStatusAtProviderScalingParameters {
    /// The instance type that you want to preconfigure for your domain. See the AWS documentation for valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredInstanceType")]
    pub desired_instance_type: Option<String>,
    /// The number of partitions you want to preconfigure for your domain. Only valid when you select search.2xlarge as the instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredPartitionCount")]
    pub desired_partition_count: Option<f64>,
    /// The number of replicas you want to preconfigure for each index partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredReplicationCount")]
    pub desired_replication_count: Option<f64>,
}


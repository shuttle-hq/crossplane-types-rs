// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// EnvironmentSpec defines the desired state of Environment
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "composer.gcp.upbound.io", version = "v1beta2", kind = "Environment", plural = "environments")]
#[kube(status = "EnvironmentStatus")]
pub struct EnvironmentSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<EnvironmentDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: EnvironmentForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<EnvironmentInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<EnvironmentProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<EnvironmentPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<EnvironmentWriteConnectionSecretToRef>,
}

/// EnvironmentSpec defines the desired state of Environment
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProvider {
    /// Configuration parameters for this environment  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<EnvironmentForProviderConfig>,
    /// User-defined labels for this environment. The labels map can contain
    /// no more than 64 entries. Entries of the labels map are UTF8 strings
    /// that comply with the following restrictions:
    /// Label keys must be between 1 and 63 characters long and must conform
    /// to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])?.
    /// Label values must be between 0 and 63 characters long and must
    /// conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?.
    /// No more than 64 labels can be associated with a given environment.
    /// Both keys and values must be <= 128 bytes in size.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reference to a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectRef")]
    pub project_ref: Option<EnvironmentForProviderProjectRef>,
    /// Selector for a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectSelector")]
    pub project_selector: Option<EnvironmentForProviderProjectSelector>,
    /// The location or Compute Engine region for the environment.
    pub region: String,
    /// Configuration options for storage used by Composer environment. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageConfig")]
    pub storage_config: Option<EnvironmentForProviderStorageConfig>,
}

/// Configuration parameters for this environment  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfig {
    /// Configuration setting for Airflow database retention mechanism. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataRetentionConfig")]
    pub data_retention_config: Option<EnvironmentForProviderConfigDataRetentionConfig>,
    /// The configuration settings for Cloud SQL instance used internally
    /// by Apache Airflow software.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseConfig")]
    pub database_config: Option<EnvironmentForProviderConfigDatabaseConfig>,
    /// The encryption options for the Cloud Composer environment and its
    /// dependencies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfig")]
    pub encryption_config: Option<EnvironmentForProviderConfigEncryptionConfig>,
    /// The environment size controls the performance parameters of the managed
    /// Cloud Composer infrastructure that includes the Airflow database. Values for
    /// environment size are ENVIRONMENT_SIZE_SMALL, ENVIRONMENT_SIZE_MEDIUM,
    /// and ENVIRONMENT_SIZE_LARGE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentSize")]
    pub environment_size: Option<String>,
    /// The configuration settings for Cloud Composer maintenance windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<EnvironmentForProviderConfigMaintenanceWindow>,
    /// Configuration options for the master authorized networks feature. Enabled
    /// master authorized networks will disallow all external traffic to access
    /// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
    /// Google Compute Engine Public IPs and Google Prod IPs. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterAuthorizedNetworksConfig")]
    pub master_authorized_networks_config: Option<EnvironmentForProviderConfigMasterAuthorizedNetworksConfig>,
    /// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeConfig")]
    pub node_config: Option<EnvironmentForProviderConfigNodeConfig>,
    /// The number of nodes in the Kubernetes Engine cluster of the environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    pub node_count: Option<f64>,
    /// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateEnvironmentConfig")]
    pub private_environment_config: Option<EnvironmentForProviderConfigPrivateEnvironmentConfig>,
    /// The configuration settings for recovery. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recoveryConfig")]
    pub recovery_config: Option<EnvironmentForProviderConfigRecoveryConfig>,
    /// The resilience mode states whether high resilience is enabled for
    /// the environment or not. Values for resilience mode are HIGH_RESILIENCE
    /// for high resilience and STANDARD_RESILIENCE for standard
    /// resilience.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resilienceMode")]
    pub resilience_mode: Option<String>,
    /// The configuration settings for software inside the environment.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "softwareConfig")]
    pub software_config: Option<EnvironmentForProviderConfigSoftwareConfig>,
    /// The configuration settings for the Airflow web server App Engine instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServerConfig")]
    pub web_server_config: Option<EnvironmentForProviderConfigWebServerConfig>,
    /// The network-level access control policy for the Airflow web server.
    /// If unspecified, no network-level access restrictions are applied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServerNetworkAccessControl")]
    pub web_server_network_access_control: Option<EnvironmentForProviderConfigWebServerNetworkAccessControl>,
    /// The Kubernetes workloads configuration for GKE cluster associated with the
    /// Cloud Composer environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadsConfig")]
    pub workloads_config: Option<EnvironmentForProviderConfigWorkloadsConfig>,
}

/// Configuration setting for Airflow database retention mechanism. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigDataRetentionConfig {
    /// The configuration setting for Task Logs. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskLogsRetentionConfig")]
    pub task_logs_retention_config: Option<Vec<EnvironmentForProviderConfigDataRetentionConfigTaskLogsRetentionConfig>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigDataRetentionConfigTaskLogsRetentionConfig {
    /// The mode of storage for Airflow workers task logs. Values for storage mode are
    /// CLOUD_LOGGING_ONLY to only store logs in cloud logging and
    /// CLOUD_LOGGING_AND_CLOUD_STORAGE to store logs in cloud logging and cloud storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMode")]
    pub storage_mode: Option<String>,
}

/// The configuration settings for Cloud SQL instance used internally
/// by Apache Airflow software.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigDatabaseConfig {
    /// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
    /// composer-n1-webserver-4 or composer-n1-webserver-8.
    /// Value custom is returned only in response, if Airflow web server parameters were
    /// manually changed to a non-standard values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The Compute Engine zone in which to deploy the VMs running the
    /// Apache Airflow software, specified as the zone name or
    /// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must
    /// belong to the enclosing environment's project and region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// The encryption options for the Cloud Composer environment and its
/// dependencies.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigEncryptionConfig {
    /// Customer-managed Encryption Key available through Google's Key Management Service. It must
    /// be the fully qualified resource name,
    /// i.e. projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
}

/// The configuration settings for Cloud Composer maintenance windows.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigMaintenanceWindow {
    /// Maintenance window end time. It is used only to calculate the duration of the maintenance window.
    /// The value for end-time must be in the future, relative to 'start_time'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endTime")]
    pub end_time: Option<String>,
    /// Maintenance window recurrence. Format is a subset of RFC-5545 (https://tools.ietf.org/html/rfc5545) 'RRULE'.
    /// The only allowed values for 'FREQ' field are 'FREQ=DAILY' and 'FREQ=WEEKLY;BYDAY=...'.
    /// Example values: 'FREQ=WEEKLY;BYDAY=TU,WE', 'FREQ=DAILY'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<String>,
    /// Start time of the first recurrence of the maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Configuration options for the master authorized networks feature. Enabled
/// master authorized networks will disallow all external traffic to access
/// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
/// Google Compute Engine Public IPs and Google Prod IPs. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigMasterAuthorizedNetworksConfig {
    /// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlocks")]
    pub cidr_blocks: Option<Vec<EnvironmentForProviderConfigMasterAuthorizedNetworksConfigCidrBlocks>>,
    /// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigMasterAuthorizedNetworksConfigCidrBlocks {
    /// cidr_block must be specified in CIDR notation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// display_name is a field for users to identify CIDR blocks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
}

/// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfig {
    /// The disk size in GB used for node VMs. Minimum size is 20GB.
    /// If unspecified, defaults to 100GB. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    /// Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines
    /// nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for
    /// all destination addresses, except between pods traffic.
    /// See the documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIpMasqAgent")]
    pub enable_ip_masq_agent: Option<bool>,
    /// Configuration for controlling how IPs are allocated in the GKE cluster.
    /// Structure is documented below.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAllocationPolicy")]
    pub ip_allocation_policy: Option<EnvironmentForProviderConfigNodeConfigIpAllocationPolicy>,
    /// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
    /// composer-n1-webserver-4 or composer-n1-webserver-8.
    /// Value custom is returned only in response, if Airflow web server parameters were
    /// manually changed to a non-standard values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The Compute Engine network to be used for machine
    /// communications, specified as a self-link, relative resource name
    /// (for example "projects/{project}/global/networks/{network}"), by name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// Reference to a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkRef")]
    pub network_ref: Option<EnvironmentForProviderConfigNodeConfigNetworkRef>,
    /// Selector for a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSelector")]
    pub network_selector: Option<EnvironmentForProviderConfigNodeConfigNetworkSelector>,
    /// The set of Google API scopes to be made available on all node
    /// VMs. Cannot be updated. If empty, defaults to
    /// ["https://www.googleapis.com/auth/cloud-platform"].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthScopes")]
    pub oauth_scopes: Option<Vec<String>>,
    /// The Google Cloud Platform Service Account to be used by the
    /// node VMs. If a service account is not specified, the "default"
    /// Compute Engine service account is used. Cannot be updated. If given,
    /// note that the service account must have roles/composer.worker
    /// for any GCP resources created under the Cloud Composer Environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    /// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<EnvironmentForProviderConfigNodeConfigServiceAccountRef>,
    /// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountSelector")]
    pub service_account_selector: Option<EnvironmentForProviderConfigNodeConfigServiceAccountSelector>,
    /// The Compute Engine subnetwork to be used for machine
    /// communications, specified as a self-link, relative resource name (for example,
    /// "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
    /// network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnetwork: Option<String>,
    /// Reference to a Subnetwork in compute to populate subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetworkRef")]
    pub subnetwork_ref: Option<EnvironmentForProviderConfigNodeConfigSubnetworkRef>,
    /// Selector for a Subnetwork in compute to populate subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetworkSelector")]
    pub subnetwork_selector: Option<EnvironmentForProviderConfigNodeConfigSubnetworkSelector>,
    /// The list of instance tags applied to all node VMs. Tags are
    /// used to identify valid sources or targets for network
    /// firewalls. Each tag within the list must comply with RFC1035.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The Compute Engine zone in which to deploy the VMs running the
    /// Apache Airflow software, specified as the zone name or
    /// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must
    /// belong to the enclosing environment's project and region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// Configuration for controlling how IPs are allocated in the GKE cluster.
/// Structure is documented below.
/// Cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigIpAllocationPolicy {
    /// The IP address range used to allocate IP addresses to pods in the cluster.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    /// Set to blank to have GKE choose a range with the default size.
    /// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
    /// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
    /// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
    /// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterIpv4CidrBlock")]
    pub cluster_ipv4_cidr_block: Option<String>,
    /// The name of the cluster's secondary range used to allocate IP addresses to pods.
    /// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSecondaryRangeName")]
    pub cluster_secondary_range_name: Option<String>,
    /// The IP address range used to allocate IP addresses in this cluster.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    /// Set to blank to have GKE choose a range with the default size.
    /// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
    /// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
    /// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
    /// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicesIpv4CidrBlock")]
    pub services_ipv4_cidr_block: Option<String>,
    /// The name of the services' secondary range used to allocate IP addresses to the cluster.
    /// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicesSecondaryRangeName")]
    pub services_secondary_range_name: Option<String>,
    /// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
    /// Defaults to true if the ip_allocation_policy block is present in config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useIpAliases")]
    pub use_ip_aliases: Option<bool>,
}

/// Reference to a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderConfigNodeConfigNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderConfigNodeConfigNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderConfigNodeConfigNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderConfigNodeConfigNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderConfigNodeConfigNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderConfigNodeConfigNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigServiceAccountRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderConfigNodeConfigServiceAccountRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigServiceAccountRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderConfigNodeConfigServiceAccountRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderConfigNodeConfigServiceAccountRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigServiceAccountRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigServiceAccountRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigServiceAccountSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderConfigNodeConfigServiceAccountSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigServiceAccountSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderConfigNodeConfigServiceAccountSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderConfigNodeConfigServiceAccountSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigServiceAccountSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigServiceAccountSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnetwork in compute to populate subnetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigSubnetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderConfigNodeConfigSubnetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigSubnetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderConfigNodeConfigSubnetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderConfigNodeConfigSubnetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigSubnetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigSubnetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnetwork in compute to populate subnetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigSubnetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderConfigNodeConfigSubnetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigNodeConfigSubnetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderConfigNodeConfigSubnetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderConfigNodeConfigSubnetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigSubnetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderConfigNodeConfigSubnetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigPrivateEnvironmentConfig {
    /// When specified, the environment will use Private Service Connect instead of VPC peerings to connect
    /// to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP
    /// address from this subnetwork. This field is supported for Cloud Composer environments in
    /// versions composer-2.*.*-airflow-*.*.* and newer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudComposerConnectionSubnetwork")]
    pub cloud_composer_connection_subnetwork: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudComposerNetworkIpv4CidrBlock")]
    pub cloud_composer_network_ipv4_cidr_block: Option<String>,
    /// The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSqlIpv4CidrBlock")]
    pub cloud_sql_ipv4_cidr_block: Option<String>,
    /// Mode of internal communication within the Composer environment. Must be one
    /// of "VPC_PEERING" or "PRIVATE_SERVICE_CONNECT".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    /// If true, access to the public endpoint of the GKE cluster is denied.
    /// If this field is set to true, the ip_allocation_policy.use_ip_aliases field must
    /// also be set to true for Cloud Composer 1 environments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrivateEndpoint")]
    pub enable_private_endpoint: Option<bool>,
    /// When enabled, IPs from public (non-RFC1918) ranges can be used for
    /// ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrivatelyUsedPublicIps")]
    pub enable_privately_used_public_ips: Option<bool>,
    /// The IP range in CIDR notation to use for the hosted master network. This range is used
    /// for assigning internal IP addresses to the cluster master or set of masters and to the
    /// internal load balancer virtual IP. This range must not overlap with any other ranges
    /// in use within the cluster's network.
    /// If left blank, the default value of is used. See documentation for default values per region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterIpv4CidrBlock")]
    pub master_ipv4_cidr_block: Option<String>,
    /// The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServerIpv4CidrBlock")]
    pub web_server_ipv4_cidr_block: Option<String>,
}

/// The configuration settings for recovery. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigRecoveryConfig {
    /// The recovery configuration settings for the Cloud Composer environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduledSnapshotsConfig")]
    pub scheduled_snapshots_config: Option<EnvironmentForProviderConfigRecoveryConfigScheduledSnapshotsConfig>,
}

/// The recovery configuration settings for the Cloud Composer environment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigRecoveryConfigScheduledSnapshotsConfig {
    /// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Snapshot schedule, in the unix-cron format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotCreationSchedule")]
    pub snapshot_creation_schedule: Option<String>,
    /// The URI of a bucket folder where to save the snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotLocation")]
    pub snapshot_location: Option<String>,
    /// A time zone for the schedule. This value is a time offset and does not take into account daylight saving time changes. Valid values are from UTC-12 to UTC+12. Examples: UTC, UTC-01, UTC+03.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

/// The configuration settings for software inside the environment.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigSoftwareConfig {
    /// Apache Airflow configuration properties to override. Property keys contain the section and property names,
    /// separated by a hyphen, for example "core-dags_are_paused_at_creation".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "airflowConfigOverrides")]
    pub airflow_config_overrides: Option<HashMap<String, String>>,
    /// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
    /// Environment variable names must match the regular expression [a-zA-Z_][a-zA-Z0-9_]*.
    /// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
    /// AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+), and they cannot match any of the following reserved names:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envVariables")]
    pub env_variables: Option<HashMap<String, String>>,
    /// In Composer 1, use a specific Composer 1 version in this parameter. If omitted, the default is the latest version of Composer 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersion")]
    pub image_version: Option<String>,
    /// Custom Python Package Index (PyPI) packages to be installed
    /// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
    /// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
    /// pinning it to a version specifier, use the empty string as the value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pypiPackages")]
    pub pypi_packages: Option<HashMap<String, String>>,
    /// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
    /// Can be set to '2' or '3'. If not specified, the default is '3'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pythonVersion")]
    pub python_version: Option<String>,
    /// The number of schedulers for Airflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerCount")]
    pub scheduler_count: Option<f64>,
}

/// The configuration settings for the Airflow web server App Engine instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigWebServerConfig {
    /// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
    /// composer-n1-webserver-4 or composer-n1-webserver-8.
    /// Value custom is returned only in response, if Airflow web server parameters were
    /// manually changed to a non-standard values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
}

/// The network-level access control policy for the Airflow web server.
/// If unspecified, no network-level access restrictions are applied.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigWebServerNetworkAccessControl {
    /// A collection of allowed IP ranges with descriptions. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedIpRange")]
    pub allowed_ip_range: Option<Vec<EnvironmentForProviderConfigWebServerNetworkAccessControlAllowedIpRange>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigWebServerNetworkAccessControlAllowedIpRange {
    /// A description of this ip range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// IP address or range, defined using CIDR notation, of requests that this rule applies to.
    /// Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334.
    /// IP range prefixes should be properly truncated. For example,
    /// 1.2.3.4/24 should be truncated to 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 should be truncated to 2001:db8::/32.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The Kubernetes workloads configuration for GKE cluster associated with the
/// Cloud Composer environment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigWorkloadsConfig {
    /// Configuration for resources used by Airflow schedulers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheduler: Option<EnvironmentForProviderConfigWorkloadsConfigScheduler>,
    /// Configuration for resources used by Airflow triggerer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub triggerer: Option<EnvironmentForProviderConfigWorkloadsConfigTriggerer>,
    /// Configuration for resources used by Airflow web server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServer")]
    pub web_server: Option<EnvironmentForProviderConfigWorkloadsConfigWebServer>,
    /// Configuration for resources used by Airflow workers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub worker: Option<EnvironmentForProviderConfigWorkloadsConfigWorker>,
}

/// Configuration for resources used by Airflow schedulers.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigWorkloadsConfigScheduler {
    /// The number of Airflow triggerers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
    /// The amount of storage (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageGb")]
    pub storage_gb: Option<f64>,
}

/// Configuration for resources used by Airflow triggerer.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigWorkloadsConfigTriggerer {
    /// The number of Airflow triggerers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
}

/// Configuration for resources used by Airflow web server.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigWorkloadsConfigWebServer {
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
    /// The amount of storage (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageGb")]
    pub storage_gb: Option<f64>,
}

/// Configuration for resources used by Airflow workers.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderConfigWorkloadsConfigWorker {
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The maximum number of Airflow workers that the environment can run. The number of workers in the
    /// environment does not go above this number, even if a higher number of workers is required to
    /// handle the load.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCount")]
    pub max_count: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
    /// The minimum number of Airflow workers that the environment can run. The number of workers in the
    /// environment does not go above this number, even if a lower number of workers can handle the load.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCount")]
    pub min_count: Option<f64>,
    /// The amount of storage (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageGb")]
    pub storage_gb: Option<f64>,
}

/// Reference to a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderProjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderProjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderProjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderProjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderProjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderProjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderProjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderProjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderProjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderProjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderProjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderProjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderProjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderProjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration options for storage used by Composer environment. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderStorageConfig {
    /// Name of an existing Cloud Storage bucket to be used by the environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProvider {
    /// Configuration parameters for this environment  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<EnvironmentInitProviderConfig>,
    /// User-defined labels for this environment. The labels map can contain
    /// no more than 64 entries. Entries of the labels map are UTF8 strings
    /// that comply with the following restrictions:
    /// Label keys must be between 1 and 63 characters long and must conform
    /// to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])?.
    /// Label values must be between 0 and 63 characters long and must
    /// conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?.
    /// No more than 64 labels can be associated with a given environment.
    /// Both keys and values must be <= 128 bytes in size.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reference to a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectRef")]
    pub project_ref: Option<EnvironmentInitProviderProjectRef>,
    /// Selector for a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectSelector")]
    pub project_selector: Option<EnvironmentInitProviderProjectSelector>,
    /// Configuration options for storage used by Composer environment. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageConfig")]
    pub storage_config: Option<EnvironmentInitProviderStorageConfig>,
}

/// Configuration parameters for this environment  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfig {
    /// Configuration setting for Airflow database retention mechanism. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataRetentionConfig")]
    pub data_retention_config: Option<EnvironmentInitProviderConfigDataRetentionConfig>,
    /// The configuration settings for Cloud SQL instance used internally
    /// by Apache Airflow software.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseConfig")]
    pub database_config: Option<EnvironmentInitProviderConfigDatabaseConfig>,
    /// The encryption options for the Cloud Composer environment and its
    /// dependencies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfig")]
    pub encryption_config: Option<EnvironmentInitProviderConfigEncryptionConfig>,
    /// The environment size controls the performance parameters of the managed
    /// Cloud Composer infrastructure that includes the Airflow database. Values for
    /// environment size are ENVIRONMENT_SIZE_SMALL, ENVIRONMENT_SIZE_MEDIUM,
    /// and ENVIRONMENT_SIZE_LARGE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentSize")]
    pub environment_size: Option<String>,
    /// The configuration settings for Cloud Composer maintenance windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<EnvironmentInitProviderConfigMaintenanceWindow>,
    /// Configuration options for the master authorized networks feature. Enabled
    /// master authorized networks will disallow all external traffic to access
    /// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
    /// Google Compute Engine Public IPs and Google Prod IPs. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterAuthorizedNetworksConfig")]
    pub master_authorized_networks_config: Option<EnvironmentInitProviderConfigMasterAuthorizedNetworksConfig>,
    /// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeConfig")]
    pub node_config: Option<EnvironmentInitProviderConfigNodeConfig>,
    /// The number of nodes in the Kubernetes Engine cluster of the environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    pub node_count: Option<f64>,
    /// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateEnvironmentConfig")]
    pub private_environment_config: Option<EnvironmentInitProviderConfigPrivateEnvironmentConfig>,
    /// The configuration settings for recovery. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recoveryConfig")]
    pub recovery_config: Option<EnvironmentInitProviderConfigRecoveryConfig>,
    /// The resilience mode states whether high resilience is enabled for
    /// the environment or not. Values for resilience mode are HIGH_RESILIENCE
    /// for high resilience and STANDARD_RESILIENCE for standard
    /// resilience.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resilienceMode")]
    pub resilience_mode: Option<String>,
    /// The configuration settings for software inside the environment.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "softwareConfig")]
    pub software_config: Option<EnvironmentInitProviderConfigSoftwareConfig>,
    /// The configuration settings for the Airflow web server App Engine instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServerConfig")]
    pub web_server_config: Option<EnvironmentInitProviderConfigWebServerConfig>,
    /// The network-level access control policy for the Airflow web server.
    /// If unspecified, no network-level access restrictions are applied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServerNetworkAccessControl")]
    pub web_server_network_access_control: Option<EnvironmentInitProviderConfigWebServerNetworkAccessControl>,
    /// The Kubernetes workloads configuration for GKE cluster associated with the
    /// Cloud Composer environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadsConfig")]
    pub workloads_config: Option<EnvironmentInitProviderConfigWorkloadsConfig>,
}

/// Configuration setting for Airflow database retention mechanism. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigDataRetentionConfig {
    /// The configuration setting for Task Logs. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskLogsRetentionConfig")]
    pub task_logs_retention_config: Option<Vec<EnvironmentInitProviderConfigDataRetentionConfigTaskLogsRetentionConfig>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigDataRetentionConfigTaskLogsRetentionConfig {
    /// The mode of storage for Airflow workers task logs. Values for storage mode are
    /// CLOUD_LOGGING_ONLY to only store logs in cloud logging and
    /// CLOUD_LOGGING_AND_CLOUD_STORAGE to store logs in cloud logging and cloud storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMode")]
    pub storage_mode: Option<String>,
}

/// The configuration settings for Cloud SQL instance used internally
/// by Apache Airflow software.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigDatabaseConfig {
    /// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
    /// composer-n1-webserver-4 or composer-n1-webserver-8.
    /// Value custom is returned only in response, if Airflow web server parameters were
    /// manually changed to a non-standard values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The Compute Engine zone in which to deploy the VMs running the
    /// Apache Airflow software, specified as the zone name or
    /// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must
    /// belong to the enclosing environment's project and region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// The encryption options for the Cloud Composer environment and its
/// dependencies.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigEncryptionConfig {
    /// Customer-managed Encryption Key available through Google's Key Management Service. It must
    /// be the fully qualified resource name,
    /// i.e. projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
}

/// The configuration settings for Cloud Composer maintenance windows.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigMaintenanceWindow {
    /// Maintenance window end time. It is used only to calculate the duration of the maintenance window.
    /// The value for end-time must be in the future, relative to 'start_time'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endTime")]
    pub end_time: Option<String>,
    /// Maintenance window recurrence. Format is a subset of RFC-5545 (https://tools.ietf.org/html/rfc5545) 'RRULE'.
    /// The only allowed values for 'FREQ' field are 'FREQ=DAILY' and 'FREQ=WEEKLY;BYDAY=...'.
    /// Example values: 'FREQ=WEEKLY;BYDAY=TU,WE', 'FREQ=DAILY'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<String>,
    /// Start time of the first recurrence of the maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Configuration options for the master authorized networks feature. Enabled
/// master authorized networks will disallow all external traffic to access
/// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
/// Google Compute Engine Public IPs and Google Prod IPs. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigMasterAuthorizedNetworksConfig {
    /// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlocks")]
    pub cidr_blocks: Option<Vec<EnvironmentInitProviderConfigMasterAuthorizedNetworksConfigCidrBlocks>>,
    /// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigMasterAuthorizedNetworksConfigCidrBlocks {
    /// cidr_block must be specified in CIDR notation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// display_name is a field for users to identify CIDR blocks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
}

/// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfig {
    /// The disk size in GB used for node VMs. Minimum size is 20GB.
    /// If unspecified, defaults to 100GB. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    /// Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines
    /// nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for
    /// all destination addresses, except between pods traffic.
    /// See the documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIpMasqAgent")]
    pub enable_ip_masq_agent: Option<bool>,
    /// Configuration for controlling how IPs are allocated in the GKE cluster.
    /// Structure is documented below.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAllocationPolicy")]
    pub ip_allocation_policy: Option<EnvironmentInitProviderConfigNodeConfigIpAllocationPolicy>,
    /// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
    /// composer-n1-webserver-4 or composer-n1-webserver-8.
    /// Value custom is returned only in response, if Airflow web server parameters were
    /// manually changed to a non-standard values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The Compute Engine network to be used for machine
    /// communications, specified as a self-link, relative resource name
    /// (for example "projects/{project}/global/networks/{network}"), by name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// Reference to a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkRef")]
    pub network_ref: Option<EnvironmentInitProviderConfigNodeConfigNetworkRef>,
    /// Selector for a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSelector")]
    pub network_selector: Option<EnvironmentInitProviderConfigNodeConfigNetworkSelector>,
    /// The set of Google API scopes to be made available on all node
    /// VMs. Cannot be updated. If empty, defaults to
    /// ["https://www.googleapis.com/auth/cloud-platform"].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthScopes")]
    pub oauth_scopes: Option<Vec<String>>,
    /// The Google Cloud Platform Service Account to be used by the
    /// node VMs. If a service account is not specified, the "default"
    /// Compute Engine service account is used. Cannot be updated. If given,
    /// note that the service account must have roles/composer.worker
    /// for any GCP resources created under the Cloud Composer Environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    /// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<EnvironmentInitProviderConfigNodeConfigServiceAccountRef>,
    /// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountSelector")]
    pub service_account_selector: Option<EnvironmentInitProviderConfigNodeConfigServiceAccountSelector>,
    /// The Compute Engine subnetwork to be used for machine
    /// communications, specified as a self-link, relative resource name (for example,
    /// "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
    /// network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnetwork: Option<String>,
    /// Reference to a Subnetwork in compute to populate subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetworkRef")]
    pub subnetwork_ref: Option<EnvironmentInitProviderConfigNodeConfigSubnetworkRef>,
    /// Selector for a Subnetwork in compute to populate subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetworkSelector")]
    pub subnetwork_selector: Option<EnvironmentInitProviderConfigNodeConfigSubnetworkSelector>,
    /// The list of instance tags applied to all node VMs. Tags are
    /// used to identify valid sources or targets for network
    /// firewalls. Each tag within the list must comply with RFC1035.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The Compute Engine zone in which to deploy the VMs running the
    /// Apache Airflow software, specified as the zone name or
    /// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must
    /// belong to the enclosing environment's project and region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// Configuration for controlling how IPs are allocated in the GKE cluster.
/// Structure is documented below.
/// Cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigIpAllocationPolicy {
    /// The IP address range used to allocate IP addresses to pods in the cluster.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    /// Set to blank to have GKE choose a range with the default size.
    /// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
    /// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
    /// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
    /// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterIpv4CidrBlock")]
    pub cluster_ipv4_cidr_block: Option<String>,
    /// The name of the cluster's secondary range used to allocate IP addresses to pods.
    /// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSecondaryRangeName")]
    pub cluster_secondary_range_name: Option<String>,
    /// The IP address range used to allocate IP addresses in this cluster.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    /// Set to blank to have GKE choose a range with the default size.
    /// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
    /// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
    /// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
    /// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicesIpv4CidrBlock")]
    pub services_ipv4_cidr_block: Option<String>,
    /// The name of the services' secondary range used to allocate IP addresses to the cluster.
    /// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicesSecondaryRangeName")]
    pub services_secondary_range_name: Option<String>,
    /// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
    /// Defaults to true if the ip_allocation_policy block is present in config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useIpAliases")]
    pub use_ip_aliases: Option<bool>,
}

/// Reference to a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderConfigNodeConfigNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderConfigNodeConfigNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderConfigNodeConfigNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderConfigNodeConfigNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderConfigNodeConfigNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderConfigNodeConfigNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigServiceAccountRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderConfigNodeConfigServiceAccountRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigServiceAccountRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderConfigNodeConfigServiceAccountRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderConfigNodeConfigServiceAccountRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigServiceAccountRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigServiceAccountRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigServiceAccountSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderConfigNodeConfigServiceAccountSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigServiceAccountSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderConfigNodeConfigServiceAccountSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderConfigNodeConfigServiceAccountSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigServiceAccountSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigServiceAccountSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnetwork in compute to populate subnetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigSubnetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderConfigNodeConfigSubnetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigSubnetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderConfigNodeConfigSubnetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderConfigNodeConfigSubnetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigSubnetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigSubnetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnetwork in compute to populate subnetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigSubnetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderConfigNodeConfigSubnetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigNodeConfigSubnetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderConfigNodeConfigSubnetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderConfigNodeConfigSubnetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigSubnetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderConfigNodeConfigSubnetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigPrivateEnvironmentConfig {
    /// When specified, the environment will use Private Service Connect instead of VPC peerings to connect
    /// to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP
    /// address from this subnetwork. This field is supported for Cloud Composer environments in
    /// versions composer-2.*.*-airflow-*.*.* and newer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudComposerConnectionSubnetwork")]
    pub cloud_composer_connection_subnetwork: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudComposerNetworkIpv4CidrBlock")]
    pub cloud_composer_network_ipv4_cidr_block: Option<String>,
    /// The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSqlIpv4CidrBlock")]
    pub cloud_sql_ipv4_cidr_block: Option<String>,
    /// Mode of internal communication within the Composer environment. Must be one
    /// of "VPC_PEERING" or "PRIVATE_SERVICE_CONNECT".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    /// If true, access to the public endpoint of the GKE cluster is denied.
    /// If this field is set to true, the ip_allocation_policy.use_ip_aliases field must
    /// also be set to true for Cloud Composer 1 environments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrivateEndpoint")]
    pub enable_private_endpoint: Option<bool>,
    /// When enabled, IPs from public (non-RFC1918) ranges can be used for
    /// ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrivatelyUsedPublicIps")]
    pub enable_privately_used_public_ips: Option<bool>,
    /// The IP range in CIDR notation to use for the hosted master network. This range is used
    /// for assigning internal IP addresses to the cluster master or set of masters and to the
    /// internal load balancer virtual IP. This range must not overlap with any other ranges
    /// in use within the cluster's network.
    /// If left blank, the default value of is used. See documentation for default values per region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterIpv4CidrBlock")]
    pub master_ipv4_cidr_block: Option<String>,
    /// The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServerIpv4CidrBlock")]
    pub web_server_ipv4_cidr_block: Option<String>,
}

/// The configuration settings for recovery. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigRecoveryConfig {
    /// The recovery configuration settings for the Cloud Composer environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduledSnapshotsConfig")]
    pub scheduled_snapshots_config: Option<EnvironmentInitProviderConfigRecoveryConfigScheduledSnapshotsConfig>,
}

/// The recovery configuration settings for the Cloud Composer environment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigRecoveryConfigScheduledSnapshotsConfig {
    /// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Snapshot schedule, in the unix-cron format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotCreationSchedule")]
    pub snapshot_creation_schedule: Option<String>,
    /// The URI of a bucket folder where to save the snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotLocation")]
    pub snapshot_location: Option<String>,
    /// A time zone for the schedule. This value is a time offset and does not take into account daylight saving time changes. Valid values are from UTC-12 to UTC+12. Examples: UTC, UTC-01, UTC+03.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

/// The configuration settings for software inside the environment.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigSoftwareConfig {
    /// Apache Airflow configuration properties to override. Property keys contain the section and property names,
    /// separated by a hyphen, for example "core-dags_are_paused_at_creation".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "airflowConfigOverrides")]
    pub airflow_config_overrides: Option<HashMap<String, String>>,
    /// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
    /// Environment variable names must match the regular expression [a-zA-Z_][a-zA-Z0-9_]*.
    /// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
    /// AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+), and they cannot match any of the following reserved names:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envVariables")]
    pub env_variables: Option<HashMap<String, String>>,
    /// In Composer 1, use a specific Composer 1 version in this parameter. If omitted, the default is the latest version of Composer 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersion")]
    pub image_version: Option<String>,
    /// Custom Python Package Index (PyPI) packages to be installed
    /// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
    /// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
    /// pinning it to a version specifier, use the empty string as the value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pypiPackages")]
    pub pypi_packages: Option<HashMap<String, String>>,
    /// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
    /// Can be set to '2' or '3'. If not specified, the default is '3'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pythonVersion")]
    pub python_version: Option<String>,
    /// The number of schedulers for Airflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerCount")]
    pub scheduler_count: Option<f64>,
}

/// The configuration settings for the Airflow web server App Engine instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigWebServerConfig {
    /// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
    /// composer-n1-webserver-4 or composer-n1-webserver-8.
    /// Value custom is returned only in response, if Airflow web server parameters were
    /// manually changed to a non-standard values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
}

/// The network-level access control policy for the Airflow web server.
/// If unspecified, no network-level access restrictions are applied.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigWebServerNetworkAccessControl {
    /// A collection of allowed IP ranges with descriptions. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedIpRange")]
    pub allowed_ip_range: Option<Vec<EnvironmentInitProviderConfigWebServerNetworkAccessControlAllowedIpRange>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigWebServerNetworkAccessControlAllowedIpRange {
    /// A description of this ip range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// IP address or range, defined using CIDR notation, of requests that this rule applies to.
    /// Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334.
    /// IP range prefixes should be properly truncated. For example,
    /// 1.2.3.4/24 should be truncated to 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 should be truncated to 2001:db8::/32.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The Kubernetes workloads configuration for GKE cluster associated with the
/// Cloud Composer environment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigWorkloadsConfig {
    /// Configuration for resources used by Airflow schedulers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheduler: Option<EnvironmentInitProviderConfigWorkloadsConfigScheduler>,
    /// Configuration for resources used by Airflow triggerer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub triggerer: Option<EnvironmentInitProviderConfigWorkloadsConfigTriggerer>,
    /// Configuration for resources used by Airflow web server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServer")]
    pub web_server: Option<EnvironmentInitProviderConfigWorkloadsConfigWebServer>,
    /// Configuration for resources used by Airflow workers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub worker: Option<EnvironmentInitProviderConfigWorkloadsConfigWorker>,
}

/// Configuration for resources used by Airflow schedulers.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigWorkloadsConfigScheduler {
    /// The number of Airflow triggerers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
    /// The amount of storage (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageGb")]
    pub storage_gb: Option<f64>,
}

/// Configuration for resources used by Airflow triggerer.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigWorkloadsConfigTriggerer {
    /// The number of Airflow triggerers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
}

/// Configuration for resources used by Airflow web server.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigWorkloadsConfigWebServer {
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
    /// The amount of storage (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageGb")]
    pub storage_gb: Option<f64>,
}

/// Configuration for resources used by Airflow workers.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderConfigWorkloadsConfigWorker {
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The maximum number of Airflow workers that the environment can run. The number of workers in the
    /// environment does not go above this number, even if a higher number of workers is required to
    /// handle the load.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCount")]
    pub max_count: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
    /// The minimum number of Airflow workers that the environment can run. The number of workers in the
    /// environment does not go above this number, even if a lower number of workers can handle the load.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCount")]
    pub min_count: Option<f64>,
    /// The amount of storage (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageGb")]
    pub storage_gb: Option<f64>,
}

/// Reference to a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderProjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderProjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderProjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderProjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderProjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderProjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderProjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderProjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderProjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderProjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderProjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderProjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderProjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderProjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration options for storage used by Composer environment. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderStorageConfig {
    /// Name of an existing Cloud Storage bucket to be used by the environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<EnvironmentPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<EnvironmentPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// EnvironmentStatus defines the observed state of Environment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<EnvironmentStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProvider {
    /// Configuration parameters for this environment  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<EnvironmentStatusAtProviderConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{region}}/environments/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// User-defined labels for this environment. The labels map can contain
    /// no more than 64 entries. Entries of the labels map are UTF8 strings
    /// that comply with the following restrictions:
    /// Label keys must be between 1 and 63 characters long and must conform
    /// to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])?.
    /// Label values must be between 0 and 63 characters long and must
    /// conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?.
    /// No more than 64 labels can be associated with a given environment.
    /// Both keys and values must be <= 128 bytes in size.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The location or Compute Engine region for the environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Configuration options for storage used by Composer environment. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageConfig")]
    pub storage_config: Option<EnvironmentStatusAtProviderStorageConfig>,
    /// The combination of labels configured directly on the resource and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
}

/// Configuration parameters for this environment  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfig {
    /// The URI of the Apache Airflow Web UI hosted within this
    /// environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "airflowUri")]
    pub airflow_uri: Option<String>,
    /// The Cloud Storage prefix of the DAGs for this environment.
    /// Although Cloud Storage objects reside in a flat namespace, a
    /// hierarchical file tree can be simulated using '/'-delimited
    /// object name prefixes. DAG objects for this environment
    /// reside in a simulated directory with this prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dagGcsPrefix")]
    pub dag_gcs_prefix: Option<String>,
    /// Configuration setting for Airflow database retention mechanism. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataRetentionConfig")]
    pub data_retention_config: Option<EnvironmentStatusAtProviderConfigDataRetentionConfig>,
    /// The configuration settings for Cloud SQL instance used internally
    /// by Apache Airflow software.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseConfig")]
    pub database_config: Option<EnvironmentStatusAtProviderConfigDatabaseConfig>,
    /// The encryption options for the Cloud Composer environment and its
    /// dependencies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfig")]
    pub encryption_config: Option<EnvironmentStatusAtProviderConfigEncryptionConfig>,
    /// The environment size controls the performance parameters of the managed
    /// Cloud Composer infrastructure that includes the Airflow database. Values for
    /// environment size are ENVIRONMENT_SIZE_SMALL, ENVIRONMENT_SIZE_MEDIUM,
    /// and ENVIRONMENT_SIZE_LARGE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentSize")]
    pub environment_size: Option<String>,
    /// The Kubernetes Engine cluster used to run this environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeCluster")]
    pub gke_cluster: Option<String>,
    /// The configuration settings for Cloud Composer maintenance windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<EnvironmentStatusAtProviderConfigMaintenanceWindow>,
    /// Configuration options for the master authorized networks feature. Enabled
    /// master authorized networks will disallow all external traffic to access
    /// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
    /// Google Compute Engine Public IPs and Google Prod IPs. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterAuthorizedNetworksConfig")]
    pub master_authorized_networks_config: Option<EnvironmentStatusAtProviderConfigMasterAuthorizedNetworksConfig>,
    /// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeConfig")]
    pub node_config: Option<EnvironmentStatusAtProviderConfigNodeConfig>,
    /// The number of nodes in the Kubernetes Engine cluster of the environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    pub node_count: Option<f64>,
    /// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateEnvironmentConfig")]
    pub private_environment_config: Option<EnvironmentStatusAtProviderConfigPrivateEnvironmentConfig>,
    /// The configuration settings for recovery. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recoveryConfig")]
    pub recovery_config: Option<EnvironmentStatusAtProviderConfigRecoveryConfig>,
    /// The resilience mode states whether high resilience is enabled for
    /// the environment or not. Values for resilience mode are HIGH_RESILIENCE
    /// for high resilience and STANDARD_RESILIENCE for standard
    /// resilience.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resilienceMode")]
    pub resilience_mode: Option<String>,
    /// The configuration settings for software inside the environment.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "softwareConfig")]
    pub software_config: Option<EnvironmentStatusAtProviderConfigSoftwareConfig>,
    /// The configuration settings for the Airflow web server App Engine instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServerConfig")]
    pub web_server_config: Option<EnvironmentStatusAtProviderConfigWebServerConfig>,
    /// The network-level access control policy for the Airflow web server.
    /// If unspecified, no network-level access restrictions are applied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServerNetworkAccessControl")]
    pub web_server_network_access_control: Option<EnvironmentStatusAtProviderConfigWebServerNetworkAccessControl>,
    /// The Kubernetes workloads configuration for GKE cluster associated with the
    /// Cloud Composer environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadsConfig")]
    pub workloads_config: Option<EnvironmentStatusAtProviderConfigWorkloadsConfig>,
}

/// Configuration setting for Airflow database retention mechanism. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigDataRetentionConfig {
    /// The configuration setting for Task Logs. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskLogsRetentionConfig")]
    pub task_logs_retention_config: Option<Vec<EnvironmentStatusAtProviderConfigDataRetentionConfigTaskLogsRetentionConfig>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigDataRetentionConfigTaskLogsRetentionConfig {
    /// The mode of storage for Airflow workers task logs. Values for storage mode are
    /// CLOUD_LOGGING_ONLY to only store logs in cloud logging and
    /// CLOUD_LOGGING_AND_CLOUD_STORAGE to store logs in cloud logging and cloud storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMode")]
    pub storage_mode: Option<String>,
}

/// The configuration settings for Cloud SQL instance used internally
/// by Apache Airflow software.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigDatabaseConfig {
    /// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
    /// composer-n1-webserver-4 or composer-n1-webserver-8.
    /// Value custom is returned only in response, if Airflow web server parameters were
    /// manually changed to a non-standard values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The Compute Engine zone in which to deploy the VMs running the
    /// Apache Airflow software, specified as the zone name or
    /// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must
    /// belong to the enclosing environment's project and region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// The encryption options for the Cloud Composer environment and its
/// dependencies.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigEncryptionConfig {
    /// Customer-managed Encryption Key available through Google's Key Management Service. It must
    /// be the fully qualified resource name,
    /// i.e. projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
}

/// The configuration settings for Cloud Composer maintenance windows.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigMaintenanceWindow {
    /// Maintenance window end time. It is used only to calculate the duration of the maintenance window.
    /// The value for end-time must be in the future, relative to 'start_time'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endTime")]
    pub end_time: Option<String>,
    /// Maintenance window recurrence. Format is a subset of RFC-5545 (https://tools.ietf.org/html/rfc5545) 'RRULE'.
    /// The only allowed values for 'FREQ' field are 'FREQ=DAILY' and 'FREQ=WEEKLY;BYDAY=...'.
    /// Example values: 'FREQ=WEEKLY;BYDAY=TU,WE', 'FREQ=DAILY'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<String>,
    /// Start time of the first recurrence of the maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Configuration options for the master authorized networks feature. Enabled
/// master authorized networks will disallow all external traffic to access
/// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
/// Google Compute Engine Public IPs and Google Prod IPs. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigMasterAuthorizedNetworksConfig {
    /// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlocks")]
    pub cidr_blocks: Option<Vec<EnvironmentStatusAtProviderConfigMasterAuthorizedNetworksConfigCidrBlocks>>,
    /// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigMasterAuthorizedNetworksConfigCidrBlocks {
    /// cidr_block must be specified in CIDR notation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// display_name is a field for users to identify CIDR blocks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
}

/// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigNodeConfig {
    /// The disk size in GB used for node VMs. Minimum size is 20GB.
    /// If unspecified, defaults to 100GB. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    /// Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines
    /// nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for
    /// all destination addresses, except between pods traffic.
    /// See the documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIpMasqAgent")]
    pub enable_ip_masq_agent: Option<bool>,
    /// Configuration for controlling how IPs are allocated in the GKE cluster.
    /// Structure is documented below.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAllocationPolicy")]
    pub ip_allocation_policy: Option<EnvironmentStatusAtProviderConfigNodeConfigIpAllocationPolicy>,
    /// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
    /// composer-n1-webserver-4 or composer-n1-webserver-8.
    /// Value custom is returned only in response, if Airflow web server parameters were
    /// manually changed to a non-standard values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The Compute Engine network to be used for machine
    /// communications, specified as a self-link, relative resource name
    /// (for example "projects/{project}/global/networks/{network}"), by name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// The set of Google API scopes to be made available on all node
    /// VMs. Cannot be updated. If empty, defaults to
    /// ["https://www.googleapis.com/auth/cloud-platform"].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthScopes")]
    pub oauth_scopes: Option<Vec<String>>,
    /// The Google Cloud Platform Service Account to be used by the
    /// node VMs. If a service account is not specified, the "default"
    /// Compute Engine service account is used. Cannot be updated. If given,
    /// note that the service account must have roles/composer.worker
    /// for any GCP resources created under the Cloud Composer Environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    /// The Compute Engine subnetwork to be used for machine
    /// communications, specified as a self-link, relative resource name (for example,
    /// "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
    /// network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnetwork: Option<String>,
    /// The list of instance tags applied to all node VMs. Tags are
    /// used to identify valid sources or targets for network
    /// firewalls. Each tag within the list must comply with RFC1035.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The Compute Engine zone in which to deploy the VMs running the
    /// Apache Airflow software, specified as the zone name or
    /// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must
    /// belong to the enclosing environment's project and region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// Configuration for controlling how IPs are allocated in the GKE cluster.
/// Structure is documented below.
/// Cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigNodeConfigIpAllocationPolicy {
    /// The IP address range used to allocate IP addresses to pods in the cluster.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    /// Set to blank to have GKE choose a range with the default size.
    /// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
    /// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
    /// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
    /// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterIpv4CidrBlock")]
    pub cluster_ipv4_cidr_block: Option<String>,
    /// The name of the cluster's secondary range used to allocate IP addresses to pods.
    /// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSecondaryRangeName")]
    pub cluster_secondary_range_name: Option<String>,
    /// The IP address range used to allocate IP addresses in this cluster.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    /// Set to blank to have GKE choose a range with the default size.
    /// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
    /// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
    /// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
    /// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicesIpv4CidrBlock")]
    pub services_ipv4_cidr_block: Option<String>,
    /// The name of the services' secondary range used to allocate IP addresses to the cluster.
    /// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
    /// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicesSecondaryRangeName")]
    pub services_secondary_range_name: Option<String>,
    /// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
    /// Defaults to true if the ip_allocation_policy block is present in config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useIpAliases")]
    pub use_ip_aliases: Option<bool>,
}

/// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigPrivateEnvironmentConfig {
    /// When specified, the environment will use Private Service Connect instead of VPC peerings to connect
    /// to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP
    /// address from this subnetwork. This field is supported for Cloud Composer environments in
    /// versions composer-2.*.*-airflow-*.*.* and newer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudComposerConnectionSubnetwork")]
    pub cloud_composer_connection_subnetwork: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudComposerNetworkIpv4CidrBlock")]
    pub cloud_composer_network_ipv4_cidr_block: Option<String>,
    /// The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSqlIpv4CidrBlock")]
    pub cloud_sql_ipv4_cidr_block: Option<String>,
    /// Mode of internal communication within the Composer environment. Must be one
    /// of "VPC_PEERING" or "PRIVATE_SERVICE_CONNECT".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    /// If true, access to the public endpoint of the GKE cluster is denied.
    /// If this field is set to true, the ip_allocation_policy.use_ip_aliases field must
    /// also be set to true for Cloud Composer 1 environments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrivateEndpoint")]
    pub enable_private_endpoint: Option<bool>,
    /// When enabled, IPs from public (non-RFC1918) ranges can be used for
    /// ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrivatelyUsedPublicIps")]
    pub enable_privately_used_public_ips: Option<bool>,
    /// The IP range in CIDR notation to use for the hosted master network. This range is used
    /// for assigning internal IP addresses to the cluster master or set of masters and to the
    /// internal load balancer virtual IP. This range must not overlap with any other ranges
    /// in use within the cluster's network.
    /// If left blank, the default value of is used. See documentation for default values per region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterIpv4CidrBlock")]
    pub master_ipv4_cidr_block: Option<String>,
    /// The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServerIpv4CidrBlock")]
    pub web_server_ipv4_cidr_block: Option<String>,
}

/// The configuration settings for recovery. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigRecoveryConfig {
    /// The recovery configuration settings for the Cloud Composer environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduledSnapshotsConfig")]
    pub scheduled_snapshots_config: Option<EnvironmentStatusAtProviderConfigRecoveryConfigScheduledSnapshotsConfig>,
}

/// The recovery configuration settings for the Cloud Composer environment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigRecoveryConfigScheduledSnapshotsConfig {
    /// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Snapshot schedule, in the unix-cron format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotCreationSchedule")]
    pub snapshot_creation_schedule: Option<String>,
    /// The URI of a bucket folder where to save the snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotLocation")]
    pub snapshot_location: Option<String>,
    /// A time zone for the schedule. This value is a time offset and does not take into account daylight saving time changes. Valid values are from UTC-12 to UTC+12. Examples: UTC, UTC-01, UTC+03.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

/// The configuration settings for software inside the environment.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigSoftwareConfig {
    /// Apache Airflow configuration properties to override. Property keys contain the section and property names,
    /// separated by a hyphen, for example "core-dags_are_paused_at_creation".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "airflowConfigOverrides")]
    pub airflow_config_overrides: Option<HashMap<String, String>>,
    /// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
    /// Environment variable names must match the regular expression [a-zA-Z_][a-zA-Z0-9_]*.
    /// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
    /// AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+), and they cannot match any of the following reserved names:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envVariables")]
    pub env_variables: Option<HashMap<String, String>>,
    /// In Composer 1, use a specific Composer 1 version in this parameter. If omitted, the default is the latest version of Composer 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersion")]
    pub image_version: Option<String>,
    /// Custom Python Package Index (PyPI) packages to be installed
    /// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
    /// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
    /// pinning it to a version specifier, use the empty string as the value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pypiPackages")]
    pub pypi_packages: Option<HashMap<String, String>>,
    /// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
    /// Can be set to '2' or '3'. If not specified, the default is '3'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pythonVersion")]
    pub python_version: Option<String>,
    /// The number of schedulers for Airflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerCount")]
    pub scheduler_count: Option<f64>,
}

/// The configuration settings for the Airflow web server App Engine instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigWebServerConfig {
    /// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
    /// composer-n1-webserver-4 or composer-n1-webserver-8.
    /// Value custom is returned only in response, if Airflow web server parameters were
    /// manually changed to a non-standard values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
}

/// The network-level access control policy for the Airflow web server.
/// If unspecified, no network-level access restrictions are applied.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigWebServerNetworkAccessControl {
    /// A collection of allowed IP ranges with descriptions. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedIpRange")]
    pub allowed_ip_range: Option<Vec<EnvironmentStatusAtProviderConfigWebServerNetworkAccessControlAllowedIpRange>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigWebServerNetworkAccessControlAllowedIpRange {
    /// A description of this ip range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// IP address or range, defined using CIDR notation, of requests that this rule applies to.
    /// Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334.
    /// IP range prefixes should be properly truncated. For example,
    /// 1.2.3.4/24 should be truncated to 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 should be truncated to 2001:db8::/32.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The Kubernetes workloads configuration for GKE cluster associated with the
/// Cloud Composer environment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigWorkloadsConfig {
    /// Configuration for resources used by Airflow schedulers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheduler: Option<EnvironmentStatusAtProviderConfigWorkloadsConfigScheduler>,
    /// Configuration for resources used by Airflow triggerer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub triggerer: Option<EnvironmentStatusAtProviderConfigWorkloadsConfigTriggerer>,
    /// Configuration for resources used by Airflow web server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webServer")]
    pub web_server: Option<EnvironmentStatusAtProviderConfigWorkloadsConfigWebServer>,
    /// Configuration for resources used by Airflow workers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub worker: Option<EnvironmentStatusAtProviderConfigWorkloadsConfigWorker>,
}

/// Configuration for resources used by Airflow schedulers.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigWorkloadsConfigScheduler {
    /// The number of Airflow triggerers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
    /// The amount of storage (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageGb")]
    pub storage_gb: Option<f64>,
}

/// Configuration for resources used by Airflow triggerer.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigWorkloadsConfigTriggerer {
    /// The number of Airflow triggerers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
}

/// Configuration for resources used by Airflow web server.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigWorkloadsConfigWebServer {
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
    /// The amount of storage (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageGb")]
    pub storage_gb: Option<f64>,
}

/// Configuration for resources used by Airflow workers.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderConfigWorkloadsConfigWorker {
    /// The number of CPUs for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    /// The maximum number of Airflow workers that the environment can run. The number of workers in the
    /// environment does not go above this number, even if a higher number of workers is required to
    /// handle the load.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCount")]
    pub max_count: Option<f64>,
    /// The amount of memory (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGb")]
    pub memory_gb: Option<f64>,
    /// The minimum number of Airflow workers that the environment can run. The number of workers in the
    /// environment does not go above this number, even if a lower number of workers can handle the load.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCount")]
    pub min_count: Option<f64>,
    /// The amount of storage (GB) for a single Airflow worker.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageGb")]
    pub storage_gb: Option<f64>,
}

/// Configuration options for storage used by Composer environment. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderStorageConfig {
    /// Name of an existing Cloud Storage bucket to be used by the environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
}


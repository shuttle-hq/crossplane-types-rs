// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// WebACLSpec defines the desired state of WebACL
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "wafregional.aws.upbound.io", version = "v1beta2", kind = "WebACL", plural = "webacls")]
#[kube(status = "WebACLStatus")]
pub struct WebACLSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<WebACLDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: WebACLForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<WebACLInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<WebACLProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<WebACLPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<WebACLWriteConnectionSecretToRef>,
}

/// WebACLSpec defines the desired state of WebACL
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProvider {
    /// The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    pub default_action: Option<WebACLForProviderDefaultAction>,
    /// Configuration block to enable WAF logging. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingConfiguration")]
    pub logging_configuration: Option<WebACLForProviderLoggingConfiguration>,
    /// The name or description for the Amazon CloudWatch metric of this web ACL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// The name or description of the web ACL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Set of configuration blocks containing rules for the web ACL. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<WebACLForProviderRule>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderDefaultAction {
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a ruleE.g., ALLOW, BLOCK or COUNT
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block to enable WAF logging. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderLoggingConfiguration {
    /// Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestination")]
    pub log_destination: Option<String>,
    /// Reference to a DeliveryStream in firehose to populate logDestination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestinationRef")]
    pub log_destination_ref: Option<WebACLForProviderLoggingConfigurationLogDestinationRef>,
    /// Selector for a DeliveryStream in firehose to populate logDestination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestinationSelector")]
    pub log_destination_selector: Option<WebACLForProviderLoggingConfigurationLogDestinationSelector>,
    /// Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redactedFields")]
    pub redacted_fields: Option<WebACLForProviderLoggingConfigurationRedactedFields>,
}

/// Reference to a DeliveryStream in firehose to populate logDestination.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderLoggingConfigurationLogDestinationRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLForProviderLoggingConfigurationLogDestinationRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderLoggingConfigurationLogDestinationRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLForProviderLoggingConfigurationLogDestinationRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLForProviderLoggingConfigurationLogDestinationRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLForProviderLoggingConfigurationLogDestinationRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLForProviderLoggingConfigurationLogDestinationRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DeliveryStream in firehose to populate logDestination.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderLoggingConfigurationLogDestinationSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLForProviderLoggingConfigurationLogDestinationSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderLoggingConfigurationLogDestinationSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLForProviderLoggingConfigurationLogDestinationSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLForProviderLoggingConfigurationLogDestinationSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLForProviderLoggingConfigurationLogDestinationSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLForProviderLoggingConfigurationLogDestinationSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderLoggingConfigurationRedactedFields {
    /// Set of configuration blocks for fields to redact. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldToMatch")]
    pub field_to_match: Option<Vec<WebACLForProviderLoggingConfigurationRedactedFieldsFieldToMatch>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderLoggingConfigurationRedactedFieldsFieldToMatch {
    /// When the value of type is HEADER, enter the name of the header that you want the WAF to search, for example, User-Agent or Referer. If the value of type is any other value, omit data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for action are ALLOW, BLOCK or COUNT. Valid values for override_action are COUNT and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderRule {
    /// Configuration block of the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Not used if type is GROUP. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<WebACLForProviderRuleAction>,
    /// Configuration block of the override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Only used if type is GROUP. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideAction")]
    pub override_action: Option<WebACLForProviderRuleOverrideAction>,
    /// Specifies the order in which the rules in a WebACL are evaluated.
    /// Rules with a lower value are evaluated before rules with a higher value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// ID of the associated WAF (Regional) rule (e.g., aws_wafregional_rule). WAF (Global) rules cannot be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleId")]
    pub rule_id: Option<String>,
    /// Reference to a Rule in wafregional to populate ruleId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleIdRef")]
    pub rule_id_ref: Option<WebACLForProviderRuleRuleIdRef>,
    /// Selector for a Rule in wafregional to populate ruleId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleIdSelector")]
    pub rule_id_selector: Option<WebACLForProviderRuleRuleIdSelector>,
    /// The rule type, either REGULAR, as defined by Rule, RATE_BASED, as defined by RateBasedRule, or GROUP, as defined by RuleGroup. The default is REGULAR. If you add a RATE_BASED rule, you need to set type as RATE_BASED. If you add a GROUP rule, you need to set type as GROUP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block of the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Not used if type is GROUP. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderRuleAction {
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for action are ALLOW, BLOCK or COUNT. Valid values for override_action are COUNT and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block of the override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Only used if type is GROUP. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderRuleOverrideAction {
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for action are ALLOW, BLOCK or COUNT. Valid values for override_action are COUNT and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to a Rule in wafregional to populate ruleId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderRuleRuleIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLForProviderRuleRuleIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderRuleRuleIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLForProviderRuleRuleIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLForProviderRuleRuleIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLForProviderRuleRuleIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLForProviderRuleRuleIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Rule in wafregional to populate ruleId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderRuleRuleIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLForProviderRuleRuleIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLForProviderRuleRuleIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLForProviderRuleRuleIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLForProviderRuleRuleIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLForProviderRuleRuleIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLForProviderRuleRuleIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProvider {
    /// The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    pub default_action: Option<WebACLInitProviderDefaultAction>,
    /// Configuration block to enable WAF logging. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingConfiguration")]
    pub logging_configuration: Option<WebACLInitProviderLoggingConfiguration>,
    /// The name or description for the Amazon CloudWatch metric of this web ACL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// The name or description of the web ACL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Set of configuration blocks containing rules for the web ACL. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<WebACLInitProviderRule>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderDefaultAction {
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a ruleE.g., ALLOW, BLOCK or COUNT
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block to enable WAF logging. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderLoggingConfiguration {
    /// Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestination")]
    pub log_destination: Option<String>,
    /// Reference to a DeliveryStream in firehose to populate logDestination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestinationRef")]
    pub log_destination_ref: Option<WebACLInitProviderLoggingConfigurationLogDestinationRef>,
    /// Selector for a DeliveryStream in firehose to populate logDestination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestinationSelector")]
    pub log_destination_selector: Option<WebACLInitProviderLoggingConfigurationLogDestinationSelector>,
    /// Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redactedFields")]
    pub redacted_fields: Option<WebACLInitProviderLoggingConfigurationRedactedFields>,
}

/// Reference to a DeliveryStream in firehose to populate logDestination.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderLoggingConfigurationLogDestinationRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLInitProviderLoggingConfigurationLogDestinationRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderLoggingConfigurationLogDestinationRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLInitProviderLoggingConfigurationLogDestinationRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLInitProviderLoggingConfigurationLogDestinationRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLInitProviderLoggingConfigurationLogDestinationRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLInitProviderLoggingConfigurationLogDestinationRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DeliveryStream in firehose to populate logDestination.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderLoggingConfigurationLogDestinationSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLInitProviderLoggingConfigurationLogDestinationSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderLoggingConfigurationLogDestinationSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLInitProviderLoggingConfigurationLogDestinationSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLInitProviderLoggingConfigurationLogDestinationSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLInitProviderLoggingConfigurationLogDestinationSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLInitProviderLoggingConfigurationLogDestinationSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderLoggingConfigurationRedactedFields {
    /// Set of configuration blocks for fields to redact. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldToMatch")]
    pub field_to_match: Option<Vec<WebACLInitProviderLoggingConfigurationRedactedFieldsFieldToMatch>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderLoggingConfigurationRedactedFieldsFieldToMatch {
    /// When the value of type is HEADER, enter the name of the header that you want the WAF to search, for example, User-Agent or Referer. If the value of type is any other value, omit data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for action are ALLOW, BLOCK or COUNT. Valid values for override_action are COUNT and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderRule {
    /// Configuration block of the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Not used if type is GROUP. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<WebACLInitProviderRuleAction>,
    /// Configuration block of the override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Only used if type is GROUP. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideAction")]
    pub override_action: Option<WebACLInitProviderRuleOverrideAction>,
    /// Specifies the order in which the rules in a WebACL are evaluated.
    /// Rules with a lower value are evaluated before rules with a higher value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// ID of the associated WAF (Regional) rule (e.g., aws_wafregional_rule). WAF (Global) rules cannot be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleId")]
    pub rule_id: Option<String>,
    /// Reference to a Rule in wafregional to populate ruleId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleIdRef")]
    pub rule_id_ref: Option<WebACLInitProviderRuleRuleIdRef>,
    /// Selector for a Rule in wafregional to populate ruleId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleIdSelector")]
    pub rule_id_selector: Option<WebACLInitProviderRuleRuleIdSelector>,
    /// The rule type, either REGULAR, as defined by Rule, RATE_BASED, as defined by RateBasedRule, or GROUP, as defined by RuleGroup. The default is REGULAR. If you add a RATE_BASED rule, you need to set type as RATE_BASED. If you add a GROUP rule, you need to set type as GROUP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block of the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Not used if type is GROUP. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderRuleAction {
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for action are ALLOW, BLOCK or COUNT. Valid values for override_action are COUNT and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block of the override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Only used if type is GROUP. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderRuleOverrideAction {
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for action are ALLOW, BLOCK or COUNT. Valid values for override_action are COUNT and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to a Rule in wafregional to populate ruleId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderRuleRuleIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLInitProviderRuleRuleIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderRuleRuleIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLInitProviderRuleRuleIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLInitProviderRuleRuleIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLInitProviderRuleRuleIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLInitProviderRuleRuleIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Rule in wafregional to populate ruleId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderRuleRuleIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLInitProviderRuleRuleIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLInitProviderRuleRuleIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLInitProviderRuleRuleIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLInitProviderRuleRuleIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLInitProviderRuleRuleIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLInitProviderRuleRuleIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<WebACLPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<WebACLPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebACLPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebACLPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebACLPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebACLPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// WebACLStatus defines the observed state of WebACL.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<WebACLStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLStatusAtProvider {
    /// Amazon Resource Name (ARN) of the WAF Regional WebACL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    pub default_action: Option<WebACLStatusAtProviderDefaultAction>,
    /// The ID of the WAF Regional WebACL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Configuration block to enable WAF logging. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingConfiguration")]
    pub logging_configuration: Option<WebACLStatusAtProviderLoggingConfiguration>,
    /// The name or description for the Amazon CloudWatch metric of this web ACL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// The name or description of the web ACL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Set of configuration blocks containing rules for the web ACL. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<WebACLStatusAtProviderRule>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

/// The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLStatusAtProviderDefaultAction {
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a ruleE.g., ALLOW, BLOCK or COUNT
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block to enable WAF logging. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLStatusAtProviderLoggingConfiguration {
    /// Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestination")]
    pub log_destination: Option<String>,
    /// Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redactedFields")]
    pub redacted_fields: Option<WebACLStatusAtProviderLoggingConfigurationRedactedFields>,
}

/// Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLStatusAtProviderLoggingConfigurationRedactedFields {
    /// Set of configuration blocks for fields to redact. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldToMatch")]
    pub field_to_match: Option<Vec<WebACLStatusAtProviderLoggingConfigurationRedactedFieldsFieldToMatch>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLStatusAtProviderLoggingConfigurationRedactedFieldsFieldToMatch {
    /// When the value of type is HEADER, enter the name of the header that you want the WAF to search, for example, User-Agent or Referer. If the value of type is any other value, omit data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for action are ALLOW, BLOCK or COUNT. Valid values for override_action are COUNT and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLStatusAtProviderRule {
    /// Configuration block of the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Not used if type is GROUP. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<WebACLStatusAtProviderRuleAction>,
    /// Configuration block of the override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Only used if type is GROUP. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideAction")]
    pub override_action: Option<WebACLStatusAtProviderRuleOverrideAction>,
    /// Specifies the order in which the rules in a WebACL are evaluated.
    /// Rules with a lower value are evaluated before rules with a higher value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// ID of the associated WAF (Regional) rule (e.g., aws_wafregional_rule). WAF (Global) rules cannot be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleId")]
    pub rule_id: Option<String>,
    /// The rule type, either REGULAR, as defined by Rule, RATE_BASED, as defined by RateBasedRule, or GROUP, as defined by RuleGroup. The default is REGULAR. If you add a RATE_BASED rule, you need to set type as RATE_BASED. If you add a GROUP rule, you need to set type as GROUP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block of the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Not used if type is GROUP. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLStatusAtProviderRuleAction {
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for action are ALLOW, BLOCK or COUNT. Valid values for override_action are COUNT and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block of the override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Only used if type is GROUP. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebACLStatusAtProviderRuleOverrideAction {
    /// Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for action are ALLOW, BLOCK or COUNT. Valid values for override_action are COUNT and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}


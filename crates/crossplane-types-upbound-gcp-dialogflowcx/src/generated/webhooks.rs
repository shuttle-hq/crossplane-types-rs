// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// WebhookSpec defines the desired state of Webhook
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "dialogflowcx.gcp.upbound.io", version = "v1beta2", kind = "Webhook", plural = "webhooks")]
#[kube(status = "WebhookStatus")]
pub struct WebhookSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<WebhookDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: WebhookForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<WebhookInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<WebhookProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<WebhookPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<WebhookWriteConnectionSecretToRef>,
}

/// WebhookSpec defines the desired state of Webhook
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookForProvider {
    /// Indicates whether the webhook is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// The human-readable name of the webhook, unique within the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Indicates if automatic spell correction is enabled in detect intent requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSpellCorrection")]
    pub enable_spell_correction: Option<bool>,
    /// Determines whether this agent should log conversation queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStackdriverLogging")]
    pub enable_stackdriver_logging: Option<bool>,
    /// Configuration for a generic web service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericWebService")]
    pub generic_web_service: Option<WebhookForProviderGenericWebService>,
    /// The agent to create a webhook for.
    /// Format: projects//locations//agents/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    /// Reference to a Agent in dialogflowcx to populate parent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentRef")]
    pub parent_ref: Option<WebhookForProviderParentRef>,
    /// Selector for a Agent in dialogflowcx to populate parent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentSelector")]
    pub parent_selector: Option<WebhookForProviderParentSelector>,
    /// Name of the SecuritySettings reference for the agent. Format: projects//locations//securitySettings/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securitySettings")]
    pub security_settings: Option<String>,
    /// Configuration for a Service Directory service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceDirectory")]
    pub service_directory: Option<WebhookForProviderServiceDirectory>,
    /// Webhook execution timeout.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Configuration for a generic web service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookForProviderGenericWebService {
    /// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedCaCerts")]
    pub allowed_ca_certs: Option<Vec<String>>,
    /// The HTTP request headers to send together with webhook requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<HashMap<String, String>>,
    /// Whether to use speech adaptation for speech recognition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Reference to a Agent in dialogflowcx to populate parent.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookForProviderParentRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebhookForProviderParentRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookForProviderParentRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebhookForProviderParentRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebhookForProviderParentRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookForProviderParentRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookForProviderParentRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Agent in dialogflowcx to populate parent.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookForProviderParentSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebhookForProviderParentSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookForProviderParentSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebhookForProviderParentSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebhookForProviderParentSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookForProviderParentSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookForProviderParentSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration for a Service Directory service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookForProviderServiceDirectory {
    /// The name of Service Directory service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericWebService")]
    pub generic_web_service: Option<WebhookForProviderServiceDirectoryGenericWebService>,
    /// The name of Service Directory service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// The name of Service Directory service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookForProviderServiceDirectoryGenericWebService {
    /// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedCaCerts")]
    pub allowed_ca_certs: Option<Vec<String>>,
    /// The HTTP request headers to send together with webhook requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<HashMap<String, String>>,
    /// Whether to use speech adaptation for speech recognition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookInitProvider {
    /// Indicates whether the webhook is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// The human-readable name of the webhook, unique within the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Indicates if automatic spell correction is enabled in detect intent requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSpellCorrection")]
    pub enable_spell_correction: Option<bool>,
    /// Determines whether this agent should log conversation queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStackdriverLogging")]
    pub enable_stackdriver_logging: Option<bool>,
    /// Configuration for a generic web service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericWebService")]
    pub generic_web_service: Option<WebhookInitProviderGenericWebService>,
    /// The agent to create a webhook for.
    /// Format: projects//locations//agents/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    /// Reference to a Agent in dialogflowcx to populate parent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentRef")]
    pub parent_ref: Option<WebhookInitProviderParentRef>,
    /// Selector for a Agent in dialogflowcx to populate parent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentSelector")]
    pub parent_selector: Option<WebhookInitProviderParentSelector>,
    /// Name of the SecuritySettings reference for the agent. Format: projects//locations//securitySettings/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securitySettings")]
    pub security_settings: Option<String>,
    /// Configuration for a Service Directory service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceDirectory")]
    pub service_directory: Option<WebhookInitProviderServiceDirectory>,
    /// Webhook execution timeout.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Configuration for a generic web service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookInitProviderGenericWebService {
    /// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedCaCerts")]
    pub allowed_ca_certs: Option<Vec<String>>,
    /// The HTTP request headers to send together with webhook requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<HashMap<String, String>>,
    /// Whether to use speech adaptation for speech recognition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Reference to a Agent in dialogflowcx to populate parent.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookInitProviderParentRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebhookInitProviderParentRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookInitProviderParentRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebhookInitProviderParentRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebhookInitProviderParentRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookInitProviderParentRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookInitProviderParentRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Agent in dialogflowcx to populate parent.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookInitProviderParentSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebhookInitProviderParentSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookInitProviderParentSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebhookInitProviderParentSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebhookInitProviderParentSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookInitProviderParentSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookInitProviderParentSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration for a Service Directory service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookInitProviderServiceDirectory {
    /// The name of Service Directory service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericWebService")]
    pub generic_web_service: Option<WebhookInitProviderServiceDirectoryGenericWebService>,
    /// The name of Service Directory service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// The name of Service Directory service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookInitProviderServiceDirectoryGenericWebService {
    /// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedCaCerts")]
    pub allowed_ca_certs: Option<Vec<String>>,
    /// The HTTP request headers to send together with webhook requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<HashMap<String, String>>,
    /// Whether to use speech adaptation for speech recognition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebhookProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebhookProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebhookProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<WebhookPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<WebhookPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WebhookPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WebhookPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WebhookPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WebhookPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// WebhookStatus defines the observed state of Webhook.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<WebhookStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookStatusAtProvider {
    /// Indicates whether the webhook is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// The human-readable name of the webhook, unique within the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Indicates if automatic spell correction is enabled in detect intent requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSpellCorrection")]
    pub enable_spell_correction: Option<bool>,
    /// Determines whether this agent should log conversation queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStackdriverLogging")]
    pub enable_stackdriver_logging: Option<bool>,
    /// Configuration for a generic web service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericWebService")]
    pub generic_web_service: Option<WebhookStatusAtProviderGenericWebService>,
    /// an identifier for the resource with format {{parent}}/webhooks/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The unique identifier of the webhook.
    /// Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The agent to create a webhook for.
    /// Format: projects//locations//agents/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    /// Name of the SecuritySettings reference for the agent. Format: projects//locations//securitySettings/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securitySettings")]
    pub security_settings: Option<String>,
    /// Configuration for a Service Directory service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceDirectory")]
    pub service_directory: Option<WebhookStatusAtProviderServiceDirectory>,
    /// Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only be deleted by deleting the agent. Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startFlow")]
    pub start_flow: Option<String>,
    /// Webhook execution timeout.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Configuration for a generic web service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookStatusAtProviderGenericWebService {
    /// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedCaCerts")]
    pub allowed_ca_certs: Option<Vec<String>>,
    /// The HTTP request headers to send together with webhook requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<HashMap<String, String>>,
    /// Whether to use speech adaptation for speech recognition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Configuration for a Service Directory service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookStatusAtProviderServiceDirectory {
    /// The name of Service Directory service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericWebService")]
    pub generic_web_service: Option<WebhookStatusAtProviderServiceDirectoryGenericWebService>,
    /// The name of Service Directory service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// The name of Service Directory service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WebhookStatusAtProviderServiceDirectoryGenericWebService {
    /// Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedCaCerts")]
    pub allowed_ca_certs: Option<Vec<String>>,
    /// The HTTP request headers to send together with webhook requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<HashMap<String, String>>,
    /// Whether to use speech adaptation for speech recognition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PageSpec defines the desired state of Page
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "dialogflowcx.gcp.upbound.io", version = "v1beta2", kind = "Page", plural = "pages")]
#[kube(status = "PageStatus")]
pub struct PageSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<PageDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PageForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<PageInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<PageProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<PagePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<PageWriteConnectionSecretToRef>,
}

/// PageSpec defines the desired state of Page
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProvider {
    /// Hierarchical advanced settings for this page. The settings exposed at the lower level overrides the settings exposed at the higher level.
    /// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedSettings")]
    pub advanced_settings: Option<PageForProviderAdvancedSettings>,
    /// The human-readable name of the page, unique within the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The fulfillment to call when the session is entering the page.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryFulfillment")]
    pub entry_fulfillment: Option<PageForProviderEntryFulfillment>,
    /// Handlers associated with the page to handle events such as webhook errors, no match or no input.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventHandlers")]
    pub event_handlers: Option<Vec<PageForProviderEventHandlers>>,
    /// The form associated with the page, used for collecting parameters relevant to the page.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub form: Option<PageForProviderForm>,
    /// The language of the following fields in page:
    /// Page.entry_fulfillment.messages
    /// Page.entry_fulfillment.conditional_cases
    /// Page.event_handlers.trigger_fulfillment.messages
    /// Page.event_handlers.trigger_fulfillment.conditional_cases
    /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
    /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
    /// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
    /// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
    /// Page.transition_routes.trigger_fulfillment.messages
    /// Page.transition_routes.trigger_fulfillment.conditional_cases
    /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "languageCode")]
    pub language_code: Option<String>,
    /// The flow to create a page for.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    /// Reference to a Agent in dialogflowcx to populate parent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentRef")]
    pub parent_ref: Option<PageForProviderParentRef>,
    /// Selector for a Agent in dialogflowcx to populate parent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentSelector")]
    pub parent_selector: Option<PageForProviderParentSelector>,
    /// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
    /// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes.
    /// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
    /// Format:projects//locations//agents//flows//transitionRouteGroups/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitionRouteGroups")]
    pub transition_route_groups: Option<Vec<String>>,
    /// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
    /// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
    /// TransitionRoutes defined in the page with intent specified.
    /// TransitionRoutes defined in the transition route groups with intent specified.
    /// TransitionRoutes defined in flow with intent specified.
    /// TransitionRoutes defined in the transition route groups with intent specified.
    /// TransitionRoutes defined in the page with only condition specified.
    /// TransitionRoutes defined in the transition route groups with only condition specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitionRoutes")]
    pub transition_routes: Option<Vec<PageForProviderTransitionRoutes>>,
}

/// Hierarchical advanced settings for this page. The settings exposed at the lower level overrides the settings exposed at the higher level.
/// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderAdvancedSettings {
    /// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dtmfSettings")]
    pub dtmf_settings: Option<PageForProviderAdvancedSettingsDtmfSettings>,
}

/// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderAdvancedSettingsDtmfSettings {
    /// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The digit that terminates a DTMF digit sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finishDigit")]
    pub finish_digit: Option<String>,
    /// Max length of DTMF digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDigits")]
    pub max_digits: Option<f64>,
}

/// The fulfillment to call when the session is entering the page.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageForProviderEntryFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageForProviderEntryFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageForProviderEntryFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageForProviderEntryFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageForProviderEntryFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageForProviderEntryFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageForProviderEntryFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageForProviderEntryFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageForProviderEntryFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEntryFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlers {
    /// The name of the event to handle.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    /// The target flow to transition to.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlow")]
    pub target_flow: Option<String>,
    /// The target page to transition to.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPage")]
    pub target_page: Option<String>,
    /// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerFulfillment")]
    pub trigger_fulfillment: Option<PageForProviderEventHandlersTriggerFulfillment>,
}

/// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageForProviderEventHandlersTriggerFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageForProviderEventHandlersTriggerFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageForProviderEventHandlersTriggerFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageForProviderEventHandlersTriggerFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageForProviderEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageForProviderEventHandlersTriggerFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageForProviderEventHandlersTriggerFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageForProviderEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageForProviderEventHandlersTriggerFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderEventHandlersTriggerFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The form associated with the page, used for collecting parameters relevant to the page.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderForm {
    /// Parameters to collect from the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<PageForProviderFormParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParameters {
    /// Hierarchical advanced settings for this parameter. The settings exposed at the lower level overrides the settings exposed at the higher level.
    /// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedSettings")]
    pub advanced_settings: Option<PageForProviderFormParametersAdvancedSettings>,
    /// The default value of an optional parameter. If the parameter is required, the default value will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    /// The human-readable name of the parameter, unique within the form.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The entity type of the parameter.
    /// Format: projects/-/locations/-/agents/-/entityTypes/ for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects//locations//agents//entityTypes/ for developer entity types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityType")]
    pub entity_type: Option<String>,
    /// Defines fill behavior for the parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillBehavior")]
    pub fill_behavior: Option<PageForProviderFormParametersFillBehavior>,
    /// Indicates whether the parameter represents a list of values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isList")]
    pub is_list: Option<bool>,
    /// Indicates whether the parameter content should be redacted in log.
    /// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redact: Option<bool>,
    /// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
    /// Required parameters must be filled before form filling concludes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
}

/// Hierarchical advanced settings for this parameter. The settings exposed at the lower level overrides the settings exposed at the higher level.
/// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersAdvancedSettings {
    /// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dtmfSettings")]
    pub dtmf_settings: Option<PageForProviderFormParametersAdvancedSettingsDtmfSettings>,
}

/// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersAdvancedSettingsDtmfSettings {
    /// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The digit that terminates a DTMF digit sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finishDigit")]
    pub finish_digit: Option<String>,
    /// Max length of DTMF digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDigits")]
    pub max_digits: Option<f64>,
}

/// Defines fill behavior for the parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehavior {
    /// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialPromptFulfillment")]
    pub initial_prompt_fulfillment: Option<PageForProviderFormParametersFillBehaviorInitialPromptFulfillment>,
    /// The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repromptEventHandlers")]
    pub reprompt_event_handlers: Option<Vec<PageForProviderFormParametersFillBehaviorRepromptEventHandlers>>,
}

/// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlers {
    /// The name of the event to handle.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    /// The target flow to transition to.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlow")]
    pub target_flow: Option<String>,
    /// Reference to a Agent in dialogflowcx to populate targetFlow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlowRef")]
    pub target_flow_ref: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRef>,
    /// Selector for a Agent in dialogflowcx to populate targetFlow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlowSelector")]
    pub target_flow_selector: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelector>,
    /// The target page to transition to.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPage")]
    pub target_page: Option<String>,
    /// Reference to a Page in dialogflowcx to populate targetPage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPageRef")]
    pub target_page_ref: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRef>,
    /// Selector for a Page in dialogflowcx to populate targetPage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPageSelector")]
    pub target_page_selector: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelector>,
    /// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerFulfillment")]
    pub trigger_fulfillment: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillment>,
}

/// Reference to a Agent in dialogflowcx to populate targetFlow.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Agent in dialogflowcx to populate targetFlow.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Page in dialogflowcx to populate targetPage.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Page in dialogflowcx to populate targetPage.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
    /// Reference to a Webhook in dialogflowcx to populate webhook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webhookRef")]
    pub webhook_ref: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRef>,
    /// Selector for a Webhook in dialogflowcx to populate webhook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webhookSelector")]
    pub webhook_selector: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Reference to a Webhook in dialogflowcx to populate webhook.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Webhook in dialogflowcx to populate webhook.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Agent in dialogflowcx to populate parent.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderParentRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderParentRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderParentRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderParentRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderParentRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderParentRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderParentRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Agent in dialogflowcx to populate parent.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderParentSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderParentSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderParentSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderParentSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderParentSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderParentSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderParentSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutes {
    /// The condition to evaluate against form parameters or session parameters.
    /// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    /// The unique identifier of an Intent.
    /// Format: projects//locations//agents//intents/. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub intent: Option<String>,
    /// The target flow to transition to.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlow")]
    pub target_flow: Option<String>,
    /// The target page to transition to.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPage")]
    pub target_page: Option<String>,
    /// Reference to a Page in dialogflowcx to populate targetPage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPageRef")]
    pub target_page_ref: Option<PageForProviderTransitionRoutesTargetPageRef>,
    /// Selector for a Page in dialogflowcx to populate targetPage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPageSelector")]
    pub target_page_selector: Option<PageForProviderTransitionRoutesTargetPageSelector>,
    /// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerFulfillment")]
    pub trigger_fulfillment: Option<PageForProviderTransitionRoutesTriggerFulfillment>,
}

/// Reference to a Page in dialogflowcx to populate targetPage.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTargetPageRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderTransitionRoutesTargetPageRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTargetPageRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderTransitionRoutesTargetPageRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderTransitionRoutesTargetPageRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderTransitionRoutesTargetPageRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderTransitionRoutesTargetPageRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Page in dialogflowcx to populate targetPage.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTargetPageSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageForProviderTransitionRoutesTargetPageSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTargetPageSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageForProviderTransitionRoutesTargetPageSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageForProviderTransitionRoutesTargetPageSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderTransitionRoutesTargetPageSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageForProviderTransitionRoutesTargetPageSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageForProviderTransitionRoutesTriggerFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageForProviderTransitionRoutesTriggerFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageForProviderTransitionRoutesTriggerFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageForProviderTransitionRoutesTriggerFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageForProviderTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageForProviderTransitionRoutesTriggerFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageForProviderTransitionRoutesTriggerFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageForProviderTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageForProviderTransitionRoutesTriggerFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageForProviderTransitionRoutesTriggerFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProvider {
    /// Hierarchical advanced settings for this page. The settings exposed at the lower level overrides the settings exposed at the higher level.
    /// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedSettings")]
    pub advanced_settings: Option<PageInitProviderAdvancedSettings>,
    /// The human-readable name of the page, unique within the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The fulfillment to call when the session is entering the page.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryFulfillment")]
    pub entry_fulfillment: Option<PageInitProviderEntryFulfillment>,
    /// Handlers associated with the page to handle events such as webhook errors, no match or no input.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventHandlers")]
    pub event_handlers: Option<Vec<PageInitProviderEventHandlers>>,
    /// The form associated with the page, used for collecting parameters relevant to the page.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub form: Option<PageInitProviderForm>,
    /// The language of the following fields in page:
    /// Page.entry_fulfillment.messages
    /// Page.entry_fulfillment.conditional_cases
    /// Page.event_handlers.trigger_fulfillment.messages
    /// Page.event_handlers.trigger_fulfillment.conditional_cases
    /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
    /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
    /// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
    /// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
    /// Page.transition_routes.trigger_fulfillment.messages
    /// Page.transition_routes.trigger_fulfillment.conditional_cases
    /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "languageCode")]
    pub language_code: Option<String>,
    /// The flow to create a page for.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    /// Reference to a Agent in dialogflowcx to populate parent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentRef")]
    pub parent_ref: Option<PageInitProviderParentRef>,
    /// Selector for a Agent in dialogflowcx to populate parent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentSelector")]
    pub parent_selector: Option<PageInitProviderParentSelector>,
    /// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
    /// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes.
    /// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
    /// Format:projects//locations//agents//flows//transitionRouteGroups/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitionRouteGroups")]
    pub transition_route_groups: Option<Vec<String>>,
    /// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
    /// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
    /// TransitionRoutes defined in the page with intent specified.
    /// TransitionRoutes defined in the transition route groups with intent specified.
    /// TransitionRoutes defined in flow with intent specified.
    /// TransitionRoutes defined in the transition route groups with intent specified.
    /// TransitionRoutes defined in the page with only condition specified.
    /// TransitionRoutes defined in the transition route groups with only condition specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitionRoutes")]
    pub transition_routes: Option<Vec<PageInitProviderTransitionRoutes>>,
}

/// Hierarchical advanced settings for this page. The settings exposed at the lower level overrides the settings exposed at the higher level.
/// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderAdvancedSettings {
    /// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dtmfSettings")]
    pub dtmf_settings: Option<PageInitProviderAdvancedSettingsDtmfSettings>,
}

/// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderAdvancedSettingsDtmfSettings {
    /// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The digit that terminates a DTMF digit sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finishDigit")]
    pub finish_digit: Option<String>,
    /// Max length of DTMF digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDigits")]
    pub max_digits: Option<f64>,
}

/// The fulfillment to call when the session is entering the page.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageInitProviderEntryFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageInitProviderEntryFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageInitProviderEntryFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageInitProviderEntryFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageInitProviderEntryFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageInitProviderEntryFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageInitProviderEntryFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageInitProviderEntryFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageInitProviderEntryFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEntryFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlers {
    /// The name of the event to handle.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    /// The target flow to transition to.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlow")]
    pub target_flow: Option<String>,
    /// The target page to transition to.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPage")]
    pub target_page: Option<String>,
    /// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerFulfillment")]
    pub trigger_fulfillment: Option<PageInitProviderEventHandlersTriggerFulfillment>,
}

/// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageInitProviderEventHandlersTriggerFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageInitProviderEventHandlersTriggerFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageInitProviderEventHandlersTriggerFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageInitProviderEventHandlersTriggerFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageInitProviderEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageInitProviderEventHandlersTriggerFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageInitProviderEventHandlersTriggerFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageInitProviderEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageInitProviderEventHandlersTriggerFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderEventHandlersTriggerFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The form associated with the page, used for collecting parameters relevant to the page.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderForm {
    /// Parameters to collect from the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<PageInitProviderFormParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParameters {
    /// Hierarchical advanced settings for this parameter. The settings exposed at the lower level overrides the settings exposed at the higher level.
    /// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedSettings")]
    pub advanced_settings: Option<PageInitProviderFormParametersAdvancedSettings>,
    /// The default value of an optional parameter. If the parameter is required, the default value will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    /// The human-readable name of the parameter, unique within the form.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The entity type of the parameter.
    /// Format: projects/-/locations/-/agents/-/entityTypes/ for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects//locations//agents//entityTypes/ for developer entity types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityType")]
    pub entity_type: Option<String>,
    /// Defines fill behavior for the parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillBehavior")]
    pub fill_behavior: Option<PageInitProviderFormParametersFillBehavior>,
    /// Indicates whether the parameter represents a list of values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isList")]
    pub is_list: Option<bool>,
    /// Indicates whether the parameter content should be redacted in log.
    /// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redact: Option<bool>,
    /// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
    /// Required parameters must be filled before form filling concludes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
}

/// Hierarchical advanced settings for this parameter. The settings exposed at the lower level overrides the settings exposed at the higher level.
/// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersAdvancedSettings {
    /// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dtmfSettings")]
    pub dtmf_settings: Option<PageInitProviderFormParametersAdvancedSettingsDtmfSettings>,
}

/// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersAdvancedSettingsDtmfSettings {
    /// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The digit that terminates a DTMF digit sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finishDigit")]
    pub finish_digit: Option<String>,
    /// Max length of DTMF digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDigits")]
    pub max_digits: Option<f64>,
}

/// Defines fill behavior for the parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehavior {
    /// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialPromptFulfillment")]
    pub initial_prompt_fulfillment: Option<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillment>,
    /// The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repromptEventHandlers")]
    pub reprompt_event_handlers: Option<Vec<PageInitProviderFormParametersFillBehaviorRepromptEventHandlers>>,
}

/// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlers {
    /// The name of the event to handle.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    /// The target flow to transition to.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlow")]
    pub target_flow: Option<String>,
    /// Reference to a Agent in dialogflowcx to populate targetFlow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlowRef")]
    pub target_flow_ref: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRef>,
    /// Selector for a Agent in dialogflowcx to populate targetFlow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlowSelector")]
    pub target_flow_selector: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelector>,
    /// The target page to transition to.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPage")]
    pub target_page: Option<String>,
    /// Reference to a Page in dialogflowcx to populate targetPage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPageRef")]
    pub target_page_ref: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRef>,
    /// Selector for a Page in dialogflowcx to populate targetPage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPageSelector")]
    pub target_page_selector: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelector>,
    /// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerFulfillment")]
    pub trigger_fulfillment: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillment>,
}

/// Reference to a Agent in dialogflowcx to populate targetFlow.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Agent in dialogflowcx to populate targetFlow.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetFlowSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Page in dialogflowcx to populate targetPage.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Page in dialogflowcx to populate targetPage.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTargetPageSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
    /// Reference to a Webhook in dialogflowcx to populate webhook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webhookRef")]
    pub webhook_ref: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRef>,
    /// Selector for a Webhook in dialogflowcx to populate webhook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webhookSelector")]
    pub webhook_selector: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Reference to a Webhook in dialogflowcx to populate webhook.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Webhook in dialogflowcx to populate webhook.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentWebhookSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Agent in dialogflowcx to populate parent.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderParentRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderParentRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderParentRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderParentRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderParentRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderParentRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderParentRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Agent in dialogflowcx to populate parent.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderParentSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderParentSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderParentSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderParentSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderParentSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderParentSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderParentSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutes {
    /// The condition to evaluate against form parameters or session parameters.
    /// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    /// The unique identifier of an Intent.
    /// Format: projects//locations//agents//intents/. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub intent: Option<String>,
    /// The target flow to transition to.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlow")]
    pub target_flow: Option<String>,
    /// The target page to transition to.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPage")]
    pub target_page: Option<String>,
    /// Reference to a Page in dialogflowcx to populate targetPage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPageRef")]
    pub target_page_ref: Option<PageInitProviderTransitionRoutesTargetPageRef>,
    /// Selector for a Page in dialogflowcx to populate targetPage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPageSelector")]
    pub target_page_selector: Option<PageInitProviderTransitionRoutesTargetPageSelector>,
    /// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerFulfillment")]
    pub trigger_fulfillment: Option<PageInitProviderTransitionRoutesTriggerFulfillment>,
}

/// Reference to a Page in dialogflowcx to populate targetPage.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTargetPageRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderTransitionRoutesTargetPageRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTargetPageRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderTransitionRoutesTargetPageRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderTransitionRoutesTargetPageRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderTransitionRoutesTargetPageRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderTransitionRoutesTargetPageRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Page in dialogflowcx to populate targetPage.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTargetPageSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageInitProviderTransitionRoutesTargetPageSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTargetPageSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageInitProviderTransitionRoutesTargetPageSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageInitProviderTransitionRoutesTargetPageSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderTransitionRoutesTargetPageSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageInitProviderTransitionRoutesTargetPageSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageInitProviderTransitionRoutesTriggerFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageInitProviderTransitionRoutesTriggerFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageInitProviderTransitionRoutesTriggerFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageInitProviderTransitionRoutesTriggerFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageInitProviderTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageInitProviderTransitionRoutesTriggerFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageInitProviderTransitionRoutesTriggerFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageInitProviderTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageInitProviderTransitionRoutesTriggerFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillmentMessagesOutputAudioText {
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillmentMessagesPlayAudio {
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillmentMessagesText {
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageInitProviderTransitionRoutesTriggerFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PageProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PageProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PageProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PageProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PagePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<PagePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PagePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PagePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PagePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PagePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PagePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PagePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PagePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PagePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PagePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PageStatus defines the observed state of Page.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<PageStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProvider {
    /// Hierarchical advanced settings for this page. The settings exposed at the lower level overrides the settings exposed at the higher level.
    /// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedSettings")]
    pub advanced_settings: Option<PageStatusAtProviderAdvancedSettings>,
    /// The human-readable name of the page, unique within the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The fulfillment to call when the session is entering the page.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryFulfillment")]
    pub entry_fulfillment: Option<PageStatusAtProviderEntryFulfillment>,
    /// Handlers associated with the page to handle events such as webhook errors, no match or no input.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventHandlers")]
    pub event_handlers: Option<Vec<PageStatusAtProviderEventHandlers>>,
    /// The form associated with the page, used for collecting parameters relevant to the page.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub form: Option<PageStatusAtProviderForm>,
    /// an identifier for the resource with format {{parent}}/pages/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The language of the following fields in page:
    /// Page.entry_fulfillment.messages
    /// Page.entry_fulfillment.conditional_cases
    /// Page.event_handlers.trigger_fulfillment.messages
    /// Page.event_handlers.trigger_fulfillment.conditional_cases
    /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
    /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
    /// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
    /// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
    /// Page.transition_routes.trigger_fulfillment.messages
    /// Page.transition_routes.trigger_fulfillment.conditional_cases
    /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "languageCode")]
    pub language_code: Option<String>,
    /// The unique identifier of the page.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The flow to create a page for.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    /// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
    /// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes.
    /// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
    /// Format:projects//locations//agents//flows//transitionRouteGroups/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitionRouteGroups")]
    pub transition_route_groups: Option<Vec<String>>,
    /// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
    /// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
    /// TransitionRoutes defined in the page with intent specified.
    /// TransitionRoutes defined in the transition route groups with intent specified.
    /// TransitionRoutes defined in flow with intent specified.
    /// TransitionRoutes defined in the transition route groups with intent specified.
    /// TransitionRoutes defined in the page with only condition specified.
    /// TransitionRoutes defined in the transition route groups with only condition specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitionRoutes")]
    pub transition_routes: Option<Vec<PageStatusAtProviderTransitionRoutes>>,
}

/// Hierarchical advanced settings for this page. The settings exposed at the lower level overrides the settings exposed at the higher level.
/// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderAdvancedSettings {
    /// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dtmfSettings")]
    pub dtmf_settings: Option<PageStatusAtProviderAdvancedSettingsDtmfSettings>,
}

/// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderAdvancedSettingsDtmfSettings {
    /// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The digit that terminates a DTMF digit sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finishDigit")]
    pub finish_digit: Option<String>,
    /// Max length of DTMF digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDigits")]
    pub max_digits: Option<f64>,
}

/// The fulfillment to call when the session is entering the page.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageStatusAtProviderEntryFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageStatusAtProviderEntryFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageStatusAtProviderEntryFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageStatusAtProviderEntryFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageStatusAtProviderEntryFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageStatusAtProviderEntryFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageStatusAtProviderEntryFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageStatusAtProviderEntryFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageStatusAtProviderEntryFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillmentMessagesOutputAudioText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillmentMessagesPlayAudio {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillmentMessagesText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEntryFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlers {
    /// The name of the event to handle.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    /// (Output)
    /// The unique identifier of this event handler.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The target flow to transition to.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlow")]
    pub target_flow: Option<String>,
    /// The target page to transition to.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPage")]
    pub target_page: Option<String>,
    /// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerFulfillment")]
    pub trigger_fulfillment: Option<PageStatusAtProviderEventHandlersTriggerFulfillment>,
}

/// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageStatusAtProviderEventHandlersTriggerFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageStatusAtProviderEventHandlersTriggerFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageStatusAtProviderEventHandlersTriggerFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesOutputAudioText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesPlayAudio {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillmentMessagesText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderEventHandlersTriggerFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The form associated with the page, used for collecting parameters relevant to the page.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderForm {
    /// Parameters to collect from the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<PageStatusAtProviderFormParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParameters {
    /// Hierarchical advanced settings for this parameter. The settings exposed at the lower level overrides the settings exposed at the higher level.
    /// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedSettings")]
    pub advanced_settings: Option<PageStatusAtProviderFormParametersAdvancedSettings>,
    /// The default value of an optional parameter. If the parameter is required, the default value will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    /// The human-readable name of the parameter, unique within the form.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The entity type of the parameter.
    /// Format: projects/-/locations/-/agents/-/entityTypes/ for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects//locations//agents//entityTypes/ for developer entity types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityType")]
    pub entity_type: Option<String>,
    /// Defines fill behavior for the parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillBehavior")]
    pub fill_behavior: Option<PageStatusAtProviderFormParametersFillBehavior>,
    /// Indicates whether the parameter represents a list of values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isList")]
    pub is_list: Option<bool>,
    /// Indicates whether the parameter content should be redacted in log.
    /// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redact: Option<bool>,
    /// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
    /// Required parameters must be filled before form filling concludes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
}

/// Hierarchical advanced settings for this parameter. The settings exposed at the lower level overrides the settings exposed at the higher level.
/// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersAdvancedSettings {
    /// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dtmfSettings")]
    pub dtmf_settings: Option<PageStatusAtProviderFormParametersAdvancedSettingsDtmfSettings>,
}

/// Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersAdvancedSettingsDtmfSettings {
    /// If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The digit that terminates a DTMF digit sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finishDigit")]
    pub finish_digit: Option<String>,
    /// Max length of DTMF digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDigits")]
    pub max_digits: Option<f64>,
}

/// Defines fill behavior for the parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehavior {
    /// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialPromptFulfillment")]
    pub initial_prompt_fulfillment: Option<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillment>,
    /// The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repromptEventHandlers")]
    pub reprompt_event_handlers: Option<Vec<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlers>>,
}

/// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudio {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentMessagesText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlers {
    /// The name of the event to handle.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    /// (Output)
    /// The unique identifier of this transition route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The target flow to transition to.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlow")]
    pub target_flow: Option<String>,
    /// The target page to transition to.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPage")]
    pub target_page: Option<String>,
    /// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerFulfillment")]
    pub trigger_fulfillment: Option<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillment>,
}

/// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudio {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutes {
    /// The condition to evaluate against form parameters or session parameters.
    /// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    /// The unique identifier of an Intent.
    /// Format: projects//locations//agents//intents/. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub intent: Option<String>,
    /// (Output)
    /// The unique identifier of this transition route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The target flow to transition to.
    /// Format: projects//locations//agents//flows/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetFlow")]
    pub target_flow: Option<String>,
    /// The target page to transition to.
    /// Format: projects//locations//agents//flows//pages/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPage")]
    pub target_page: Option<String>,
    /// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerFulfillment")]
    pub trigger_fulfillment: Option<PageStatusAtProviderTransitionRoutesTriggerFulfillment>,
}

/// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillment {
    /// Conditional cases for this fulfillment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalCases")]
    pub conditional_cases: Option<Vec<PageStatusAtProviderTransitionRoutesTriggerFulfillmentConditionalCases>>,
    /// The list of rich message responses to present to the user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessages>>,
    /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPartialResponses")]
    pub return_partial_responses: Option<bool>,
    /// Set parameter values before executing the webhook.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setParameterActions")]
    pub set_parameter_actions: Option<Vec<PageStatusAtProviderTransitionRoutesTriggerFulfillmentSetParameterActions>>,
    /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// The webhook to call. Format: projects//locations//agents//webhooks/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillmentConditionalCases {
    /// A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
    /// See Case for the schema.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cases: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessages {
    /// The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
    /// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conversationSuccess")]
    pub conversation_success: Option<PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesConversationSuccess>,
    /// Indicates that the conversation should be handed off to a live agent.
    /// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
    /// You may set this, for example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveAgentHandoff")]
    pub live_agent_handoff: Option<PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff>,
    /// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputAudioText")]
    pub output_audio_text: Option<PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesOutputAudioText>,
    /// A custom, platform-specific payload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// Specifies an audio clip to be played by the client as part of the response.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "playAudio")]
    pub play_audio: Option<PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesPlayAudio>,
    /// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telephonyTransferCall")]
    pub telephony_transfer_call: Option<PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesText>,
}

/// Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
/// Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesConversationSuccess {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// Indicates that the conversation should be handed off to a live agent.
/// Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
/// You may set this, for example:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff {
    /// Custom metadata. Dialogflow doesn't impose any structure on this.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}

/// A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesOutputAudioText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// The SSML text to be synthesized. For more information, see SSML.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Specifies an audio clip to be played by the client as part of the response.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesPlayAudio {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioUri")]
    pub audio_uri: Option<String>,
}

/// Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall {
    /// Transfer the call to a phone number in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
}

/// A collection of text responses.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillmentMessagesText {
    /// (Output)
    /// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPlaybackInterruption")]
    pub allow_playback_interruption: Option<bool>,
    /// A collection of text responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PageStatusAtProviderTransitionRoutesTriggerFulfillmentSetParameterActions {
    /// Display name of the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
    /// The new JSON-encoded value of the parameter. A null value clears the parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}


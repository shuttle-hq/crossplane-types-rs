// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DataCatalogEncryptionSettingsSpec defines the desired state of DataCatalogEncryptionSettings
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "glue.aws.upbound.io", version = "v1beta2", kind = "DataCatalogEncryptionSettings", plural = "datacatalogencryptionsettings")]
#[kube(status = "DataCatalogEncryptionSettingsStatus")]
pub struct DataCatalogEncryptionSettingsSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<DataCatalogEncryptionSettingsDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DataCatalogEncryptionSettingsForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<DataCatalogEncryptionSettingsInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<DataCatalogEncryptionSettingsProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<DataCatalogEncryptionSettingsPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<DataCatalogEncryptionSettingsWriteConnectionSecretToRef>,
}

/// DataCatalogEncryptionSettingsSpec defines the desired state of DataCatalogEncryptionSettings
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProvider {
    /// –  The ID of the Data Catalog to set the security configuration for. If none is provided, the AWS account ID is used by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    pub catalog_id: Option<String>,
    /// –  The security configuration to set. see Data Catalog Encryption Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCatalogEncryptionSettings")]
    pub data_catalog_encryption_settings: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettings>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// –  The security configuration to set. see Data Catalog Encryption Settings.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettings {
    /// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPasswordEncryption")]
    pub connection_password_encryption: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryption>,
    /// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionAtRest")]
    pub encryption_at_rest: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRest>,
}

/// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryption {
    /// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least kms:Encrypt permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKmsKeyId")]
    pub aws_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate awsKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKmsKeyIdRef")]
    pub aws_kms_key_id_ref: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRef>,
    /// Selector for a Key in kms to populate awsKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKmsKeyIdSelector")]
    pub aws_kms_key_id_selector: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelector>,
    /// When set to true, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnConnectionPasswordEncrypted")]
    pub return_connection_password_encrypted: Option<bool>,
}

/// Reference to a Key in kms to populate awsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate awsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRest {
    /// The encryption-at-rest mode for encrypting Data Catalog data. Valid values: DISABLED, SSE-KMS, SSE-KMS-WITH-SERVICE-ROLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogEncryptionMode")]
    pub catalog_encryption_mode: Option<String>,
    /// The ARN of the AWS IAM role used for accessing encrypted Data Catalog data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogEncryptionServiceRole")]
    pub catalog_encryption_service_role: Option<String>,
    /// The ARN of the AWS KMS key to use for encryption at rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseAwsKmsKeyId")]
    pub sse_aws_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate sseAwsKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseAwsKmsKeyIdRef")]
    pub sse_aws_kms_key_id_ref: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRef>,
    /// Selector for a Key in kms to populate sseAwsKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseAwsKmsKeyIdSelector")]
    pub sse_aws_kms_key_id_selector: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelector>,
}

/// Reference to a Key in kms to populate sseAwsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate sseAwsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsForProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProvider {
    /// –  The ID of the Data Catalog to set the security configuration for. If none is provided, the AWS account ID is used by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    pub catalog_id: Option<String>,
    /// –  The security configuration to set. see Data Catalog Encryption Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCatalogEncryptionSettings")]
    pub data_catalog_encryption_settings: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettings>,
}

/// –  The security configuration to set. see Data Catalog Encryption Settings.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettings {
    /// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPasswordEncryption")]
    pub connection_password_encryption: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryption>,
    /// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionAtRest")]
    pub encryption_at_rest: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRest>,
}

/// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryption {
    /// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least kms:Encrypt permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKmsKeyId")]
    pub aws_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate awsKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKmsKeyIdRef")]
    pub aws_kms_key_id_ref: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRef>,
    /// Selector for a Key in kms to populate awsKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKmsKeyIdSelector")]
    pub aws_kms_key_id_selector: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelector>,
    /// When set to true, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnConnectionPasswordEncrypted")]
    pub return_connection_password_encrypted: Option<bool>,
}

/// Reference to a Key in kms to populate awsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate awsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsConnectionPasswordEncryptionAwsKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRest {
    /// The encryption-at-rest mode for encrypting Data Catalog data. Valid values: DISABLED, SSE-KMS, SSE-KMS-WITH-SERVICE-ROLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogEncryptionMode")]
    pub catalog_encryption_mode: Option<String>,
    /// The ARN of the AWS IAM role used for accessing encrypted Data Catalog data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogEncryptionServiceRole")]
    pub catalog_encryption_service_role: Option<String>,
    /// The ARN of the AWS KMS key to use for encryption at rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseAwsKmsKeyId")]
    pub sse_aws_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate sseAwsKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseAwsKmsKeyIdRef")]
    pub sse_aws_kms_key_id_ref: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRef>,
    /// Selector for a Key in kms to populate sseAwsKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseAwsKmsKeyIdSelector")]
    pub sse_aws_kms_key_id_selector: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelector>,
}

/// Reference to a Key in kms to populate sseAwsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate sseAwsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsInitProviderDataCatalogEncryptionSettingsEncryptionAtRestSseAwsKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<DataCatalogEncryptionSettingsPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DataCatalogEncryptionSettingsPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DataCatalogEncryptionSettingsPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DataCatalogEncryptionSettingsPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DataCatalogEncryptionSettingsPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataCatalogEncryptionSettingsPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DataCatalogEncryptionSettingsStatus defines the observed state of DataCatalogEncryptionSettings.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<DataCatalogEncryptionSettingsStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsStatusAtProvider {
    /// –  The ID of the Data Catalog to set the security configuration for. If none is provided, the AWS account ID is used by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    pub catalog_id: Option<String>,
    /// –  The security configuration to set. see Data Catalog Encryption Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCatalogEncryptionSettings")]
    pub data_catalog_encryption_settings: Option<DataCatalogEncryptionSettingsStatusAtProviderDataCatalogEncryptionSettings>,
    /// The ID of the Data Catalog to set the security configuration for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// –  The security configuration to set. see Data Catalog Encryption Settings.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsStatusAtProviderDataCatalogEncryptionSettings {
    /// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPasswordEncryption")]
    pub connection_password_encryption: Option<DataCatalogEncryptionSettingsStatusAtProviderDataCatalogEncryptionSettingsConnectionPasswordEncryption>,
    /// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionAtRest")]
    pub encryption_at_rest: Option<DataCatalogEncryptionSettingsStatusAtProviderDataCatalogEncryptionSettingsEncryptionAtRest>,
}

/// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsStatusAtProviderDataCatalogEncryptionSettingsConnectionPasswordEncryption {
    /// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least kms:Encrypt permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKmsKeyId")]
    pub aws_kms_key_id: Option<String>,
    /// When set to true, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnConnectionPasswordEncrypted")]
    pub return_connection_password_encrypted: Option<bool>,
}

/// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DataCatalogEncryptionSettingsStatusAtProviderDataCatalogEncryptionSettingsEncryptionAtRest {
    /// The encryption-at-rest mode for encrypting Data Catalog data. Valid values: DISABLED, SSE-KMS, SSE-KMS-WITH-SERVICE-ROLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogEncryptionMode")]
    pub catalog_encryption_mode: Option<String>,
    /// The ARN of the AWS IAM role used for accessing encrypted Data Catalog data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogEncryptionServiceRole")]
    pub catalog_encryption_service_role: Option<String>,
    /// The ARN of the AWS KMS key to use for encryption at rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseAwsKmsKeyId")]
    pub sse_aws_kms_key_id: Option<String>,
}


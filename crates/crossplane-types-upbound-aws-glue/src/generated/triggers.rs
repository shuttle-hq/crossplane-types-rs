// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TriggerSpec defines the desired state of Trigger
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "glue.aws.upbound.io", version = "v1beta2", kind = "Trigger", plural = "triggers")]
#[kube(status = "TriggerStatus")]
pub struct TriggerSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<TriggerDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TriggerForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<TriggerInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<TriggerProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<TriggerPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<TriggerWriteConnectionSecretToRef>,
}

/// TriggerSpec defines the desired state of Trigger
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProvider {
    /// –  List of actions initiated by this trigger when it fires. See Actions Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<TriggerForProviderActions>>,
    /// –  A description of the new trigger.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// –  Start the trigger. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventBatchingCondition")]
    pub event_batching_condition: Option<Vec<TriggerForProviderEventBatchingCondition>>,
    /// –  A predicate to specify when the new trigger should fire. Required when trigger type is CONDITIONAL. See Predicate Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<TriggerForProviderPredicate>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Based Schedules for Jobs and Crawlers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// –  Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startOnCreation")]
    pub start_on_creation: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// –  The type of trigger. Valid values are CONDITIONAL, EVENT, ON_DEMAND, and SCHEDULED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (ON_DEMAND or SCHEDULED type) and can contain multiple additional CONDITIONAL triggers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowName")]
    pub workflow_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActions {
    /// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arguments: Option<HashMap<String, String>>,
    /// The name of the crawler to be executed. Conflicts with job_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerName")]
    pub crawler_name: Option<String>,
    /// Reference to a Crawler in glue to populate crawlerName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerNameRef")]
    pub crawler_name_ref: Option<TriggerForProviderActionsCrawlerNameRef>,
    /// Selector for a Crawler in glue to populate crawlerName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerNameSelector")]
    pub crawler_name_selector: Option<TriggerForProviderActionsCrawlerNameSelector>,
    /// The name of a job to be executed. Conflicts with crawler_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    pub job_name: Option<String>,
    /// Reference to a Job in glue to populate jobName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobNameRef")]
    pub job_name_ref: Option<TriggerForProviderActionsJobNameRef>,
    /// Selector for a Job in glue to populate jobName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobNameSelector")]
    pub job_name_selector: Option<TriggerForProviderActionsJobNameSelector>,
    /// Specifies configuration properties of a job run notification. See Notification Property details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationProperty")]
    pub notification_property: Option<TriggerForProviderActionsNotificationProperty>,
    /// The name of the Security Configuration structure to be used with this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityConfiguration")]
    pub security_configuration: Option<String>,
    /// The job run timeout in minutes. It overrides the timeout value of the job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
}

/// Reference to a Crawler in glue to populate crawlerName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActionsCrawlerNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerForProviderActionsCrawlerNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActionsCrawlerNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerForProviderActionsCrawlerNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerForProviderActionsCrawlerNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderActionsCrawlerNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderActionsCrawlerNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Crawler in glue to populate crawlerName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActionsCrawlerNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerForProviderActionsCrawlerNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActionsCrawlerNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerForProviderActionsCrawlerNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerForProviderActionsCrawlerNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderActionsCrawlerNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderActionsCrawlerNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Job in glue to populate jobName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActionsJobNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerForProviderActionsJobNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActionsJobNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerForProviderActionsJobNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerForProviderActionsJobNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderActionsJobNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderActionsJobNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Job in glue to populate jobName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActionsJobNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerForProviderActionsJobNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActionsJobNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerForProviderActionsJobNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerForProviderActionsJobNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderActionsJobNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderActionsJobNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies configuration properties of a job run notification. See Notification Property details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderActionsNotificationProperty {
    /// After a job run starts, the number of minutes to wait before sending a job run delay notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifyDelayAfter")]
    pub notify_delay_after: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderEventBatchingCondition {
    /// Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    pub batch_size: Option<f64>,
    /// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is 900.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchWindow")]
    pub batch_window: Option<f64>,
}

/// –  A predicate to specify when the new trigger should fire. Required when trigger type is CONDITIONAL. See Predicate Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicate {
    /// A list of the conditions that determine when the trigger will fire. See Conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<TriggerForProviderPredicateConditions>>,
    /// How to handle multiple conditions. Defaults to AND. Valid values are AND or ANY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicateConditions {
    /// The condition crawl state. Currently, the values supported are RUNNING, SUCCEEDED, CANCELLED, and FAILED. If this is specified, crawler_name must also be specified. Conflicts with state.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlState")]
    pub crawl_state: Option<String>,
    /// The name of the crawler to be executed. Conflicts with job_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerName")]
    pub crawler_name: Option<String>,
    /// Reference to a Crawler in glue to populate crawlerName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerNameRef")]
    pub crawler_name_ref: Option<TriggerForProviderPredicateConditionsCrawlerNameRef>,
    /// Selector for a Crawler in glue to populate crawlerName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerNameSelector")]
    pub crawler_name_selector: Option<TriggerForProviderPredicateConditionsCrawlerNameSelector>,
    /// The name of a job to be executed. Conflicts with crawler_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    pub job_name: Option<String>,
    /// Reference to a Job in glue to populate jobName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobNameRef")]
    pub job_name_ref: Option<TriggerForProviderPredicateConditionsJobNameRef>,
    /// Selector for a Job in glue to populate jobName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobNameSelector")]
    pub job_name_selector: Option<TriggerForProviderPredicateConditionsJobNameSelector>,
    /// A logical operator. Defaults to EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalOperator")]
    pub logical_operator: Option<String>,
    /// The condition job state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED. If this is specified, job_name must also be specified. Conflicts with crawler_state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Reference to a Crawler in glue to populate crawlerName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicateConditionsCrawlerNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerForProviderPredicateConditionsCrawlerNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicateConditionsCrawlerNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerForProviderPredicateConditionsCrawlerNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerForProviderPredicateConditionsCrawlerNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderPredicateConditionsCrawlerNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderPredicateConditionsCrawlerNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Crawler in glue to populate crawlerName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicateConditionsCrawlerNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerForProviderPredicateConditionsCrawlerNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicateConditionsCrawlerNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerForProviderPredicateConditionsCrawlerNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerForProviderPredicateConditionsCrawlerNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderPredicateConditionsCrawlerNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderPredicateConditionsCrawlerNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Job in glue to populate jobName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicateConditionsJobNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerForProviderPredicateConditionsJobNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicateConditionsJobNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerForProviderPredicateConditionsJobNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerForProviderPredicateConditionsJobNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderPredicateConditionsJobNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderPredicateConditionsJobNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Job in glue to populate jobName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicateConditionsJobNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerForProviderPredicateConditionsJobNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerForProviderPredicateConditionsJobNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerForProviderPredicateConditionsJobNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerForProviderPredicateConditionsJobNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderPredicateConditionsJobNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerForProviderPredicateConditionsJobNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProvider {
    /// –  List of actions initiated by this trigger when it fires. See Actions Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<TriggerInitProviderActions>>,
    /// –  A description of the new trigger.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// –  Start the trigger. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventBatchingCondition")]
    pub event_batching_condition: Option<Vec<TriggerInitProviderEventBatchingCondition>>,
    /// –  A predicate to specify when the new trigger should fire. Required when trigger type is CONDITIONAL. See Predicate Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<TriggerInitProviderPredicate>,
    /// Based Schedules for Jobs and Crawlers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// –  Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startOnCreation")]
    pub start_on_creation: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// –  The type of trigger. Valid values are CONDITIONAL, EVENT, ON_DEMAND, and SCHEDULED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (ON_DEMAND or SCHEDULED type) and can contain multiple additional CONDITIONAL triggers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowName")]
    pub workflow_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActions {
    /// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arguments: Option<HashMap<String, String>>,
    /// The name of the crawler to be executed. Conflicts with job_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerName")]
    pub crawler_name: Option<String>,
    /// Reference to a Crawler in glue to populate crawlerName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerNameRef")]
    pub crawler_name_ref: Option<TriggerInitProviderActionsCrawlerNameRef>,
    /// Selector for a Crawler in glue to populate crawlerName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerNameSelector")]
    pub crawler_name_selector: Option<TriggerInitProviderActionsCrawlerNameSelector>,
    /// The name of a job to be executed. Conflicts with crawler_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    pub job_name: Option<String>,
    /// Reference to a Job in glue to populate jobName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobNameRef")]
    pub job_name_ref: Option<TriggerInitProviderActionsJobNameRef>,
    /// Selector for a Job in glue to populate jobName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobNameSelector")]
    pub job_name_selector: Option<TriggerInitProviderActionsJobNameSelector>,
    /// Specifies configuration properties of a job run notification. See Notification Property details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationProperty")]
    pub notification_property: Option<TriggerInitProviderActionsNotificationProperty>,
    /// The name of the Security Configuration structure to be used with this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityConfiguration")]
    pub security_configuration: Option<String>,
    /// The job run timeout in minutes. It overrides the timeout value of the job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
}

/// Reference to a Crawler in glue to populate crawlerName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActionsCrawlerNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerInitProviderActionsCrawlerNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActionsCrawlerNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerInitProviderActionsCrawlerNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerInitProviderActionsCrawlerNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderActionsCrawlerNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderActionsCrawlerNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Crawler in glue to populate crawlerName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActionsCrawlerNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerInitProviderActionsCrawlerNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActionsCrawlerNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerInitProviderActionsCrawlerNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerInitProviderActionsCrawlerNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderActionsCrawlerNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderActionsCrawlerNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Job in glue to populate jobName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActionsJobNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerInitProviderActionsJobNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActionsJobNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerInitProviderActionsJobNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerInitProviderActionsJobNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderActionsJobNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderActionsJobNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Job in glue to populate jobName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActionsJobNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerInitProviderActionsJobNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActionsJobNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerInitProviderActionsJobNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerInitProviderActionsJobNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderActionsJobNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderActionsJobNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies configuration properties of a job run notification. See Notification Property details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderActionsNotificationProperty {
    /// After a job run starts, the number of minutes to wait before sending a job run delay notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifyDelayAfter")]
    pub notify_delay_after: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderEventBatchingCondition {
    /// Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    pub batch_size: Option<f64>,
    /// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is 900.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchWindow")]
    pub batch_window: Option<f64>,
}

/// –  A predicate to specify when the new trigger should fire. Required when trigger type is CONDITIONAL. See Predicate Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicate {
    /// A list of the conditions that determine when the trigger will fire. See Conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<TriggerInitProviderPredicateConditions>>,
    /// How to handle multiple conditions. Defaults to AND. Valid values are AND or ANY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicateConditions {
    /// The condition crawl state. Currently, the values supported are RUNNING, SUCCEEDED, CANCELLED, and FAILED. If this is specified, crawler_name must also be specified. Conflicts with state.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlState")]
    pub crawl_state: Option<String>,
    /// The name of the crawler to be executed. Conflicts with job_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerName")]
    pub crawler_name: Option<String>,
    /// Reference to a Crawler in glue to populate crawlerName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerNameRef")]
    pub crawler_name_ref: Option<TriggerInitProviderPredicateConditionsCrawlerNameRef>,
    /// Selector for a Crawler in glue to populate crawlerName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerNameSelector")]
    pub crawler_name_selector: Option<TriggerInitProviderPredicateConditionsCrawlerNameSelector>,
    /// The name of a job to be executed. Conflicts with crawler_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    pub job_name: Option<String>,
    /// Reference to a Job in glue to populate jobName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobNameRef")]
    pub job_name_ref: Option<TriggerInitProviderPredicateConditionsJobNameRef>,
    /// Selector for a Job in glue to populate jobName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobNameSelector")]
    pub job_name_selector: Option<TriggerInitProviderPredicateConditionsJobNameSelector>,
    /// A logical operator. Defaults to EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalOperator")]
    pub logical_operator: Option<String>,
    /// The condition job state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED. If this is specified, job_name must also be specified. Conflicts with crawler_state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Reference to a Crawler in glue to populate crawlerName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicateConditionsCrawlerNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerInitProviderPredicateConditionsCrawlerNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicateConditionsCrawlerNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerInitProviderPredicateConditionsCrawlerNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerInitProviderPredicateConditionsCrawlerNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderPredicateConditionsCrawlerNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderPredicateConditionsCrawlerNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Crawler in glue to populate crawlerName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicateConditionsCrawlerNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerInitProviderPredicateConditionsCrawlerNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicateConditionsCrawlerNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerInitProviderPredicateConditionsCrawlerNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerInitProviderPredicateConditionsCrawlerNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderPredicateConditionsCrawlerNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderPredicateConditionsCrawlerNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Job in glue to populate jobName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicateConditionsJobNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerInitProviderPredicateConditionsJobNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicateConditionsJobNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerInitProviderPredicateConditionsJobNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerInitProviderPredicateConditionsJobNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderPredicateConditionsJobNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderPredicateConditionsJobNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Job in glue to populate jobName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicateConditionsJobNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerInitProviderPredicateConditionsJobNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerInitProviderPredicateConditionsJobNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerInitProviderPredicateConditionsJobNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerInitProviderPredicateConditionsJobNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderPredicateConditionsJobNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerInitProviderPredicateConditionsJobNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<TriggerPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TriggerPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TriggerPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TriggerPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TriggerPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TriggerPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TriggerStatus defines the observed state of Trigger.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<TriggerStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerStatusAtProvider {
    /// –  List of actions initiated by this trigger when it fires. See Actions Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<TriggerStatusAtProviderActions>>,
    /// Amazon Resource Name (ARN) of Glue Trigger
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// –  A description of the new trigger.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// –  Start the trigger. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventBatchingCondition")]
    pub event_batching_condition: Option<Vec<TriggerStatusAtProviderEventBatchingCondition>>,
    /// Trigger name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// –  A predicate to specify when the new trigger should fire. Required when trigger type is CONDITIONAL. See Predicate Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<TriggerStatusAtProviderPredicate>,
    /// Based Schedules for Jobs and Crawlers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// –  Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startOnCreation")]
    pub start_on_creation: Option<bool>,
    /// The condition job state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED. If this is specified, job_name must also be specified. Conflicts with crawler_state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// –  The type of trigger. Valid values are CONDITIONAL, EVENT, ON_DEMAND, and SCHEDULED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (ON_DEMAND or SCHEDULED type) and can contain multiple additional CONDITIONAL triggers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowName")]
    pub workflow_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerStatusAtProviderActions {
    /// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arguments: Option<HashMap<String, String>>,
    /// The name of the crawler to be executed. Conflicts with job_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerName")]
    pub crawler_name: Option<String>,
    /// The name of a job to be executed. Conflicts with crawler_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    pub job_name: Option<String>,
    /// Specifies configuration properties of a job run notification. See Notification Property details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationProperty")]
    pub notification_property: Option<TriggerStatusAtProviderActionsNotificationProperty>,
    /// The name of the Security Configuration structure to be used with this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityConfiguration")]
    pub security_configuration: Option<String>,
    /// The job run timeout in minutes. It overrides the timeout value of the job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
}

/// Specifies configuration properties of a job run notification. See Notification Property details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerStatusAtProviderActionsNotificationProperty {
    /// After a job run starts, the number of minutes to wait before sending a job run delay notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifyDelayAfter")]
    pub notify_delay_after: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerStatusAtProviderEventBatchingCondition {
    /// Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    pub batch_size: Option<f64>,
    /// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is 900.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchWindow")]
    pub batch_window: Option<f64>,
}

/// –  A predicate to specify when the new trigger should fire. Required when trigger type is CONDITIONAL. See Predicate Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerStatusAtProviderPredicate {
    /// A list of the conditions that determine when the trigger will fire. See Conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<TriggerStatusAtProviderPredicateConditions>>,
    /// How to handle multiple conditions. Defaults to AND. Valid values are AND or ANY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TriggerStatusAtProviderPredicateConditions {
    /// The condition crawl state. Currently, the values supported are RUNNING, SUCCEEDED, CANCELLED, and FAILED. If this is specified, crawler_name must also be specified. Conflicts with state.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlState")]
    pub crawl_state: Option<String>,
    /// The name of the crawler to be executed. Conflicts with job_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crawlerName")]
    pub crawler_name: Option<String>,
    /// The name of a job to be executed. Conflicts with crawler_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    pub job_name: Option<String>,
    /// A logical operator. Defaults to EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalOperator")]
    pub logical_operator: Option<String>,
    /// The condition job state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED. If this is specified, job_name must also be specified. Conflicts with crawler_state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}


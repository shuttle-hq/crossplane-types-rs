// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RecordSetSpec defines the desired state of RecordSet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "dns.gcp.upbound.io", version = "v1beta2", kind = "RecordSet", plural = "recordsets")]
#[kube(status = "RecordSetStatus")]
pub struct RecordSetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<RecordSetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RecordSetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<RecordSetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<RecordSetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<RecordSetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<RecordSetWriteConnectionSecretToRef>,
}

/// RecordSetSpec defines the desired state of RecordSet
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProvider {
    /// The name of the zone in which this record set will
    /// reside.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedZone")]
    pub managed_zone: Option<String>,
    /// Reference to a ManagedZone in dns to populate managedZone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedZoneRef")]
    pub managed_zone_ref: Option<RecordSetForProviderManagedZoneRef>,
    /// Selector for a ManagedZone in dns to populate managedZone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedZoneSelector")]
    pub managed_zone_selector: Option<RecordSetForProviderManagedZoneSelector>,
    /// The DNS name this record set will apply to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The configuration for steering traffic based on query.
    /// Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingPolicy")]
    pub routing_policy: Option<RecordSetForProviderRoutingPolicy>,
    /// The string data for the records in this record set
    /// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding \" if you don't want your string to get split on spaces.g. "first255characters\" \"morecharacters").
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
    /// The time-to-live of this record set (seconds).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<f64>,
    /// The DNS record set type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to a ManagedZone in dns to populate managedZone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderManagedZoneRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderManagedZoneRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderManagedZoneRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderManagedZoneRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderManagedZoneRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderManagedZoneRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderManagedZoneRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ManagedZone in dns to populate managedZone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderManagedZoneSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderManagedZoneSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderManagedZoneSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderManagedZoneSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderManagedZoneSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderManagedZoneSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderManagedZoneSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration for steering traffic based on query.
/// Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicy {
    /// Specifies whether to enable fencing for geo queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGeoFencing")]
    pub enable_geo_fencing: Option<bool>,
    /// The configuration for Geolocation based routing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geo: Option<Vec<RecordSetForProviderRoutingPolicyGeo>>,
    /// The configuration for a failover policy with global to regional failover. Queries are responded to with the global primary targets, but if none of the primary targets are healthy, then we fallback to a regional failover policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryBackup")]
    pub primary_backup: Option<RecordSetForProviderRoutingPolicyPrimaryBackup>,
    /// The configuration for Weighted Round Robin based routing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wrr: Option<Vec<RecordSetForProviderRoutingPolicyWrr>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyGeo {
    /// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckedTargets")]
    pub health_checked_targets: Option<RecordSetForProviderRoutingPolicyGeoHealthCheckedTargets>,
    /// The location name defined in Google Cloud.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Same as rrdatas above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
}

/// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyGeoHealthCheckedTargets {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetForProviderRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// The configuration for a failover policy with global to regional failover. Queries are responded to with the global primary targets, but if none of the primary targets are healthy, then we fallback to a regional failover policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackup {
    /// The backup geo targets, which provide a regional failover policy for the otherwise global primary targets.
    /// Structure is document above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupGeo")]
    pub backup_geo: Option<Vec<RecordSetForProviderRoutingPolicyPrimaryBackupBackupGeo>>,
    /// Specifies whether to enable fencing for backup geo queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGeoFencingForBackups")]
    pub enable_geo_fencing_for_backups: Option<bool>,
    /// The list of global primary targets to be health checked.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub primary: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimary>,
    /// Specifies the percentage of traffic to send to the backup targets even when the primary targets are healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trickleRatio")]
    pub trickle_ratio: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupBackupGeo {
    /// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckedTargets")]
    pub health_checked_targets: Option<RecordSetForProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets>,
    /// The location name defined in Google Cloud.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Same as rrdatas above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
}

/// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetForProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// The list of global primary targets to be health checked.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimary {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// Reference to a ForwardingRule in compute to populate ipAddress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddressRef")]
    pub ip_address_ref: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRef>,
    /// Selector for a ForwardingRule in compute to populate ipAddress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddressSelector")]
    pub ip_address_selector: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelector>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// Reference to a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlRef")]
    pub network_url_ref: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRef>,
    /// Selector for a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlSelector")]
    pub network_url_selector: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelector>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reference to a ForwardingRule in compute to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectRef")]
    pub project_ref: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRef>,
    /// Selector for a ForwardingRule in compute to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectSelector")]
    pub project_selector: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelector>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Reference to a ForwardingRule in compute to populate region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionRef")]
    pub region_ref: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRef>,
    /// Selector for a ForwardingRule in compute to populate region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionSelector")]
    pub region_selector: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelector>,
}

/// Reference to a ForwardingRule in compute to populate ipAddress.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate ipAddress.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ForwardingRule in compute to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ForwardingRule in compute to populate region.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate region.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetForProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyWrr {
    /// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckedTargets")]
    pub health_checked_targets: Option<RecordSetForProviderRoutingPolicyWrrHealthCheckedTargets>,
    /// Same as rrdatas above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
    /// The ratio of traffic routed to the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
}

/// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyWrrHealthCheckedTargets {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetForProviderRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetForProviderRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProvider {
    /// The name of the zone in which this record set will
    /// reside.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedZone")]
    pub managed_zone: Option<String>,
    /// Reference to a ManagedZone in dns to populate managedZone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedZoneRef")]
    pub managed_zone_ref: Option<RecordSetInitProviderManagedZoneRef>,
    /// Selector for a ManagedZone in dns to populate managedZone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedZoneSelector")]
    pub managed_zone_selector: Option<RecordSetInitProviderManagedZoneSelector>,
    /// The DNS name this record set will apply to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The configuration for steering traffic based on query.
    /// Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingPolicy")]
    pub routing_policy: Option<RecordSetInitProviderRoutingPolicy>,
    /// The string data for the records in this record set
    /// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding \" if you don't want your string to get split on spaces.g. "first255characters\" \"morecharacters").
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
    /// The time-to-live of this record set (seconds).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<f64>,
    /// The DNS record set type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to a ManagedZone in dns to populate managedZone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderManagedZoneRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderManagedZoneRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderManagedZoneRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderManagedZoneRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderManagedZoneRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderManagedZoneRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderManagedZoneRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ManagedZone in dns to populate managedZone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderManagedZoneSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderManagedZoneSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderManagedZoneSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderManagedZoneSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderManagedZoneSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderManagedZoneSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderManagedZoneSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration for steering traffic based on query.
/// Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicy {
    /// Specifies whether to enable fencing for geo queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGeoFencing")]
    pub enable_geo_fencing: Option<bool>,
    /// The configuration for Geolocation based routing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geo: Option<Vec<RecordSetInitProviderRoutingPolicyGeo>>,
    /// The configuration for a failover policy with global to regional failover. Queries are responded to with the global primary targets, but if none of the primary targets are healthy, then we fallback to a regional failover policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryBackup")]
    pub primary_backup: Option<RecordSetInitProviderRoutingPolicyPrimaryBackup>,
    /// The configuration for Weighted Round Robin based routing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wrr: Option<Vec<RecordSetInitProviderRoutingPolicyWrr>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyGeo {
    /// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckedTargets")]
    pub health_checked_targets: Option<RecordSetInitProviderRoutingPolicyGeoHealthCheckedTargets>,
    /// The location name defined in Google Cloud.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Same as rrdatas above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
}

/// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyGeoHealthCheckedTargets {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetInitProviderRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// The configuration for a failover policy with global to regional failover. Queries are responded to with the global primary targets, but if none of the primary targets are healthy, then we fallback to a regional failover policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackup {
    /// The backup geo targets, which provide a regional failover policy for the otherwise global primary targets.
    /// Structure is document above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupGeo")]
    pub backup_geo: Option<Vec<RecordSetInitProviderRoutingPolicyPrimaryBackupBackupGeo>>,
    /// Specifies whether to enable fencing for backup geo queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGeoFencingForBackups")]
    pub enable_geo_fencing_for_backups: Option<bool>,
    /// The list of global primary targets to be health checked.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub primary: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimary>,
    /// Specifies the percentage of traffic to send to the backup targets even when the primary targets are healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trickleRatio")]
    pub trickle_ratio: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupBackupGeo {
    /// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckedTargets")]
    pub health_checked_targets: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets>,
    /// The location name defined in Google Cloud.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Same as rrdatas above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
}

/// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetInitProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// The list of global primary targets to be health checked.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimary {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// Reference to a ForwardingRule in compute to populate ipAddress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddressRef")]
    pub ip_address_ref: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRef>,
    /// Selector for a ForwardingRule in compute to populate ipAddress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddressSelector")]
    pub ip_address_selector: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelector>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// Reference to a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlRef")]
    pub network_url_ref: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRef>,
    /// Selector for a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlSelector")]
    pub network_url_selector: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelector>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reference to a ForwardingRule in compute to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectRef")]
    pub project_ref: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRef>,
    /// Selector for a ForwardingRule in compute to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectSelector")]
    pub project_selector: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelector>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Reference to a ForwardingRule in compute to populate region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionRef")]
    pub region_ref: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRef>,
    /// Selector for a ForwardingRule in compute to populate region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionSelector")]
    pub region_selector: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelector>,
}

/// Reference to a ForwardingRule in compute to populate ipAddress.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate ipAddress.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersIpAddressSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ForwardingRule in compute to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersProjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ForwardingRule in compute to populate region.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate region.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetInitProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersRegionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyWrr {
    /// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckedTargets")]
    pub health_checked_targets: Option<RecordSetInitProviderRoutingPolicyWrrHealthCheckedTargets>,
    /// Same as rrdatas above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
    /// The ratio of traffic routed to the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
}

/// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyWrrHealthCheckedTargets {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetInitProviderRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetInitProviderRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<RecordSetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RecordSetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RecordSetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RecordSetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RecordSetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RecordSetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RecordSetStatus defines the observed state of RecordSet.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<RecordSetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProvider {
    /// an identifier for the resource with format projects/{{project}}/managedZones/{{zone}}/rrsets/{{name}}/{{type}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the zone in which this record set will
    /// reside.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedZone")]
    pub managed_zone: Option<String>,
    /// The DNS name this record set will apply to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The configuration for steering traffic based on query.
    /// Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingPolicy")]
    pub routing_policy: Option<RecordSetStatusAtProviderRoutingPolicy>,
    /// The string data for the records in this record set
    /// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding \" if you don't want your string to get split on spaces.g. "first255characters\" \"morecharacters").
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
    /// The time-to-live of this record set (seconds).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<f64>,
    /// The DNS record set type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The configuration for steering traffic based on query.
/// Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicy {
    /// Specifies whether to enable fencing for geo queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGeoFencing")]
    pub enable_geo_fencing: Option<bool>,
    /// The configuration for Geolocation based routing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geo: Option<Vec<RecordSetStatusAtProviderRoutingPolicyGeo>>,
    /// The configuration for a failover policy with global to regional failover. Queries are responded to with the global primary targets, but if none of the primary targets are healthy, then we fallback to a regional failover policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryBackup")]
    pub primary_backup: Option<RecordSetStatusAtProviderRoutingPolicyPrimaryBackup>,
    /// The configuration for Weighted Round Robin based routing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wrr: Option<Vec<RecordSetStatusAtProviderRoutingPolicyWrr>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyGeo {
    /// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckedTargets")]
    pub health_checked_targets: Option<RecordSetStatusAtProviderRoutingPolicyGeoHealthCheckedTargets>,
    /// The location name defined in Google Cloud.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Same as rrdatas above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
}

/// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyGeoHealthCheckedTargets {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetStatusAtProviderRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// The configuration for a failover policy with global to regional failover. Queries are responded to with the global primary targets, but if none of the primary targets are healthy, then we fallback to a regional failover policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyPrimaryBackup {
    /// The backup geo targets, which provide a regional failover policy for the otherwise global primary targets.
    /// Structure is document above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupGeo")]
    pub backup_geo: Option<Vec<RecordSetStatusAtProviderRoutingPolicyPrimaryBackupBackupGeo>>,
    /// Specifies whether to enable fencing for backup geo queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGeoFencingForBackups")]
    pub enable_geo_fencing_for_backups: Option<bool>,
    /// The list of global primary targets to be health checked.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub primary: Option<RecordSetStatusAtProviderRoutingPolicyPrimaryBackupPrimary>,
    /// Specifies the percentage of traffic to send to the backup targets even when the primary targets are healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trickleRatio")]
    pub trickle_ratio: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyPrimaryBackupBackupGeo {
    /// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckedTargets")]
    pub health_checked_targets: Option<RecordSetStatusAtProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets>,
    /// The location name defined in Google Cloud.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Same as rrdatas above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
}

/// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetStatusAtProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// The list of global primary targets to be health checked.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyPrimaryBackupPrimary {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetStatusAtProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyWrr {
    /// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckedTargets")]
    pub health_checked_targets: Option<RecordSetStatusAtProviderRoutingPolicyWrrHealthCheckedTargets>,
    /// Same as rrdatas above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrdatas: Option<Vec<String>>,
    /// The ratio of traffic routed to the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
}

/// The list of targets to be health checked. Note that if DNSSEC is enabled for this zone, only one of rrdatas or health_checked_targets can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyWrrHealthCheckedTargets {
    /// The list of internal load balancers to health check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalLoadBalancers")]
    pub internal_load_balancers: Option<Vec<RecordSetStatusAtProviderRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RecordSetStatusAtProviderRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancers {
    /// The frontend IP address of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: ["tcp", "udp"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    pub ip_protocol: Option<String>,
    /// The type of load balancer. This value is case-sensitive. Possible values: ["regionalL4ilb", "regionalL7ilb", "globalL7ilb"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerType")]
    pub load_balancer_type: Option<String>,
    /// The fully qualified url of the network in which the load balancer belongs. This should be formatted like projects/{project}/global/networks/{network} or https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// The configured port of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the load balancer. Only needed for regional load balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}


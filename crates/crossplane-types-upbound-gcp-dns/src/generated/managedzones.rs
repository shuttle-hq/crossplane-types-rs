// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ManagedZoneSpec defines the desired state of ManagedZone
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "dns.gcp.upbound.io", version = "v1beta2", kind = "ManagedZone", plural = "managedzones")]
#[kube(status = "ManagedZoneStatus")]
pub struct ManagedZoneSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ManagedZoneDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ManagedZoneForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ManagedZoneInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ManagedZoneProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ManagedZonePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ManagedZoneWriteConnectionSecretToRef>,
}

/// ManagedZoneSpec defines the desired state of ManagedZone
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProvider {
    /// Cloud logging configuration
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudLoggingConfig")]
    pub cloud_logging_config: Option<ManagedZoneForProviderCloudLoggingConfig>,
    /// A textual description field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The DNS name of this managed zone, for instance "example.com.".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    pub dns_name: Option<String>,
    /// DNSSEC configuration
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnssecConfig")]
    pub dnssec_config: Option<ManagedZoneForProviderDnssecConfig>,
    /// Set this true to delete all records in the zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    pub force_destroy: Option<bool>,
    /// The presence for this field indicates that outbound forwarding is enabled
    /// for this zone. The value of this field contains the set of destinations
    /// to forward to.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardingConfig")]
    pub forwarding_config: Option<ManagedZoneForProviderForwardingConfig>,
    /// A set of key/value label pairs to assign to this ManagedZone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The presence of this field indicates that DNS Peering is enabled for this
    /// zone. The value of this field contains the network to peer with.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peeringConfig")]
    pub peering_config: Option<ManagedZoneForProviderPeeringConfig>,
    /// For privately visible zones, the set of Virtual Private Cloud
    /// resources that the zone is visible from. At least one of gke_clusters or networks must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateVisibilityConfig")]
    pub private_visibility_config: Option<ManagedZoneForProviderPrivateVisibilityConfig>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The zone's visibility: public zones are exposed to the Internet,
    /// while private zones are visible only to Virtual Private Cloud resources.
    /// Default value is public.
    /// Possible values are: private, public.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
}

/// Cloud logging configuration
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderCloudLoggingConfig {
    /// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableLogging")]
    pub enable_logging: Option<bool>,
}

/// DNSSEC configuration
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderDnssecConfig {
    /// Specifies parameters that will be used for generating initial DnsKeys
    /// for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
    /// you must also provide one for the other.
    /// default_key_specs can only be updated when the state is off.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultKeySpecs")]
    pub default_key_specs: Option<Vec<ManagedZoneForProviderDnssecConfigDefaultKeySpecs>>,
    /// Identifies what kind of resource this is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Specifies the mechanism used to provide authenticated denial-of-existence responses.
    /// non_existence can only be updated when the state is off.
    /// Possible values are: nsec, nsec3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonExistence")]
    pub non_existence: Option<String>,
    /// Specifies whether DNSSEC is enabled, and what mode it is in
    /// Possible values are: off, on, transfer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderDnssecConfigDefaultKeySpecs {
    /// String mnemonic specifying the DNSSEC algorithm of this key
    /// Possible values are: ecdsap256sha256, ecdsap384sha384, rsasha1, rsasha256, rsasha512.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<String>,
    /// Length of the keys in bits
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyLength")]
    pub key_length: Option<f64>,
    /// Specifies whether this is a key signing key (KSK) or a zone
    /// signing key (ZSK). Key signing keys have the Secure Entry
    /// Point flag set and, when active, will only be used to sign
    /// resource record sets of type DNSKEY. Zone signing keys do
    /// not have the Secure Entry Point flag set and will be used
    /// to sign all other types of resource record sets.
    /// Possible values are: keySigning, zoneSigning.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyType")]
    pub key_type: Option<String>,
    /// Identifies what kind of resource this is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

/// The presence for this field indicates that outbound forwarding is enabled
/// for this zone. The value of this field contains the set of destinations
/// to forward to.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderForwardingConfig {
    /// List of target name servers to forward to. Cloud DNS will
    /// select the best available name server if more than
    /// one target is given.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNameServers")]
    pub target_name_servers: Option<Vec<ManagedZoneForProviderForwardingConfigTargetNameServers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderForwardingConfigTargetNameServers {
    /// Forwarding path for this TargetNameServer. If unset or default Cloud DNS will make forwarding
    /// decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
    /// to the Internet. When set to private, Cloud DNS will always send queries through VPC for this target
    /// Possible values are: default, private.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardingPath")]
    pub forwarding_path: Option<String>,
    /// IPv4 address of a target name server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Address")]
    pub ipv4_address: Option<String>,
}

/// The presence of this field indicates that DNS Peering is enabled for this
/// zone. The value of this field contains the network to peer with.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPeeringConfig {
    /// The network with which to peer.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNetwork")]
    pub target_network: Option<ManagedZoneForProviderPeeringConfigTargetNetwork>,
}

/// The network with which to peer.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPeeringConfigTargetNetwork {
    /// The id or fully qualified URL of the VPC network to forward queries to.
    /// This should be formatted like projects/{project}/global/networks/{network} or
    /// https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// Reference to a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlRef")]
    pub network_url_ref: Option<ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlRef>,
    /// Selector for a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlSelector")]
    pub network_url_selector: Option<ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlSelector>,
}

/// Reference to a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// For privately visible zones, the set of Virtual Private Cloud
/// resources that the zone is visible from. At least one of gke_clusters or networks must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfig {
    /// The list of Google Kubernetes Engine clusters that can see this zone.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusters")]
    pub gke_clusters: Option<Vec<ManagedZoneForProviderPrivateVisibilityConfigGkeClusters>>,
    /// The list of VPC networks that can see this zone.12 SDK in a future release, you
    /// may experience issues with this resource while updating. If you encounter this issue, remove all networks
    /// blocks in an update and then apply another update adding all of them back simultaneously.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<ManagedZoneForProviderPrivateVisibilityConfigNetworks>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigGkeClusters {
    /// The resource name of the cluster to bind this ManagedZone to.
    /// This should be specified in the format like
    /// projects/*/locations/*/clusters/*
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusterName")]
    pub gke_cluster_name: Option<String>,
    /// Reference to a Cluster in container to populate gkeClusterName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusterNameRef")]
    pub gke_cluster_name_ref: Option<ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRef>,
    /// Selector for a Cluster in container to populate gkeClusterName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusterNameSelector")]
    pub gke_cluster_name_selector: Option<ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelector>,
}

/// Reference to a Cluster in container to populate gkeClusterName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in container to populate gkeClusterName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigNetworks {
    /// The id or fully qualified URL of the VPC network to forward queries to.
    /// This should be formatted like projects/{project}/global/networks/{network} or
    /// https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// Reference to a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlRef")]
    pub network_url_ref: Option<ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlRef>,
    /// Selector for a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlSelector")]
    pub network_url_selector: Option<ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlSelector>,
}

/// Reference to a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneForProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProvider {
    /// Cloud logging configuration
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudLoggingConfig")]
    pub cloud_logging_config: Option<ManagedZoneInitProviderCloudLoggingConfig>,
    /// A textual description field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The DNS name of this managed zone, for instance "example.com.".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    pub dns_name: Option<String>,
    /// DNSSEC configuration
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnssecConfig")]
    pub dnssec_config: Option<ManagedZoneInitProviderDnssecConfig>,
    /// Set this true to delete all records in the zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    pub force_destroy: Option<bool>,
    /// The presence for this field indicates that outbound forwarding is enabled
    /// for this zone. The value of this field contains the set of destinations
    /// to forward to.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardingConfig")]
    pub forwarding_config: Option<ManagedZoneInitProviderForwardingConfig>,
    /// A set of key/value label pairs to assign to this ManagedZone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The presence of this field indicates that DNS Peering is enabled for this
    /// zone. The value of this field contains the network to peer with.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peeringConfig")]
    pub peering_config: Option<ManagedZoneInitProviderPeeringConfig>,
    /// For privately visible zones, the set of Virtual Private Cloud
    /// resources that the zone is visible from. At least one of gke_clusters or networks must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateVisibilityConfig")]
    pub private_visibility_config: Option<ManagedZoneInitProviderPrivateVisibilityConfig>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The zone's visibility: public zones are exposed to the Internet,
    /// while private zones are visible only to Virtual Private Cloud resources.
    /// Default value is public.
    /// Possible values are: private, public.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
}

/// Cloud logging configuration
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderCloudLoggingConfig {
    /// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableLogging")]
    pub enable_logging: Option<bool>,
}

/// DNSSEC configuration
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderDnssecConfig {
    /// Specifies parameters that will be used for generating initial DnsKeys
    /// for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
    /// you must also provide one for the other.
    /// default_key_specs can only be updated when the state is off.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultKeySpecs")]
    pub default_key_specs: Option<Vec<ManagedZoneInitProviderDnssecConfigDefaultKeySpecs>>,
    /// Identifies what kind of resource this is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Specifies the mechanism used to provide authenticated denial-of-existence responses.
    /// non_existence can only be updated when the state is off.
    /// Possible values are: nsec, nsec3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonExistence")]
    pub non_existence: Option<String>,
    /// Specifies whether DNSSEC is enabled, and what mode it is in
    /// Possible values are: off, on, transfer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderDnssecConfigDefaultKeySpecs {
    /// String mnemonic specifying the DNSSEC algorithm of this key
    /// Possible values are: ecdsap256sha256, ecdsap384sha384, rsasha1, rsasha256, rsasha512.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<String>,
    /// Length of the keys in bits
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyLength")]
    pub key_length: Option<f64>,
    /// Specifies whether this is a key signing key (KSK) or a zone
    /// signing key (ZSK). Key signing keys have the Secure Entry
    /// Point flag set and, when active, will only be used to sign
    /// resource record sets of type DNSKEY. Zone signing keys do
    /// not have the Secure Entry Point flag set and will be used
    /// to sign all other types of resource record sets.
    /// Possible values are: keySigning, zoneSigning.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyType")]
    pub key_type: Option<String>,
    /// Identifies what kind of resource this is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

/// The presence for this field indicates that outbound forwarding is enabled
/// for this zone. The value of this field contains the set of destinations
/// to forward to.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderForwardingConfig {
    /// List of target name servers to forward to. Cloud DNS will
    /// select the best available name server if more than
    /// one target is given.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNameServers")]
    pub target_name_servers: Option<Vec<ManagedZoneInitProviderForwardingConfigTargetNameServers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderForwardingConfigTargetNameServers {
    /// Forwarding path for this TargetNameServer. If unset or default Cloud DNS will make forwarding
    /// decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
    /// to the Internet. When set to private, Cloud DNS will always send queries through VPC for this target
    /// Possible values are: default, private.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardingPath")]
    pub forwarding_path: Option<String>,
    /// IPv4 address of a target name server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Address")]
    pub ipv4_address: Option<String>,
}

/// The presence of this field indicates that DNS Peering is enabled for this
/// zone. The value of this field contains the network to peer with.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPeeringConfig {
    /// The network with which to peer.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNetwork")]
    pub target_network: Option<ManagedZoneInitProviderPeeringConfigTargetNetwork>,
}

/// The network with which to peer.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPeeringConfigTargetNetwork {
    /// The id or fully qualified URL of the VPC network to forward queries to.
    /// This should be formatted like projects/{project}/global/networks/{network} or
    /// https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// Reference to a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlRef")]
    pub network_url_ref: Option<ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlRef>,
    /// Selector for a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlSelector")]
    pub network_url_selector: Option<ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlSelector>,
}

/// Reference to a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPeeringConfigTargetNetworkNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// For privately visible zones, the set of Virtual Private Cloud
/// resources that the zone is visible from. At least one of gke_clusters or networks must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfig {
    /// The list of Google Kubernetes Engine clusters that can see this zone.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusters")]
    pub gke_clusters: Option<Vec<ManagedZoneInitProviderPrivateVisibilityConfigGkeClusters>>,
    /// The list of VPC networks that can see this zone.12 SDK in a future release, you
    /// may experience issues with this resource while updating. If you encounter this issue, remove all networks
    /// blocks in an update and then apply another update adding all of them back simultaneously.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<ManagedZoneInitProviderPrivateVisibilityConfigNetworks>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigGkeClusters {
    /// The resource name of the cluster to bind this ManagedZone to.
    /// This should be specified in the format like
    /// projects/*/locations/*/clusters/*
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusterName")]
    pub gke_cluster_name: Option<String>,
    /// Reference to a Cluster in container to populate gkeClusterName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusterNameRef")]
    pub gke_cluster_name_ref: Option<ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRef>,
    /// Selector for a Cluster in container to populate gkeClusterName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusterNameSelector")]
    pub gke_cluster_name_selector: Option<ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelector>,
}

/// Reference to a Cluster in container to populate gkeClusterName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in container to populate gkeClusterName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPrivateVisibilityConfigGkeClustersGkeClusterNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigNetworks {
    /// The id or fully qualified URL of the VPC network to forward queries to.
    /// This should be formatted like projects/{project}/global/networks/{network} or
    /// https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// Reference to a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlRef")]
    pub network_url_ref: Option<ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlRef>,
    /// Selector for a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlSelector")]
    pub network_url_selector: Option<ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlSelector>,
}

/// Reference to a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneInitProviderPrivateVisibilityConfigNetworksNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZoneProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZoneProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZoneProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZoneProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZonePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ManagedZonePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagedZonePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZonePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ManagedZonePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZonePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ManagedZonePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ManagedZonePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZonePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ManagedZonePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZonePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ManagedZoneStatus defines the observed state of ManagedZone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ManagedZoneStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProvider {
    /// Cloud logging configuration
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudLoggingConfig")]
    pub cloud_logging_config: Option<ManagedZoneStatusAtProviderCloudLoggingConfig>,
    /// The time that this resource was created on the server.
    /// This is in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTime")]
    pub creation_time: Option<String>,
    /// A textual description field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The DNS name of this managed zone, for instance "example.com.".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    pub dns_name: Option<String>,
    /// DNSSEC configuration
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnssecConfig")]
    pub dnssec_config: Option<ManagedZoneStatusAtProviderDnssecConfig>,
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Set this true to delete all records in the zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    pub force_destroy: Option<bool>,
    /// The presence for this field indicates that outbound forwarding is enabled
    /// for this zone. The value of this field contains the set of destinations
    /// to forward to.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardingConfig")]
    pub forwarding_config: Option<ManagedZoneStatusAtProviderForwardingConfig>,
    /// an identifier for the resource with format projects/{{project}}/managedZones/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A set of key/value label pairs to assign to this ManagedZone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Unique identifier for the resource; defined by the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedZoneId")]
    pub managed_zone_id: Option<f64>,
    /// Delegate your managed_zone to these virtual name servers;
    /// defined by the server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameServers")]
    pub name_servers: Option<Vec<String>>,
    /// The presence of this field indicates that DNS Peering is enabled for this
    /// zone. The value of this field contains the network to peer with.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peeringConfig")]
    pub peering_config: Option<ManagedZoneStatusAtProviderPeeringConfig>,
    /// For privately visible zones, the set of Virtual Private Cloud
    /// resources that the zone is visible from. At least one of gke_clusters or networks must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateVisibilityConfig")]
    pub private_visibility_config: Option<ManagedZoneStatusAtProviderPrivateVisibilityConfig>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// The zone's visibility: public zones are exposed to the Internet,
    /// while private zones are visible only to Virtual Private Cloud resources.
    /// Default value is public.
    /// Possible values are: private, public.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
}

/// Cloud logging configuration
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderCloudLoggingConfig {
    /// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableLogging")]
    pub enable_logging: Option<bool>,
}

/// DNSSEC configuration
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderDnssecConfig {
    /// Specifies parameters that will be used for generating initial DnsKeys
    /// for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
    /// you must also provide one for the other.
    /// default_key_specs can only be updated when the state is off.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultKeySpecs")]
    pub default_key_specs: Option<Vec<ManagedZoneStatusAtProviderDnssecConfigDefaultKeySpecs>>,
    /// Identifies what kind of resource this is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Specifies the mechanism used to provide authenticated denial-of-existence responses.
    /// non_existence can only be updated when the state is off.
    /// Possible values are: nsec, nsec3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonExistence")]
    pub non_existence: Option<String>,
    /// Specifies whether DNSSEC is enabled, and what mode it is in
    /// Possible values are: off, on, transfer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderDnssecConfigDefaultKeySpecs {
    /// String mnemonic specifying the DNSSEC algorithm of this key
    /// Possible values are: ecdsap256sha256, ecdsap384sha384, rsasha1, rsasha256, rsasha512.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<String>,
    /// Length of the keys in bits
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyLength")]
    pub key_length: Option<f64>,
    /// Specifies whether this is a key signing key (KSK) or a zone
    /// signing key (ZSK). Key signing keys have the Secure Entry
    /// Point flag set and, when active, will only be used to sign
    /// resource record sets of type DNSKEY. Zone signing keys do
    /// not have the Secure Entry Point flag set and will be used
    /// to sign all other types of resource record sets.
    /// Possible values are: keySigning, zoneSigning.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyType")]
    pub key_type: Option<String>,
    /// Identifies what kind of resource this is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

/// The presence for this field indicates that outbound forwarding is enabled
/// for this zone. The value of this field contains the set of destinations
/// to forward to.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderForwardingConfig {
    /// List of target name servers to forward to. Cloud DNS will
    /// select the best available name server if more than
    /// one target is given.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNameServers")]
    pub target_name_servers: Option<Vec<ManagedZoneStatusAtProviderForwardingConfigTargetNameServers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderForwardingConfigTargetNameServers {
    /// Forwarding path for this TargetNameServer. If unset or default Cloud DNS will make forwarding
    /// decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
    /// to the Internet. When set to private, Cloud DNS will always send queries through VPC for this target
    /// Possible values are: default, private.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardingPath")]
    pub forwarding_path: Option<String>,
    /// IPv4 address of a target name server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Address")]
    pub ipv4_address: Option<String>,
}

/// The presence of this field indicates that DNS Peering is enabled for this
/// zone. The value of this field contains the network to peer with.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderPeeringConfig {
    /// The network with which to peer.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNetwork")]
    pub target_network: Option<ManagedZoneStatusAtProviderPeeringConfigTargetNetwork>,
}

/// The network with which to peer.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderPeeringConfigTargetNetwork {
    /// The id or fully qualified URL of the VPC network to forward queries to.
    /// This should be formatted like projects/{project}/global/networks/{network} or
    /// https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
}

/// For privately visible zones, the set of Virtual Private Cloud
/// resources that the zone is visible from. At least one of gke_clusters or networks must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderPrivateVisibilityConfig {
    /// The list of Google Kubernetes Engine clusters that can see this zone.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusters")]
    pub gke_clusters: Option<Vec<ManagedZoneStatusAtProviderPrivateVisibilityConfigGkeClusters>>,
    /// The list of VPC networks that can see this zone.12 SDK in a future release, you
    /// may experience issues with this resource while updating. If you encounter this issue, remove all networks
    /// blocks in an update and then apply another update adding all of them back simultaneously.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<ManagedZoneStatusAtProviderPrivateVisibilityConfigNetworks>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderPrivateVisibilityConfigGkeClusters {
    /// The resource name of the cluster to bind this ManagedZone to.
    /// This should be specified in the format like
    /// projects/*/locations/*/clusters/*
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gkeClusterName")]
    pub gke_cluster_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ManagedZoneStatusAtProviderPrivateVisibilityConfigNetworks {
    /// The id or fully qualified URL of the VPC network to forward queries to.
    /// This should be formatted like projects/{project}/global/networks/{network} or
    /// https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
}


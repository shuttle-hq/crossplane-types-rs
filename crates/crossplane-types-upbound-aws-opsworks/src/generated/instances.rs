// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "opsworks.aws.upbound.io", version = "v1beta1", kind = "Instance", plural = "instances")]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProvider {
    /// OpsWorks agent to install. Default is INHERIT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentVersion")]
    pub agent_version: Option<String>,
    /// AMI to use for the instance.  If an AMI is specified, os must be Custom.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiId")]
    pub ami_id: Option<String>,
    /// Machine architecture for created instances.  Valid values are x86_64 or i386. The default is x86_64.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// Creates load-based or time-based instances.  Valid values are load, timer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoScalingType")]
    pub auto_scaling_type: Option<String>,
    /// Name of the availability zone where instances will be created by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// Time that the instance was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    pub created_at: Option<String>,
    /// Whether to delete EBS volume on deletion. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteEbs")]
    pub delete_ebs: Option<bool>,
    /// Whether to delete the Elastic IP on deletion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteEip")]
    pub delete_eip: Option<bool>,
    /// Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsBlockDevice")]
    pub ebs_block_device: Option<Vec<InstanceForProviderEbsBlockDevice>>,
    /// Whether the launched EC2 instance will be EBS-optimized.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    pub ebs_optimized: Option<bool>,
    /// ECS cluster's ARN for container instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecsClusterArn")]
    pub ecs_cluster_arn: Option<String>,
    /// Instance Elastic IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticIp")]
    pub elastic_ip: Option<String>,
    /// Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralBlockDevice")]
    pub ephemeral_block_device: Option<Vec<InstanceForProviderEphemeralBlockDevice>>,
    /// Instance's host name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// For registered instances, infrastructure class: ec2 or on-premises.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureClass")]
    pub infrastructure_class: Option<String>,
    /// Controls where to install OS and package updates when the instance boots.  Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installUpdatesOnBoot")]
    pub install_updates_on_boot: Option<bool>,
    /// ARN of the instance's IAM profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceProfileArn")]
    pub instance_profile_arn: Option<String>,
    /// Type of instance to start.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// List of the layers the instance will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerIds")]
    pub layer_ids: Option<Vec<String>>,
    /// References to CustomLayer in opsworks to populate layerIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerIdsRefs")]
    pub layer_ids_refs: Option<Vec<InstanceForProviderLayerIdsRefs>>,
    /// Selector for a list of CustomLayer in opsworks to populate layerIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerIdsSelector")]
    pub layer_ids_selector: Option<InstanceForProviderLayerIdsSelector>,
    /// Name of operating system that will be installed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<String>,
    /// Configuration block for the root block device of the instance. See Block Devices below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootBlockDevice")]
    pub root_block_device: Option<Vec<InstanceForProviderRootBlockDevice>>,
    /// Name of the type of root device instances will have by default. Valid values are ebs or instance-store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDeviceType")]
    pub root_device_type: Option<String>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdRefs")]
    pub security_group_id_refs: Option<Vec<InstanceForProviderSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdSelector")]
    pub security_group_id_selector: Option<InstanceForProviderSecurityGroupIdSelector>,
    /// Associated security groups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// Name of the SSH keypair that instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshKeyName")]
    pub ssh_key_name: Option<String>,
    /// Identifier of the stack the instance will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// Reference to a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdRef")]
    pub stack_id_ref: Option<InstanceForProviderStackIdRef>,
    /// Selector for a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdSelector")]
    pub stack_id_selector: Option<InstanceForProviderStackIdSelector>,
    /// Desired state of the instance. Valid values are running or stopped.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Instance status. Will be one of booting, connection_lost, online, pending, rebooting, requested, running_setup, setup_failed, shutting_down, start_failed, stop_failed, stopped, stopping, terminated, or terminating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Subnet ID to attach to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    pub subnet_id: Option<String>,
    /// Reference to a Subnet in ec2 to populate subnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRef")]
    pub subnet_id_ref: Option<InstanceForProviderSubnetIdRef>,
    /// Selector for a Subnet in ec2 to populate subnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    pub subnet_id_selector: Option<InstanceForProviderSubnetIdSelector>,
    /// Instance tenancy to use. Valid values are default, dedicated or host.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenancy: Option<String>,
    /// Keyword to choose what virtualization mode created instances will use. Valid values are paravirtual or hvm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualizationType")]
    pub virtualization_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderEbsBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    pub delete_on_termination: Option<bool>,
    /// Name of the device to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// Amount of provisioned IOPS. This must be set with a volume_type of io1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// Snapshot ID to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    pub snapshot_id: Option<String>,
    /// Size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values are standard, gp2, or io1. Default is standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderEphemeralBlockDevice {
    /// Name of the block device to mount on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// The Instance Store Device Name (e.g., ephemeral0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    pub virtual_name: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderLayerIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderLayerIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderLayerIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderLayerIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderLayerIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderLayerIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderLayerIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of CustomLayer in opsworks to populate layerIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderLayerIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderLayerIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderLayerIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderLayerIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderLayerIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderLayerIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderLayerIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderRootBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    pub delete_on_termination: Option<bool>,
    /// Amount of provisioned IOPS. This must be set with a volume_type of io1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// Size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values are standard, gp2, or io1. Default is standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    pub volume_type: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderStackIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderStackIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderStackIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderStackIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderStackIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderStackIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderStackIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderStackIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderStackIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderStackIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderStackIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderStackIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderStackIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderStackIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderSubnetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderSubnetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderSubnetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderSubnetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderSubnetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSubnetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSubnetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProvider {
    /// OpsWorks agent to install. Default is INHERIT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentVersion")]
    pub agent_version: Option<String>,
    /// AMI to use for the instance.  If an AMI is specified, os must be Custom.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiId")]
    pub ami_id: Option<String>,
    /// Machine architecture for created instances.  Valid values are x86_64 or i386. The default is x86_64.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// Creates load-based or time-based instances.  Valid values are load, timer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoScalingType")]
    pub auto_scaling_type: Option<String>,
    /// Name of the availability zone where instances will be created by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// Time that the instance was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    pub created_at: Option<String>,
    /// Whether to delete EBS volume on deletion. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteEbs")]
    pub delete_ebs: Option<bool>,
    /// Whether to delete the Elastic IP on deletion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteEip")]
    pub delete_eip: Option<bool>,
    /// Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsBlockDevice")]
    pub ebs_block_device: Option<Vec<InstanceInitProviderEbsBlockDevice>>,
    /// Whether the launched EC2 instance will be EBS-optimized.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    pub ebs_optimized: Option<bool>,
    /// ECS cluster's ARN for container instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecsClusterArn")]
    pub ecs_cluster_arn: Option<String>,
    /// Instance Elastic IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticIp")]
    pub elastic_ip: Option<String>,
    /// Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralBlockDevice")]
    pub ephemeral_block_device: Option<Vec<InstanceInitProviderEphemeralBlockDevice>>,
    /// Instance's host name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// For registered instances, infrastructure class: ec2 or on-premises.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureClass")]
    pub infrastructure_class: Option<String>,
    /// Controls where to install OS and package updates when the instance boots.  Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installUpdatesOnBoot")]
    pub install_updates_on_boot: Option<bool>,
    /// ARN of the instance's IAM profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceProfileArn")]
    pub instance_profile_arn: Option<String>,
    /// Type of instance to start.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// List of the layers the instance will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerIds")]
    pub layer_ids: Option<Vec<String>>,
    /// References to CustomLayer in opsworks to populate layerIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerIdsRefs")]
    pub layer_ids_refs: Option<Vec<InstanceInitProviderLayerIdsRefs>>,
    /// Selector for a list of CustomLayer in opsworks to populate layerIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerIdsSelector")]
    pub layer_ids_selector: Option<InstanceInitProviderLayerIdsSelector>,
    /// Name of operating system that will be installed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<String>,
    /// Configuration block for the root block device of the instance. See Block Devices below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootBlockDevice")]
    pub root_block_device: Option<Vec<InstanceInitProviderRootBlockDevice>>,
    /// Name of the type of root device instances will have by default. Valid values are ebs or instance-store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDeviceType")]
    pub root_device_type: Option<String>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdRefs")]
    pub security_group_id_refs: Option<Vec<InstanceInitProviderSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdSelector")]
    pub security_group_id_selector: Option<InstanceInitProviderSecurityGroupIdSelector>,
    /// Associated security groups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// Name of the SSH keypair that instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshKeyName")]
    pub ssh_key_name: Option<String>,
    /// Identifier of the stack the instance will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// Reference to a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdRef")]
    pub stack_id_ref: Option<InstanceInitProviderStackIdRef>,
    /// Selector for a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdSelector")]
    pub stack_id_selector: Option<InstanceInitProviderStackIdSelector>,
    /// Desired state of the instance. Valid values are running or stopped.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Instance status. Will be one of booting, connection_lost, online, pending, rebooting, requested, running_setup, setup_failed, shutting_down, start_failed, stop_failed, stopped, stopping, terminated, or terminating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Subnet ID to attach to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    pub subnet_id: Option<String>,
    /// Reference to a Subnet in ec2 to populate subnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRef")]
    pub subnet_id_ref: Option<InstanceInitProviderSubnetIdRef>,
    /// Selector for a Subnet in ec2 to populate subnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    pub subnet_id_selector: Option<InstanceInitProviderSubnetIdSelector>,
    /// Instance tenancy to use. Valid values are default, dedicated or host.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenancy: Option<String>,
    /// Keyword to choose what virtualization mode created instances will use. Valid values are paravirtual or hvm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualizationType")]
    pub virtualization_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderEbsBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    pub delete_on_termination: Option<bool>,
    /// Name of the device to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// Amount of provisioned IOPS. This must be set with a volume_type of io1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// Snapshot ID to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    pub snapshot_id: Option<String>,
    /// Size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values are standard, gp2, or io1. Default is standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderEphemeralBlockDevice {
    /// Name of the block device to mount on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// The Instance Store Device Name (e.g., ephemeral0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    pub virtual_name: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderLayerIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderLayerIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderLayerIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderLayerIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderLayerIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderLayerIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderLayerIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of CustomLayer in opsworks to populate layerIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderLayerIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderLayerIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderLayerIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderLayerIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderLayerIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderLayerIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderLayerIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderRootBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    pub delete_on_termination: Option<bool>,
    /// Amount of provisioned IOPS. This must be set with a volume_type of io1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// Size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values are standard, gp2, or io1. Default is standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    pub volume_type: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderStackIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderStackIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderStackIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderStackIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderStackIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderStackIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderStackIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderStackIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderStackIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderStackIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderStackIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderStackIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderStackIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderStackIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderSubnetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderSubnetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderSubnetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderSubnetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderSubnetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSubnetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSubnetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProvider {
    /// OpsWorks agent to install. Default is INHERIT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentVersion")]
    pub agent_version: Option<String>,
    /// AMI to use for the instance.  If an AMI is specified, os must be Custom.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiId")]
    pub ami_id: Option<String>,
    /// Machine architecture for created instances.  Valid values are x86_64 or i386. The default is x86_64.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// Creates load-based or time-based instances.  Valid values are load, timer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoScalingType")]
    pub auto_scaling_type: Option<String>,
    /// Name of the availability zone where instances will be created by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// Time that the instance was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    pub created_at: Option<String>,
    /// Whether to delete EBS volume on deletion. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteEbs")]
    pub delete_ebs: Option<bool>,
    /// Whether to delete the Elastic IP on deletion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteEip")]
    pub delete_eip: Option<bool>,
    /// Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsBlockDevice")]
    pub ebs_block_device: Option<Vec<InstanceStatusAtProviderEbsBlockDevice>>,
    /// Whether the launched EC2 instance will be EBS-optimized.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    pub ebs_optimized: Option<bool>,
    /// EC2 instance ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ec2InstanceId")]
    pub ec2_instance_id: Option<String>,
    /// ECS cluster's ARN for container instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecsClusterArn")]
    pub ecs_cluster_arn: Option<String>,
    /// Instance Elastic IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticIp")]
    pub elastic_ip: Option<String>,
    /// Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralBlockDevice")]
    pub ephemeral_block_device: Option<Vec<InstanceStatusAtProviderEphemeralBlockDevice>>,
    /// Instance's host name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// ID of the OpsWorks instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// For registered instances, infrastructure class: ec2 or on-premises.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureClass")]
    pub infrastructure_class: Option<String>,
    /// Controls where to install OS and package updates when the instance boots.  Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installUpdatesOnBoot")]
    pub install_updates_on_boot: Option<bool>,
    /// ARN of the instance's IAM profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceProfileArn")]
    pub instance_profile_arn: Option<String>,
    /// Type of instance to start.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// ID of the last service error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastServiceErrorId")]
    pub last_service_error_id: Option<String>,
    /// List of the layers the instance will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerIds")]
    pub layer_ids: Option<Vec<String>>,
    /// Name of operating system that will be installed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<String>,
    /// Instance's platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDns")]
    pub private_dns: Option<String>,
    /// Private IP address assigned to the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIp")]
    pub private_ip: Option<String>,
    /// Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicDns")]
    pub public_dns: Option<String>,
    /// Public IP address assigned to the instance, if applicable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIp")]
    pub public_ip: Option<String>,
    /// For registered instances, who performed the registration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registeredBy")]
    pub registered_by: Option<String>,
    /// Instance's reported AWS OpsWorks Stacks agent version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reportedAgentVersion")]
    pub reported_agent_version: Option<String>,
    /// For registered instances, the reported operating system family.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reportedOsFamily")]
    pub reported_os_family: Option<String>,
    /// For registered instances, the reported operating system name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reportedOsName")]
    pub reported_os_name: Option<String>,
    /// For registered instances, the reported operating system version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reportedOsVersion")]
    pub reported_os_version: Option<String>,
    /// Configuration block for the root block device of the instance. See Block Devices below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootBlockDevice")]
    pub root_block_device: Option<Vec<InstanceStatusAtProviderRootBlockDevice>>,
    /// Name of the type of root device instances will have by default. Valid values are ebs or instance-store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDeviceType")]
    pub root_device_type: Option<String>,
    /// Root device volume ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDeviceVolumeId")]
    pub root_device_volume_id: Option<String>,
    /// Associated security groups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// SSH key's Deep Security Agent (DSA) fingerprint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshHostDsaKeyFingerprint")]
    pub ssh_host_dsa_key_fingerprint: Option<String>,
    /// SSH key's RSA fingerprint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshHostRsaKeyFingerprint")]
    pub ssh_host_rsa_key_fingerprint: Option<String>,
    /// Name of the SSH keypair that instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshKeyName")]
    pub ssh_key_name: Option<String>,
    /// Identifier of the stack the instance will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// Desired state of the instance. Valid values are running or stopped.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Instance status. Will be one of booting, connection_lost, online, pending, rebooting, requested, running_setup, setup_failed, shutting_down, start_failed, stop_failed, stopped, stopping, terminated, or terminating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Subnet ID to attach to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    pub subnet_id: Option<String>,
    /// Instance tenancy to use. Valid values are default, dedicated or host.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenancy: Option<String>,
    /// Keyword to choose what virtualization mode created instances will use. Valid values are paravirtual or hvm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualizationType")]
    pub virtualization_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderEbsBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    pub delete_on_termination: Option<bool>,
    /// Name of the device to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// Amount of provisioned IOPS. This must be set with a volume_type of io1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// Snapshot ID to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    pub snapshot_id: Option<String>,
    /// Size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values are standard, gp2, or io1. Default is standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderEphemeralBlockDevice {
    /// Name of the block device to mount on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// The Instance Store Device Name (e.g., ephemeral0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    pub virtual_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderRootBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    pub delete_on_termination: Option<bool>,
    /// Amount of provisioned IOPS. This must be set with a volume_type of io1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// Size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values are standard, gp2, or io1. Default is standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    pub volume_type: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
}
use self::prelude::*;

/// ApplicationSpec defines the desired state of Application
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(
    group = "opsworks.aws.upbound.io",
    version = "v1beta1",
    kind = "Application",
    plural = "applications"
)]
#[kube(status = "ApplicationStatus")]
pub struct ApplicationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    pub deletion_policy: Option<ApplicationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ApplicationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    pub init_provider: Option<ApplicationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    pub provider_config_ref: Option<ApplicationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    pub publish_connection_details_to: Option<ApplicationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    pub write_connection_secret_to_ref: Option<ApplicationWriteConnectionSecretToRef>,
}

/// ApplicationSpec defines the desired state of Application
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProvider {
    /// SCM configuration of the app as described below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appSource")]
    pub app_source: Option<Vec<ApplicationForProviderAppSource>>,
    /// Run bundle install when deploying for application of type rails.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoBundleOnDeploy"
    )]
    pub auto_bundle_on_deploy: Option<String>,
    /// Specify activity and workflow workers for your app using the aws-flow gem.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "awsFlowRubySettings"
    )]
    pub aws_flow_ruby_settings: Option<String>,
    /// The data source's ARN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceArn"
    )]
    pub data_source_arn: Option<String>,
    /// The database name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceDatabaseName"
    )]
    pub data_source_database_name: Option<String>,
    /// The data source's type one of AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceType"
    )]
    pub data_source_type: Option<String>,
    /// A description of the app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Subfolder for the document root for application of type rails.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentRoot"
    )]
    pub document_root: Option<String>,
    /// A list of virtual host alias.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domains: Option<Vec<String>>,
    /// Whether to enable SSL for the app. This must be set in order to let ssl_configuration.private_key, ssl_configuration.certificate and ssl_configuration.chain take effect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSsl")]
    pub enable_ssl: Option<bool>,
    /// Object to define environment variables.  Object is described below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<Vec<ApplicationForProviderEnvironment>>,
    /// A human-readable name for the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The name of the Rails environment for application of type rails.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "railsEnv")]
    pub rails_env: Option<String>,
    /// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shortName")]
    pub short_name: Option<String>,
    /// The SSL configuration of the app. Object is described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sslConfiguration"
    )]
    pub ssl_configuration: Option<Vec<ApplicationForProviderSslConfiguration>>,
    /// ID of the stack the application will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// Reference to a Stack in opsworks to populate stackId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stackIdRef"
    )]
    pub stack_id_ref: Option<ApplicationForProviderStackIdRef>,
    /// Selector for a Stack in opsworks to populate stackId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stackIdSelector"
    )]
    pub stack_id_selector: Option<ApplicationForProviderStackIdSelector>,
    /// Opsworks application type. One of aws-flow-ruby, java, rails, php, nodejs, static or other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderAppSource {
    /// Password to use when authenticating to the source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordSecretRef"
    )]
    pub password_secret_ref: Option<ApplicationForProviderAppSourcePasswordSecretRef>,
    /// For sources that are version-aware, the revision to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    /// SSH key to use when authenticating to the source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sshKeySecretRef"
    )]
    pub ssh_key_secret_ref: Option<ApplicationForProviderAppSourceSshKeySecretRef>,
    /// The type of source to use. For example, "archive".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// The URL where the app resource can be found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Username to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Password to use when authenticating to the source.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderAppSourcePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SSH key to use when authenticating to the source.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderAppSourceSshKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderEnvironment {
    /// Variable name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Set visibility of the variable value to true or false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Variable value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderSslConfiguration {
    /// The contents of the certificate's domain.crt file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<String>,
    /// Can be used to specify an intermediate certificate authority key or client authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chain: Option<String>,
    /// The private key; the contents of the certificate's domain.key file.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateKeySecretRef"
    )]
    pub private_key_secret_ref: Option<ApplicationForProviderSslConfigurationPrivateKeySecretRef>,
}

/// The private key; the contents of the certificate's domain.key file.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderSslConfigurationPrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderStackIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderStackIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderStackIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationForProviderStackIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderStackIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderStackIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderStackIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderStackIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderStackIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderStackIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationForProviderStackIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderStackIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderStackIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderStackIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProvider {
    /// SCM configuration of the app as described below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appSource")]
    pub app_source: Option<Vec<ApplicationInitProviderAppSource>>,
    /// Run bundle install when deploying for application of type rails.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoBundleOnDeploy"
    )]
    pub auto_bundle_on_deploy: Option<String>,
    /// Specify activity and workflow workers for your app using the aws-flow gem.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "awsFlowRubySettings"
    )]
    pub aws_flow_ruby_settings: Option<String>,
    /// The data source's ARN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceArn"
    )]
    pub data_source_arn: Option<String>,
    /// The database name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceDatabaseName"
    )]
    pub data_source_database_name: Option<String>,
    /// The data source's type one of AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceType"
    )]
    pub data_source_type: Option<String>,
    /// A description of the app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Subfolder for the document root for application of type rails.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentRoot"
    )]
    pub document_root: Option<String>,
    /// A list of virtual host alias.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domains: Option<Vec<String>>,
    /// Whether to enable SSL for the app. This must be set in order to let ssl_configuration.private_key, ssl_configuration.certificate and ssl_configuration.chain take effect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSsl")]
    pub enable_ssl: Option<bool>,
    /// Object to define environment variables.  Object is described below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<Vec<ApplicationInitProviderEnvironment>>,
    /// A human-readable name for the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The name of the Rails environment for application of type rails.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "railsEnv")]
    pub rails_env: Option<String>,
    /// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shortName")]
    pub short_name: Option<String>,
    /// The SSL configuration of the app. Object is described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sslConfiguration"
    )]
    pub ssl_configuration: Option<Vec<ApplicationInitProviderSslConfiguration>>,
    /// ID of the stack the application will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// Reference to a Stack in opsworks to populate stackId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stackIdRef"
    )]
    pub stack_id_ref: Option<ApplicationInitProviderStackIdRef>,
    /// Selector for a Stack in opsworks to populate stackId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stackIdSelector"
    )]
    pub stack_id_selector: Option<ApplicationInitProviderStackIdSelector>,
    /// Opsworks application type. One of aws-flow-ruby, java, rails, php, nodejs, static or other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderAppSource {
    /// Password to use when authenticating to the source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordSecretRef"
    )]
    pub password_secret_ref: Option<ApplicationInitProviderAppSourcePasswordSecretRef>,
    /// For sources that are version-aware, the revision to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    /// SSH key to use when authenticating to the source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sshKeySecretRef"
    )]
    pub ssh_key_secret_ref: Option<ApplicationInitProviderAppSourceSshKeySecretRef>,
    /// The type of source to use. For example, "archive".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// The URL where the app resource can be found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Username to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Password to use when authenticating to the source.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderAppSourcePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SSH key to use when authenticating to the source.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderAppSourceSshKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderEnvironment {
    /// Variable name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Set visibility of the variable value to true or false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Variable value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderSslConfiguration {
    /// The contents of the certificate's domain.crt file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<String>,
    /// Can be used to specify an intermediate certificate authority key or client authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chain: Option<String>,
    /// The private key; the contents of the certificate's domain.key file.
    #[serde(rename = "privateKeySecretRef")]
    pub private_key_secret_ref: ApplicationInitProviderSslConfigurationPrivateKeySecretRef,
}

/// The private key; the contents of the certificate's domain.key file.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderSslConfigurationPrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderStackIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderStackIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderStackIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationInitProviderStackIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderStackIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderStackIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderStackIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderStackIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderStackIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderStackIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationInitProviderStackIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderStackIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderStackIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderStackIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ApplicationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ApplicationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ApplicationStatus defines the observed state of Application.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    pub at_provider: Option<ApplicationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProvider {
    /// SCM configuration of the app as described below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appSource")]
    pub app_source: Option<Vec<ApplicationStatusAtProviderAppSource>>,
    /// Run bundle install when deploying for application of type rails.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoBundleOnDeploy"
    )]
    pub auto_bundle_on_deploy: Option<String>,
    /// Specify activity and workflow workers for your app using the aws-flow gem.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "awsFlowRubySettings"
    )]
    pub aws_flow_ruby_settings: Option<String>,
    /// The data source's ARN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceArn"
    )]
    pub data_source_arn: Option<String>,
    /// The database name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceDatabaseName"
    )]
    pub data_source_database_name: Option<String>,
    /// The data source's type one of AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceType"
    )]
    pub data_source_type: Option<String>,
    /// A description of the app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Subfolder for the document root for application of type rails.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentRoot"
    )]
    pub document_root: Option<String>,
    /// A list of virtual host alias.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domains: Option<Vec<String>>,
    /// Whether to enable SSL for the app. This must be set in order to let ssl_configuration.private_key, ssl_configuration.certificate and ssl_configuration.chain take effect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSsl")]
    pub enable_ssl: Option<bool>,
    /// Object to define environment variables.  Object is described below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<Vec<ApplicationStatusAtProviderEnvironment>>,
    /// The id of the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A human-readable name for the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The name of the Rails environment for application of type rails.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "railsEnv")]
    pub rails_env: Option<String>,
    /// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shortName")]
    pub short_name: Option<String>,
    /// The SSL configuration of the app. Object is described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sslConfiguration"
    )]
    pub ssl_configuration: Option<Vec<ApplicationStatusAtProviderSslConfiguration>>,
    /// ID of the stack the application will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// Opsworks application type. One of aws-flow-ruby, java, rails, php, nodejs, static or other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderAppSource {
    /// For sources that are version-aware, the revision to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    /// The type of source to use. For example, "archive".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// The URL where the app resource can be found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Username to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderEnvironment {
    /// Variable name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Set visibility of the variable value to true or false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Variable value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderSslConfiguration {
    /// The contents of the certificate's domain.crt file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<String>,
    /// Can be used to specify an intermediate certificate authority key or client authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chain: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// CustomLayerSpec defines the desired state of CustomLayer
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "opsworks.aws.upbound.io", version = "v1beta2", kind = "CustomLayer", plural = "customlayers")]
#[kube(status = "CustomLayerStatus")]
pub struct CustomLayerSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<CustomLayerDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CustomLayerForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<CustomLayerInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<CustomLayerProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<CustomLayerPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<CustomLayerWriteConnectionSecretToRef>,
}

/// CustomLayerSpec defines the desired state of CustomLayer
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProvider {
    /// Whether to automatically assign an elastic IP address to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignElasticIps")]
    pub auto_assign_elastic_ips: Option<bool>,
    /// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignPublicIps")]
    pub auto_assign_public_ips: Option<bool>,
    /// Whether to enable auto-healing for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHealing")]
    pub auto_healing: Option<bool>,
    /// Will create an EBS volume and connect it to the layer's instances. See Cloudwatch Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchConfiguration")]
    pub cloudwatch_configuration: Option<CustomLayerForProviderCloudwatchConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customConfigureRecipes")]
    pub custom_configure_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customDeployRecipes")]
    pub custom_deploy_recipes: Option<Vec<String>>,
    /// The ARN of an IAM profile that will be used for the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInstanceProfileArn")]
    pub custom_instance_profile_arn: Option<String>,
    /// Custom JSON attributes to apply to the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customJson")]
    pub custom_json: Option<String>,
    /// References to SecurityGroup in ec2 to populate customSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIdRefs")]
    pub custom_security_group_id_refs: Option<Vec<CustomLayerForProviderCustomSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIdSelector")]
    pub custom_security_group_id_selector: Option<CustomLayerForProviderCustomSecurityGroupIdSelector>,
    /// Ids for a set of security groups to apply to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIds")]
    pub custom_security_group_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSetupRecipes")]
    pub custom_setup_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customShutdownRecipes")]
    pub custom_shutdown_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customUndeployRecipes")]
    pub custom_undeploy_recipes: Option<Vec<String>>,
    /// Whether to enable Elastic Load Balancing connection draining.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainElbOnShutdown")]
    pub drain_elb_on_shutdown: Option<bool>,
    /// Will create an EBS volume and connect it to the layer's instances. See EBS Volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsVolume")]
    pub ebs_volume: Option<Vec<CustomLayerForProviderEbsVolume>>,
    /// Name of an Elastic Load Balancer to attach to this layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticLoadBalancer")]
    pub elastic_load_balancer: Option<String>,
    /// Whether to install OS and package updates on each instance when it boots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installUpdatesOnBoot")]
    pub install_updates_on_boot: Option<bool>,
    /// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceShutdownTimeout")]
    pub instance_shutdown_timeout: Option<f64>,
    /// Load-based auto scaling configuration. See Load Based AutoScaling
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBasedAutoScaling")]
    pub load_based_auto_scaling: Option<CustomLayerForProviderLoadBasedAutoScaling>,
    /// A human-readable name for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A short, machine-readable name for the layer, which will be used to identify it in the Chef node JSON.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shortName")]
    pub short_name: Option<String>,
    /// ID of the stack the layer will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// Reference to a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdRef")]
    pub stack_id_ref: Option<CustomLayerForProviderStackIdRef>,
    /// Selector for a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdSelector")]
    pub stack_id_selector: Option<CustomLayerForProviderStackIdSelector>,
    /// Names of a set of system packages to install on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemPackages")]
    pub system_packages: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Whether to use EBS-optimized instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useEbsOptimizedInstances")]
    pub use_ebs_optimized_instances: Option<bool>,
}

/// Will create an EBS volume and connect it to the layer's instances. See Cloudwatch Configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderCloudwatchConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A block the specifies how an opsworks logs look like. See Log Streams.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreams")]
    pub log_streams: Option<Vec<CustomLayerForProviderCloudwatchConfigurationLogStreams>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderCloudwatchConfigurationLogStreams {
    /// Specifies the max number of log events in a batch, up to 10000. The default value is 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchCount")]
    pub batch_count: Option<f64>,
    /// Specifies the maximum size of log events in a batch, in bytes, up to 1048576 bytes. The default value is 32768 bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    pub batch_size: Option<f64>,
    /// Specifies the time duration for the batching of log events. The minimum value is 5000 and default value is 5000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferDuration")]
    pub buffer_duration: Option<f64>,
    /// Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datetimeFormat")]
    pub datetime_format: Option<String>,
    /// Specifies the encoding of the log file so that the file can be read correctly. The default is utf_8.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as 1, 2-5. The default value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileFingerprintLines")]
    pub file_fingerprint_lines: Option<String>,
    /// Specifies where to start to read data (start_of_file or end_of_file). The default is start_of_file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialPosition")]
    pub initial_position: Option<String>,
    /// Specifies the destination log group. A log group is created automatically if it doesn't already exist.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// Specifies the pattern for identifying the start of a log message.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multilineStartPattern")]
    pub multiline_start_pattern: Option<String>,
    /// Specifies the time zone of log event time stamps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderCustomSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerForProviderCustomSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderCustomSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerForProviderCustomSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerForProviderCustomSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerForProviderCustomSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerForProviderCustomSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderCustomSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerForProviderCustomSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderCustomSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerForProviderCustomSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerForProviderCustomSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerForProviderCustomSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerForProviderCustomSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderEbsVolume {
    /// Encrypt the volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encrypted: Option<bool>,
    /// For PIOPS volumes, the IOPS per disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// The path to mount the EBS volume on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    pub mount_point: Option<String>,
    /// The number of disks to use for the EBS volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfDisks")]
    pub number_of_disks: Option<f64>,
    /// The RAID level to use for the volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "raidLevel")]
    pub raid_level: Option<String>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The type of volume to create. This may be standard (the default), io1 or gp2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Load-based auto scaling configuration. See Load Based AutoScaling
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderLoadBasedAutoScaling {
    /// The downscaling settings, as defined below, used for load-based autoscaling
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub downscaling: Option<CustomLayerForProviderLoadBasedAutoScalingDownscaling>,
    /// Whether load-based auto scaling is enabled for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// The upscaling settings, as defined below, used for load-based autoscaling
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upscaling: Option<CustomLayerForProviderLoadBasedAutoScalingUpscaling>,
}

/// The downscaling settings, as defined below, used for load-based autoscaling
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderLoadBasedAutoScalingDownscaling {
    /// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alarms: Option<Vec<String>>,
    /// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    pub cpu_threshold: Option<f64>,
    /// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    pub ignore_metrics_time: Option<f64>,
    /// The number of instances to add or remove when the load exceeds a threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    pub instance_count: Option<f64>,
    /// The load threshold. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    pub load_threshold: Option<f64>,
    /// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    pub memory_threshold: Option<f64>,
    /// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    pub thresholds_wait_time: Option<f64>,
}

/// The upscaling settings, as defined below, used for load-based autoscaling
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderLoadBasedAutoScalingUpscaling {
    /// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alarms: Option<Vec<String>>,
    /// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    pub cpu_threshold: Option<f64>,
    /// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    pub ignore_metrics_time: Option<f64>,
    /// The number of instances to add or remove when the load exceeds a threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    pub instance_count: Option<f64>,
    /// The load threshold. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    pub load_threshold: Option<f64>,
    /// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    pub memory_threshold: Option<f64>,
    /// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    pub thresholds_wait_time: Option<f64>,
}

/// Reference to a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderStackIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerForProviderStackIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderStackIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerForProviderStackIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerForProviderStackIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerForProviderStackIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerForProviderStackIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderStackIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerForProviderStackIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerForProviderStackIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerForProviderStackIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerForProviderStackIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerForProviderStackIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerForProviderStackIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProvider {
    /// Whether to automatically assign an elastic IP address to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignElasticIps")]
    pub auto_assign_elastic_ips: Option<bool>,
    /// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignPublicIps")]
    pub auto_assign_public_ips: Option<bool>,
    /// Whether to enable auto-healing for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHealing")]
    pub auto_healing: Option<bool>,
    /// Will create an EBS volume and connect it to the layer's instances. See Cloudwatch Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchConfiguration")]
    pub cloudwatch_configuration: Option<CustomLayerInitProviderCloudwatchConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customConfigureRecipes")]
    pub custom_configure_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customDeployRecipes")]
    pub custom_deploy_recipes: Option<Vec<String>>,
    /// The ARN of an IAM profile that will be used for the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInstanceProfileArn")]
    pub custom_instance_profile_arn: Option<String>,
    /// Custom JSON attributes to apply to the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customJson")]
    pub custom_json: Option<String>,
    /// References to SecurityGroup in ec2 to populate customSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIdRefs")]
    pub custom_security_group_id_refs: Option<Vec<CustomLayerInitProviderCustomSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIdSelector")]
    pub custom_security_group_id_selector: Option<CustomLayerInitProviderCustomSecurityGroupIdSelector>,
    /// Ids for a set of security groups to apply to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIds")]
    pub custom_security_group_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSetupRecipes")]
    pub custom_setup_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customShutdownRecipes")]
    pub custom_shutdown_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customUndeployRecipes")]
    pub custom_undeploy_recipes: Option<Vec<String>>,
    /// Whether to enable Elastic Load Balancing connection draining.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainElbOnShutdown")]
    pub drain_elb_on_shutdown: Option<bool>,
    /// Will create an EBS volume and connect it to the layer's instances. See EBS Volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsVolume")]
    pub ebs_volume: Option<Vec<CustomLayerInitProviderEbsVolume>>,
    /// Name of an Elastic Load Balancer to attach to this layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticLoadBalancer")]
    pub elastic_load_balancer: Option<String>,
    /// Whether to install OS and package updates on each instance when it boots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installUpdatesOnBoot")]
    pub install_updates_on_boot: Option<bool>,
    /// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceShutdownTimeout")]
    pub instance_shutdown_timeout: Option<f64>,
    /// Load-based auto scaling configuration. See Load Based AutoScaling
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBasedAutoScaling")]
    pub load_based_auto_scaling: Option<CustomLayerInitProviderLoadBasedAutoScaling>,
    /// A human-readable name for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A short, machine-readable name for the layer, which will be used to identify it in the Chef node JSON.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shortName")]
    pub short_name: Option<String>,
    /// ID of the stack the layer will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// Reference to a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdRef")]
    pub stack_id_ref: Option<CustomLayerInitProviderStackIdRef>,
    /// Selector for a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdSelector")]
    pub stack_id_selector: Option<CustomLayerInitProviderStackIdSelector>,
    /// Names of a set of system packages to install on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemPackages")]
    pub system_packages: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Whether to use EBS-optimized instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useEbsOptimizedInstances")]
    pub use_ebs_optimized_instances: Option<bool>,
}

/// Will create an EBS volume and connect it to the layer's instances. See Cloudwatch Configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderCloudwatchConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A block the specifies how an opsworks logs look like. See Log Streams.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreams")]
    pub log_streams: Option<Vec<CustomLayerInitProviderCloudwatchConfigurationLogStreams>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderCloudwatchConfigurationLogStreams {
    /// Specifies the max number of log events in a batch, up to 10000. The default value is 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchCount")]
    pub batch_count: Option<f64>,
    /// Specifies the maximum size of log events in a batch, in bytes, up to 1048576 bytes. The default value is 32768 bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    pub batch_size: Option<f64>,
    /// Specifies the time duration for the batching of log events. The minimum value is 5000 and default value is 5000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferDuration")]
    pub buffer_duration: Option<f64>,
    /// Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datetimeFormat")]
    pub datetime_format: Option<String>,
    /// Specifies the encoding of the log file so that the file can be read correctly. The default is utf_8.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as 1, 2-5. The default value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileFingerprintLines")]
    pub file_fingerprint_lines: Option<String>,
    /// Specifies where to start to read data (start_of_file or end_of_file). The default is start_of_file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialPosition")]
    pub initial_position: Option<String>,
    /// Specifies the destination log group. A log group is created automatically if it doesn't already exist.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// Specifies the pattern for identifying the start of a log message.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multilineStartPattern")]
    pub multiline_start_pattern: Option<String>,
    /// Specifies the time zone of log event time stamps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderCustomSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerInitProviderCustomSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderCustomSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerInitProviderCustomSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerInitProviderCustomSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerInitProviderCustomSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerInitProviderCustomSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderCustomSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerInitProviderCustomSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderCustomSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerInitProviderCustomSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerInitProviderCustomSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerInitProviderCustomSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerInitProviderCustomSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderEbsVolume {
    /// Encrypt the volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encrypted: Option<bool>,
    /// For PIOPS volumes, the IOPS per disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// The path to mount the EBS volume on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    pub mount_point: Option<String>,
    /// The number of disks to use for the EBS volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfDisks")]
    pub number_of_disks: Option<f64>,
    /// The RAID level to use for the volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "raidLevel")]
    pub raid_level: Option<String>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The type of volume to create. This may be standard (the default), io1 or gp2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Load-based auto scaling configuration. See Load Based AutoScaling
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderLoadBasedAutoScaling {
    /// The downscaling settings, as defined below, used for load-based autoscaling
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub downscaling: Option<CustomLayerInitProviderLoadBasedAutoScalingDownscaling>,
    /// Whether load-based auto scaling is enabled for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// The upscaling settings, as defined below, used for load-based autoscaling
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upscaling: Option<CustomLayerInitProviderLoadBasedAutoScalingUpscaling>,
}

/// The downscaling settings, as defined below, used for load-based autoscaling
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderLoadBasedAutoScalingDownscaling {
    /// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alarms: Option<Vec<String>>,
    /// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    pub cpu_threshold: Option<f64>,
    /// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    pub ignore_metrics_time: Option<f64>,
    /// The number of instances to add or remove when the load exceeds a threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    pub instance_count: Option<f64>,
    /// The load threshold. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    pub load_threshold: Option<f64>,
    /// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    pub memory_threshold: Option<f64>,
    /// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    pub thresholds_wait_time: Option<f64>,
}

/// The upscaling settings, as defined below, used for load-based autoscaling
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderLoadBasedAutoScalingUpscaling {
    /// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alarms: Option<Vec<String>>,
    /// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    pub cpu_threshold: Option<f64>,
    /// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    pub ignore_metrics_time: Option<f64>,
    /// The number of instances to add or remove when the load exceeds a threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    pub instance_count: Option<f64>,
    /// The load threshold. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    pub load_threshold: Option<f64>,
    /// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    pub memory_threshold: Option<f64>,
    /// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    pub thresholds_wait_time: Option<f64>,
}

/// Reference to a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderStackIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerInitProviderStackIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderStackIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerInitProviderStackIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerInitProviderStackIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerInitProviderStackIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerInitProviderStackIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderStackIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerInitProviderStackIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerInitProviderStackIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerInitProviderStackIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerInitProviderStackIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerInitProviderStackIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerInitProviderStackIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<CustomLayerPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<CustomLayerPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomLayerPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomLayerPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomLayerPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomLayerPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CustomLayerStatus defines the observed state of CustomLayer.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<CustomLayerStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerStatusAtProvider {
    /// The Amazon Resource Name(ARN) of the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Whether to automatically assign an elastic IP address to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignElasticIps")]
    pub auto_assign_elastic_ips: Option<bool>,
    /// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignPublicIps")]
    pub auto_assign_public_ips: Option<bool>,
    /// Whether to enable auto-healing for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHealing")]
    pub auto_healing: Option<bool>,
    /// Will create an EBS volume and connect it to the layer's instances. See Cloudwatch Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchConfiguration")]
    pub cloudwatch_configuration: Option<CustomLayerStatusAtProviderCloudwatchConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customConfigureRecipes")]
    pub custom_configure_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customDeployRecipes")]
    pub custom_deploy_recipes: Option<Vec<String>>,
    /// The ARN of an IAM profile that will be used for the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInstanceProfileArn")]
    pub custom_instance_profile_arn: Option<String>,
    /// Custom JSON attributes to apply to the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customJson")]
    pub custom_json: Option<String>,
    /// Ids for a set of security groups to apply to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIds")]
    pub custom_security_group_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSetupRecipes")]
    pub custom_setup_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customShutdownRecipes")]
    pub custom_shutdown_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customUndeployRecipes")]
    pub custom_undeploy_recipes: Option<Vec<String>>,
    /// Whether to enable Elastic Load Balancing connection draining.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainElbOnShutdown")]
    pub drain_elb_on_shutdown: Option<bool>,
    /// Will create an EBS volume and connect it to the layer's instances. See EBS Volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsVolume")]
    pub ebs_volume: Option<Vec<CustomLayerStatusAtProviderEbsVolume>>,
    /// Name of an Elastic Load Balancer to attach to this layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticLoadBalancer")]
    pub elastic_load_balancer: Option<String>,
    /// The id of the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Whether to install OS and package updates on each instance when it boots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installUpdatesOnBoot")]
    pub install_updates_on_boot: Option<bool>,
    /// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceShutdownTimeout")]
    pub instance_shutdown_timeout: Option<f64>,
    /// Load-based auto scaling configuration. See Load Based AutoScaling
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBasedAutoScaling")]
    pub load_based_auto_scaling: Option<CustomLayerStatusAtProviderLoadBasedAutoScaling>,
    /// A human-readable name for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A short, machine-readable name for the layer, which will be used to identify it in the Chef node JSON.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shortName")]
    pub short_name: Option<String>,
    /// ID of the stack the layer will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// Names of a set of system packages to install on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemPackages")]
    pub system_packages: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Whether to use EBS-optimized instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useEbsOptimizedInstances")]
    pub use_ebs_optimized_instances: Option<bool>,
}

/// Will create an EBS volume and connect it to the layer's instances. See Cloudwatch Configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerStatusAtProviderCloudwatchConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A block the specifies how an opsworks logs look like. See Log Streams.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreams")]
    pub log_streams: Option<Vec<CustomLayerStatusAtProviderCloudwatchConfigurationLogStreams>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerStatusAtProviderCloudwatchConfigurationLogStreams {
    /// Specifies the max number of log events in a batch, up to 10000. The default value is 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchCount")]
    pub batch_count: Option<f64>,
    /// Specifies the maximum size of log events in a batch, in bytes, up to 1048576 bytes. The default value is 32768 bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    pub batch_size: Option<f64>,
    /// Specifies the time duration for the batching of log events. The minimum value is 5000 and default value is 5000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferDuration")]
    pub buffer_duration: Option<f64>,
    /// Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datetimeFormat")]
    pub datetime_format: Option<String>,
    /// Specifies the encoding of the log file so that the file can be read correctly. The default is utf_8.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as 1, 2-5. The default value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileFingerprintLines")]
    pub file_fingerprint_lines: Option<String>,
    /// Specifies where to start to read data (start_of_file or end_of_file). The default is start_of_file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialPosition")]
    pub initial_position: Option<String>,
    /// Specifies the destination log group. A log group is created automatically if it doesn't already exist.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// Specifies the pattern for identifying the start of a log message.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multilineStartPattern")]
    pub multiline_start_pattern: Option<String>,
    /// Specifies the time zone of log event time stamps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerStatusAtProviderEbsVolume {
    /// Encrypt the volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encrypted: Option<bool>,
    /// For PIOPS volumes, the IOPS per disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// The path to mount the EBS volume on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    pub mount_point: Option<String>,
    /// The number of disks to use for the EBS volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfDisks")]
    pub number_of_disks: Option<f64>,
    /// The RAID level to use for the volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "raidLevel")]
    pub raid_level: Option<String>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The type of volume to create. This may be standard (the default), io1 or gp2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Load-based auto scaling configuration. See Load Based AutoScaling
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerStatusAtProviderLoadBasedAutoScaling {
    /// The downscaling settings, as defined below, used for load-based autoscaling
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub downscaling: Option<CustomLayerStatusAtProviderLoadBasedAutoScalingDownscaling>,
    /// Whether load-based auto scaling is enabled for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// The upscaling settings, as defined below, used for load-based autoscaling
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upscaling: Option<CustomLayerStatusAtProviderLoadBasedAutoScalingUpscaling>,
}

/// The downscaling settings, as defined below, used for load-based autoscaling
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerStatusAtProviderLoadBasedAutoScalingDownscaling {
    /// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alarms: Option<Vec<String>>,
    /// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    pub cpu_threshold: Option<f64>,
    /// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    pub ignore_metrics_time: Option<f64>,
    /// The number of instances to add or remove when the load exceeds a threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    pub instance_count: Option<f64>,
    /// The load threshold. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    pub load_threshold: Option<f64>,
    /// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    pub memory_threshold: Option<f64>,
    /// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    pub thresholds_wait_time: Option<f64>,
}

/// The upscaling settings, as defined below, used for load-based autoscaling
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomLayerStatusAtProviderLoadBasedAutoScalingUpscaling {
    /// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alarms: Option<Vec<String>>,
    /// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    pub cpu_threshold: Option<f64>,
    /// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    pub ignore_metrics_time: Option<f64>,
    /// The number of instances to add or remove when the load exceeds a threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    pub instance_count: Option<f64>,
    /// The load threshold. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    pub load_threshold: Option<f64>,
    /// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    pub memory_threshold: Option<f64>,
    /// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    pub thresholds_wait_time: Option<f64>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "alloydb.gcp.upbound.io", version = "v1beta2", kind = "Instance", plural = "instances")]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProvider {
    /// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
    /// Note: This field is non-authoritative, and will only manage the annotations present in your configuration.
    /// Please refer to the field effective_annotations for all of the annotations present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// 'Availability type of an Instance. Defaults to REGIONAL for both primary and read instances.
    /// Note that primary and read instances can have different availability types.
    /// Only READ_POOL instance supports ZONAL type. Users can't specify the zone for READ_POOL instance.
    /// Zone is automatically chosen from the list of zones in the region specified.
    /// Read pool of size 1 can only have zonal availability. Read pools with node count of 2 or more
    /// can have regional availability (nodes are present in 2 or more zones in a region).'
    /// Possible values are: AVAILABILITY_TYPE_UNSPECIFIED, ZONAL, REGIONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityType")]
    pub availability_type: Option<String>,
    /// Client connection specific configurations.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientConnectionConfig")]
    pub client_connection_config: Option<InstanceForProviderClientConnectionConfig>,
    /// Identifies the alloydb cluster. Must be in the format
    /// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Reference to a Cluster in alloydb to populate cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterRef")]
    pub cluster_ref: Option<InstanceForProviderClusterRef>,
    /// Selector for a Cluster in alloydb to populate cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSelector")]
    pub cluster_selector: Option<InstanceForProviderClusterSelector>,
    /// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseFlags")]
    pub database_flags: Option<HashMap<String, String>>,
    /// User-settable and human-readable display name for the Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gceZone")]
    pub gce_zone: Option<String>,
    /// The type of the instance.
    /// If the instance type is READ_POOL, provide the associated PRIMARY/SECONDARY instance in the depends_on meta-data attribute.
    /// If the instance type is SECONDARY, point to the cluster_type of the associated secondary cluster instead of mentioning SECONDARY.
    /// Example: {instance_type = google_alloydb_cluster.<secondary_cluster_name>.
    /// Use deletion_policy = "FORCE" in the associated secondary cluster and delete the cluster forcefully to delete the secondary cluster as well its associated secondary instance.
    /// Possible values are: PRIMARY, READ_POOL, SECONDARY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// Reference to a Cluster in alloydb to populate instanceType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceTypeRef")]
    pub instance_type_ref: Option<InstanceForProviderInstanceTypeRef>,
    /// Selector for a Cluster in alloydb to populate instanceType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceTypeSelector")]
    pub instance_type_selector: Option<InstanceForProviderInstanceTypeSelector>,
    /// User-defined labels for the alloydb instance.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Configurations for the machines that host the underlying database engine.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineConfig")]
    pub machine_config: Option<InstanceForProviderMachineConfig>,
    /// Instance level network configuration.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkConfig")]
    pub network_config: Option<InstanceForProviderNetworkConfig>,
    /// Configuration for Private Service Connect (PSC) for the instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscInstanceConfig")]
    pub psc_instance_config: Option<InstanceForProviderPscInstanceConfig>,
    /// Configuration for query insights.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryInsightsConfig")]
    pub query_insights_config: Option<InstanceForProviderQueryInsightsConfig>,
    /// Read pool specific config. If the instance type is READ_POOL, this configuration must be provided.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readPoolConfig")]
    pub read_pool_config: Option<InstanceForProviderReadPoolConfig>,
}

/// Client connection specific configurations.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderClientConnectionConfig {
    /// Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireConnectors")]
    pub require_connectors: Option<bool>,
    /// SSL config option for this instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<InstanceForProviderClientConnectionConfigSslConfig>,
}

/// SSL config option for this instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderClientConnectionConfigSslConfig {
    /// SSL mode. Specifies client-server SSL/TLS connection behavior.
    /// Possible values are: ENCRYPTED_ONLY, ALLOW_UNENCRYPTED_AND_ENCRYPTED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslMode")]
    pub ssl_mode: Option<String>,
}

/// Reference to a Cluster in alloydb to populate cluster.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderClusterRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderClusterRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderClusterRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderClusterRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderClusterRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderClusterRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderClusterRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in alloydb to populate cluster.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderClusterSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderClusterSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderClusterSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderClusterSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderClusterSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderClusterSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderClusterSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Cluster in alloydb to populate instanceType.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderInstanceTypeRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderInstanceTypeRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderInstanceTypeRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderInstanceTypeRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderInstanceTypeRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderInstanceTypeRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderInstanceTypeRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in alloydb to populate instanceType.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderInstanceTypeSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderInstanceTypeSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderInstanceTypeSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderInstanceTypeSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderInstanceTypeSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderInstanceTypeSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderInstanceTypeSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configurations for the machines that host the underlying database engine.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMachineConfig {
    /// The number of CPU's in the VM instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCount")]
    pub cpu_count: Option<f64>,
}

/// Instance level network configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderNetworkConfig {
    /// A list of external networks authorized to access this instance. This
    /// field is only allowed to be set when enable_public_ip is set to
    /// true.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedExternalNetworks")]
    pub authorized_external_networks: Option<Vec<InstanceForProviderNetworkConfigAuthorizedExternalNetworks>>,
    /// Enabling public ip for the instance. If a user wishes to disable this,
    /// please also clear the list of the authorized external networks set on
    /// the same instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePublicIp")]
    pub enable_public_ip: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderNetworkConfigAuthorizedExternalNetworks {
    /// CIDR range for one authorized network of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRange")]
    pub cidr_range: Option<String>,
}

/// Configuration for Private Service Connect (PSC) for the instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderPscInstanceConfig {
    /// List of consumer projects that are allowed to create PSC endpoints to service-attachments to this instance.
    /// These should be specified as project numbers only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedConsumerProjects")]
    pub allowed_consumer_projects: Option<Vec<String>>,
}

/// Configuration for query insights.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderQueryInsightsConfig {
    /// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryPlansPerMinute")]
    pub query_plans_per_minute: Option<f64>,
    /// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringLength")]
    pub query_string_length: Option<f64>,
    /// Record application tags for an instance. This flag is turned "on" by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordApplicationTags")]
    pub record_application_tags: Option<bool>,
    /// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordClientAddress")]
    pub record_client_address: Option<bool>,
}

/// Read pool specific config. If the instance type is READ_POOL, this configuration must be provided.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderReadPoolConfig {
    /// Read capacity, i.e. number of nodes in a read pool instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    pub node_count: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProvider {
    /// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
    /// Note: This field is non-authoritative, and will only manage the annotations present in your configuration.
    /// Please refer to the field effective_annotations for all of the annotations present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// 'Availability type of an Instance. Defaults to REGIONAL for both primary and read instances.
    /// Note that primary and read instances can have different availability types.
    /// Only READ_POOL instance supports ZONAL type. Users can't specify the zone for READ_POOL instance.
    /// Zone is automatically chosen from the list of zones in the region specified.
    /// Read pool of size 1 can only have zonal availability. Read pools with node count of 2 or more
    /// can have regional availability (nodes are present in 2 or more zones in a region).'
    /// Possible values are: AVAILABILITY_TYPE_UNSPECIFIED, ZONAL, REGIONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityType")]
    pub availability_type: Option<String>,
    /// Client connection specific configurations.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientConnectionConfig")]
    pub client_connection_config: Option<InstanceInitProviderClientConnectionConfig>,
    /// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseFlags")]
    pub database_flags: Option<HashMap<String, String>>,
    /// User-settable and human-readable display name for the Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gceZone")]
    pub gce_zone: Option<String>,
    /// The type of the instance.
    /// If the instance type is READ_POOL, provide the associated PRIMARY/SECONDARY instance in the depends_on meta-data attribute.
    /// If the instance type is SECONDARY, point to the cluster_type of the associated secondary cluster instead of mentioning SECONDARY.
    /// Example: {instance_type = google_alloydb_cluster.<secondary_cluster_name>.
    /// Use deletion_policy = "FORCE" in the associated secondary cluster and delete the cluster forcefully to delete the secondary cluster as well its associated secondary instance.
    /// Possible values are: PRIMARY, READ_POOL, SECONDARY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// Reference to a Cluster in alloydb to populate instanceType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceTypeRef")]
    pub instance_type_ref: Option<InstanceInitProviderInstanceTypeRef>,
    /// Selector for a Cluster in alloydb to populate instanceType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceTypeSelector")]
    pub instance_type_selector: Option<InstanceInitProviderInstanceTypeSelector>,
    /// User-defined labels for the alloydb instance.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Configurations for the machines that host the underlying database engine.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineConfig")]
    pub machine_config: Option<InstanceInitProviderMachineConfig>,
    /// Instance level network configuration.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkConfig")]
    pub network_config: Option<InstanceInitProviderNetworkConfig>,
    /// Configuration for Private Service Connect (PSC) for the instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscInstanceConfig")]
    pub psc_instance_config: Option<InstanceInitProviderPscInstanceConfig>,
    /// Configuration for query insights.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryInsightsConfig")]
    pub query_insights_config: Option<InstanceInitProviderQueryInsightsConfig>,
    /// Read pool specific config. If the instance type is READ_POOL, this configuration must be provided.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readPoolConfig")]
    pub read_pool_config: Option<InstanceInitProviderReadPoolConfig>,
}

/// Client connection specific configurations.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderClientConnectionConfig {
    /// Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireConnectors")]
    pub require_connectors: Option<bool>,
    /// SSL config option for this instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<InstanceInitProviderClientConnectionConfigSslConfig>,
}

/// SSL config option for this instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderClientConnectionConfigSslConfig {
    /// SSL mode. Specifies client-server SSL/TLS connection behavior.
    /// Possible values are: ENCRYPTED_ONLY, ALLOW_UNENCRYPTED_AND_ENCRYPTED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslMode")]
    pub ssl_mode: Option<String>,
}

/// Reference to a Cluster in alloydb to populate instanceType.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderInstanceTypeRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderInstanceTypeRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderInstanceTypeRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderInstanceTypeRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderInstanceTypeRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderInstanceTypeRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderInstanceTypeRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in alloydb to populate instanceType.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderInstanceTypeSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderInstanceTypeSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderInstanceTypeSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderInstanceTypeSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderInstanceTypeSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderInstanceTypeSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderInstanceTypeSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configurations for the machines that host the underlying database engine.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMachineConfig {
    /// The number of CPU's in the VM instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCount")]
    pub cpu_count: Option<f64>,
}

/// Instance level network configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderNetworkConfig {
    /// A list of external networks authorized to access this instance. This
    /// field is only allowed to be set when enable_public_ip is set to
    /// true.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedExternalNetworks")]
    pub authorized_external_networks: Option<Vec<InstanceInitProviderNetworkConfigAuthorizedExternalNetworks>>,
    /// Enabling public ip for the instance. If a user wishes to disable this,
    /// please also clear the list of the authorized external networks set on
    /// the same instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePublicIp")]
    pub enable_public_ip: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderNetworkConfigAuthorizedExternalNetworks {
    /// CIDR range for one authorized network of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRange")]
    pub cidr_range: Option<String>,
}

/// Configuration for Private Service Connect (PSC) for the instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderPscInstanceConfig {
    /// List of consumer projects that are allowed to create PSC endpoints to service-attachments to this instance.
    /// These should be specified as project numbers only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedConsumerProjects")]
    pub allowed_consumer_projects: Option<Vec<String>>,
}

/// Configuration for query insights.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderQueryInsightsConfig {
    /// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryPlansPerMinute")]
    pub query_plans_per_minute: Option<f64>,
    /// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringLength")]
    pub query_string_length: Option<f64>,
    /// Record application tags for an instance. This flag is turned "on" by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordApplicationTags")]
    pub record_application_tags: Option<bool>,
    /// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordClientAddress")]
    pub record_client_address: Option<bool>,
}

/// Read pool specific config. If the instance type is READ_POOL, this configuration must be provided.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderReadPoolConfig {
    /// Read capacity, i.e. number of nodes in a read pool instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    pub node_count: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProvider {
    /// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
    /// Note: This field is non-authoritative, and will only manage the annotations present in your configuration.
    /// Please refer to the field effective_annotations for all of the annotations present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// 'Availability type of an Instance. Defaults to REGIONAL for both primary and read instances.
    /// Note that primary and read instances can have different availability types.
    /// Only READ_POOL instance supports ZONAL type. Users can't specify the zone for READ_POOL instance.
    /// Zone is automatically chosen from the list of zones in the region specified.
    /// Read pool of size 1 can only have zonal availability. Read pools with node count of 2 or more
    /// can have regional availability (nodes are present in 2 or more zones in a region).'
    /// Possible values are: AVAILABILITY_TYPE_UNSPECIFIED, ZONAL, REGIONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityType")]
    pub availability_type: Option<String>,
    /// Client connection specific configurations.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientConnectionConfig")]
    pub client_connection_config: Option<InstanceStatusAtProviderClientConnectionConfig>,
    /// Identifies the alloydb cluster. Must be in the format
    /// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Time the Instance was created in UTC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseFlags")]
    pub database_flags: Option<HashMap<String, String>>,
    /// User-settable and human-readable display name for the Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveAnnotations")]
    pub effective_annotations: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gceZone")]
    pub gce_zone: Option<String>,
    /// an identifier for the resource with format {{cluster}}/instances/{{instance_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The type of the instance.
    /// If the instance type is READ_POOL, provide the associated PRIMARY/SECONDARY instance in the depends_on meta-data attribute.
    /// If the instance type is SECONDARY, point to the cluster_type of the associated secondary cluster instead of mentioning SECONDARY.
    /// Example: {instance_type = google_alloydb_cluster.<secondary_cluster_name>.
    /// Use deletion_policy = "FORCE" in the associated secondary cluster and delete the cluster forcefully to delete the secondary cluster as well its associated secondary instance.
    /// Possible values are: PRIMARY, READ_POOL, SECONDARY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// The IP address for the Instance. This is the connection endpoint for an end-user application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// User-defined labels for the alloydb instance.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Configurations for the machines that host the underlying database engine.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineConfig")]
    pub machine_config: Option<InstanceStatusAtProviderMachineConfig>,
    /// The name of the instance resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Instance level network configuration.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkConfig")]
    pub network_config: Option<InstanceStatusAtProviderNetworkConfig>,
    /// Configuration for Private Service Connect (PSC) for the instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscInstanceConfig")]
    pub psc_instance_config: Option<InstanceStatusAtProviderPscInstanceConfig>,
    /// The public IP addresses for the Instance. This is available ONLY when
    /// networkConfig.enablePublicIp is set to true. This is the connection
    /// endpoint for an end-user application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIpAddress")]
    pub public_ip_address: Option<String>,
    /// Configuration for query insights.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryInsightsConfig")]
    pub query_insights_config: Option<InstanceStatusAtProviderQueryInsightsConfig>,
    /// Read pool specific config. If the instance type is READ_POOL, this configuration must be provided.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readPoolConfig")]
    pub read_pool_config: Option<InstanceStatusAtProviderReadPoolConfig>,
    /// Set to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reconciling: Option<bool>,
    /// The current state of the alloydb instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// The system-generated UID of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    /// Time the Instance was updated in UTC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    pub update_time: Option<String>,
}

/// Client connection specific configurations.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderClientConnectionConfig {
    /// Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireConnectors")]
    pub require_connectors: Option<bool>,
    /// SSL config option for this instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<InstanceStatusAtProviderClientConnectionConfigSslConfig>,
}

/// SSL config option for this instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderClientConnectionConfigSslConfig {
    /// SSL mode. Specifies client-server SSL/TLS connection behavior.
    /// Possible values are: ENCRYPTED_ONLY, ALLOW_UNENCRYPTED_AND_ENCRYPTED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslMode")]
    pub ssl_mode: Option<String>,
}

/// Configurations for the machines that host the underlying database engine.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderMachineConfig {
    /// The number of CPU's in the VM instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCount")]
    pub cpu_count: Option<f64>,
}

/// Instance level network configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderNetworkConfig {
    /// A list of external networks authorized to access this instance. This
    /// field is only allowed to be set when enable_public_ip is set to
    /// true.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedExternalNetworks")]
    pub authorized_external_networks: Option<Vec<InstanceStatusAtProviderNetworkConfigAuthorizedExternalNetworks>>,
    /// Enabling public ip for the instance. If a user wishes to disable this,
    /// please also clear the list of the authorized external networks set on
    /// the same instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePublicIp")]
    pub enable_public_ip: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderNetworkConfigAuthorizedExternalNetworks {
    /// CIDR range for one authorized network of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRange")]
    pub cidr_range: Option<String>,
}

/// Configuration for Private Service Connect (PSC) for the instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderPscInstanceConfig {
    /// List of consumer projects that are allowed to create PSC endpoints to service-attachments to this instance.
    /// These should be specified as project numbers only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedConsumerProjects")]
    pub allowed_consumer_projects: Option<Vec<String>>,
    /// (Output)
    /// The DNS name of the instance for PSC connectivity.
    /// Name convention: ...alloydb-psc.goog
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscDnsName")]
    pub psc_dns_name: Option<String>,
    /// (Output)
    /// The service attachment created when Private Service Connect (PSC) is enabled for the instance.
    /// The name of the resource will be in the format of
    /// projects/<alloydb-tenant-project-number>/regions/<region-name>/serviceAttachments/<service-attachment-name>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAttachmentLink")]
    pub service_attachment_link: Option<String>,
}

/// Configuration for query insights.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderQueryInsightsConfig {
    /// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryPlansPerMinute")]
    pub query_plans_per_minute: Option<f64>,
    /// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringLength")]
    pub query_string_length: Option<f64>,
    /// Record application tags for an instance. This flag is turned "on" by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordApplicationTags")]
    pub record_application_tags: Option<bool>,
    /// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordClientAddress")]
    pub record_client_address: Option<bool>,
}

/// Read pool specific config. If the instance type is READ_POOL, this configuration must be provided.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderReadPoolConfig {
    /// Read capacity, i.e. number of nodes in a read pool instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    pub node_count: Option<f64>,
}


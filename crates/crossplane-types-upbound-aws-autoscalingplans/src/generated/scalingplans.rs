// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ScalingPlanSpec defines the desired state of ScalingPlan
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "autoscalingplans.aws.upbound.io", version = "v1beta2", kind = "ScalingPlan", plural = "scalingplans")]
#[kube(status = "ScalingPlanStatus")]
pub struct ScalingPlanSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ScalingPlanDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ScalingPlanForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ScalingPlanInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ScalingPlanProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ScalingPlanPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ScalingPlanWriteConnectionSecretToRef>,
}

/// ScalingPlanSpec defines the desired state of ScalingPlan
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ScalingPlanDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanForProvider {
    /// CloudFormation stack or set of tags. You can create one scaling plan per application source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationSource")]
    pub application_source: Option<ScalingPlanForProviderApplicationSource>,
    /// Name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Scaling instructions. More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingInstruction")]
    pub scaling_instruction: Option<Vec<ScalingPlanForProviderScalingInstruction>>,
}

/// CloudFormation stack or set of tags. You can create one scaling plan per application source.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanForProviderApplicationSource {
    /// ARN of a AWS CloudFormation stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudformationStackArn")]
    pub cloudformation_stack_arn: Option<String>,
    /// Set of tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagFilter")]
    pub tag_filter: Option<Vec<ScalingPlanForProviderApplicationSourceTagFilter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanForProviderApplicationSourceTagFilter {
    /// Tag key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Tag values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanForProviderScalingInstruction {
    /// Customized load metric to use for predictive scaling. You must specify either customized_load_metric_specification or predefined_load_metric_specification when configuring predictive scaling.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedLoadMetricSpecification")]
    pub customized_load_metric_specification: Option<ScalingPlanForProviderScalingInstructionCustomizedLoadMetricSpecification>,
    /// Boolean controlling whether dynamic scaling by AWS Auto Scaling is disabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableDynamicScaling")]
    pub disable_dynamic_scaling: Option<bool>,
    /// Maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for predictive_scaling_max_capacity_behavior.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacity")]
    pub max_capacity: Option<f64>,
    /// Minimum capacity of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCapacity")]
    pub min_capacity: Option<f64>,
    /// Predefined load metric to use for predictive scaling. You must specify either predefined_load_metric_specification or customized_load_metric_specification when configuring predictive scaling.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedLoadMetricSpecification")]
    pub predefined_load_metric_specification: Option<ScalingPlanForProviderScalingInstructionPredefinedLoadMetricSpecification>,
    /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource.
    /// Valid values: SetForecastCapacityToMaxCapacity, SetMaxCapacityAboveForecastCapacity, SetMaxCapacityToForecastCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingMaxCapacityBehavior")]
    pub predictive_scaling_max_capacity_behavior: Option<String>,
    /// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingMaxCapacityBuffer")]
    pub predictive_scaling_max_capacity_buffer: Option<f64>,
    /// Predictive scaling mode. Valid values: ForecastAndScale, ForecastOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingMode")]
    pub predictive_scaling_mode: Option<String>,
    /// ID of the resource. This string consists of the resource type and unique identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    pub resource_id: Option<String>,
    /// Scalable dimension associated with the resource. Valid values: autoscaling:autoScalingGroup:DesiredCapacity, dynamodb:index:ReadCapacityUnits, dynamodb:index:WriteCapacityUnits, dynamodb:table:ReadCapacityUnits, dynamodb:table:WriteCapacityUnits, ecs:service:DesiredCount, ec2:spot-fleet-request:TargetCapacity, rds:cluster:ReadReplicaCount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalableDimension")]
    pub scalable_dimension: Option<String>,
    /// Controls whether a resource's externally created scaling policies are kept or replaced. Valid values: KeepExternalPolicies, ReplaceExternalPolicies. Defaults to KeepExternalPolicies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingPolicyUpdateBehavior")]
    pub scaling_policy_update_behavior: Option<String>,
    /// Amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduledActionBufferTime")]
    pub scheduled_action_buffer_time: Option<f64>,
    /// Namespace of the AWS service. Valid values: autoscaling, dynamodb, ecs, ec2, rds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNamespace")]
    pub service_namespace: Option<String>,
    /// Structure that defines new target tracking configurations. Each of these structures includes a specific scaling metric and a target value for the metric, along with various parameters to use with dynamic scaling.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTrackingConfiguration")]
    pub target_tracking_configuration: Option<Vec<ScalingPlanForProviderScalingInstructionTargetTrackingConfiguration>>,
}

/// Customized load metric to use for predictive scaling. You must specify either customized_load_metric_specification or predefined_load_metric_specification when configuring predictive scaling.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanForProviderScalingInstructionCustomizedLoadMetricSpecification {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Statistic of the metric. Currently, the value must always be Sum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// Predefined load metric to use for predictive scaling. You must specify either predefined_load_metric_specification or customized_load_metric_specification when configuring predictive scaling.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanForProviderScalingInstructionPredefinedLoadMetricSpecification {
    /// Metric type. Valid values: ALBTargetGroupRequestCount, ASGTotalCPUUtilization, ASGTotalNetworkIn, ASGTotalNetworkOut.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedLoadMetricType")]
    pub predefined_load_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    pub resource_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanForProviderScalingInstructionTargetTrackingConfiguration {
    /// Customized metric. You can specify either customized_scaling_metric_specification or predefined_scaling_metric_specification.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedScalingMetricSpecification")]
    pub customized_scaling_metric_specification: Option<ScalingPlanForProviderScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification>,
    /// Boolean indicating whether scale in by the target tracking scaling policy is disabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableScaleIn")]
    pub disable_scale_in: Option<bool>,
    /// Estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
    /// This value is used only if the resource is an Auto Scaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "estimatedInstanceWarmup")]
    pub estimated_instance_warmup: Option<f64>,
    /// Predefined metric. You can specify either predefined_scaling_metric_specification or customized_scaling_metric_specification.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedScalingMetricSpecification")]
    pub predefined_scaling_metric_specification: Option<ScalingPlanForProviderScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification>,
    /// Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
    /// This value is not used if the scalable resource is an Auto Scaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleInCooldown")]
    pub scale_in_cooldown: Option<f64>,
    /// Amount of time, in seconds, after a scale-out activity completes before another scale-out activity can start.
    /// This value is not used if the scalable resource is an Auto Scaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleOutCooldown")]
    pub scale_out_cooldown: Option<f64>,
    /// Target value for the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetValue")]
    pub target_value: Option<f64>,
}

/// Customized metric. You can specify either customized_scaling_metric_specification or predefined_scaling_metric_specification.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanForProviderScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Statistic of the metric. Currently, the value must always be Sum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// Predefined metric. You can specify either predefined_scaling_metric_specification or customized_scaling_metric_specification.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanForProviderScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification {
    /// Metric type. Valid values: ALBRequestCountPerTarget, ASGAverageCPUUtilization, ASGAverageNetworkIn, ASGAverageNetworkOut, DynamoDBReadCapacityUtilization, DynamoDBWriteCapacityUtilization, ECSServiceAverageCPUUtilization, ECSServiceAverageMemoryUtilization, EC2SpotFleetRequestAverageCPUUtilization, EC2SpotFleetRequestAverageNetworkIn, EC2SpotFleetRequestAverageNetworkOut, RDSReaderAverageCPUUtilization, RDSReaderAverageDatabaseConnections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedScalingMetricType")]
    pub predefined_scaling_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    pub resource_label: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanInitProvider {
    /// CloudFormation stack or set of tags. You can create one scaling plan per application source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationSource")]
    pub application_source: Option<ScalingPlanInitProviderApplicationSource>,
    /// Name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Scaling instructions. More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingInstruction")]
    pub scaling_instruction: Option<Vec<ScalingPlanInitProviderScalingInstruction>>,
}

/// CloudFormation stack or set of tags. You can create one scaling plan per application source.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanInitProviderApplicationSource {
    /// ARN of a AWS CloudFormation stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudformationStackArn")]
    pub cloudformation_stack_arn: Option<String>,
    /// Set of tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagFilter")]
    pub tag_filter: Option<Vec<ScalingPlanInitProviderApplicationSourceTagFilter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanInitProviderApplicationSourceTagFilter {
    /// Tag key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Tag values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanInitProviderScalingInstruction {
    /// Customized load metric to use for predictive scaling. You must specify either customized_load_metric_specification or predefined_load_metric_specification when configuring predictive scaling.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedLoadMetricSpecification")]
    pub customized_load_metric_specification: Option<ScalingPlanInitProviderScalingInstructionCustomizedLoadMetricSpecification>,
    /// Boolean controlling whether dynamic scaling by AWS Auto Scaling is disabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableDynamicScaling")]
    pub disable_dynamic_scaling: Option<bool>,
    /// Maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for predictive_scaling_max_capacity_behavior.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacity")]
    pub max_capacity: Option<f64>,
    /// Minimum capacity of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCapacity")]
    pub min_capacity: Option<f64>,
    /// Predefined load metric to use for predictive scaling. You must specify either predefined_load_metric_specification or customized_load_metric_specification when configuring predictive scaling.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedLoadMetricSpecification")]
    pub predefined_load_metric_specification: Option<ScalingPlanInitProviderScalingInstructionPredefinedLoadMetricSpecification>,
    /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource.
    /// Valid values: SetForecastCapacityToMaxCapacity, SetMaxCapacityAboveForecastCapacity, SetMaxCapacityToForecastCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingMaxCapacityBehavior")]
    pub predictive_scaling_max_capacity_behavior: Option<String>,
    /// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingMaxCapacityBuffer")]
    pub predictive_scaling_max_capacity_buffer: Option<f64>,
    /// Predictive scaling mode. Valid values: ForecastAndScale, ForecastOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingMode")]
    pub predictive_scaling_mode: Option<String>,
    /// ID of the resource. This string consists of the resource type and unique identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    pub resource_id: Option<String>,
    /// Scalable dimension associated with the resource. Valid values: autoscaling:autoScalingGroup:DesiredCapacity, dynamodb:index:ReadCapacityUnits, dynamodb:index:WriteCapacityUnits, dynamodb:table:ReadCapacityUnits, dynamodb:table:WriteCapacityUnits, ecs:service:DesiredCount, ec2:spot-fleet-request:TargetCapacity, rds:cluster:ReadReplicaCount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalableDimension")]
    pub scalable_dimension: Option<String>,
    /// Controls whether a resource's externally created scaling policies are kept or replaced. Valid values: KeepExternalPolicies, ReplaceExternalPolicies. Defaults to KeepExternalPolicies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingPolicyUpdateBehavior")]
    pub scaling_policy_update_behavior: Option<String>,
    /// Amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduledActionBufferTime")]
    pub scheduled_action_buffer_time: Option<f64>,
    /// Namespace of the AWS service. Valid values: autoscaling, dynamodb, ecs, ec2, rds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNamespace")]
    pub service_namespace: Option<String>,
    /// Structure that defines new target tracking configurations. Each of these structures includes a specific scaling metric and a target value for the metric, along with various parameters to use with dynamic scaling.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTrackingConfiguration")]
    pub target_tracking_configuration: Option<Vec<ScalingPlanInitProviderScalingInstructionTargetTrackingConfiguration>>,
}

/// Customized load metric to use for predictive scaling. You must specify either customized_load_metric_specification or predefined_load_metric_specification when configuring predictive scaling.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanInitProviderScalingInstructionCustomizedLoadMetricSpecification {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Statistic of the metric. Currently, the value must always be Sum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// Predefined load metric to use for predictive scaling. You must specify either predefined_load_metric_specification or customized_load_metric_specification when configuring predictive scaling.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanInitProviderScalingInstructionPredefinedLoadMetricSpecification {
    /// Metric type. Valid values: ALBTargetGroupRequestCount, ASGTotalCPUUtilization, ASGTotalNetworkIn, ASGTotalNetworkOut.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedLoadMetricType")]
    pub predefined_load_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    pub resource_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanInitProviderScalingInstructionTargetTrackingConfiguration {
    /// Customized metric. You can specify either customized_scaling_metric_specification or predefined_scaling_metric_specification.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedScalingMetricSpecification")]
    pub customized_scaling_metric_specification: Option<ScalingPlanInitProviderScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification>,
    /// Boolean indicating whether scale in by the target tracking scaling policy is disabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableScaleIn")]
    pub disable_scale_in: Option<bool>,
    /// Estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
    /// This value is used only if the resource is an Auto Scaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "estimatedInstanceWarmup")]
    pub estimated_instance_warmup: Option<f64>,
    /// Predefined metric. You can specify either predefined_scaling_metric_specification or customized_scaling_metric_specification.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedScalingMetricSpecification")]
    pub predefined_scaling_metric_specification: Option<ScalingPlanInitProviderScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification>,
    /// Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
    /// This value is not used if the scalable resource is an Auto Scaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleInCooldown")]
    pub scale_in_cooldown: Option<f64>,
    /// Amount of time, in seconds, after a scale-out activity completes before another scale-out activity can start.
    /// This value is not used if the scalable resource is an Auto Scaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleOutCooldown")]
    pub scale_out_cooldown: Option<f64>,
    /// Target value for the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetValue")]
    pub target_value: Option<f64>,
}

/// Customized metric. You can specify either customized_scaling_metric_specification or predefined_scaling_metric_specification.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanInitProviderScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Statistic of the metric. Currently, the value must always be Sum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// Predefined metric. You can specify either predefined_scaling_metric_specification or customized_scaling_metric_specification.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanInitProviderScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification {
    /// Metric type. Valid values: ALBRequestCountPerTarget, ASGAverageCPUUtilization, ASGAverageNetworkIn, ASGAverageNetworkOut, DynamoDBReadCapacityUtilization, DynamoDBWriteCapacityUtilization, ECSServiceAverageCPUUtilization, ECSServiceAverageMemoryUtilization, EC2SpotFleetRequestAverageCPUUtilization, EC2SpotFleetRequestAverageNetworkIn, EC2SpotFleetRequestAverageNetworkOut, RDSReaderAverageCPUUtilization, RDSReaderAverageDatabaseConnections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedScalingMetricType")]
    pub predefined_scaling_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    pub resource_label: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ScalingPlanProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ScalingPlanProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ScalingPlanProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ScalingPlanProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ScalingPlanProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ScalingPlanPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ScalingPlanPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ScalingPlanPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ScalingPlanPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ScalingPlanPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ScalingPlanPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ScalingPlanPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ScalingPlanStatus defines the observed state of ScalingPlan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ScalingPlanStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatusAtProvider {
    /// CloudFormation stack or set of tags. You can create one scaling plan per application source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationSource")]
    pub application_source: Option<ScalingPlanStatusAtProviderApplicationSource>,
    /// Scaling plan identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Scaling instructions. More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingInstruction")]
    pub scaling_instruction: Option<Vec<ScalingPlanStatusAtProviderScalingInstruction>>,
    /// The version number of the scaling plan. This value is always 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingPlanVersion")]
    pub scaling_plan_version: Option<f64>,
}

/// CloudFormation stack or set of tags. You can create one scaling plan per application source.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatusAtProviderApplicationSource {
    /// ARN of a AWS CloudFormation stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudformationStackArn")]
    pub cloudformation_stack_arn: Option<String>,
    /// Set of tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagFilter")]
    pub tag_filter: Option<Vec<ScalingPlanStatusAtProviderApplicationSourceTagFilter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatusAtProviderApplicationSourceTagFilter {
    /// Tag key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Tag values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatusAtProviderScalingInstruction {
    /// Customized load metric to use for predictive scaling. You must specify either customized_load_metric_specification or predefined_load_metric_specification when configuring predictive scaling.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedLoadMetricSpecification")]
    pub customized_load_metric_specification: Option<ScalingPlanStatusAtProviderScalingInstructionCustomizedLoadMetricSpecification>,
    /// Boolean controlling whether dynamic scaling by AWS Auto Scaling is disabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableDynamicScaling")]
    pub disable_dynamic_scaling: Option<bool>,
    /// Maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for predictive_scaling_max_capacity_behavior.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacity")]
    pub max_capacity: Option<f64>,
    /// Minimum capacity of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCapacity")]
    pub min_capacity: Option<f64>,
    /// Predefined load metric to use for predictive scaling. You must specify either predefined_load_metric_specification or customized_load_metric_specification when configuring predictive scaling.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedLoadMetricSpecification")]
    pub predefined_load_metric_specification: Option<ScalingPlanStatusAtProviderScalingInstructionPredefinedLoadMetricSpecification>,
    /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource.
    /// Valid values: SetForecastCapacityToMaxCapacity, SetMaxCapacityAboveForecastCapacity, SetMaxCapacityToForecastCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingMaxCapacityBehavior")]
    pub predictive_scaling_max_capacity_behavior: Option<String>,
    /// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingMaxCapacityBuffer")]
    pub predictive_scaling_max_capacity_buffer: Option<f64>,
    /// Predictive scaling mode. Valid values: ForecastAndScale, ForecastOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingMode")]
    pub predictive_scaling_mode: Option<String>,
    /// ID of the resource. This string consists of the resource type and unique identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    pub resource_id: Option<String>,
    /// Scalable dimension associated with the resource. Valid values: autoscaling:autoScalingGroup:DesiredCapacity, dynamodb:index:ReadCapacityUnits, dynamodb:index:WriteCapacityUnits, dynamodb:table:ReadCapacityUnits, dynamodb:table:WriteCapacityUnits, ecs:service:DesiredCount, ec2:spot-fleet-request:TargetCapacity, rds:cluster:ReadReplicaCount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalableDimension")]
    pub scalable_dimension: Option<String>,
    /// Controls whether a resource's externally created scaling policies are kept or replaced. Valid values: KeepExternalPolicies, ReplaceExternalPolicies. Defaults to KeepExternalPolicies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingPolicyUpdateBehavior")]
    pub scaling_policy_update_behavior: Option<String>,
    /// Amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduledActionBufferTime")]
    pub scheduled_action_buffer_time: Option<f64>,
    /// Namespace of the AWS service. Valid values: autoscaling, dynamodb, ecs, ec2, rds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNamespace")]
    pub service_namespace: Option<String>,
    /// Structure that defines new target tracking configurations. Each of these structures includes a specific scaling metric and a target value for the metric, along with various parameters to use with dynamic scaling.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTrackingConfiguration")]
    pub target_tracking_configuration: Option<Vec<ScalingPlanStatusAtProviderScalingInstructionTargetTrackingConfiguration>>,
}

/// Customized load metric to use for predictive scaling. You must specify either customized_load_metric_specification or predefined_load_metric_specification when configuring predictive scaling.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatusAtProviderScalingInstructionCustomizedLoadMetricSpecification {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Statistic of the metric. Currently, the value must always be Sum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// Predefined load metric to use for predictive scaling. You must specify either predefined_load_metric_specification or customized_load_metric_specification when configuring predictive scaling.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatusAtProviderScalingInstructionPredefinedLoadMetricSpecification {
    /// Metric type. Valid values: ALBTargetGroupRequestCount, ASGTotalCPUUtilization, ASGTotalNetworkIn, ASGTotalNetworkOut.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedLoadMetricType")]
    pub predefined_load_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    pub resource_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatusAtProviderScalingInstructionTargetTrackingConfiguration {
    /// Customized metric. You can specify either customized_scaling_metric_specification or predefined_scaling_metric_specification.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedScalingMetricSpecification")]
    pub customized_scaling_metric_specification: Option<ScalingPlanStatusAtProviderScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification>,
    /// Boolean indicating whether scale in by the target tracking scaling policy is disabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableScaleIn")]
    pub disable_scale_in: Option<bool>,
    /// Estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
    /// This value is used only if the resource is an Auto Scaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "estimatedInstanceWarmup")]
    pub estimated_instance_warmup: Option<f64>,
    /// Predefined metric. You can specify either predefined_scaling_metric_specification or customized_scaling_metric_specification.
    /// More details can be found in the AWS Auto Scaling API Reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedScalingMetricSpecification")]
    pub predefined_scaling_metric_specification: Option<ScalingPlanStatusAtProviderScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification>,
    /// Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
    /// This value is not used if the scalable resource is an Auto Scaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleInCooldown")]
    pub scale_in_cooldown: Option<f64>,
    /// Amount of time, in seconds, after a scale-out activity completes before another scale-out activity can start.
    /// This value is not used if the scalable resource is an Auto Scaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleOutCooldown")]
    pub scale_out_cooldown: Option<f64>,
    /// Target value for the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetValue")]
    pub target_value: Option<f64>,
}

/// Customized metric. You can specify either customized_scaling_metric_specification or predefined_scaling_metric_specification.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatusAtProviderScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Statistic of the metric. Currently, the value must always be Sum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// Predefined metric. You can specify either predefined_scaling_metric_specification or customized_scaling_metric_specification.
/// More details can be found in the AWS Auto Scaling API Reference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ScalingPlanStatusAtProviderScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification {
    /// Metric type. Valid values: ALBRequestCountPerTarget, ASGAverageCPUUtilization, ASGAverageNetworkIn, ASGAverageNetworkOut, DynamoDBReadCapacityUtilization, DynamoDBWriteCapacityUtilization, ECSServiceAverageCPUUtilization, ECSServiceAverageMemoryUtilization, EC2SpotFleetRequestAverageCPUUtilization, EC2SpotFleetRequestAverageNetworkIn, EC2SpotFleetRequestAverageNetworkOut, RDSReaderAverageCPUUtilization, RDSReaderAverageDatabaseConnections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedScalingMetricType")]
    pub predefined_scaling_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    pub resource_label: Option<String>,
}


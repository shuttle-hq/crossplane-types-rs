// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FieldLevelEncryptionConfigSpec defines the desired state of FieldLevelEncryptionConfig
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "cloudfront.aws.upbound.io", version = "v1beta2", kind = "FieldLevelEncryptionConfig", plural = "fieldlevelencryptionconfigs")]
#[kube(status = "FieldLevelEncryptionConfigStatus")]
pub struct FieldLevelEncryptionConfigSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<FieldLevelEncryptionConfigDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FieldLevelEncryptionConfigForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<FieldLevelEncryptionConfigInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<FieldLevelEncryptionConfigProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<FieldLevelEncryptionConfigPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<FieldLevelEncryptionConfigWriteConnectionSecretToRef>,
}

/// FieldLevelEncryptionConfigSpec defines the desired state of FieldLevelEncryptionConfig
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProvider {
    /// An optional comment about the Field Level Encryption Config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentTypeProfileConfig")]
    pub content_type_profile_config: Option<FieldLevelEncryptionConfigForProviderContentTypeProfileConfig>,
    /// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryArgProfileConfig")]
    pub query_arg_profile_config: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfig>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderContentTypeProfileConfig {
    /// Object that contains an attribute items that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentTypeProfiles")]
    pub content_type_profiles: Option<FieldLevelEncryptionConfigForProviderContentTypeProfileConfigContentTypeProfiles>,
    /// specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardWhenContentTypeIsUnknown")]
    pub forward_when_content_type_is_unknown: Option<bool>,
}

/// Object that contains an attribute items that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderContentTypeProfileConfigContentTypeProfiles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FieldLevelEncryptionConfigForProviderContentTypeProfileConfigContentTypeProfilesItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderContentTypeProfileConfigContentTypeProfilesItems {
    /// he content type for a field-level encryption content type-profile mapping. Valid value is application/x-www-form-urlencoded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// The format for a field-level encryption content type-profile mapping. Valid value is URLEncoded.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// The profile ID for a field-level encryption content type-profile mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileId")]
    pub profile_id: Option<String>,
}

/// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderQueryArgProfileConfig {
    /// Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardWhenQueryArgProfileIsUnknown")]
    pub forward_when_query_arg_profile_is_unknown: Option<bool>,
    /// Object that contains an attribute items that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryArgProfiles")]
    pub query_arg_profiles: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfiles>,
}

/// Object that contains an attribute items that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfiles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItems {
    /// The profile ID for a field-level encryption content type-profile mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileId")]
    pub profile_id: Option<String>,
    /// Reference to a FieldLevelEncryptionProfile in cloudfront to populate profileId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileIdRef")]
    pub profile_id_ref: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRef>,
    /// Selector for a FieldLevelEncryptionProfile in cloudfront to populate profileId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileIdSelector")]
    pub profile_id_selector: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelector>,
    /// Query argument for field-level encryption query argument-profile mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryArg")]
    pub query_arg: Option<String>,
}

/// Reference to a FieldLevelEncryptionProfile in cloudfront to populate profileId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a FieldLevelEncryptionProfile in cloudfront to populate profileId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigForProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProvider {
    /// An optional comment about the Field Level Encryption Config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentTypeProfileConfig")]
    pub content_type_profile_config: Option<FieldLevelEncryptionConfigInitProviderContentTypeProfileConfig>,
    /// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryArgProfileConfig")]
    pub query_arg_profile_config: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfig>,
}

/// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderContentTypeProfileConfig {
    /// Object that contains an attribute items that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentTypeProfiles")]
    pub content_type_profiles: Option<FieldLevelEncryptionConfigInitProviderContentTypeProfileConfigContentTypeProfiles>,
    /// specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardWhenContentTypeIsUnknown")]
    pub forward_when_content_type_is_unknown: Option<bool>,
}

/// Object that contains an attribute items that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderContentTypeProfileConfigContentTypeProfiles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FieldLevelEncryptionConfigInitProviderContentTypeProfileConfigContentTypeProfilesItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderContentTypeProfileConfigContentTypeProfilesItems {
    /// he content type for a field-level encryption content type-profile mapping. Valid value is application/x-www-form-urlencoded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// The format for a field-level encryption content type-profile mapping. Valid value is URLEncoded.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// The profile ID for a field-level encryption content type-profile mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileId")]
    pub profile_id: Option<String>,
}

/// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderQueryArgProfileConfig {
    /// Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardWhenQueryArgProfileIsUnknown")]
    pub forward_when_query_arg_profile_is_unknown: Option<bool>,
    /// Object that contains an attribute items that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryArgProfiles")]
    pub query_arg_profiles: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfiles>,
}

/// Object that contains an attribute items that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfiles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItems {
    /// The profile ID for a field-level encryption content type-profile mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileId")]
    pub profile_id: Option<String>,
    /// Reference to a FieldLevelEncryptionProfile in cloudfront to populate profileId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileIdRef")]
    pub profile_id_ref: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRef>,
    /// Selector for a FieldLevelEncryptionProfile in cloudfront to populate profileId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileIdSelector")]
    pub profile_id_selector: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelector>,
    /// Query argument for field-level encryption query argument-profile mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryArg")]
    pub query_arg: Option<String>,
}

/// Reference to a FieldLevelEncryptionProfile in cloudfront to populate profileId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a FieldLevelEncryptionProfile in cloudfront to populate profileId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigInitProviderQueryArgProfileConfigQueryArgProfilesItemsProfileIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FieldLevelEncryptionConfigProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FieldLevelEncryptionConfigProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FieldLevelEncryptionConfigProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<FieldLevelEncryptionConfigPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<FieldLevelEncryptionConfigPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FieldLevelEncryptionConfigPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FieldLevelEncryptionConfigPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FieldLevelEncryptionConfigPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FieldLevelEncryptionConfigPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FieldLevelEncryptionConfigStatus defines the observed state of FieldLevelEncryptionConfig.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<FieldLevelEncryptionConfigStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigStatusAtProvider {
    /// Internal value used by CloudFront to allow future updates to the Field Level Encryption Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callerReference")]
    pub caller_reference: Option<String>,
    /// An optional comment about the Field Level Encryption Config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentTypeProfileConfig")]
    pub content_type_profile_config: Option<FieldLevelEncryptionConfigStatusAtProviderContentTypeProfileConfig>,
    /// The current version of the Field Level Encryption Config. For example: E2QWRUHAPOMQZL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The identifier for the Field Level Encryption Config. For example: K3D5EWEUDCCXON.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryArgProfileConfig")]
    pub query_arg_profile_config: Option<FieldLevelEncryptionConfigStatusAtProviderQueryArgProfileConfig>,
}

/// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigStatusAtProviderContentTypeProfileConfig {
    /// Object that contains an attribute items that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentTypeProfiles")]
    pub content_type_profiles: Option<FieldLevelEncryptionConfigStatusAtProviderContentTypeProfileConfigContentTypeProfiles>,
    /// specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardWhenContentTypeIsUnknown")]
    pub forward_when_content_type_is_unknown: Option<bool>,
}

/// Object that contains an attribute items that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigStatusAtProviderContentTypeProfileConfigContentTypeProfiles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FieldLevelEncryptionConfigStatusAtProviderContentTypeProfileConfigContentTypeProfilesItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigStatusAtProviderContentTypeProfileConfigContentTypeProfilesItems {
    /// he content type for a field-level encryption content type-profile mapping. Valid value is application/x-www-form-urlencoded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// The format for a field-level encryption content type-profile mapping. Valid value is URLEncoded.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// The profile ID for a field-level encryption content type-profile mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileId")]
    pub profile_id: Option<String>,
}

/// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigStatusAtProviderQueryArgProfileConfig {
    /// Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardWhenQueryArgProfileIsUnknown")]
    pub forward_when_query_arg_profile_is_unknown: Option<bool>,
    /// Object that contains an attribute items that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryArgProfiles")]
    pub query_arg_profiles: Option<FieldLevelEncryptionConfigStatusAtProviderQueryArgProfileConfigQueryArgProfiles>,
}

/// Object that contains an attribute items that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigStatusAtProviderQueryArgProfileConfigQueryArgProfiles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FieldLevelEncryptionConfigStatusAtProviderQueryArgProfileConfigQueryArgProfilesItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FieldLevelEncryptionConfigStatusAtProviderQueryArgProfileConfigQueryArgProfilesItems {
    /// The profile ID for a field-level encryption content type-profile mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileId")]
    pub profile_id: Option<String>,
    /// Query argument for field-level encryption query argument-profile mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryArg")]
    pub query_arg: Option<String>,
}


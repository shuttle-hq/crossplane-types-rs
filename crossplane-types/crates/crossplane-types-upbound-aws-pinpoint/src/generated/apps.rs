// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AppSpec defines the desired state of App
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "pinpoint.aws.upbound.io",
    version = "v1beta2",
    kind = "App",
    plural = "apps"
)]
#[kube(status = "AppStatus")]
pub struct AppSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<AppDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AppForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<AppInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<AppProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<AppPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<AppWriteConnectionSecretToRef>,
}

/// AppSpec defines the desired state of App
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppForProvider {
    /// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "campaignHook"
    )]
    #[builder(default)]
    pub campaign_hook: Option<AppForProviderCampaignHook>,
    /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limits: Option<AppForProviderLimits>,
    /// The application name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quietTime")]
    #[builder(default)]
    pub quiet_time: Option<AppForProviderQuietTime>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppForProviderCampaignHook {
    /// Lambda function name or ARN to be called for delivery. Conflicts with web_url
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaFunctionName"
    )]
    #[builder(default)]
    pub lambda_function_name: Option<String>,
    /// What mode Lambda should be invoked in. Valid values for this parameter are DELIVERY, FILTER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    /// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with lambda_function_name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webUrl")]
    #[builder(default)]
    pub web_url: Option<String>,
}

/// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppForProviderLimits {
    /// The maximum number of messages that the campaign can send daily.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub daily: Option<f64>,
    /// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumDuration"
    )]
    #[builder(default)]
    pub maximum_duration: Option<f64>,
    /// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "messagesPerSecond"
    )]
    #[builder(default)]
    pub messages_per_second: Option<f64>,
    /// The maximum total number of messages that the campaign can send.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub total: Option<f64>,
}

/// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppForProviderQuietTime {
    /// The default end time for quiet time in ISO 8601 format. Required if start is set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// The default start time for quiet time in ISO 8601 format. Required if end is set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppInitProvider {
    /// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "campaignHook"
    )]
    #[builder(default)]
    pub campaign_hook: Option<AppInitProviderCampaignHook>,
    /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limits: Option<AppInitProviderLimits>,
    /// The application name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quietTime")]
    #[builder(default)]
    pub quiet_time: Option<AppInitProviderQuietTime>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppInitProviderCampaignHook {
    /// Lambda function name or ARN to be called for delivery. Conflicts with web_url
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaFunctionName"
    )]
    #[builder(default)]
    pub lambda_function_name: Option<String>,
    /// What mode Lambda should be invoked in. Valid values for this parameter are DELIVERY, FILTER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    /// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with lambda_function_name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webUrl")]
    #[builder(default)]
    pub web_url: Option<String>,
}

/// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppInitProviderLimits {
    /// The maximum number of messages that the campaign can send daily.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub daily: Option<f64>,
    /// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumDuration"
    )]
    #[builder(default)]
    pub maximum_duration: Option<f64>,
    /// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "messagesPerSecond"
    )]
    #[builder(default)]
    pub messages_per_second: Option<f64>,
    /// The maximum total number of messages that the campaign can send.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub total: Option<f64>,
}

/// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppInitProviderQuietTime {
    /// The default end time for quiet time in ISO 8601 format. Required if start is set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// The default start time for quiet time in ISO 8601 format. Required if end is set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AppProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AppProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AppProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<AppPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<AppPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AppPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AppPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AppPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AppStatus defines the observed state of App.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<AppStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppStatusAtProvider {
    /// The Application ID of the Pinpoint App.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applicationId"
    )]
    #[builder(default)]
    pub application_id: Option<String>,
    /// Amazon Resource Name (ARN) of the PinPoint Application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "campaignHook"
    )]
    #[builder(default)]
    pub campaign_hook: Option<AppStatusAtProviderCampaignHook>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limits: Option<AppStatusAtProviderLimits>,
    /// The application name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quietTime")]
    #[builder(default)]
    pub quiet_time: Option<AppStatusAtProviderQuietTime>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

/// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppStatusAtProviderCampaignHook {
    /// Lambda function name or ARN to be called for delivery. Conflicts with web_url
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaFunctionName"
    )]
    #[builder(default)]
    pub lambda_function_name: Option<String>,
    /// What mode Lambda should be invoked in. Valid values for this parameter are DELIVERY, FILTER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    /// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with lambda_function_name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webUrl")]
    #[builder(default)]
    pub web_url: Option<String>,
}

/// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppStatusAtProviderLimits {
    /// The maximum number of messages that the campaign can send daily.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub daily: Option<f64>,
    /// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumDuration"
    )]
    #[builder(default)]
    pub maximum_duration: Option<f64>,
    /// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "messagesPerSecond"
    )]
    #[builder(default)]
    pub messages_per_second: Option<f64>,
    /// The maximum total number of messages that the campaign can send.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub total: Option<f64>,
}

/// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppStatusAtProviderQuietTime {
    /// The default end time for quiet time in ISO 8601 format. Required if start is set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// The default start time for quiet time in ISO 8601 format. Required if end is set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

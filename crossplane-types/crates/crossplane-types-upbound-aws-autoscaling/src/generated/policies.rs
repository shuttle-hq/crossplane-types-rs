// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PolicySpec defines the desired state of Policy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "autoscaling.aws.upbound.io", version = "v1beta2", kind = "Policy", plural = "policies")]
#[kube(status = "PolicyStatus")]
pub struct PolicySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<PolicyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PolicyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<PolicyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<PolicyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<PolicyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<PolicyWriteConnectionSecretToRef>,
}

/// PolicySpec defines the desired state of Policy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProvider {
    /// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adjustmentType")]
    #[builder(default)]
    pub adjustment_type: Option<String>,
    /// Name of the autoscaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingGroupName")]
    #[builder(default)]
    pub autoscaling_group_name: Option<String>,
    /// Reference to a AutoscalingGroup in autoscaling to populate autoscalingGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingGroupNameRef")]
    #[builder(default)]
    pub autoscaling_group_name_ref: Option<PolicyForProviderAutoscalingGroupNameRef>,
    /// Selector for a AutoscalingGroup in autoscaling to populate autoscalingGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingGroupNameSelector")]
    #[builder(default)]
    pub autoscaling_group_name_selector: Option<PolicyForProviderAutoscalingGroupNameSelector>,
    /// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cooldown: Option<f64>,
    /// Whether the scaling policy is enabled or disabled. Default: true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "estimatedInstanceWarmup")]
    #[builder(default)]
    pub estimated_instance_warmup: Option<f64>,
    /// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricAggregationType")]
    #[builder(default)]
    pub metric_aggregation_type: Option<String>,
    /// Minimum value to scale by when adjustment_type is set to PercentChangeInCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAdjustmentMagnitude")]
    #[builder(default)]
    pub min_adjustment_magnitude: Option<f64>,
    /// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyType")]
    #[builder(default)]
    pub policy_type: Option<String>,
    /// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingConfiguration")]
    #[builder(default)]
    pub predictive_scaling_configuration: Option<PolicyForProviderPredictiveScalingConfiguration>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingAdjustment")]
    #[builder(default)]
    pub scaling_adjustment: Option<f64>,
    /// Set of adjustments that manage
    /// group scaling. These have the following structure:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stepAdjustment")]
    #[builder(default)]
    pub step_adjustment: Option<Vec<PolicyForProviderStepAdjustment>>,
    /// Target tracking policy. These have the following structure:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTrackingConfiguration")]
    #[builder(default)]
    pub target_tracking_configuration: Option<PolicyForProviderTargetTrackingConfiguration>,
}

/// Reference to a AutoscalingGroup in autoscaling to populate autoscalingGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderAutoscalingGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<PolicyForProviderAutoscalingGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderAutoscalingGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<PolicyForProviderAutoscalingGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<PolicyForProviderAutoscalingGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderAutoscalingGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderAutoscalingGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a AutoscalingGroup in autoscaling to populate autoscalingGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderAutoscalingGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<PolicyForProviderAutoscalingGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderAutoscalingGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<PolicyForProviderAutoscalingGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<PolicyForProviderAutoscalingGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderAutoscalingGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderAutoscalingGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfiguration {
    /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are HonorMaxCapacity or IncreaseMaxCapacity. Default is HonorMaxCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacityBreachBehavior")]
    #[builder(default)]
    pub max_capacity_breach_behavior: Option<String>,
    /// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is 0 to 100. If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacityBuffer")]
    #[builder(default)]
    pub max_capacity_buffer: Option<String>,
    /// This structure includes the metrics and target utilization to use for predictive scaling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricSpecification")]
    #[builder(default)]
    pub metric_specification: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecification>,
    /// Predictive scaling mode. Valid values are ForecastAndScale and ForecastOnly. Default is ForecastOnly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    /// Amount of time, in seconds, by which the instance launch time can be advanced. Minimum is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingBufferTime")]
    #[builder(default)]
    pub scheduling_buffer_time: Option<String>,
}

/// This structure includes the metrics and target utilization to use for predictive scaling.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecification {
    /// Customized capacity metric specification. The field is only valid when you use customized_load_metric_specification
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedCapacityMetricSpecification")]
    #[builder(default)]
    pub customized_capacity_metric_specification: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification>,
    /// Customized load metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedLoadMetricSpecification")]
    #[builder(default)]
    pub customized_load_metric_specification: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification>,
    /// Customized scaling metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedScalingMetricSpecification")]
    #[builder(default)]
    pub customized_scaling_metric_specification: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification>,
    /// Predefined load metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedLoadMetricSpecification")]
    #[builder(default)]
    pub predefined_load_metric_specification: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification>,
    /// Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricPairSpecification")]
    #[builder(default)]
    pub predefined_metric_pair_specification: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification>,
    /// Predefined scaling metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedScalingMetricSpecification")]
    #[builder(default)]
    pub predefined_scaling_metric_specification: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification>,
    /// Target value for the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetValue")]
    #[builder(default)]
    pub target_value: Option<f64>,
}

/// Customized capacity metric specification. The field is only valid when you use customized_load_metric_specification
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification {
    /// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDataQueries")]
    #[builder(default)]
    pub metric_data_queries: Option<Vec<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueries>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueries {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Customized load metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification {
    /// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDataQueries")]
    #[builder(default)]
    pub metric_data_queries: Option<Vec<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueries>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueries {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Customized scaling metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification {
    /// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDataQueries")]
    #[builder(default)]
    pub metric_data_queries: Option<Vec<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueries>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueries {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Predefined load metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

/// Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

/// Predefined scaling metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderStepAdjustment {
    /// Lower bound for the
    /// difference between the alarm threshold and the CloudWatch metric.
    /// Without a value, AWS will treat this bound as negative infinity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricIntervalLowerBound")]
    #[builder(default)]
    pub metric_interval_lower_bound: Option<String>,
    /// Upper bound for the
    /// difference between the alarm threshold and the CloudWatch metric.
    /// Without a value, AWS will treat this bound as positive infinity. The upper bound
    /// must be greater than the lower bound.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricIntervalUpperBound")]
    #[builder(default)]
    pub metric_interval_upper_bound: Option<String>,
    /// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingAdjustment")]
    #[builder(default)]
    pub scaling_adjustment: Option<f64>,
}

/// Target tracking policy. These have the following structure:
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderTargetTrackingConfiguration {
    /// Customized metric. Conflicts with predefined_metric_specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedMetricSpecification")]
    #[builder(default)]
    pub customized_metric_specification: Option<PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecification>,
    /// Whether scale in by the target tracking policy is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableScaleIn")]
    #[builder(default)]
    pub disable_scale_in: Option<bool>,
    /// Predefined metric. Conflicts with customized_metric_specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricSpecification")]
    #[builder(default)]
    pub predefined_metric_specification: Option<PolicyForProviderTargetTrackingConfigurationPredefinedMetricSpecification>,
    /// Target value for the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetValue")]
    #[builder(default)]
    pub target_value: Option<f64>,
}

/// Customized metric. Conflicts with predefined_metric_specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecification {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDimension")]
    #[builder(default)]
    pub metric_dimension: Option<Vec<PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Metrics to include, as a metric data query.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metrics: Option<Vec<PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetrics>>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
    /// Statistic of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetrics {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Predefined metric. Conflicts with customized_metric_specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyForProviderTargetTrackingConfigurationPredefinedMetricSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProvider {
    /// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adjustmentType")]
    #[builder(default)]
    pub adjustment_type: Option<String>,
    /// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cooldown: Option<f64>,
    /// Whether the scaling policy is enabled or disabled. Default: true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "estimatedInstanceWarmup")]
    #[builder(default)]
    pub estimated_instance_warmup: Option<f64>,
    /// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricAggregationType")]
    #[builder(default)]
    pub metric_aggregation_type: Option<String>,
    /// Minimum value to scale by when adjustment_type is set to PercentChangeInCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAdjustmentMagnitude")]
    #[builder(default)]
    pub min_adjustment_magnitude: Option<f64>,
    /// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyType")]
    #[builder(default)]
    pub policy_type: Option<String>,
    /// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingConfiguration")]
    #[builder(default)]
    pub predictive_scaling_configuration: Option<PolicyInitProviderPredictiveScalingConfiguration>,
    /// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingAdjustment")]
    #[builder(default)]
    pub scaling_adjustment: Option<f64>,
    /// Set of adjustments that manage
    /// group scaling. These have the following structure:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stepAdjustment")]
    #[builder(default)]
    pub step_adjustment: Option<Vec<PolicyInitProviderStepAdjustment>>,
    /// Target tracking policy. These have the following structure:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTrackingConfiguration")]
    #[builder(default)]
    pub target_tracking_configuration: Option<PolicyInitProviderTargetTrackingConfiguration>,
}

/// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfiguration {
    /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are HonorMaxCapacity or IncreaseMaxCapacity. Default is HonorMaxCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacityBreachBehavior")]
    #[builder(default)]
    pub max_capacity_breach_behavior: Option<String>,
    /// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is 0 to 100. If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacityBuffer")]
    #[builder(default)]
    pub max_capacity_buffer: Option<String>,
    /// This structure includes the metrics and target utilization to use for predictive scaling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricSpecification")]
    #[builder(default)]
    pub metric_specification: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecification>,
    /// Predictive scaling mode. Valid values are ForecastAndScale and ForecastOnly. Default is ForecastOnly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    /// Amount of time, in seconds, by which the instance launch time can be advanced. Minimum is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingBufferTime")]
    #[builder(default)]
    pub scheduling_buffer_time: Option<String>,
}

/// This structure includes the metrics and target utilization to use for predictive scaling.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecification {
    /// Customized capacity metric specification. The field is only valid when you use customized_load_metric_specification
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedCapacityMetricSpecification")]
    #[builder(default)]
    pub customized_capacity_metric_specification: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification>,
    /// Customized load metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedLoadMetricSpecification")]
    #[builder(default)]
    pub customized_load_metric_specification: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification>,
    /// Customized scaling metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedScalingMetricSpecification")]
    #[builder(default)]
    pub customized_scaling_metric_specification: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification>,
    /// Predefined load metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedLoadMetricSpecification")]
    #[builder(default)]
    pub predefined_load_metric_specification: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification>,
    /// Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricPairSpecification")]
    #[builder(default)]
    pub predefined_metric_pair_specification: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification>,
    /// Predefined scaling metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedScalingMetricSpecification")]
    #[builder(default)]
    pub predefined_scaling_metric_specification: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification>,
    /// Target value for the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetValue")]
    #[builder(default)]
    pub target_value: Option<f64>,
}

/// Customized capacity metric specification. The field is only valid when you use customized_load_metric_specification
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification {
    /// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDataQueries")]
    #[builder(default)]
    pub metric_data_queries: Option<Vec<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueries>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueries {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Customized load metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification {
    /// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDataQueries")]
    #[builder(default)]
    pub metric_data_queries: Option<Vec<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueries>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueries {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Customized scaling metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification {
    /// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDataQueries")]
    #[builder(default)]
    pub metric_data_queries: Option<Vec<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueries>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueries {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Predefined load metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

/// Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

/// Predefined scaling metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderStepAdjustment {
    /// Lower bound for the
    /// difference between the alarm threshold and the CloudWatch metric.
    /// Without a value, AWS will treat this bound as negative infinity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricIntervalLowerBound")]
    #[builder(default)]
    pub metric_interval_lower_bound: Option<String>,
    /// Upper bound for the
    /// difference between the alarm threshold and the CloudWatch metric.
    /// Without a value, AWS will treat this bound as positive infinity. The upper bound
    /// must be greater than the lower bound.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricIntervalUpperBound")]
    #[builder(default)]
    pub metric_interval_upper_bound: Option<String>,
    /// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingAdjustment")]
    #[builder(default)]
    pub scaling_adjustment: Option<f64>,
}

/// Target tracking policy. These have the following structure:
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderTargetTrackingConfiguration {
    /// Customized metric. Conflicts with predefined_metric_specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedMetricSpecification")]
    #[builder(default)]
    pub customized_metric_specification: Option<PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecification>,
    /// Whether scale in by the target tracking policy is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableScaleIn")]
    #[builder(default)]
    pub disable_scale_in: Option<bool>,
    /// Predefined metric. Conflicts with customized_metric_specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricSpecification")]
    #[builder(default)]
    pub predefined_metric_specification: Option<PolicyInitProviderTargetTrackingConfigurationPredefinedMetricSpecification>,
    /// Target value for the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetValue")]
    #[builder(default)]
    pub target_value: Option<f64>,
}

/// Customized metric. Conflicts with predefined_metric_specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecification {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDimension")]
    #[builder(default)]
    pub metric_dimension: Option<Vec<PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Metrics to include, as a metric data query.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metrics: Option<Vec<PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetrics>>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
    /// Statistic of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetrics {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Predefined metric. Conflicts with customized_metric_specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyInitProviderTargetTrackingConfigurationPredefinedMetricSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<PolicyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<PolicyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<PolicyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<PolicyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<PolicyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<PolicyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<PolicyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<PolicyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PolicyStatus defines the observed state of Policy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<PolicyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProvider {
    /// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adjustmentType")]
    #[builder(default)]
    pub adjustment_type: Option<String>,
    /// ARN assigned by AWS to the scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Name of the autoscaling group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingGroupName")]
    #[builder(default)]
    pub autoscaling_group_name: Option<String>,
    /// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cooldown: Option<f64>,
    /// Whether the scaling policy is enabled or disabled. Default: true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "estimatedInstanceWarmup")]
    #[builder(default)]
    pub estimated_instance_warmup: Option<f64>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricAggregationType")]
    #[builder(default)]
    pub metric_aggregation_type: Option<String>,
    /// Minimum value to scale by when adjustment_type is set to PercentChangeInCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAdjustmentMagnitude")]
    #[builder(default)]
    pub min_adjustment_magnitude: Option<f64>,
    /// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyType")]
    #[builder(default)]
    pub policy_type: Option<String>,
    /// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveScalingConfiguration")]
    #[builder(default)]
    pub predictive_scaling_configuration: Option<PolicyStatusAtProviderPredictiveScalingConfiguration>,
    /// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingAdjustment")]
    #[builder(default)]
    pub scaling_adjustment: Option<f64>,
    /// Set of adjustments that manage
    /// group scaling. These have the following structure:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stepAdjustment")]
    #[builder(default)]
    pub step_adjustment: Option<Vec<PolicyStatusAtProviderStepAdjustment>>,
    /// Target tracking policy. These have the following structure:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTrackingConfiguration")]
    #[builder(default)]
    pub target_tracking_configuration: Option<PolicyStatusAtProviderTargetTrackingConfiguration>,
}

/// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfiguration {
    /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are HonorMaxCapacity or IncreaseMaxCapacity. Default is HonorMaxCapacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacityBreachBehavior")]
    #[builder(default)]
    pub max_capacity_breach_behavior: Option<String>,
    /// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is 0 to 100. If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacityBuffer")]
    #[builder(default)]
    pub max_capacity_buffer: Option<String>,
    /// This structure includes the metrics and target utilization to use for predictive scaling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricSpecification")]
    #[builder(default)]
    pub metric_specification: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecification>,
    /// Predictive scaling mode. Valid values are ForecastAndScale and ForecastOnly. Default is ForecastOnly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    /// Amount of time, in seconds, by which the instance launch time can be advanced. Minimum is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingBufferTime")]
    #[builder(default)]
    pub scheduling_buffer_time: Option<String>,
}

/// This structure includes the metrics and target utilization to use for predictive scaling.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecification {
    /// Customized capacity metric specification. The field is only valid when you use customized_load_metric_specification
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedCapacityMetricSpecification")]
    #[builder(default)]
    pub customized_capacity_metric_specification: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification>,
    /// Customized load metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedLoadMetricSpecification")]
    #[builder(default)]
    pub customized_load_metric_specification: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification>,
    /// Customized scaling metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedScalingMetricSpecification")]
    #[builder(default)]
    pub customized_scaling_metric_specification: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification>,
    /// Predefined load metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedLoadMetricSpecification")]
    #[builder(default)]
    pub predefined_load_metric_specification: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification>,
    /// Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricPairSpecification")]
    #[builder(default)]
    pub predefined_metric_pair_specification: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification>,
    /// Predefined scaling metric specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedScalingMetricSpecification")]
    #[builder(default)]
    pub predefined_scaling_metric_specification: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification>,
    /// Target value for the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetValue")]
    #[builder(default)]
    pub target_value: Option<f64>,
}

/// Customized capacity metric specification. The field is only valid when you use customized_load_metric_specification
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification {
    /// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDataQueries")]
    #[builder(default)]
    pub metric_data_queries: Option<Vec<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueries>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueries {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Customized load metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification {
    /// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDataQueries")]
    #[builder(default)]
    pub metric_data_queries: Option<Vec<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueries>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueries {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Customized scaling metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification {
    /// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDataQueries")]
    #[builder(default)]
    pub metric_data_queries: Option<Vec<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueries>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueries {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Predefined load metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

/// Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

/// Predefined scaling metric specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderStepAdjustment {
    /// Lower bound for the
    /// difference between the alarm threshold and the CloudWatch metric.
    /// Without a value, AWS will treat this bound as negative infinity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricIntervalLowerBound")]
    #[builder(default)]
    pub metric_interval_lower_bound: Option<String>,
    /// Upper bound for the
    /// difference between the alarm threshold and the CloudWatch metric.
    /// Without a value, AWS will treat this bound as positive infinity. The upper bound
    /// must be greater than the lower bound.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricIntervalUpperBound")]
    #[builder(default)]
    pub metric_interval_upper_bound: Option<String>,
    /// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingAdjustment")]
    #[builder(default)]
    pub scaling_adjustment: Option<f64>,
}

/// Target tracking policy. These have the following structure:
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderTargetTrackingConfiguration {
    /// Customized metric. Conflicts with predefined_metric_specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customizedMetricSpecification")]
    #[builder(default)]
    pub customized_metric_specification: Option<PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecification>,
    /// Whether scale in by the target tracking policy is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableScaleIn")]
    #[builder(default)]
    pub disable_scale_in: Option<bool>,
    /// Predefined metric. Conflicts with customized_metric_specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricSpecification")]
    #[builder(default)]
    pub predefined_metric_specification: Option<PolicyStatusAtProviderTargetTrackingConfigurationPredefinedMetricSpecification>,
    /// Target value for the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetValue")]
    #[builder(default)]
    pub target_value: Option<f64>,
}

/// Customized metric. Conflicts with predefined_metric_specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecification {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDimension")]
    #[builder(default)]
    pub metric_dimension: Option<Vec<PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Metrics to include, as a metric data query.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metrics: Option<Vec<PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetrics>>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
    /// Statistic of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetrics {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default)]
    pub metric_stat: Option<PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default)]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metric: Option<PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric {
    /// Dimensions of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimensions: Option<Vec<PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default)]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderTargetTrackingConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions {
    /// Name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Predefined metric. Conflicts with customized_metric_specification.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PolicyStatusAtProviderTargetTrackingConfigurationPredefinedMetricSpecification {
    /// Metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedMetricType")]
    #[builder(default)]
    pub predefined_metric_type: Option<String>,
    /// Identifies the resource associated with the metric type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLabel")]
    #[builder(default)]
    pub resource_label: Option<String>,
}


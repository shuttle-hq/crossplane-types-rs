// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// LaunchConfigurationSpec defines the desired state of LaunchConfiguration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "autoscaling.aws.upbound.io", version = "v1beta2", kind = "LaunchConfiguration", plural = "launchconfigurations")]
#[kube(status = "LaunchConfigurationStatus")]
pub struct LaunchConfigurationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<LaunchConfigurationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: LaunchConfigurationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<LaunchConfigurationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<LaunchConfigurationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<LaunchConfigurationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<LaunchConfigurationWriteConnectionSecretToRef>,
}

/// LaunchConfigurationSpec defines the desired state of LaunchConfiguration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LaunchConfigurationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationForProvider {
    /// Associate a public ip address with an instance in a VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatePublicIpAddress")]
    #[builder(default)]
    pub associate_public_ip_address: Option<bool>,
    /// Additional EBS block devices to attach to the instance. See Block Devices below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsBlockDevice")]
    #[builder(default)]
    pub ebs_block_device: Option<Vec<LaunchConfigurationForProviderEbsBlockDevice>>,
    /// If true, the launched EC2 instance will be EBS-optimized.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    #[builder(default)]
    pub ebs_optimized: Option<bool>,
    /// Enables/disables detailed monitoring. This is enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableMonitoring")]
    #[builder(default)]
    pub enable_monitoring: Option<bool>,
    /// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralBlockDevice")]
    #[builder(default)]
    pub ephemeral_block_device: Option<Vec<LaunchConfigurationForProviderEphemeralBlockDevice>>,
    /// The name attribute of the IAM instance profile to associate with launched instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamInstanceProfile")]
    #[builder(default)]
    pub iam_instance_profile: Option<String>,
    /// The EC2 image ID to launch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageId")]
    #[builder(default)]
    pub image_id: Option<String>,
    /// The size of instance to launch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The key name that should be used for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    #[builder(default)]
    pub key_name: Option<String>,
    /// The metadata options for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataOptions")]
    #[builder(default)]
    pub metadata_options: Option<LaunchConfigurationForProviderMetadataOptions>,
    /// The tenancy of the instance. Valid values are default or dedicated, see AWS's Create Launch Configuration for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementTenancy")]
    #[builder(default)]
    pub placement_tenancy: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Customize details about the root block device of the instance. See Block Devices below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootBlockDevice")]
    #[builder(default)]
    pub root_block_device: Option<LaunchConfigurationForProviderRootBlockDevice>,
    /// A list of associated security group IDS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The maximum price to use for reserving spot instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotPrice")]
    #[builder(default)]
    pub spot_price: Option<String>,
    /// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see user_data_base64 instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    #[builder(default)]
    pub user_data: Option<String>,
    /// Can be used instead of user_data to pass base64-encoded binary data directly. Use this instead of user_data whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    #[builder(default)]
    pub user_data_base64: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationForProviderEbsBlockDevice {
    /// Whether the volume should be destroyed
    /// on instance termination (Default: true).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    /// The name of the device to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Whether the volume should be encrypted or not. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// The amount of provisioned
    /// IOPS.
    /// This must be set with a volume_type of "io1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Whether the device in the block device mapping of the AMI is suppressed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default)]
    pub no_device: Option<bool>,
    /// The Snapshot ID to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    #[builder(default)]
    pub snapshot_id: Option<String>,
    /// The throughput (MiBps) to provision for a gp3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// The type of volume. Can be standard, gp2, gp3, st1, sc1 or io1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationForProviderEphemeralBlockDevice {
    /// The name of the block device to mount on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Whether the device in the block device mapping of the AMI is suppressed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default)]
    pub no_device: Option<bool>,
    /// The Instance Store Device Name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    #[builder(default)]
    pub virtual_name: Option<String>,
}

/// The metadata options for the instance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationForProviderMetadataOptions {
    /// The state of the metadata service: enabled, disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpoint")]
    #[builder(default)]
    pub http_endpoint: Option<String>,
    /// The desired HTTP PUT response hop limit for instance metadata requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPutResponseHopLimit")]
    #[builder(default)]
    pub http_put_response_hop_limit: Option<f64>,
    /// If session tokens are required: optional, required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTokens")]
    #[builder(default)]
    pub http_tokens: Option<String>,
}

/// Customize details about the root block device of the instance. See Block Devices below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationForProviderRootBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    /// Whether the volume should be encrypted or not. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// The amount of provisioned IOPS. This must be set with a volume_type of io1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The throughput (MiBps) to provision for a gp3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// The type of volume. Can be standard, gp2, gp3, st1, sc1 or io1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationInitProvider {
    /// Associate a public ip address with an instance in a VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatePublicIpAddress")]
    #[builder(default)]
    pub associate_public_ip_address: Option<bool>,
    /// Additional EBS block devices to attach to the instance. See Block Devices below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsBlockDevice")]
    #[builder(default)]
    pub ebs_block_device: Option<Vec<LaunchConfigurationInitProviderEbsBlockDevice>>,
    /// If true, the launched EC2 instance will be EBS-optimized.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    #[builder(default)]
    pub ebs_optimized: Option<bool>,
    /// Enables/disables detailed monitoring. This is enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableMonitoring")]
    #[builder(default)]
    pub enable_monitoring: Option<bool>,
    /// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralBlockDevice")]
    #[builder(default)]
    pub ephemeral_block_device: Option<Vec<LaunchConfigurationInitProviderEphemeralBlockDevice>>,
    /// The name attribute of the IAM instance profile to associate with launched instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamInstanceProfile")]
    #[builder(default)]
    pub iam_instance_profile: Option<String>,
    /// The EC2 image ID to launch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageId")]
    #[builder(default)]
    pub image_id: Option<String>,
    /// The size of instance to launch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The key name that should be used for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    #[builder(default)]
    pub key_name: Option<String>,
    /// The metadata options for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataOptions")]
    #[builder(default)]
    pub metadata_options: Option<LaunchConfigurationInitProviderMetadataOptions>,
    /// The tenancy of the instance. Valid values are default or dedicated, see AWS's Create Launch Configuration for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementTenancy")]
    #[builder(default)]
    pub placement_tenancy: Option<String>,
    /// Customize details about the root block device of the instance. See Block Devices below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootBlockDevice")]
    #[builder(default)]
    pub root_block_device: Option<LaunchConfigurationInitProviderRootBlockDevice>,
    /// A list of associated security group IDS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The maximum price to use for reserving spot instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotPrice")]
    #[builder(default)]
    pub spot_price: Option<String>,
    /// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see user_data_base64 instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    #[builder(default)]
    pub user_data: Option<String>,
    /// Can be used instead of user_data to pass base64-encoded binary data directly. Use this instead of user_data whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    #[builder(default)]
    pub user_data_base64: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationInitProviderEbsBlockDevice {
    /// Whether the volume should be destroyed
    /// on instance termination (Default: true).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    /// The name of the device to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Whether the volume should be encrypted or not. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// The amount of provisioned
    /// IOPS.
    /// This must be set with a volume_type of "io1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Whether the device in the block device mapping of the AMI is suppressed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default)]
    pub no_device: Option<bool>,
    /// The Snapshot ID to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    #[builder(default)]
    pub snapshot_id: Option<String>,
    /// The throughput (MiBps) to provision for a gp3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// The type of volume. Can be standard, gp2, gp3, st1, sc1 or io1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationInitProviderEphemeralBlockDevice {
    /// The name of the block device to mount on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Whether the device in the block device mapping of the AMI is suppressed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default)]
    pub no_device: Option<bool>,
    /// The Instance Store Device Name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    #[builder(default)]
    pub virtual_name: Option<String>,
}

/// The metadata options for the instance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationInitProviderMetadataOptions {
    /// The state of the metadata service: enabled, disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpoint")]
    #[builder(default)]
    pub http_endpoint: Option<String>,
    /// The desired HTTP PUT response hop limit for instance metadata requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPutResponseHopLimit")]
    #[builder(default)]
    pub http_put_response_hop_limit: Option<f64>,
    /// If session tokens are required: optional, required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTokens")]
    #[builder(default)]
    pub http_tokens: Option<String>,
}

/// Customize details about the root block device of the instance. See Block Devices below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationInitProviderRootBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    /// Whether the volume should be encrypted or not. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// The amount of provisioned IOPS. This must be set with a volume_type of io1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The throughput (MiBps) to provision for a gp3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// The type of volume. Can be standard, gp2, gp3, st1, sc1 or io1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LaunchConfigurationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LaunchConfigurationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LaunchConfigurationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LaunchConfigurationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LaunchConfigurationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<LaunchConfigurationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<LaunchConfigurationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LaunchConfigurationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LaunchConfigurationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LaunchConfigurationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LaunchConfigurationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LaunchConfigurationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// LaunchConfigurationStatus defines the observed state of LaunchConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<LaunchConfigurationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationStatusAtProvider {
    /// The Amazon Resource Name of the launch configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Associate a public ip address with an instance in a VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatePublicIpAddress")]
    #[builder(default)]
    pub associate_public_ip_address: Option<bool>,
    /// Additional EBS block devices to attach to the instance. See Block Devices below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsBlockDevice")]
    #[builder(default)]
    pub ebs_block_device: Option<Vec<LaunchConfigurationStatusAtProviderEbsBlockDevice>>,
    /// If true, the launched EC2 instance will be EBS-optimized.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    #[builder(default)]
    pub ebs_optimized: Option<bool>,
    /// Enables/disables detailed monitoring. This is enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableMonitoring")]
    #[builder(default)]
    pub enable_monitoring: Option<bool>,
    /// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralBlockDevice")]
    #[builder(default)]
    pub ephemeral_block_device: Option<Vec<LaunchConfigurationStatusAtProviderEphemeralBlockDevice>>,
    /// The name attribute of the IAM instance profile to associate with launched instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamInstanceProfile")]
    #[builder(default)]
    pub iam_instance_profile: Option<String>,
    /// The ID of the launch configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The EC2 image ID to launch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageId")]
    #[builder(default)]
    pub image_id: Option<String>,
    /// The size of instance to launch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The key name that should be used for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    #[builder(default)]
    pub key_name: Option<String>,
    /// The metadata options for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataOptions")]
    #[builder(default)]
    pub metadata_options: Option<LaunchConfigurationStatusAtProviderMetadataOptions>,
    /// The tenancy of the instance. Valid values are default or dedicated, see AWS's Create Launch Configuration for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementTenancy")]
    #[builder(default)]
    pub placement_tenancy: Option<String>,
    /// Customize details about the root block device of the instance. See Block Devices below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootBlockDevice")]
    #[builder(default)]
    pub root_block_device: Option<LaunchConfigurationStatusAtProviderRootBlockDevice>,
    /// A list of associated security group IDS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The maximum price to use for reserving spot instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotPrice")]
    #[builder(default)]
    pub spot_price: Option<String>,
    /// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see user_data_base64 instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    #[builder(default)]
    pub user_data: Option<String>,
    /// Can be used instead of user_data to pass base64-encoded binary data directly. Use this instead of user_data whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    #[builder(default)]
    pub user_data_base64: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationStatusAtProviderEbsBlockDevice {
    /// Whether the volume should be destroyed
    /// on instance termination (Default: true).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    /// The name of the device to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Whether the volume should be encrypted or not. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// The amount of provisioned
    /// IOPS.
    /// This must be set with a volume_type of "io1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Whether the device in the block device mapping of the AMI is suppressed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default)]
    pub no_device: Option<bool>,
    /// The Snapshot ID to mount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    #[builder(default)]
    pub snapshot_id: Option<String>,
    /// The throughput (MiBps) to provision for a gp3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// The type of volume. Can be standard, gp2, gp3, st1, sc1 or io1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationStatusAtProviderEphemeralBlockDevice {
    /// The name of the block device to mount on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Whether the device in the block device mapping of the AMI is suppressed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default)]
    pub no_device: Option<bool>,
    /// The Instance Store Device Name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    #[builder(default)]
    pub virtual_name: Option<String>,
}

/// The metadata options for the instance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationStatusAtProviderMetadataOptions {
    /// The state of the metadata service: enabled, disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpoint")]
    #[builder(default)]
    pub http_endpoint: Option<String>,
    /// The desired HTTP PUT response hop limit for instance metadata requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPutResponseHopLimit")]
    #[builder(default)]
    pub http_put_response_hop_limit: Option<f64>,
    /// If session tokens are required: optional, required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTokens")]
    #[builder(default)]
    pub http_tokens: Option<String>,
}

/// Customize details about the root block device of the instance. See Block Devices below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LaunchConfigurationStatusAtProviderRootBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    /// Whether the volume should be encrypted or not. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// The amount of provisioned IOPS. This must be set with a volume_type of io1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The throughput (MiBps) to provision for a gp3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// The type of volume. Can be standard, gp2, gp3, st1, sc1 or io1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}


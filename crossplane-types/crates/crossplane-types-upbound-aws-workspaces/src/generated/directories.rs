// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// DirectorySpec defines the desired state of Directory
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "workspaces.aws.upbound.io",
    version = "v1beta2",
    kind = "Directory",
    plural = "directories"
)]
#[kube(status = "DirectoryStatus")]
pub struct DirectorySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<DirectoryDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DirectoryForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<DirectoryInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<DirectoryProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<DirectoryPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<DirectoryWriteConnectionSecretToRef>,
}

/// DirectorySpec defines the desired state of Directory
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProvider {
    /// The directory identifier for registration in WorkSpaces service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directoryId"
    )]
    #[builder(default)]
    pub directory_id: Option<String>,
    /// Reference to a Directory in ds to populate directoryId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directoryIdRef"
    )]
    #[builder(default)]
    pub directory_id_ref: Option<DirectoryForProviderDirectoryIdRef>,
    /// Selector for a Directory in ds to populate directoryId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directoryIdSelector"
    )]
    #[builder(default)]
    pub directory_id_selector: Option<DirectoryForProviderDirectoryIdSelector>,
    /// –  The identifiers of the IP access control groups associated with the directory.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipGroupIds"
    )]
    #[builder(default)]
    pub ip_group_ids: Option<Vec<String>>,
    /// References to IPGroup in workspaces to populate ipGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipGroupIdsRefs"
    )]
    #[builder(default)]
    pub ip_group_ids_refs: Option<Vec<DirectoryForProviderIpGroupIdsRefs>>,
    /// Selector for a list of IPGroup in workspaces to populate ipGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipGroupIdsSelector"
    )]
    #[builder(default)]
    pub ip_group_ids_selector: Option<DirectoryForProviderIpGroupIdsSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// –  Configuration of SAML authentication integration. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "samlProperties"
    )]
    #[builder(default)]
    pub saml_properties: Option<DirectoryForProviderSamlProperties>,
    /// service capabilities. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selfServicePermissions"
    )]
    #[builder(default)]
    pub self_service_permissions: Option<DirectoryForProviderSelfServicePermissions>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRefs"
    )]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<DirectoryForProviderSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default)]
    pub subnet_id_selector: Option<DirectoryForProviderSubnetIdSelector>,
    /// The identifiers of the subnets where the directory resides.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// –  Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceAccessProperties"
    )]
    #[builder(default)]
    pub workspace_access_properties: Option<DirectoryForProviderWorkspaceAccessProperties>,
    /// –  Default properties that are used for creating WorkSpaces. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceCreationProperties"
    )]
    #[builder(default)]
    pub workspace_creation_properties: Option<DirectoryForProviderWorkspaceCreationProperties>,
}

/// Reference to a Directory in ds to populate directoryId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderDirectoryIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryForProviderDirectoryIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderDirectoryIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryForProviderDirectoryIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryForProviderDirectoryIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderDirectoryIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderDirectoryIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Directory in ds to populate directoryId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderDirectoryIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryForProviderDirectoryIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderDirectoryIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryForProviderDirectoryIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryForProviderDirectoryIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderDirectoryIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderDirectoryIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderIpGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryForProviderIpGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderIpGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryForProviderIpGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryForProviderIpGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderIpGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderIpGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of IPGroup in workspaces to populate ipGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderIpGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryForProviderIpGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderIpGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryForProviderIpGroupIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryForProviderIpGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderIpGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderIpGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// –  Configuration of SAML authentication integration. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderSamlProperties {
    /// The relay state parameter name supported by the SAML 2.0 identity provider (IdP). Default RelayState.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "relayStateParameterName"
    )]
    #[builder(default)]
    pub relay_state_parameter_name: Option<String>,
    /// Status of SAML 2.0 authentication. Default DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
    /// The SAML 2.0 identity provider (IdP) user access URL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userAccessUrl"
    )]
    #[builder(default)]
    pub user_access_url: Option<String>,
}

/// service capabilities. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderSelfServicePermissions {
    /// –  Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "changeComputeType"
    )]
    #[builder(default)]
    pub change_compute_type: Option<bool>,
    /// –  Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "increaseVolumeSize"
    )]
    #[builder(default)]
    pub increase_volume_size: Option<bool>,
    /// –  Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rebuildWorkspace"
    )]
    #[builder(default)]
    pub rebuild_workspace: Option<bool>,
    /// –  Whether WorkSpaces directory users can restart their workspace. Default true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartWorkspace"
    )]
    #[builder(default)]
    pub restart_workspace: Option<bool>,
    /// –  Whether WorkSpaces directory users can switch the running mode of their workspace. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "switchRunningMode"
    )]
    #[builder(default)]
    pub switch_running_mode: Option<bool>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryForProviderSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryForProviderSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryForProviderSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryForProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryForProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryForProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// –  Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderWorkspaceAccessProperties {
    /// –  Indicates whether users can use Android devices to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeAndroid"
    )]
    #[builder(default)]
    pub device_type_android: Option<String>,
    /// –  Indicates whether users can use Chromebooks to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeChromeos"
    )]
    #[builder(default)]
    pub device_type_chromeos: Option<String>,
    /// –  Indicates whether users can use iOS devices to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeIos"
    )]
    #[builder(default)]
    pub device_type_ios: Option<String>,
    /// –  Indicates whether users can use Linux clients to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeLinux"
    )]
    #[builder(default)]
    pub device_type_linux: Option<String>,
    /// –  Indicates whether users can use macOS clients to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeOsx"
    )]
    #[builder(default)]
    pub device_type_osx: Option<String>,
    /// –  Indicates whether users can access their WorkSpaces through a web browser.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeWeb"
    )]
    #[builder(default)]
    pub device_type_web: Option<String>,
    /// –  Indicates whether users can use Windows clients to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeWindows"
    )]
    #[builder(default)]
    pub device_type_windows: Option<String>,
    /// –  Indicates whether users can use zero client devices to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeZeroclient"
    )]
    #[builder(default)]
    pub device_type_zeroclient: Option<String>,
}

/// –  Default properties that are used for creating WorkSpaces. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderWorkspaceCreationProperties {
    /// –  The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customSecurityGroupId"
    )]
    #[builder(default)]
    pub custom_security_group_id: Option<String>,
    /// Reference to a SecurityGroup in ec2 to populate customSecurityGroupId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customSecurityGroupIdRef"
    )]
    #[builder(default)]
    pub custom_security_group_id_ref:
        Option<DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRef>,
    /// Selector for a SecurityGroup in ec2 to populate customSecurityGroupId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customSecurityGroupIdSelector"
    )]
    #[builder(default)]
    pub custom_security_group_id_selector:
        Option<DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelector>,
    /// –  The default organizational unit (OU) for your WorkSpace directories. Should conform "OU=<value>,DC=<value>,...,DC=<value>" pattern.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultOu")]
    #[builder(default)]
    pub default_ou: Option<String>,
    /// –  Indicates whether internet access is enabled for your WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableInternetAccess"
    )]
    #[builder(default)]
    pub enable_internet_access: Option<bool>,
    /// –  Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see WorkSpace Maintenance..
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableMaintenanceMode"
    )]
    #[builder(default)]
    pub enable_maintenance_mode: Option<bool>,
    /// –  Indicates whether users are local administrators of their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userEnabledAsLocalAdministrator"
    )]
    #[builder(default)]
    pub user_enabled_as_local_administrator: Option<bool>,
}

/// Reference to a SecurityGroup in ec2 to populate customSecurityGroupId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<
        DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<
        DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SecurityGroup in ec2 to populate customSecurityGroupId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryForProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProvider {
    /// The directory identifier for registration in WorkSpaces service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directoryId"
    )]
    #[builder(default)]
    pub directory_id: Option<String>,
    /// Reference to a Directory in ds to populate directoryId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directoryIdRef"
    )]
    #[builder(default)]
    pub directory_id_ref: Option<DirectoryInitProviderDirectoryIdRef>,
    /// Selector for a Directory in ds to populate directoryId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directoryIdSelector"
    )]
    #[builder(default)]
    pub directory_id_selector: Option<DirectoryInitProviderDirectoryIdSelector>,
    /// –  The identifiers of the IP access control groups associated with the directory.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipGroupIds"
    )]
    #[builder(default)]
    pub ip_group_ids: Option<Vec<String>>,
    /// References to IPGroup in workspaces to populate ipGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipGroupIdsRefs"
    )]
    #[builder(default)]
    pub ip_group_ids_refs: Option<Vec<DirectoryInitProviderIpGroupIdsRefs>>,
    /// Selector for a list of IPGroup in workspaces to populate ipGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipGroupIdsSelector"
    )]
    #[builder(default)]
    pub ip_group_ids_selector: Option<DirectoryInitProviderIpGroupIdsSelector>,
    /// –  Configuration of SAML authentication integration. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "samlProperties"
    )]
    #[builder(default)]
    pub saml_properties: Option<DirectoryInitProviderSamlProperties>,
    /// service capabilities. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selfServicePermissions"
    )]
    #[builder(default)]
    pub self_service_permissions: Option<DirectoryInitProviderSelfServicePermissions>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRefs"
    )]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<DirectoryInitProviderSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default)]
    pub subnet_id_selector: Option<DirectoryInitProviderSubnetIdSelector>,
    /// The identifiers of the subnets where the directory resides.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// –  Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceAccessProperties"
    )]
    #[builder(default)]
    pub workspace_access_properties: Option<DirectoryInitProviderWorkspaceAccessProperties>,
    /// –  Default properties that are used for creating WorkSpaces. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceCreationProperties"
    )]
    #[builder(default)]
    pub workspace_creation_properties: Option<DirectoryInitProviderWorkspaceCreationProperties>,
}

/// Reference to a Directory in ds to populate directoryId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderDirectoryIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryInitProviderDirectoryIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderDirectoryIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryInitProviderDirectoryIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryInitProviderDirectoryIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderDirectoryIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderDirectoryIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Directory in ds to populate directoryId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderDirectoryIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryInitProviderDirectoryIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderDirectoryIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryInitProviderDirectoryIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryInitProviderDirectoryIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderDirectoryIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderDirectoryIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderIpGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryInitProviderIpGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderIpGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryInitProviderIpGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryInitProviderIpGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderIpGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderIpGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of IPGroup in workspaces to populate ipGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderIpGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryInitProviderIpGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderIpGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryInitProviderIpGroupIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryInitProviderIpGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderIpGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderIpGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// –  Configuration of SAML authentication integration. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderSamlProperties {
    /// The relay state parameter name supported by the SAML 2.0 identity provider (IdP). Default RelayState.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "relayStateParameterName"
    )]
    #[builder(default)]
    pub relay_state_parameter_name: Option<String>,
    /// Status of SAML 2.0 authentication. Default DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
    /// The SAML 2.0 identity provider (IdP) user access URL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userAccessUrl"
    )]
    #[builder(default)]
    pub user_access_url: Option<String>,
}

/// service capabilities. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderSelfServicePermissions {
    /// –  Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "changeComputeType"
    )]
    #[builder(default)]
    pub change_compute_type: Option<bool>,
    /// –  Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "increaseVolumeSize"
    )]
    #[builder(default)]
    pub increase_volume_size: Option<bool>,
    /// –  Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rebuildWorkspace"
    )]
    #[builder(default)]
    pub rebuild_workspace: Option<bool>,
    /// –  Whether WorkSpaces directory users can restart their workspace. Default true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartWorkspace"
    )]
    #[builder(default)]
    pub restart_workspace: Option<bool>,
    /// –  Whether WorkSpaces directory users can switch the running mode of their workspace. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "switchRunningMode"
    )]
    #[builder(default)]
    pub switch_running_mode: Option<bool>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryInitProviderSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryInitProviderSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryInitProviderSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryInitProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryInitProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryInitProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// –  Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderWorkspaceAccessProperties {
    /// –  Indicates whether users can use Android devices to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeAndroid"
    )]
    #[builder(default)]
    pub device_type_android: Option<String>,
    /// –  Indicates whether users can use Chromebooks to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeChromeos"
    )]
    #[builder(default)]
    pub device_type_chromeos: Option<String>,
    /// –  Indicates whether users can use iOS devices to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeIos"
    )]
    #[builder(default)]
    pub device_type_ios: Option<String>,
    /// –  Indicates whether users can use Linux clients to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeLinux"
    )]
    #[builder(default)]
    pub device_type_linux: Option<String>,
    /// –  Indicates whether users can use macOS clients to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeOsx"
    )]
    #[builder(default)]
    pub device_type_osx: Option<String>,
    /// –  Indicates whether users can access their WorkSpaces through a web browser.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeWeb"
    )]
    #[builder(default)]
    pub device_type_web: Option<String>,
    /// –  Indicates whether users can use Windows clients to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeWindows"
    )]
    #[builder(default)]
    pub device_type_windows: Option<String>,
    /// –  Indicates whether users can use zero client devices to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeZeroclient"
    )]
    #[builder(default)]
    pub device_type_zeroclient: Option<String>,
}

/// –  Default properties that are used for creating WorkSpaces. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderWorkspaceCreationProperties {
    /// –  The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customSecurityGroupId"
    )]
    #[builder(default)]
    pub custom_security_group_id: Option<String>,
    /// Reference to a SecurityGroup in ec2 to populate customSecurityGroupId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customSecurityGroupIdRef"
    )]
    #[builder(default)]
    pub custom_security_group_id_ref:
        Option<DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRef>,
    /// Selector for a SecurityGroup in ec2 to populate customSecurityGroupId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customSecurityGroupIdSelector"
    )]
    #[builder(default)]
    pub custom_security_group_id_selector:
        Option<DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelector>,
    /// –  The default organizational unit (OU) for your WorkSpace directories. Should conform "OU=<value>,DC=<value>,...,DC=<value>" pattern.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultOu")]
    #[builder(default)]
    pub default_ou: Option<String>,
    /// –  Indicates whether internet access is enabled for your WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableInternetAccess"
    )]
    #[builder(default)]
    pub enable_internet_access: Option<bool>,
    /// –  Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see WorkSpace Maintenance..
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableMaintenanceMode"
    )]
    #[builder(default)]
    pub enable_maintenance_mode: Option<bool>,
    /// –  Indicates whether users are local administrators of their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userEnabledAsLocalAdministrator"
    )]
    #[builder(default)]
    pub user_enabled_as_local_administrator: Option<bool>,
}

/// Reference to a SecurityGroup in ec2 to populate customSecurityGroupId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<
        DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<
        DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SecurityGroup in ec2 to populate customSecurityGroupId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryInitProviderWorkspaceCreationPropertiesCustomSecurityGroupIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<DirectoryPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<DirectoryPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DirectoryPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DirectoryPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DirectoryPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DirectoryPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DirectoryStatus defines the observed state of Directory.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<DirectoryStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryStatusAtProvider {
    /// The directory alias.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alias: Option<String>,
    /// The user name for the service account.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerUserName"
    )]
    #[builder(default)]
    pub customer_user_name: Option<String>,
    /// The directory identifier for registration in WorkSpaces service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directoryId"
    )]
    #[builder(default)]
    pub directory_id: Option<String>,
    /// The name of the directory.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directoryName"
    )]
    #[builder(default)]
    pub directory_name: Option<String>,
    /// The directory type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directoryType"
    )]
    #[builder(default)]
    pub directory_type: Option<String>,
    /// The IP addresses of the DNS servers for the directory.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dnsIpAddresses"
    )]
    #[builder(default)]
    pub dns_ip_addresses: Option<Vec<String>>,
    /// The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleId")]
    #[builder(default)]
    pub iam_role_id: Option<String>,
    /// The WorkSpaces directory identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// –  The identifiers of the IP access control groups associated with the directory.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipGroupIds"
    )]
    #[builder(default)]
    pub ip_group_ids: Option<Vec<String>>,
    /// The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "registrationCode"
    )]
    #[builder(default)]
    pub registration_code: Option<String>,
    /// –  Configuration of SAML authentication integration. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "samlProperties"
    )]
    #[builder(default)]
    pub saml_properties: Option<DirectoryStatusAtProviderSamlProperties>,
    /// service capabilities. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selfServicePermissions"
    )]
    #[builder(default)]
    pub self_service_permissions: Option<DirectoryStatusAtProviderSelfServicePermissions>,
    /// The identifiers of the subnets where the directory resides.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// –  Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceAccessProperties"
    )]
    #[builder(default)]
    pub workspace_access_properties: Option<DirectoryStatusAtProviderWorkspaceAccessProperties>,
    /// –  Default properties that are used for creating WorkSpaces. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceCreationProperties"
    )]
    #[builder(default)]
    pub workspace_creation_properties: Option<DirectoryStatusAtProviderWorkspaceCreationProperties>,
    /// The identifier of the security group that is assigned to new WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceSecurityGroupId"
    )]
    #[builder(default)]
    pub workspace_security_group_id: Option<String>,
}

/// –  Configuration of SAML authentication integration. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryStatusAtProviderSamlProperties {
    /// The relay state parameter name supported by the SAML 2.0 identity provider (IdP). Default RelayState.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "relayStateParameterName"
    )]
    #[builder(default)]
    pub relay_state_parameter_name: Option<String>,
    /// Status of SAML 2.0 authentication. Default DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
    /// The SAML 2.0 identity provider (IdP) user access URL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userAccessUrl"
    )]
    #[builder(default)]
    pub user_access_url: Option<String>,
}

/// service capabilities. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryStatusAtProviderSelfServicePermissions {
    /// –  Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "changeComputeType"
    )]
    #[builder(default)]
    pub change_compute_type: Option<bool>,
    /// –  Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "increaseVolumeSize"
    )]
    #[builder(default)]
    pub increase_volume_size: Option<bool>,
    /// –  Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rebuildWorkspace"
    )]
    #[builder(default)]
    pub rebuild_workspace: Option<bool>,
    /// –  Whether WorkSpaces directory users can restart their workspace. Default true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartWorkspace"
    )]
    #[builder(default)]
    pub restart_workspace: Option<bool>,
    /// –  Whether WorkSpaces directory users can switch the running mode of their workspace. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "switchRunningMode"
    )]
    #[builder(default)]
    pub switch_running_mode: Option<bool>,
}

/// –  Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryStatusAtProviderWorkspaceAccessProperties {
    /// –  Indicates whether users can use Android devices to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeAndroid"
    )]
    #[builder(default)]
    pub device_type_android: Option<String>,
    /// –  Indicates whether users can use Chromebooks to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeChromeos"
    )]
    #[builder(default)]
    pub device_type_chromeos: Option<String>,
    /// –  Indicates whether users can use iOS devices to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeIos"
    )]
    #[builder(default)]
    pub device_type_ios: Option<String>,
    /// –  Indicates whether users can use Linux clients to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeLinux"
    )]
    #[builder(default)]
    pub device_type_linux: Option<String>,
    /// –  Indicates whether users can use macOS clients to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeOsx"
    )]
    #[builder(default)]
    pub device_type_osx: Option<String>,
    /// –  Indicates whether users can access their WorkSpaces through a web browser.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeWeb"
    )]
    #[builder(default)]
    pub device_type_web: Option<String>,
    /// –  Indicates whether users can use Windows clients to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeWindows"
    )]
    #[builder(default)]
    pub device_type_windows: Option<String>,
    /// –  Indicates whether users can use zero client devices to access their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceTypeZeroclient"
    )]
    #[builder(default)]
    pub device_type_zeroclient: Option<String>,
}

/// –  Default properties that are used for creating WorkSpaces. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DirectoryStatusAtProviderWorkspaceCreationProperties {
    /// –  The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customSecurityGroupId"
    )]
    #[builder(default)]
    pub custom_security_group_id: Option<String>,
    /// –  The default organizational unit (OU) for your WorkSpace directories. Should conform "OU=<value>,DC=<value>,...,DC=<value>" pattern.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultOu")]
    #[builder(default)]
    pub default_ou: Option<String>,
    /// –  Indicates whether internet access is enabled for your WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableInternetAccess"
    )]
    #[builder(default)]
    pub enable_internet_access: Option<bool>,
    /// –  Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see WorkSpace Maintenance..
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableMaintenanceMode"
    )]
    #[builder(default)]
    pub enable_maintenance_mode: Option<bool>,
    /// –  Indicates whether users are local administrators of their WorkSpaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userEnabledAsLocalAdministrator"
    )]
    #[builder(default)]
    pub user_enabled_as_local_administrator: Option<bool>,
}

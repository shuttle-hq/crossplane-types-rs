// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// EntrySpec defines the desired state of Entry
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "datacatalog.gcp.upbound.io",
    version = "v1beta2",
    kind = "Entry",
    plural = "entries"
)]
#[kube(status = "EntryStatus")]
pub struct EntrySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<EntryDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: EntryForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<EntryInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<EntryProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<EntryPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<EntryWriteConnectionSecretToRef>,
}

/// EntrySpec defines the desired state of Entry
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryForProvider {
    /// Entry description, which can consist of several sentences or paragraphs that describe entry contents.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Display information such as title and description. A short name to identify the entry,
    /// for example, "Analytics Data - Jan 2011".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default)]
    pub display_name: Option<String>,
    /// The name of the entry group this entry is in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "entryGroup"
    )]
    #[builder(default)]
    pub entry_group: Option<String>,
    /// Reference to a EntryGroup in datacatalog to populate entryGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "entryGroupRef"
    )]
    #[builder(default)]
    pub entry_group_ref: Option<EntryForProviderEntryGroupRef>,
    /// Selector for a EntryGroup in datacatalog to populate entryGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "entryGroupSelector"
    )]
    #[builder(default)]
    pub entry_group_selector: Option<EntryForProviderEntryGroupSelector>,
    /// The id of the entry to create.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryId")]
    #[builder(default)]
    pub entry_id: Option<String>,
    /// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gcsFilesetSpec"
    )]
    #[builder(default)]
    pub gcs_fileset_spec: Option<EntryForProviderGcsFilesetSpec>,
    /// The resource this metadata entry refers to.
    /// For Google Cloud Platform resources, linkedResource is the full name of the resource.
    /// For example, the linkedResource for a table resource from BigQuery is:
    /// //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
    /// Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
    /// this field is optional and defaults to an empty string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "linkedResource"
    )]
    #[builder(default)]
    pub linked_resource: Option<String>,
    /// Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
    /// attached to it. See
    /// https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
    /// for what fields this schema can contain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schema: Option<String>,
    /// The type of the entry. Only used for Entries with types in the EntryType enum.
    /// Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType.
    /// Possible values are: FILESET.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// This field indicates the entry's source system that Data Catalog does not integrate with.
    /// userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
    /// and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSpecifiedSystem"
    )]
    #[builder(default)]
    pub user_specified_system: Option<String>,
    /// Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
    /// When creating an entry, users should check the enum values first, if nothing matches the entry
    /// to be created, then provide a custom value, for example "my_special_type".
    /// userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
    /// numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSpecifiedType"
    )]
    #[builder(default)]
    pub user_specified_type: Option<String>,
}

/// Reference to a EntryGroup in datacatalog to populate entryGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryForProviderEntryGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EntryForProviderEntryGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryForProviderEntryGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EntryForProviderEntryGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EntryForProviderEntryGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryForProviderEntryGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryForProviderEntryGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a EntryGroup in datacatalog to populate entryGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryForProviderEntryGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EntryForProviderEntryGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryForProviderEntryGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EntryForProviderEntryGroupSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EntryForProviderEntryGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryForProviderEntryGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryForProviderEntryGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryForProviderGcsFilesetSpec {
    /// Patterns to identify a set of files in Google Cloud Storage.
    /// See Cloud Storage documentation
    /// for more information. Note that bucket wildcards are currently not supported. Examples of valid filePatterns:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filePatterns"
    )]
    #[builder(default)]
    pub file_patterns: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryInitProvider {
    /// Entry description, which can consist of several sentences or paragraphs that describe entry contents.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Display information such as title and description. A short name to identify the entry,
    /// for example, "Analytics Data - Jan 2011".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default)]
    pub display_name: Option<String>,
    /// The name of the entry group this entry is in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "entryGroup"
    )]
    #[builder(default)]
    pub entry_group: Option<String>,
    /// Reference to a EntryGroup in datacatalog to populate entryGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "entryGroupRef"
    )]
    #[builder(default)]
    pub entry_group_ref: Option<EntryInitProviderEntryGroupRef>,
    /// Selector for a EntryGroup in datacatalog to populate entryGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "entryGroupSelector"
    )]
    #[builder(default)]
    pub entry_group_selector: Option<EntryInitProviderEntryGroupSelector>,
    /// The id of the entry to create.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryId")]
    #[builder(default)]
    pub entry_id: Option<String>,
    /// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gcsFilesetSpec"
    )]
    #[builder(default)]
    pub gcs_fileset_spec: Option<EntryInitProviderGcsFilesetSpec>,
    /// The resource this metadata entry refers to.
    /// For Google Cloud Platform resources, linkedResource is the full name of the resource.
    /// For example, the linkedResource for a table resource from BigQuery is:
    /// //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
    /// Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
    /// this field is optional and defaults to an empty string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "linkedResource"
    )]
    #[builder(default)]
    pub linked_resource: Option<String>,
    /// Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
    /// attached to it. See
    /// https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
    /// for what fields this schema can contain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schema: Option<String>,
    /// The type of the entry. Only used for Entries with types in the EntryType enum.
    /// Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType.
    /// Possible values are: FILESET.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// This field indicates the entry's source system that Data Catalog does not integrate with.
    /// userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
    /// and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSpecifiedSystem"
    )]
    #[builder(default)]
    pub user_specified_system: Option<String>,
    /// Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
    /// When creating an entry, users should check the enum values first, if nothing matches the entry
    /// to be created, then provide a custom value, for example "my_special_type".
    /// userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
    /// numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSpecifiedType"
    )]
    #[builder(default)]
    pub user_specified_type: Option<String>,
}

/// Reference to a EntryGroup in datacatalog to populate entryGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryInitProviderEntryGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EntryInitProviderEntryGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryInitProviderEntryGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EntryInitProviderEntryGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EntryInitProviderEntryGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryInitProviderEntryGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryInitProviderEntryGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a EntryGroup in datacatalog to populate entryGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryInitProviderEntryGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EntryInitProviderEntryGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryInitProviderEntryGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EntryInitProviderEntryGroupSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EntryInitProviderEntryGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryInitProviderEntryGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryInitProviderEntryGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryInitProviderGcsFilesetSpec {
    /// Patterns to identify a set of files in Google Cloud Storage.
    /// See Cloud Storage documentation
    /// for more information. Note that bucket wildcards are currently not supported. Examples of valid filePatterns:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filePatterns"
    )]
    #[builder(default)]
    pub file_patterns: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EntryProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EntryProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EntryProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<EntryPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<EntryPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EntryPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EntryPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EntryPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EntryPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// EntryStatus defines the observed state of Entry.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<EntryStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryStatusAtProvider {
    /// Specification for a group of BigQuery tables with name pattern [prefix]YYYYMMDD.
    /// Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bigqueryDateShardedSpec"
    )]
    #[builder(default)]
    pub bigquery_date_sharded_spec: Option<Vec<EntryStatusAtProviderBigqueryDateShardedSpec>>,
    /// Specification that applies to a BigQuery table. This is only valid on entries of type TABLE.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bigqueryTableSpec"
    )]
    #[builder(default)]
    pub bigquery_table_spec: Option<Vec<EntryStatusAtProviderBigqueryTableSpec>>,
    /// Entry description, which can consist of several sentences or paragraphs that describe entry contents.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Display information such as title and description. A short name to identify the entry,
    /// for example, "Analytics Data - Jan 2011".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default)]
    pub display_name: Option<String>,
    /// The name of the entry group this entry is in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "entryGroup"
    )]
    #[builder(default)]
    pub entry_group: Option<String>,
    /// The id of the entry to create.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryId")]
    #[builder(default)]
    pub entry_id: Option<String>,
    /// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gcsFilesetSpec"
    )]
    #[builder(default)]
    pub gcs_fileset_spec: Option<EntryStatusAtProviderGcsFilesetSpec>,
    /// an identifier for the resource with format {{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "integratedSystem"
    )]
    #[builder(default)]
    pub integrated_system: Option<String>,
    /// The resource this metadata entry refers to.
    /// For Google Cloud Platform resources, linkedResource is the full name of the resource.
    /// For example, the linkedResource for a table resource from BigQuery is:
    /// //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
    /// Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
    /// this field is optional and defaults to an empty string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "linkedResource"
    )]
    #[builder(default)]
    pub linked_resource: Option<String>,
    /// The Data Catalog resource name of the entry in URL format.
    /// Example: projects/{project_id}/locations/{location}/entryGroups/{entryGroupId}/entries/{entryId}.
    /// Note that this Entry and its child resources may not actually be stored in the location in this name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
    /// attached to it. See
    /// https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
    /// for what fields this schema can contain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schema: Option<String>,
    /// The type of the entry. Only used for Entries with types in the EntryType enum.
    /// Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType.
    /// Possible values are: FILESET.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// This field indicates the entry's source system that Data Catalog does not integrate with.
    /// userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
    /// and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSpecifiedSystem"
    )]
    #[builder(default)]
    pub user_specified_system: Option<String>,
    /// Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
    /// When creating an entry, users should check the enum values first, if nothing matches the entry
    /// to be created, then provide a custom value, for example "my_special_type".
    /// userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
    /// numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSpecifiedType"
    )]
    #[builder(default)]
    pub user_specified_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryStatusAtProviderBigqueryDateShardedSpec {
    /// (Output)
    /// The Data Catalog resource name of the dataset entry the current table belongs to, for example,
    /// projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/entries/{entryId}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dataset: Option<String>,
    /// (Output)
    /// Total number of shards.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "shardCount"
    )]
    #[builder(default)]
    pub shard_count: Option<f64>,
    /// (Output)
    /// The table name prefix of the shards. The name of any given shard is [tablePrefix]YYYYMMDD,
    /// for example, for shard MyTable20180101, the tablePrefix is MyTable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tablePrefix"
    )]
    #[builder(default)]
    pub table_prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryStatusAtProviderBigqueryTableSpec {
    /// (Output)
    /// The table source type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tableSourceType"
    )]
    #[builder(default)]
    pub table_source_type: Option<String>,
    /// (Output)
    /// Spec of a BigQuery table. This field should only be populated if tableSourceType is BIGQUERY_TABLE.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableSpec")]
    #[builder(default)]
    pub table_spec: Option<Vec<EntryStatusAtProviderBigqueryTableSpecTableSpec>>,
    /// (Output)
    /// Table view specification. This field should only be populated if tableSourceType is BIGQUERY_VIEW.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "viewSpec")]
    #[builder(default)]
    pub view_spec: Option<Vec<EntryStatusAtProviderBigqueryTableSpecViewSpec>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryStatusAtProviderBigqueryTableSpecTableSpec {
    /// (Output)
    /// If the table is a dated shard, i.e., with name pattern [prefix]YYYYMMDD, groupedEntry is the
    /// Data Catalog resource name of the date sharded grouped entry, for example,
    /// projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/entries/{entryId}.
    /// Otherwise, groupedEntry is empty.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupedEntry"
    )]
    #[builder(default)]
    pub grouped_entry: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryStatusAtProviderBigqueryTableSpecViewSpec {
    /// (Output)
    /// The query that defines the table view.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "viewQuery")]
    #[builder(default)]
    pub view_query: Option<String>,
}

/// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryStatusAtProviderGcsFilesetSpec {
    /// Patterns to identify a set of files in Google Cloud Storage.
    /// See Cloud Storage documentation
    /// for more information. Note that bucket wildcards are currently not supported. Examples of valid filePatterns:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filePatterns"
    )]
    #[builder(default)]
    pub file_patterns: Option<Vec<String>>,
    /// (Output)
    /// Sample files contained in this fileset, not all files contained in this fileset are represented here.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleGcsFileSpecs"
    )]
    #[builder(default)]
    pub sample_gcs_file_specs: Option<Vec<EntryStatusAtProviderGcsFilesetSpecSampleGcsFileSpecs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EntryStatusAtProviderGcsFilesetSpecSampleGcsFileSpecs {
    /// (Output)
    /// The full file path
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePath")]
    #[builder(default)]
    pub file_path: Option<String>,
    /// (Output)
    /// The size of the file, in bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeBytes")]
    #[builder(default)]
    pub size_bytes: Option<f64>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// OntapStorageVirtualMachineSpec defines the desired state of OntapStorageVirtualMachine
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "fsx.aws.upbound.io", version = "v1beta2", kind = "OntapStorageVirtualMachine", plural = "ontapstoragevirtualmachines")]
#[kube(status = "OntapStorageVirtualMachineStatus")]
pub struct OntapStorageVirtualMachineSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<OntapStorageVirtualMachineDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: OntapStorageVirtualMachineForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<OntapStorageVirtualMachineInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<OntapStorageVirtualMachineProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<OntapStorageVirtualMachinePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<OntapStorageVirtualMachineWriteConnectionSecretToRef>,
}

/// OntapStorageVirtualMachineSpec defines the desired state of OntapStorageVirtualMachine
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineForProvider {
    /// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDirectoryConfiguration")]
    #[builder(default)]
    pub active_directory_configuration: Option<OntapStorageVirtualMachineForProviderActiveDirectoryConfiguration>,
    /// The ID of the Amazon FSx ONTAP File System that this SVM will be created on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// Reference to a OntapFileSystem in fsx to populate fileSystemId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemIdRef")]
    #[builder(default)]
    pub file_system_id_ref: Option<OntapStorageVirtualMachineForProviderFileSystemIdRef>,
    /// Selector for a OntapFileSystem in fsx to populate fileSystemId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemIdSelector")]
    #[builder(default)]
    pub file_system_id_selector: Option<OntapStorageVirtualMachineForProviderFileSystemIdSelector>,
    /// The name of the SVM. You can use a maximum of 47 alphanumeric characters, plus the underscore (_) special character.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Specifies the root volume security style, Valid values are UNIX, NTFS, and MIXED. All volumes created under this SVM will inherit the root security style unless the security style is specified on the volume. Default value is UNIX.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootVolumeSecurityStyle")]
    #[builder(default)]
    pub root_volume_security_style: Option<String>,
    /// Specifies the password to use when logging on to the SVM using a secure shell (SSH) connection to the SVM's management endpoint. Doing so enables you to manage the SVM using the NetApp ONTAP CLI or REST API. If you do not specify a password, you can still use the file system's fsxadmin user to manage the SVM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "svmAdminPasswordSecretRef")]
    #[builder(default)]
    pub svm_admin_password_secret_ref: Option<OntapStorageVirtualMachineForProviderSvmAdminPasswordSecretRef>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineForProviderActiveDirectoryConfiguration {
    /// The NetBIOS name of the Active Directory computer object that will be created for your SVM. This is often the same as the SVM name but can be different. AWS limits to 15 characters because of standard NetBIOS naming limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "netbiosName")]
    #[builder(default)]
    pub netbios_name: Option<String>,
    /// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfManagedActiveDirectoryConfiguration")]
    #[builder(default)]
    pub self_managed_active_directory_configuration: Option<OntapStorageVirtualMachineForProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfiguration>,
}

/// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineForProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfiguration {
    /// A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsIps")]
    #[builder(default)]
    pub dns_ips: Option<Vec<String>>,
    /// The fully qualified domain name of the self-managed AD directory. For example, corp.example.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// The name of the domain group whose members are granted administrative privileges for the SVM. The group that you specify must already exist in your domain. Defaults to Domain Admins.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemAdministratorsGroup")]
    #[builder(default)]
    pub file_system_administrators_group: Option<String>,
    /// The fully qualified distinguished name of the organizational unit within your self-managed AD directory that the Windows File Server instance will join. For example, OU=FSx,DC=yourdomain,DC=corp,DC=com. Only accepts OU as the direct parent of the SVM. If none is provided, the SVM is created in the default location of your self-managed AD directory. To learn more, see RFC 2253.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitDistinguishedName")]
    #[builder(default)]
    pub organizational_unit_distinguished_name: Option<String>,
    /// The password for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    #[builder(default)]
    pub password_secret_ref: Option<OntapStorageVirtualMachineForProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationPasswordSecretRef>,
    /// The user name for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// The password for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineForProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a OntapFileSystem in fsx to populate fileSystemId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineForProviderFileSystemIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<OntapStorageVirtualMachineForProviderFileSystemIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineForProviderFileSystemIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<OntapStorageVirtualMachineForProviderFileSystemIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<OntapStorageVirtualMachineForProviderFileSystemIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineForProviderFileSystemIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineForProviderFileSystemIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a OntapFileSystem in fsx to populate fileSystemId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineForProviderFileSystemIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<OntapStorageVirtualMachineForProviderFileSystemIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineForProviderFileSystemIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<OntapStorageVirtualMachineForProviderFileSystemIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<OntapStorageVirtualMachineForProviderFileSystemIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineForProviderFileSystemIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineForProviderFileSystemIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies the password to use when logging on to the SVM using a secure shell (SSH) connection to the SVM's management endpoint. Doing so enables you to manage the SVM using the NetApp ONTAP CLI or REST API. If you do not specify a password, you can still use the file system's fsxadmin user to manage the SVM.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineForProviderSvmAdminPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineInitProvider {
    /// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDirectoryConfiguration")]
    #[builder(default)]
    pub active_directory_configuration: Option<OntapStorageVirtualMachineInitProviderActiveDirectoryConfiguration>,
    /// The ID of the Amazon FSx ONTAP File System that this SVM will be created on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// Reference to a OntapFileSystem in fsx to populate fileSystemId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemIdRef")]
    #[builder(default)]
    pub file_system_id_ref: Option<OntapStorageVirtualMachineInitProviderFileSystemIdRef>,
    /// Selector for a OntapFileSystem in fsx to populate fileSystemId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemIdSelector")]
    #[builder(default)]
    pub file_system_id_selector: Option<OntapStorageVirtualMachineInitProviderFileSystemIdSelector>,
    /// The name of the SVM. You can use a maximum of 47 alphanumeric characters, plus the underscore (_) special character.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies the root volume security style, Valid values are UNIX, NTFS, and MIXED. All volumes created under this SVM will inherit the root security style unless the security style is specified on the volume. Default value is UNIX.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootVolumeSecurityStyle")]
    #[builder(default)]
    pub root_volume_security_style: Option<String>,
    /// Specifies the password to use when logging on to the SVM using a secure shell (SSH) connection to the SVM's management endpoint. Doing so enables you to manage the SVM using the NetApp ONTAP CLI or REST API. If you do not specify a password, you can still use the file system's fsxadmin user to manage the SVM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "svmAdminPasswordSecretRef")]
    #[builder(default)]
    pub svm_admin_password_secret_ref: Option<OntapStorageVirtualMachineInitProviderSvmAdminPasswordSecretRef>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineInitProviderActiveDirectoryConfiguration {
    /// The NetBIOS name of the Active Directory computer object that will be created for your SVM. This is often the same as the SVM name but can be different. AWS limits to 15 characters because of standard NetBIOS naming limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "netbiosName")]
    #[builder(default)]
    pub netbios_name: Option<String>,
    /// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfManagedActiveDirectoryConfiguration")]
    #[builder(default)]
    pub self_managed_active_directory_configuration: Option<OntapStorageVirtualMachineInitProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfiguration>,
}

/// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineInitProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfiguration {
    /// A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsIps")]
    #[builder(default)]
    pub dns_ips: Option<Vec<String>>,
    /// The fully qualified domain name of the self-managed AD directory. For example, corp.example.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// The name of the domain group whose members are granted administrative privileges for the SVM. The group that you specify must already exist in your domain. Defaults to Domain Admins.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemAdministratorsGroup")]
    #[builder(default)]
    pub file_system_administrators_group: Option<String>,
    /// The fully qualified distinguished name of the organizational unit within your self-managed AD directory that the Windows File Server instance will join. For example, OU=FSx,DC=yourdomain,DC=corp,DC=com. Only accepts OU as the direct parent of the SVM. If none is provided, the SVM is created in the default location of your self-managed AD directory. To learn more, see RFC 2253.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitDistinguishedName")]
    #[builder(default)]
    pub organizational_unit_distinguished_name: Option<String>,
    /// The password for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
    #[serde(rename = "passwordSecretRef")]
    pub password_secret_ref: OntapStorageVirtualMachineInitProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationPasswordSecretRef,
    /// The user name for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// The password for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineInitProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a OntapFileSystem in fsx to populate fileSystemId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineInitProviderFileSystemIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<OntapStorageVirtualMachineInitProviderFileSystemIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineInitProviderFileSystemIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<OntapStorageVirtualMachineInitProviderFileSystemIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<OntapStorageVirtualMachineInitProviderFileSystemIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineInitProviderFileSystemIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineInitProviderFileSystemIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a OntapFileSystem in fsx to populate fileSystemId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineInitProviderFileSystemIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<OntapStorageVirtualMachineInitProviderFileSystemIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineInitProviderFileSystemIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<OntapStorageVirtualMachineInitProviderFileSystemIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<OntapStorageVirtualMachineInitProviderFileSystemIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineInitProviderFileSystemIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineInitProviderFileSystemIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies the password to use when logging on to the SVM using a secure shell (SSH) connection to the SVM's management endpoint. Doing so enables you to manage the SVM using the NetApp ONTAP CLI or REST API. If you do not specify a password, you can still use the file system's fsxadmin user to manage the SVM.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineInitProviderSvmAdminPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<OntapStorageVirtualMachineProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<OntapStorageVirtualMachineProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<OntapStorageVirtualMachineProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachineProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachinePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<OntapStorageVirtualMachinePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<OntapStorageVirtualMachinePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachinePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<OntapStorageVirtualMachinePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachinePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<OntapStorageVirtualMachinePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<OntapStorageVirtualMachinePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachinePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OntapStorageVirtualMachinePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachinePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// OntapStorageVirtualMachineStatus defines the observed state of OntapStorageVirtualMachine.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<OntapStorageVirtualMachineStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineStatusAtProvider {
    /// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDirectoryConfiguration")]
    #[builder(default)]
    pub active_directory_configuration: Option<OntapStorageVirtualMachineStatusAtProviderActiveDirectoryConfiguration>,
    /// Amazon Resource Name of the storage virtual machine.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// The endpoints that are used to access data or to manage the storage virtual machine using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror. See Endpoints below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub endpoints: Option<Vec<OntapStorageVirtualMachineStatusAtProviderEndpoints>>,
    /// The ID of the Amazon FSx ONTAP File System that this SVM will be created on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// Identifier of the storage virtual machine, e.g., svm-12345678
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The name of the SVM. You can use a maximum of 47 alphanumeric characters, plus the underscore (_) special character.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies the root volume security style, Valid values are UNIX, NTFS, and MIXED. All volumes created under this SVM will inherit the root security style unless the security style is specified on the volume. Default value is UNIX.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootVolumeSecurityStyle")]
    #[builder(default)]
    pub root_volume_security_style: Option<String>,
    /// Describes the SVM's subtype, e.g. DEFAULT
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subtype: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// The SVM's UUID (universally unique identifier).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uuid: Option<String>,
}

/// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineStatusAtProviderActiveDirectoryConfiguration {
    /// The NetBIOS name of the Active Directory computer object that will be created for your SVM. This is often the same as the SVM name but can be different. AWS limits to 15 characters because of standard NetBIOS naming limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "netbiosName")]
    #[builder(default)]
    pub netbios_name: Option<String>,
    /// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfManagedActiveDirectoryConfiguration")]
    #[builder(default)]
    pub self_managed_active_directory_configuration: Option<OntapStorageVirtualMachineStatusAtProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfiguration>,
}

/// Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineStatusAtProviderActiveDirectoryConfigurationSelfManagedActiveDirectoryConfiguration {
    /// A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsIps")]
    #[builder(default)]
    pub dns_ips: Option<Vec<String>>,
    /// The fully qualified domain name of the self-managed AD directory. For example, corp.example.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// The name of the domain group whose members are granted administrative privileges for the SVM. The group that you specify must already exist in your domain. Defaults to Domain Admins.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemAdministratorsGroup")]
    #[builder(default)]
    pub file_system_administrators_group: Option<String>,
    /// The fully qualified distinguished name of the organizational unit within your self-managed AD directory that the Windows File Server instance will join. For example, OU=FSx,DC=yourdomain,DC=corp,DC=com. Only accepts OU as the direct parent of the SVM. If none is provided, the SVM is created in the default location of your self-managed AD directory. To learn more, see RFC 2253.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitDistinguishedName")]
    #[builder(default)]
    pub organizational_unit_distinguished_name: Option<String>,
    /// The user name for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineStatusAtProviderEndpoints {
    /// An endpoint for accessing data on your storage virtual machine via iSCSI protocol. See Endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iscsi: Option<Vec<OntapStorageVirtualMachineStatusAtProviderEndpointsIscsi>>,
    /// An endpoint for managing your file system using the NetApp ONTAP CLI and NetApp ONTAP API. See Endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub management: Option<Vec<OntapStorageVirtualMachineStatusAtProviderEndpointsManagement>>,
    /// An endpoint for accessing data on your storage virtual machine via NFS protocol. See Endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nfs: Option<Vec<OntapStorageVirtualMachineStatusAtProviderEndpointsNfs>>,
    /// An endpoint for accessing data on your storage virtual machine via SMB protocol. This is only set if an active_directory_configuration has been set. See Endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub smb: Option<Vec<OntapStorageVirtualMachineStatusAtProviderEndpointsSmb>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineStatusAtProviderEndpointsIscsi {
    /// The Domain Name Service (DNS) name for the storage virtual machine. You can mount your storage virtual machine using its DNS name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    #[builder(default)]
    pub dns_name: Option<String>,
    /// IP addresses of the storage virtual machine endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddresses")]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineStatusAtProviderEndpointsManagement {
    /// The Domain Name Service (DNS) name for the storage virtual machine. You can mount your storage virtual machine using its DNS name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    #[builder(default)]
    pub dns_name: Option<String>,
    /// IP addresses of the storage virtual machine endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddresses")]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineStatusAtProviderEndpointsNfs {
    /// The Domain Name Service (DNS) name for the storage virtual machine. You can mount your storage virtual machine using its DNS name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    #[builder(default)]
    pub dns_name: Option<String>,
    /// IP addresses of the storage virtual machine endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddresses")]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct OntapStorageVirtualMachineStatusAtProviderEndpointsSmb {
    /// The Domain Name Service (DNS) name for the storage virtual machine. You can mount your storage virtual machine using its DNS name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    #[builder(default)]
    pub dns_name: Option<String>,
    /// IP addresses of the storage virtual machine endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddresses")]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
}


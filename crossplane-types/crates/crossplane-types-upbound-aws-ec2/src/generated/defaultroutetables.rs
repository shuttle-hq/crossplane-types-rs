// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// DefaultRouteTableSpec defines the desired state of DefaultRouteTable
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "ec2.aws.upbound.io",
    version = "v1beta1",
    kind = "DefaultRouteTable",
    plural = "defaultroutetables"
)]
#[kube(status = "DefaultRouteTableStatus")]
pub struct DefaultRouteTableSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<DefaultRouteTableDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DefaultRouteTableForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<DefaultRouteTableInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<DefaultRouteTableProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<DefaultRouteTablePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<DefaultRouteTableWriteConnectionSecretToRef>,
}

/// DefaultRouteTableSpec defines the desired state of DefaultRouteTable
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProvider {
    /// ID of the default route table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteTableId"
    )]
    #[builder(default)]
    pub default_route_table_id: Option<String>,
    /// Reference to a VPC in ec2 to populate defaultRouteTableId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteTableIdRef"
    )]
    #[builder(default)]
    pub default_route_table_id_ref: Option<DefaultRouteTableForProviderDefaultRouteTableIdRef>,
    /// Selector for a VPC in ec2 to populate defaultRouteTableId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteTableIdSelector"
    )]
    #[builder(default)]
    pub default_route_table_id_selector:
        Option<DefaultRouteTableForProviderDefaultRouteTableIdSelector>,
    /// List of virtual gateways for propagation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "propagatingVgws"
    )]
    #[builder(default)]
    pub propagating_vgws: Option<Vec<String>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Configuration block of routes. Detailed below. This argument is processed in attribute-as-blocks mode. This means that omitting this argument is interpreted as ignoring any existing routes. To remove all managed routes an empty list should be specified. See the example above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub route: Option<Vec<DefaultRouteTableForProviderRoute>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a VPC in ec2 to populate defaultRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderDefaultRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableForProviderDefaultRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderDefaultRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTableForProviderDefaultRouteTableIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableForProviderDefaultRouteTableIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderDefaultRouteTableIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderDefaultRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate defaultRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderDefaultRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableForProviderDefaultRouteTableIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderDefaultRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTableForProviderDefaultRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableForProviderDefaultRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderDefaultRouteTableIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderDefaultRouteTableIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderRoute {
    /// The CIDR block of the route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    #[builder(default)]
    pub cidr_block: Option<String>,
    /// The Amazon Resource Name (ARN) of a core network.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coreNetworkArn"
    )]
    #[builder(default)]
    pub core_network_arn: Option<String>,
    /// The ID of a managed prefix list destination of the route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationPrefixListId"
    )]
    #[builder(default)]
    pub destination_prefix_list_id: Option<String>,
    /// Identifier of a VPC Egress Only Internet Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressOnlyGatewayId"
    )]
    #[builder(default)]
    pub egress_only_gateway_id: Option<String>,
    /// Reference to a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressOnlyGatewayIdRef"
    )]
    #[builder(default)]
    pub egress_only_gateway_id_ref: Option<DefaultRouteTableForProviderRouteEgressOnlyGatewayIdRef>,
    /// Selector for a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressOnlyGatewayIdSelector"
    )]
    #[builder(default)]
    pub egress_only_gateway_id_selector:
        Option<DefaultRouteTableForProviderRouteEgressOnlyGatewayIdSelector>,
    /// Identifier of a VPC internet gateway or a virtual private gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayId")]
    #[builder(default)]
    pub gateway_id: Option<String>,
    /// Reference to a InternetGateway in ec2 to populate gatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gatewayIdRef"
    )]
    #[builder(default)]
    pub gateway_id_ref: Option<DefaultRouteTableForProviderRouteGatewayIdRef>,
    /// Selector for a InternetGateway in ec2 to populate gatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gatewayIdSelector"
    )]
    #[builder(default)]
    pub gateway_id_selector: Option<DefaultRouteTableForProviderRouteGatewayIdSelector>,
    /// Identifier of an EC2 instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceId"
    )]
    #[builder(default)]
    pub instance_id: Option<String>,
    /// The Ipv6 CIDR block of the route
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6CidrBlock"
    )]
    #[builder(default)]
    pub ipv6_cidr_block: Option<String>,
    /// Identifier of a VPC NAT gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "natGatewayId"
    )]
    #[builder(default)]
    pub nat_gateway_id: Option<String>,
    /// Identifier of an EC2 network interface.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceId"
    )]
    #[builder(default)]
    pub network_interface_id: Option<String>,
    /// Identifier of an EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayId"
    )]
    #[builder(default)]
    pub transit_gateway_id: Option<String>,
    /// Identifier of a VPC Endpoint. This route must be removed prior to VPC Endpoint deletion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcEndpointId"
    )]
    #[builder(default)]
    pub vpc_endpoint_id: Option<String>,
    /// Identifier of a VPC peering connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcPeeringConnectionId"
    )]
    #[builder(default)]
    pub vpc_peering_connection_id: Option<String>,
}

/// Reference to a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderRouteEgressOnlyGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableForProviderRouteEgressOnlyGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderRouteEgressOnlyGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTableForProviderRouteEgressOnlyGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableForProviderRouteEgressOnlyGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderRouteEgressOnlyGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderRouteEgressOnlyGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderRouteEgressOnlyGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableForProviderRouteEgressOnlyGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderRouteEgressOnlyGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DefaultRouteTableForProviderRouteEgressOnlyGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableForProviderRouteEgressOnlyGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderRouteEgressOnlyGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderRouteEgressOnlyGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a InternetGateway in ec2 to populate gatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderRouteGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableForProviderRouteGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderRouteGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTableForProviderRouteGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableForProviderRouteGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderRouteGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderRouteGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InternetGateway in ec2 to populate gatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderRouteGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableForProviderRouteGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableForProviderRouteGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTableForProviderRouteGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableForProviderRouteGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderRouteGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableForProviderRouteGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProvider {
    /// ID of the default route table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteTableId"
    )]
    #[builder(default)]
    pub default_route_table_id: Option<String>,
    /// Reference to a VPC in ec2 to populate defaultRouteTableId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteTableIdRef"
    )]
    #[builder(default)]
    pub default_route_table_id_ref: Option<DefaultRouteTableInitProviderDefaultRouteTableIdRef>,
    /// Selector for a VPC in ec2 to populate defaultRouteTableId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteTableIdSelector"
    )]
    #[builder(default)]
    pub default_route_table_id_selector:
        Option<DefaultRouteTableInitProviderDefaultRouteTableIdSelector>,
    /// List of virtual gateways for propagation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "propagatingVgws"
    )]
    #[builder(default)]
    pub propagating_vgws: Option<Vec<String>>,
    /// Configuration block of routes. Detailed below. This argument is processed in attribute-as-blocks mode. This means that omitting this argument is interpreted as ignoring any existing routes. To remove all managed routes an empty list should be specified. See the example above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub route: Option<Vec<DefaultRouteTableInitProviderRoute>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a VPC in ec2 to populate defaultRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderDefaultRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableInitProviderDefaultRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderDefaultRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTableInitProviderDefaultRouteTableIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableInitProviderDefaultRouteTableIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderDefaultRouteTableIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderDefaultRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate defaultRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderDefaultRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableInitProviderDefaultRouteTableIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderDefaultRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DefaultRouteTableInitProviderDefaultRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableInitProviderDefaultRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderDefaultRouteTableIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderDefaultRouteTableIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderRoute {
    /// The CIDR block of the route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    #[builder(default)]
    pub cidr_block: Option<String>,
    /// The Amazon Resource Name (ARN) of a core network.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coreNetworkArn"
    )]
    #[builder(default)]
    pub core_network_arn: Option<String>,
    /// The ID of a managed prefix list destination of the route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationPrefixListId"
    )]
    #[builder(default)]
    pub destination_prefix_list_id: Option<String>,
    /// Identifier of a VPC Egress Only Internet Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressOnlyGatewayId"
    )]
    #[builder(default)]
    pub egress_only_gateway_id: Option<String>,
    /// Reference to a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressOnlyGatewayIdRef"
    )]
    #[builder(default)]
    pub egress_only_gateway_id_ref:
        Option<DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdRef>,
    /// Selector for a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressOnlyGatewayIdSelector"
    )]
    #[builder(default)]
    pub egress_only_gateway_id_selector:
        Option<DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdSelector>,
    /// Identifier of a VPC internet gateway or a virtual private gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayId")]
    #[builder(default)]
    pub gateway_id: Option<String>,
    /// Reference to a InternetGateway in ec2 to populate gatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gatewayIdRef"
    )]
    #[builder(default)]
    pub gateway_id_ref: Option<DefaultRouteTableInitProviderRouteGatewayIdRef>,
    /// Selector for a InternetGateway in ec2 to populate gatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gatewayIdSelector"
    )]
    #[builder(default)]
    pub gateway_id_selector: Option<DefaultRouteTableInitProviderRouteGatewayIdSelector>,
    /// Identifier of an EC2 instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceId"
    )]
    #[builder(default)]
    pub instance_id: Option<String>,
    /// The Ipv6 CIDR block of the route
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6CidrBlock"
    )]
    #[builder(default)]
    pub ipv6_cidr_block: Option<String>,
    /// Identifier of a VPC NAT gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "natGatewayId"
    )]
    #[builder(default)]
    pub nat_gateway_id: Option<String>,
    /// Identifier of an EC2 network interface.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceId"
    )]
    #[builder(default)]
    pub network_interface_id: Option<String>,
    /// Identifier of an EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayId"
    )]
    #[builder(default)]
    pub transit_gateway_id: Option<String>,
    /// Identifier of a VPC Endpoint. This route must be removed prior to VPC Endpoint deletion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcEndpointId"
    )]
    #[builder(default)]
    pub vpc_endpoint_id: Option<String>,
    /// Identifier of a VPC peering connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcPeeringConnectionId"
    )]
    #[builder(default)]
    pub vpc_peering_connection_id: Option<String>,
}

/// Reference to a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderRouteEgressOnlyGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a InternetGateway in ec2 to populate gatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderRouteGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableInitProviderRouteGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderRouteGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTableInitProviderRouteGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableInitProviderRouteGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderRouteGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderRouteGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InternetGateway in ec2 to populate gatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderRouteGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableInitProviderRouteGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableInitProviderRouteGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTableInitProviderRouteGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableInitProviderRouteGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderRouteGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableInitProviderRouteGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTableProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTableProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTableProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTableProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTablePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<DefaultRouteTablePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<DefaultRouteTablePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTablePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DefaultRouteTablePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTablePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DefaultRouteTablePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DefaultRouteTablePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTablePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultRouteTablePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTablePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DefaultRouteTableStatus defines the observed state of DefaultRouteTable.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<DefaultRouteTableStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableStatusAtProvider {
    /// The ARN of the route table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// ID of the default route table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteTableId"
    )]
    #[builder(default)]
    pub default_route_table_id: Option<String>,
    /// ID of the route table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// ID of the AWS account that owns the route table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerId")]
    #[builder(default)]
    pub owner_id: Option<String>,
    /// List of virtual gateways for propagation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "propagatingVgws"
    )]
    #[builder(default)]
    pub propagating_vgws: Option<Vec<String>>,
    /// Configuration block of routes. Detailed below. This argument is processed in attribute-as-blocks mode. This means that omitting this argument is interpreted as ignoring any existing routes. To remove all managed routes an empty list should be specified. See the example above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub route: Option<Vec<DefaultRouteTableStatusAtProviderRoute>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// ID of the VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DefaultRouteTableStatusAtProviderRoute {
    /// The CIDR block of the route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    #[builder(default)]
    pub cidr_block: Option<String>,
    /// The Amazon Resource Name (ARN) of a core network.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coreNetworkArn"
    )]
    #[builder(default)]
    pub core_network_arn: Option<String>,
    /// The ID of a managed prefix list destination of the route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationPrefixListId"
    )]
    #[builder(default)]
    pub destination_prefix_list_id: Option<String>,
    /// Identifier of a VPC Egress Only Internet Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressOnlyGatewayId"
    )]
    #[builder(default)]
    pub egress_only_gateway_id: Option<String>,
    /// Identifier of a VPC internet gateway or a virtual private gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayId")]
    #[builder(default)]
    pub gateway_id: Option<String>,
    /// Identifier of an EC2 instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceId"
    )]
    #[builder(default)]
    pub instance_id: Option<String>,
    /// The Ipv6 CIDR block of the route
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6CidrBlock"
    )]
    #[builder(default)]
    pub ipv6_cidr_block: Option<String>,
    /// Identifier of a VPC NAT gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "natGatewayId"
    )]
    #[builder(default)]
    pub nat_gateway_id: Option<String>,
    /// Identifier of an EC2 network interface.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceId"
    )]
    #[builder(default)]
    pub network_interface_id: Option<String>,
    /// Identifier of an EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayId"
    )]
    #[builder(default)]
    pub transit_gateway_id: Option<String>,
    /// Identifier of a VPC Endpoint. This route must be removed prior to VPC Endpoint deletion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcEndpointId"
    )]
    #[builder(default)]
    pub vpc_endpoint_id: Option<String>,
    /// Identifier of a VPC peering connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcPeeringConnectionId"
    )]
    #[builder(default)]
    pub vpc_peering_connection_id: Option<String>,
}

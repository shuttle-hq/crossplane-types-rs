// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// SpotInstanceRequestSpec defines the desired state of SpotInstanceRequest
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta2", kind = "SpotInstanceRequest", plural = "spotinstancerequests")]
#[kube(status = "SpotInstanceRequestStatus")]
pub struct SpotInstanceRequestSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<SpotInstanceRequestDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: SpotInstanceRequestForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<SpotInstanceRequestInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<SpotInstanceRequestProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<SpotInstanceRequestPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<SpotInstanceRequestWriteConnectionSecretToRef>,
}

/// SpotInstanceRequestSpec defines the desired state of SpotInstanceRequest
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ami: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatePublicIpAddress")]
    #[builder(default)]
    pub associate_public_ip_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    #[builder(default)]
    pub availability_zone: Option<String>,
    /// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
    /// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
    /// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockDurationMinutes")]
    #[builder(default)]
    pub block_duration_minutes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationSpecification")]
    #[builder(default)]
    pub capacity_reservation_specification: Option<SpotInstanceRequestForProviderCapacityReservationSpecification>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCoreCount")]
    #[builder(default)]
    pub cpu_core_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuOptions")]
    #[builder(default)]
    pub cpu_options: Option<SpotInstanceRequestForProviderCpuOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreadsPerCore")]
    #[builder(default)]
    pub cpu_threads_per_core: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creditSpecification")]
    #[builder(default)]
    pub credit_specification: Option<SpotInstanceRequestForProviderCreditSpecification>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableApiStop")]
    #[builder(default)]
    pub disable_api_stop: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableApiTermination")]
    #[builder(default)]
    pub disable_api_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsBlockDevice")]
    #[builder(default)]
    pub ebs_block_device: Option<Vec<SpotInstanceRequestForProviderEbsBlockDevice>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    #[builder(default)]
    pub ebs_optimized: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrimaryIpv6")]
    #[builder(default)]
    pub enable_primary_ipv6: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enclaveOptions")]
    #[builder(default)]
    pub enclave_options: Option<SpotInstanceRequestForProviderEnclaveOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralBlockDevice")]
    #[builder(default)]
    pub ephemeral_block_device: Option<Vec<SpotInstanceRequestForProviderEphemeralBlockDevice>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "getPasswordData")]
    #[builder(default)]
    pub get_password_data: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hibernation: Option<bool>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostId")]
    #[builder(default)]
    pub host_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostResourceGroupArn")]
    #[builder(default)]
    pub host_resource_group_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamInstanceProfile")]
    #[builder(default)]
    pub iam_instance_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInitiatedShutdownBehavior")]
    #[builder(default)]
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// Indicates Spot instance behavior when it is interrupted. Valid values are terminate, stop, or hibernate. Default value is terminate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInterruptionBehavior")]
    #[builder(default)]
    pub instance_interruption_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6AddressCount")]
    #[builder(default)]
    pub ipv6_address_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Addresses")]
    #[builder(default)]
    pub ipv6_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    #[builder(default)]
    pub key_name: Option<String>,
    /// A launch group is a group of spot instances that launch together and terminate together.
    /// If left empty instances are launched and terminated individually.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchGroup")]
    #[builder(default)]
    pub launch_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    #[builder(default)]
    pub launch_template: Option<SpotInstanceRequestForProviderLaunchTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceOptions")]
    #[builder(default)]
    pub maintenance_options: Option<SpotInstanceRequestForProviderMaintenanceOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataOptions")]
    #[builder(default)]
    pub metadata_options: Option<SpotInstanceRequestForProviderMetadataOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub monitoring: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterface")]
    #[builder(default)]
    pub network_interface: Option<Vec<SpotInstanceRequestForProviderNetworkInterface>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementGroup")]
    #[builder(default)]
    pub placement_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementPartitionNumber")]
    #[builder(default)]
    pub placement_partition_number: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDnsNameOptions")]
    #[builder(default)]
    pub private_dns_name_options: Option<SpotInstanceRequestForProviderPrivateDnsNameOptions>,
    /// The private IP address assigned to the instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIp")]
    #[builder(default)]
    pub private_ip: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootBlockDevice")]
    #[builder(default)]
    pub root_block_device: Option<SpotInstanceRequestForProviderRootBlockDevice>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryPrivateIps")]
    #[builder(default)]
    pub secondary_private_ips: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDestCheck")]
    #[builder(default)]
    pub source_dest_check: Option<bool>,
    /// The maximum price to request on the spot market.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotPrice")]
    #[builder(default)]
    pub spot_price: Option<String>,
    /// If set to one-time, after
    /// the instance is terminated, the spot request will be closed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotType")]
    #[builder(default)]
    pub spot_type: Option<String>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Reference to a Subnet in ec2 to populate subnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRef")]
    #[builder(default)]
    pub subnet_id_ref: Option<SpotInstanceRequestForProviderSubnetIdRef>,
    /// Selector for a Subnet in ec2 to populate subnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    #[builder(default)]
    pub subnet_id_selector: Option<SpotInstanceRequestForProviderSubnetIdSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tenancy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    #[builder(default)]
    pub user_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    #[builder(default)]
    pub user_data_base64: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataReplaceOnChange")]
    #[builder(default)]
    pub user_data_replace_on_change: Option<bool>,
    /// The start date and time of the request, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validFrom")]
    #[builder(default)]
    pub valid_from: Option<String>,
    /// The end date and time of the request, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. The default end date is 7 days from the current date.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validUntil")]
    #[builder(default)]
    pub valid_until: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeTags")]
    #[builder(default)]
    pub volume_tags: Option<HashMap<String, String>>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdRefs")]
    #[builder(default)]
    pub vpc_security_group_id_refs: Option<Vec<SpotInstanceRequestForProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdSelector")]
    #[builder(default)]
    pub vpc_security_group_id_selector: Option<SpotInstanceRequestForProviderVpcSecurityGroupIdSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIds")]
    #[builder(default)]
    pub vpc_security_group_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForFulfillment")]
    #[builder(default)]
    pub wait_for_fulfillment: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderCapacityReservationSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationPreference")]
    #[builder(default)]
    pub capacity_reservation_preference: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationTarget")]
    #[builder(default)]
    pub capacity_reservation_target: Option<SpotInstanceRequestForProviderCapacityReservationSpecificationCapacityReservationTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderCapacityReservationSpecificationCapacityReservationTarget {
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationId")]
    #[builder(default)]
    pub capacity_reservation_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationResourceGroupArn")]
    #[builder(default)]
    pub capacity_reservation_resource_group_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderCpuOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amdSevSnp")]
    #[builder(default)]
    pub amd_sev_snp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    #[builder(default)]
    pub core_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threadsPerCore")]
    #[builder(default)]
    pub threads_per_core: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderCreditSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCredits")]
    #[builder(default)]
    pub cpu_credits: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderEbsBlockDevice {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    #[builder(default)]
    pub snapshot_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderEnclaveOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderEphemeralBlockDevice {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default)]
    pub no_device: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    #[builder(default)]
    pub virtual_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderLaunchTemplate {
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderMaintenanceOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoRecovery")]
    #[builder(default)]
    pub auto_recovery: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderMetadataOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpoint")]
    #[builder(default)]
    pub http_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProtocolIpv6")]
    #[builder(default)]
    pub http_protocol_ipv6: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPutResponseHopLimit")]
    #[builder(default)]
    pub http_put_response_hop_limit: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTokens")]
    #[builder(default)]
    pub http_tokens: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceMetadataTags")]
    #[builder(default)]
    pub instance_metadata_tags: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderNetworkInterface {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceIndex")]
    #[builder(default)]
    pub device_index: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkCardIndex")]
    #[builder(default)]
    pub network_card_index: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceId")]
    #[builder(default)]
    pub network_interface_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderPrivateDnsNameOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsARecord")]
    #[builder(default)]
    pub enable_resource_name_dns_a_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsAaaaRecord")]
    #[builder(default)]
    pub enable_resource_name_dns_aaaa_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostnameType")]
    #[builder(default)]
    pub hostname_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderRootBlockDevice {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Reference to a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderSubnetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestForProviderSubnetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderSubnetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestForProviderSubnetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestForProviderSubnetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestForProviderSubnetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestForProviderSubnetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestForProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestForProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestForProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestForProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestForProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestForProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestForProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestForProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestForProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestForProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestForProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestForProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestForProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestForProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestForProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestForProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ami: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatePublicIpAddress")]
    #[builder(default)]
    pub associate_public_ip_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    #[builder(default)]
    pub availability_zone: Option<String>,
    /// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
    /// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
    /// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockDurationMinutes")]
    #[builder(default)]
    pub block_duration_minutes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationSpecification")]
    #[builder(default)]
    pub capacity_reservation_specification: Option<SpotInstanceRequestInitProviderCapacityReservationSpecification>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCoreCount")]
    #[builder(default)]
    pub cpu_core_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuOptions")]
    #[builder(default)]
    pub cpu_options: Option<SpotInstanceRequestInitProviderCpuOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreadsPerCore")]
    #[builder(default)]
    pub cpu_threads_per_core: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creditSpecification")]
    #[builder(default)]
    pub credit_specification: Option<SpotInstanceRequestInitProviderCreditSpecification>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableApiStop")]
    #[builder(default)]
    pub disable_api_stop: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableApiTermination")]
    #[builder(default)]
    pub disable_api_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsBlockDevice")]
    #[builder(default)]
    pub ebs_block_device: Option<Vec<SpotInstanceRequestInitProviderEbsBlockDevice>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    #[builder(default)]
    pub ebs_optimized: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrimaryIpv6")]
    #[builder(default)]
    pub enable_primary_ipv6: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enclaveOptions")]
    #[builder(default)]
    pub enclave_options: Option<SpotInstanceRequestInitProviderEnclaveOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralBlockDevice")]
    #[builder(default)]
    pub ephemeral_block_device: Option<Vec<SpotInstanceRequestInitProviderEphemeralBlockDevice>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "getPasswordData")]
    #[builder(default)]
    pub get_password_data: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hibernation: Option<bool>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostId")]
    #[builder(default)]
    pub host_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostResourceGroupArn")]
    #[builder(default)]
    pub host_resource_group_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamInstanceProfile")]
    #[builder(default)]
    pub iam_instance_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInitiatedShutdownBehavior")]
    #[builder(default)]
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// Indicates Spot instance behavior when it is interrupted. Valid values are terminate, stop, or hibernate. Default value is terminate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInterruptionBehavior")]
    #[builder(default)]
    pub instance_interruption_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6AddressCount")]
    #[builder(default)]
    pub ipv6_address_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Addresses")]
    #[builder(default)]
    pub ipv6_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    #[builder(default)]
    pub key_name: Option<String>,
    /// A launch group is a group of spot instances that launch together and terminate together.
    /// If left empty instances are launched and terminated individually.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchGroup")]
    #[builder(default)]
    pub launch_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    #[builder(default)]
    pub launch_template: Option<SpotInstanceRequestInitProviderLaunchTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceOptions")]
    #[builder(default)]
    pub maintenance_options: Option<SpotInstanceRequestInitProviderMaintenanceOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataOptions")]
    #[builder(default)]
    pub metadata_options: Option<SpotInstanceRequestInitProviderMetadataOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub monitoring: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterface")]
    #[builder(default)]
    pub network_interface: Option<Vec<SpotInstanceRequestInitProviderNetworkInterface>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementGroup")]
    #[builder(default)]
    pub placement_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementPartitionNumber")]
    #[builder(default)]
    pub placement_partition_number: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDnsNameOptions")]
    #[builder(default)]
    pub private_dns_name_options: Option<SpotInstanceRequestInitProviderPrivateDnsNameOptions>,
    /// The private IP address assigned to the instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIp")]
    #[builder(default)]
    pub private_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootBlockDevice")]
    #[builder(default)]
    pub root_block_device: Option<SpotInstanceRequestInitProviderRootBlockDevice>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryPrivateIps")]
    #[builder(default)]
    pub secondary_private_ips: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDestCheck")]
    #[builder(default)]
    pub source_dest_check: Option<bool>,
    /// The maximum price to request on the spot market.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotPrice")]
    #[builder(default)]
    pub spot_price: Option<String>,
    /// If set to one-time, after
    /// the instance is terminated, the spot request will be closed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotType")]
    #[builder(default)]
    pub spot_type: Option<String>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Reference to a Subnet in ec2 to populate subnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRef")]
    #[builder(default)]
    pub subnet_id_ref: Option<SpotInstanceRequestInitProviderSubnetIdRef>,
    /// Selector for a Subnet in ec2 to populate subnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    #[builder(default)]
    pub subnet_id_selector: Option<SpotInstanceRequestInitProviderSubnetIdSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tenancy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    #[builder(default)]
    pub user_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    #[builder(default)]
    pub user_data_base64: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataReplaceOnChange")]
    #[builder(default)]
    pub user_data_replace_on_change: Option<bool>,
    /// The start date and time of the request, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validFrom")]
    #[builder(default)]
    pub valid_from: Option<String>,
    /// The end date and time of the request, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. The default end date is 7 days from the current date.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validUntil")]
    #[builder(default)]
    pub valid_until: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeTags")]
    #[builder(default)]
    pub volume_tags: Option<HashMap<String, String>>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdRefs")]
    #[builder(default)]
    pub vpc_security_group_id_refs: Option<Vec<SpotInstanceRequestInitProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdSelector")]
    #[builder(default)]
    pub vpc_security_group_id_selector: Option<SpotInstanceRequestInitProviderVpcSecurityGroupIdSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIds")]
    #[builder(default)]
    pub vpc_security_group_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForFulfillment")]
    #[builder(default)]
    pub wait_for_fulfillment: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderCapacityReservationSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationPreference")]
    #[builder(default)]
    pub capacity_reservation_preference: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationTarget")]
    #[builder(default)]
    pub capacity_reservation_target: Option<SpotInstanceRequestInitProviderCapacityReservationSpecificationCapacityReservationTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderCapacityReservationSpecificationCapacityReservationTarget {
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationId")]
    #[builder(default)]
    pub capacity_reservation_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationResourceGroupArn")]
    #[builder(default)]
    pub capacity_reservation_resource_group_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderCpuOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amdSevSnp")]
    #[builder(default)]
    pub amd_sev_snp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    #[builder(default)]
    pub core_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threadsPerCore")]
    #[builder(default)]
    pub threads_per_core: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderCreditSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCredits")]
    #[builder(default)]
    pub cpu_credits: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderEbsBlockDevice {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    #[builder(default)]
    pub snapshot_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderEnclaveOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderEphemeralBlockDevice {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default)]
    pub no_device: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    #[builder(default)]
    pub virtual_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderLaunchTemplate {
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderMaintenanceOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoRecovery")]
    #[builder(default)]
    pub auto_recovery: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderMetadataOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpoint")]
    #[builder(default)]
    pub http_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProtocolIpv6")]
    #[builder(default)]
    pub http_protocol_ipv6: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPutResponseHopLimit")]
    #[builder(default)]
    pub http_put_response_hop_limit: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTokens")]
    #[builder(default)]
    pub http_tokens: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceMetadataTags")]
    #[builder(default)]
    pub instance_metadata_tags: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderNetworkInterface {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceIndex")]
    #[builder(default)]
    pub device_index: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkCardIndex")]
    #[builder(default)]
    pub network_card_index: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceId")]
    #[builder(default)]
    pub network_interface_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderPrivateDnsNameOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsARecord")]
    #[builder(default)]
    pub enable_resource_name_dns_a_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsAaaaRecord")]
    #[builder(default)]
    pub enable_resource_name_dns_aaaa_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostnameType")]
    #[builder(default)]
    pub hostname_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderRootBlockDevice {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Reference to a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderSubnetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestInitProviderSubnetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderSubnetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestInitProviderSubnetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestInitProviderSubnetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestInitProviderSubnetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestInitProviderSubnetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestInitProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestInitProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestInitProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestInitProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestInitProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestInitProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestInitProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestInitProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestInitProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestInitProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestInitProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestInitProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestInitProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestInitProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestInitProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestInitProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<SpotInstanceRequestPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<SpotInstanceRequestPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SpotInstanceRequestPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SpotInstanceRequestPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SpotInstanceRequestPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpotInstanceRequestPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SpotInstanceRequestStatus defines the observed state of SpotInstanceRequest.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<SpotInstanceRequestStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ami: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatePublicIpAddress")]
    #[builder(default)]
    pub associate_public_ip_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    #[builder(default)]
    pub availability_zone: Option<String>,
    /// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
    /// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
    /// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockDurationMinutes")]
    #[builder(default)]
    pub block_duration_minutes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationSpecification")]
    #[builder(default)]
    pub capacity_reservation_specification: Option<SpotInstanceRequestStatusAtProviderCapacityReservationSpecification>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCoreCount")]
    #[builder(default)]
    pub cpu_core_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuOptions")]
    #[builder(default)]
    pub cpu_options: Option<SpotInstanceRequestStatusAtProviderCpuOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreadsPerCore")]
    #[builder(default)]
    pub cpu_threads_per_core: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creditSpecification")]
    #[builder(default)]
    pub credit_specification: Option<SpotInstanceRequestStatusAtProviderCreditSpecification>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableApiStop")]
    #[builder(default)]
    pub disable_api_stop: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableApiTermination")]
    #[builder(default)]
    pub disable_api_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsBlockDevice")]
    #[builder(default)]
    pub ebs_block_device: Option<Vec<SpotInstanceRequestStatusAtProviderEbsBlockDevice>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    #[builder(default)]
    pub ebs_optimized: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrimaryIpv6")]
    #[builder(default)]
    pub enable_primary_ipv6: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enclaveOptions")]
    #[builder(default)]
    pub enclave_options: Option<SpotInstanceRequestStatusAtProviderEnclaveOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralBlockDevice")]
    #[builder(default)]
    pub ephemeral_block_device: Option<Vec<SpotInstanceRequestStatusAtProviderEphemeralBlockDevice>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "getPasswordData")]
    #[builder(default)]
    pub get_password_data: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hibernation: Option<bool>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostId")]
    #[builder(default)]
    pub host_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostResourceGroupArn")]
    #[builder(default)]
    pub host_resource_group_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamInstanceProfile")]
    #[builder(default)]
    pub iam_instance_profile: Option<String>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInitiatedShutdownBehavior")]
    #[builder(default)]
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// Indicates Spot instance behavior when it is interrupted. Valid values are terminate, stop, or hibernate. Default value is terminate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInterruptionBehavior")]
    #[builder(default)]
    pub instance_interruption_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceState")]
    #[builder(default)]
    pub instance_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6AddressCount")]
    #[builder(default)]
    pub ipv6_address_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Addresses")]
    #[builder(default)]
    pub ipv6_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    #[builder(default)]
    pub key_name: Option<String>,
    /// A launch group is a group of spot instances that launch together and terminate together.
    /// If left empty instances are launched and terminated individually.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchGroup")]
    #[builder(default)]
    pub launch_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    #[builder(default)]
    pub launch_template: Option<SpotInstanceRequestStatusAtProviderLaunchTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceOptions")]
    #[builder(default)]
    pub maintenance_options: Option<SpotInstanceRequestStatusAtProviderMaintenanceOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataOptions")]
    #[builder(default)]
    pub metadata_options: Option<SpotInstanceRequestStatusAtProviderMetadataOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub monitoring: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterface")]
    #[builder(default)]
    pub network_interface: Option<Vec<SpotInstanceRequestStatusAtProviderNetworkInterface>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outpostArn")]
    #[builder(default)]
    pub outpost_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordData")]
    #[builder(default)]
    pub password_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementGroup")]
    #[builder(default)]
    pub placement_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementPartitionNumber")]
    #[builder(default)]
    pub placement_partition_number: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryNetworkInterfaceId")]
    #[builder(default)]
    pub primary_network_interface_id: Option<String>,
    /// The private DNS name assigned to the instance. Can only be
    /// used inside the Amazon EC2, and only available if you've enabled DNS hostnames
    /// for your VPC
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDns")]
    #[builder(default)]
    pub private_dns: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDnsNameOptions")]
    #[builder(default)]
    pub private_dns_name_options: Option<SpotInstanceRequestStatusAtProviderPrivateDnsNameOptions>,
    /// The private IP address assigned to the instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIp")]
    #[builder(default)]
    pub private_ip: Option<String>,
    /// The public DNS name assigned to the instance. For EC2-VPC, this
    /// is only available if you've enabled DNS hostnames for your VPC
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicDns")]
    #[builder(default)]
    pub public_dns: Option<String>,
    /// The public IP address assigned to the instance, if applicable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIp")]
    #[builder(default)]
    pub public_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootBlockDevice")]
    #[builder(default)]
    pub root_block_device: Option<SpotInstanceRequestStatusAtProviderRootBlockDevice>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryPrivateIps")]
    #[builder(default)]
    pub secondary_private_ips: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDestCheck")]
    #[builder(default)]
    pub source_dest_check: Option<bool>,
    /// The current bid
    /// status
    /// of the Spot Instance Request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotBidStatus")]
    #[builder(default)]
    pub spot_bid_status: Option<String>,
    /// The Instance ID (if any) that is currently fulfilling
    /// the Spot Instance request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotInstanceId")]
    #[builder(default)]
    pub spot_instance_id: Option<String>,
    /// The maximum price to request on the spot market.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotPrice")]
    #[builder(default)]
    pub spot_price: Option<String>,
    /// The current request
    /// state
    /// of the Spot Instance Request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotRequestState")]
    #[builder(default)]
    pub spot_request_state: Option<String>,
    /// If set to one-time, after
    /// the instance is terminated, the spot request will be closed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotType")]
    #[builder(default)]
    pub spot_type: Option<String>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tenancy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    #[builder(default)]
    pub user_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    #[builder(default)]
    pub user_data_base64: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataReplaceOnChange")]
    #[builder(default)]
    pub user_data_replace_on_change: Option<bool>,
    /// The start date and time of the request, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validFrom")]
    #[builder(default)]
    pub valid_from: Option<String>,
    /// The end date and time of the request, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. The default end date is 7 days from the current date.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validUntil")]
    #[builder(default)]
    pub valid_until: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeTags")]
    #[builder(default)]
    pub volume_tags: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIds")]
    #[builder(default)]
    pub vpc_security_group_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForFulfillment")]
    #[builder(default)]
    pub wait_for_fulfillment: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderCapacityReservationSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationPreference")]
    #[builder(default)]
    pub capacity_reservation_preference: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationTarget")]
    #[builder(default)]
    pub capacity_reservation_target: Option<SpotInstanceRequestStatusAtProviderCapacityReservationSpecificationCapacityReservationTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderCapacityReservationSpecificationCapacityReservationTarget {
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationId")]
    #[builder(default)]
    pub capacity_reservation_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationResourceGroupArn")]
    #[builder(default)]
    pub capacity_reservation_resource_group_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderCpuOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amdSevSnp")]
    #[builder(default)]
    pub amd_sev_snp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    #[builder(default)]
    pub core_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threadsPerCore")]
    #[builder(default)]
    pub threads_per_core: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderCreditSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCredits")]
    #[builder(default)]
    pub cpu_credits: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderEbsBlockDevice {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    #[builder(default)]
    pub snapshot_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeId")]
    #[builder(default)]
    pub volume_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderEnclaveOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderEphemeralBlockDevice {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default)]
    pub no_device: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    #[builder(default)]
    pub virtual_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderLaunchTemplate {
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderMaintenanceOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoRecovery")]
    #[builder(default)]
    pub auto_recovery: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderMetadataOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpoint")]
    #[builder(default)]
    pub http_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProtocolIpv6")]
    #[builder(default)]
    pub http_protocol_ipv6: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPutResponseHopLimit")]
    #[builder(default)]
    pub http_put_response_hop_limit: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTokens")]
    #[builder(default)]
    pub http_tokens: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceMetadataTags")]
    #[builder(default)]
    pub instance_metadata_tags: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderNetworkInterface {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceIndex")]
    #[builder(default)]
    pub device_index: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkCardIndex")]
    #[builder(default)]
    pub network_card_index: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceId")]
    #[builder(default)]
    pub network_interface_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderPrivateDnsNameOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsARecord")]
    #[builder(default)]
    pub enable_resource_name_dns_a_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsAaaaRecord")]
    #[builder(default)]
    pub enable_resource_name_dns_aaaa_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostnameType")]
    #[builder(default)]
    pub hostname_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SpotInstanceRequestStatusAtProviderRootBlockDevice {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    #[builder(default)]
    pub device_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// The Spot Instance Request ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeId")]
    #[builder(default)]
    pub volume_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    #[builder(default)]
    pub volume_size: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    #[builder(default)]
    pub volume_type: Option<String>,
}


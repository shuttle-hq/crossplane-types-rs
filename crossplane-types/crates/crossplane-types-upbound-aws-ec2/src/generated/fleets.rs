// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FleetSpec defines the desired state of Fleet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta1", kind = "Fleet", plural = "fleets")]
#[kube(status = "FleetStatus")]
pub struct FleetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<FleetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FleetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<FleetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<FleetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<FleetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<FleetWriteConnectionSecretToRef>,
}

/// FleetSpec defines the desired state of Fleet
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProvider {
    /// Reserved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub context: Option<String>,
    /// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: no-termination, termination. Defaults to termination. Supported only for fleets of type maintain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excessCapacityTerminationPolicy")]
    #[builder(default)]
    pub excess_capacity_termination_policy: Option<String>,
    /// Information about the instances that were launched by the fleet. Available only when type is set to instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetInstanceSet")]
    #[builder(default)]
    pub fleet_instance_set: Option<Vec<FleetForProviderFleetInstanceSet>>,
    /// The state of the EC2 Fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetState")]
    #[builder(default)]
    pub fleet_state: Option<String>,
    /// The number of units fulfilled by this request compared to the set target capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fulfilledCapacity")]
    #[builder(default)]
    pub fulfilled_capacity: Option<f64>,
    /// The number of units fulfilled by this request compared to the set target On-Demand capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fulfilledOnDemandCapacity")]
    #[builder(default)]
    pub fulfilled_on_demand_capacity: Option<f64>,
    /// Nested argument containing EC2 Launch Template configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateConfig")]
    #[builder(default)]
    pub launch_template_config: Option<Vec<FleetForProviderLaunchTemplateConfig>>,
    /// Nested argument containing On-Demand configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandOptions")]
    #[builder(default)]
    pub on_demand_options: Option<FleetForProviderOnDemandOptions>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Whether EC2 Fleet should replace unhealthy instances. Defaults to false. Supported only for fleets of type maintain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replaceUnhealthyInstances")]
    #[builder(default)]
    pub replace_unhealthy_instances: Option<bool>,
    /// Nested argument containing Spot configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotOptions")]
    #[builder(default)]
    pub spot_options: Option<FleetForProviderSpotOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Nested argument containing target capacity configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCapacitySpecification")]
    #[builder(default)]
    pub target_capacity_specification: Option<FleetForProviderTargetCapacitySpecification>,
    /// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminateInstances")]
    #[builder(default)]
    pub terminate_instances: Option<bool>,
    /// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminateInstancesWithExpiration")]
    #[builder(default)]
    pub terminate_instances_with_expiration: Option<bool>,
    /// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: maintain, request, instant. Defaults to maintain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validFrom")]
    #[builder(default)]
    pub valid_from: Option<String>,
    /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validUntil")]
    #[builder(default)]
    pub valid_until: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderFleetInstanceSet {
    /// The IDs of the instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIds")]
    #[builder(default)]
    pub instance_ids: Option<Vec<String>>,
    /// Instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifecycle: Option<String>,
    /// The value is Windows for Windows instances. Otherwise, the value is blank.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub platform: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfig {
    /// Nested argument containing EC2 Launch Template to use. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateSpecification")]
    #[builder(default)]
    pub launch_template_specification: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecification>,
    /// Nested argument(s) containing parameters to override the same parameters in the Launch Template. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default)]
    pub r#override: Option<Vec<FleetForProviderLaunchTemplateConfigOverride>>,
}

/// Nested argument containing EC2 Launch Template to use. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigLaunchTemplateSpecification {
    /// The ID of the launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateId")]
    #[builder(default)]
    pub launch_template_id: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdRef")]
    #[builder(default)]
    pub launch_template_id_ref: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRef>,
    /// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdSelector")]
    #[builder(default)]
    pub launch_template_id_selector: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelector>,
    /// The name of the launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateName")]
    #[builder(default)]
    pub launch_template_name: Option<String>,
    /// The launch template version number, $Latest, or $Default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionRef")]
    #[builder(default)]
    pub version_ref: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRef>,
    /// Selector for a LaunchTemplate in ec2 to populate version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionSelector")]
    #[builder(default)]
    pub version_selector: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelector>,
}

/// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a LaunchTemplate in ec2 to populate version.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate version.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverride {
    /// Availability Zone in which to launch the instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    #[builder(default)]
    pub availability_zone: Option<String>,
    /// Override the instance type in the Launch Template with instance types that satisfy the requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceRequirements")]
    #[builder(default)]
    pub instance_requirements: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirements>,
    /// Instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Maximum price per unit hour that you are willing to pay for a Spot Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPrice")]
    #[builder(default)]
    pub max_price: Option<String>,
    /// Priority for the launch template override. If on_demand_options allocation_strategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. Valid values are whole numbers starting at 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// ID of the subnet in which to launch the instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Number of units provided by the specified instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weightedCapacity")]
    #[builder(default)]
    pub weighted_capacity: Option<f64>,
}

/// Override the instance type in the Launch Template with instance types that satisfy the requirements.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirements {
    /// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorCount")]
    #[builder(default)]
    pub accelerator_count: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCount>,
    /// List of accelerator manufacturer names. Default is any manufacturer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorManufacturers")]
    #[builder(default)]
    pub accelerator_manufacturers: Option<Vec<String>>,
    /// List of accelerator names. Default is any acclerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorNames")]
    #[builder(default)]
    pub accelerator_names: Option<Vec<String>>,
    /// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTotalMemoryMib")]
    #[builder(default)]
    pub accelerator_total_memory_mib: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMib>,
    /// The accelerator types that must be on the instance type. Default is any accelerator type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTypes")]
    #[builder(default)]
    pub accelerator_types: Option<Vec<String>>,
    /// The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards,represented by an asterisk (*). The following are examples: c5*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types. Default is any instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedInstanceTypes")]
    #[builder(default)]
    pub allowed_instance_types: Option<Vec<String>>,
    /// Indicate whether bare metal instace types should be included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bareMetal")]
    #[builder(default)]
    pub bare_metal: Option<String>,
    /// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baselineEbsBandwidthMbps")]
    #[builder(default)]
    pub baseline_ebs_bandwidth_mbps: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbps>,
    /// Indicates whether burstable performance T instance types are included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstablePerformance")]
    #[builder(default)]
    pub burstable_performance: Option<String>,
    /// The CPU manufacturers to include. Default is any manufacturer.
    /// ~> NOTE: Don't confuse the CPU hardware manufacturer with the CPU hardware architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuManufacturers")]
    #[builder(default)]
    pub cpu_manufacturers: Option<Vec<String>>,
    /// The instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*). The following are examples: c5*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedInstanceTypes")]
    #[builder(default)]
    pub excluded_instance_types: Option<Vec<String>>,
    /// Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Valid values are current and previous. Default is current and previous generation instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceGenerations")]
    #[builder(default)]
    pub instance_generations: Option<Vec<String>>,
    /// Indicate whether instance types with local storage volumes are included, excluded, or required. Default is included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorage")]
    #[builder(default)]
    pub local_storage: Option<String>,
    /// List of local storage type names. Valid values are hdd and ssd. Default any storage type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorageTypes")]
    #[builder(default)]
    pub local_storage_types: Option<Vec<String>>,
    /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Conflicts with spot_max_price_percentage_over_lowest_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSpotPriceAsPercentageOfOptimalOnDemandPrice")]
    #[builder(default)]
    pub max_spot_price_as_percentage_of_optimal_on_demand_price: Option<f64>,
    /// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGibPerVcpu")]
    #[builder(default)]
    pub memory_gib_per_vcpu: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpu>,
    /// The minimum and maximum amount of memory per vCPU, in GiB. Default is no minimum or maximum limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryMib")]
    #[builder(default)]
    pub memory_mib: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryMib>,
    /// The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is No minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkBandwidthGbps")]
    #[builder(default)]
    pub network_bandwidth_gbps: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbps>,
    /// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceCount")]
    #[builder(default)]
    pub network_interface_count: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCount>,
    /// The price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandMaxPricePercentageOverLowestPrice")]
    #[builder(default)]
    pub on_demand_max_price_percentage_over_lowest_price: Option<f64>,
    /// Indicate whether instance types must support On-Demand Instance Hibernation, either true or false. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireHibernateSupport")]
    #[builder(default)]
    pub require_hibernate_support: Option<bool>,
    /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 100. Conflicts with max_spot_price_as_percentage_of_optimal_on_demand_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotMaxPricePercentageOverLowestPrice")]
    #[builder(default)]
    pub spot_max_price_percentage_over_lowest_price: Option<f64>,
    /// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalLocalStorageGb")]
    #[builder(default)]
    pub total_local_storage_gb: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGb>,
    /// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vcpuCount")]
    #[builder(default)]
    pub vcpu_count: Option<FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsVcpuCount>,
}

/// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum limits.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCount {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMib {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbps {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpu {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// The minimum and maximum amount of memory per vCPU, in GiB. Default is no minimum or maximum limits.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryMib {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is No minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbps {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCount {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGb {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderLaunchTemplateConfigOverrideInstanceRequirementsVcpuCount {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Nested argument containing On-Demand configurations. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderOnDemandOptions {
    /// The order of the launch template overrides to use in fulfilling On-Demand capacity. Valid values: lowestPrice, prioritized. Default: lowestPrice.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocationStrategy")]
    #[builder(default)]
    pub allocation_strategy: Option<String>,
    /// Demand capacity. Supported only for fleets of type instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationOptions")]
    #[builder(default)]
    pub capacity_reservation_options: Option<FleetForProviderOnDemandOptionsCapacityReservationOptions>,
    /// The maximum amount per hour for On-Demand Instances that you're willing to pay.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTotalPrice")]
    #[builder(default)]
    pub max_total_price: Option<String>,
    /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type instant.
    /// If you specify min_target_capacity, at least one of the following must be specified: single_availability_zone or single_instance_type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTargetCapacity")]
    #[builder(default)]
    pub min_target_capacity: Option<f64>,
    /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleAvailabilityZone")]
    #[builder(default)]
    pub single_availability_zone: Option<bool>,
    /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleInstanceType")]
    #[builder(default)]
    pub single_instance_type: Option<bool>,
}

/// Demand capacity. Supported only for fleets of type instant.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderOnDemandOptionsCapacityReservationOptions {
    /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. Valid values: use-capacity-reservations-first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usageStrategy")]
    #[builder(default)]
    pub usage_strategy: Option<String>,
}

/// Nested argument containing Spot configurations. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderSpotOptions {
    /// How to allocate the target capacity across the Spot pools. Valid values: diversified, lowestPrice, capacity-optimized, capacity-optimized-prioritized and price-capacity-optimized. Default: lowestPrice.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocationStrategy")]
    #[builder(default)]
    pub allocation_strategy: Option<String>,
    /// Behavior when a Spot Instance is interrupted. Valid values: hibernate, stop, terminate. Default: terminate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInterruptionBehavior")]
    #[builder(default)]
    pub instance_interruption_behavior: Option<String>,
    /// Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot allocation_strategy is set to lowestPrice. Default: 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancePoolsToUseCount")]
    #[builder(default)]
    pub instance_pools_to_use_count: Option<f64>,
    /// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceStrategies")]
    #[builder(default)]
    pub maintenance_strategies: Option<FleetForProviderSpotOptionsMaintenanceStrategies>,
}

/// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderSpotOptionsMaintenanceStrategies {
    /// Nested argument containing the capacity rebalance for your fleet request. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityRebalance")]
    #[builder(default)]
    pub capacity_rebalance: Option<FleetForProviderSpotOptionsMaintenanceStrategiesCapacityRebalance>,
}

/// Nested argument containing the capacity rebalance for your fleet request. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderSpotOptionsMaintenanceStrategiesCapacityRebalance {
    /// The replacement strategy to use. Only available for fleets of type set to maintain. Valid values: launch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementStrategy")]
    #[builder(default)]
    pub replacement_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationDelay")]
    #[builder(default)]
    pub termination_delay: Option<f64>,
}

/// Nested argument containing target capacity configurations. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderTargetCapacitySpecification {
    /// Default target capacity type. Valid values: on-demand, spot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetCapacityType")]
    #[builder(default)]
    pub default_target_capacity_type: Option<String>,
    /// The number of On-Demand units to request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandTargetCapacity")]
    #[builder(default)]
    pub on_demand_target_capacity: Option<f64>,
    /// The number of Spot units to request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotTargetCapacity")]
    #[builder(default)]
    pub spot_target_capacity: Option<f64>,
    /// The unit for the target capacity.
    /// If you specify target_capacity_unit_type, instance_requirements must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCapacityUnitType")]
    #[builder(default)]
    pub target_capacity_unit_type: Option<String>,
    /// The number of units to request, filled using default_target_capacity_type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalTargetCapacity")]
    #[builder(default)]
    pub total_target_capacity: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProvider {
    /// Reserved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub context: Option<String>,
    /// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: no-termination, termination. Defaults to termination. Supported only for fleets of type maintain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excessCapacityTerminationPolicy")]
    #[builder(default)]
    pub excess_capacity_termination_policy: Option<String>,
    /// Information about the instances that were launched by the fleet. Available only when type is set to instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetInstanceSet")]
    #[builder(default)]
    pub fleet_instance_set: Option<Vec<FleetInitProviderFleetInstanceSet>>,
    /// The state of the EC2 Fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetState")]
    #[builder(default)]
    pub fleet_state: Option<String>,
    /// The number of units fulfilled by this request compared to the set target capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fulfilledCapacity")]
    #[builder(default)]
    pub fulfilled_capacity: Option<f64>,
    /// The number of units fulfilled by this request compared to the set target On-Demand capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fulfilledOnDemandCapacity")]
    #[builder(default)]
    pub fulfilled_on_demand_capacity: Option<f64>,
    /// Nested argument containing EC2 Launch Template configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateConfig")]
    #[builder(default)]
    pub launch_template_config: Option<Vec<FleetInitProviderLaunchTemplateConfig>>,
    /// Nested argument containing On-Demand configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandOptions")]
    #[builder(default)]
    pub on_demand_options: Option<FleetInitProviderOnDemandOptions>,
    /// Whether EC2 Fleet should replace unhealthy instances. Defaults to false. Supported only for fleets of type maintain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replaceUnhealthyInstances")]
    #[builder(default)]
    pub replace_unhealthy_instances: Option<bool>,
    /// Nested argument containing Spot configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotOptions")]
    #[builder(default)]
    pub spot_options: Option<FleetInitProviderSpotOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Nested argument containing target capacity configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCapacitySpecification")]
    #[builder(default)]
    pub target_capacity_specification: Option<FleetInitProviderTargetCapacitySpecification>,
    /// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminateInstances")]
    #[builder(default)]
    pub terminate_instances: Option<bool>,
    /// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminateInstancesWithExpiration")]
    #[builder(default)]
    pub terminate_instances_with_expiration: Option<bool>,
    /// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: maintain, request, instant. Defaults to maintain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validFrom")]
    #[builder(default)]
    pub valid_from: Option<String>,
    /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validUntil")]
    #[builder(default)]
    pub valid_until: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderFleetInstanceSet {
    /// The IDs of the instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIds")]
    #[builder(default)]
    pub instance_ids: Option<Vec<String>>,
    /// Instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifecycle: Option<String>,
    /// The value is Windows for Windows instances. Otherwise, the value is blank.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub platform: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfig {
    /// Nested argument containing EC2 Launch Template to use. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateSpecification")]
    #[builder(default)]
    pub launch_template_specification: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecification>,
    /// Nested argument(s) containing parameters to override the same parameters in the Launch Template. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default)]
    pub r#override: Option<Vec<FleetInitProviderLaunchTemplateConfigOverride>>,
}

/// Nested argument containing EC2 Launch Template to use. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecification {
    /// The ID of the launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateId")]
    #[builder(default)]
    pub launch_template_id: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdRef")]
    #[builder(default)]
    pub launch_template_id_ref: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRef>,
    /// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdSelector")]
    #[builder(default)]
    pub launch_template_id_selector: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelector>,
    /// The name of the launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateName")]
    #[builder(default)]
    pub launch_template_name: Option<String>,
    /// The launch template version number, $Latest, or $Default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionRef")]
    #[builder(default)]
    pub version_ref: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRef>,
    /// Selector for a LaunchTemplate in ec2 to populate version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionSelector")]
    #[builder(default)]
    pub version_selector: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelector>,
}

/// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a LaunchTemplate in ec2 to populate version.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate version.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderLaunchTemplateConfigLaunchTemplateSpecificationVersionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverride {
    /// Availability Zone in which to launch the instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    #[builder(default)]
    pub availability_zone: Option<String>,
    /// Override the instance type in the Launch Template with instance types that satisfy the requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceRequirements")]
    #[builder(default)]
    pub instance_requirements: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirements>,
    /// Instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Maximum price per unit hour that you are willing to pay for a Spot Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPrice")]
    #[builder(default)]
    pub max_price: Option<String>,
    /// Priority for the launch template override. If on_demand_options allocation_strategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. Valid values are whole numbers starting at 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// ID of the subnet in which to launch the instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Number of units provided by the specified instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weightedCapacity")]
    #[builder(default)]
    pub weighted_capacity: Option<f64>,
}

/// Override the instance type in the Launch Template with instance types that satisfy the requirements.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirements {
    /// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorCount")]
    #[builder(default)]
    pub accelerator_count: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCount>,
    /// List of accelerator manufacturer names. Default is any manufacturer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorManufacturers")]
    #[builder(default)]
    pub accelerator_manufacturers: Option<Vec<String>>,
    /// List of accelerator names. Default is any acclerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorNames")]
    #[builder(default)]
    pub accelerator_names: Option<Vec<String>>,
    /// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTotalMemoryMib")]
    #[builder(default)]
    pub accelerator_total_memory_mib: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMib>,
    /// The accelerator types that must be on the instance type. Default is any accelerator type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTypes")]
    #[builder(default)]
    pub accelerator_types: Option<Vec<String>>,
    /// The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards,represented by an asterisk (*). The following are examples: c5*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types. Default is any instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedInstanceTypes")]
    #[builder(default)]
    pub allowed_instance_types: Option<Vec<String>>,
    /// Indicate whether bare metal instace types should be included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bareMetal")]
    #[builder(default)]
    pub bare_metal: Option<String>,
    /// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baselineEbsBandwidthMbps")]
    #[builder(default)]
    pub baseline_ebs_bandwidth_mbps: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbps>,
    /// Indicates whether burstable performance T instance types are included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstablePerformance")]
    #[builder(default)]
    pub burstable_performance: Option<String>,
    /// The CPU manufacturers to include. Default is any manufacturer.
    /// ~> NOTE: Don't confuse the CPU hardware manufacturer with the CPU hardware architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuManufacturers")]
    #[builder(default)]
    pub cpu_manufacturers: Option<Vec<String>>,
    /// The instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*). The following are examples: c5*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedInstanceTypes")]
    #[builder(default)]
    pub excluded_instance_types: Option<Vec<String>>,
    /// Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Valid values are current and previous. Default is current and previous generation instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceGenerations")]
    #[builder(default)]
    pub instance_generations: Option<Vec<String>>,
    /// Indicate whether instance types with local storage volumes are included, excluded, or required. Default is included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorage")]
    #[builder(default)]
    pub local_storage: Option<String>,
    /// List of local storage type names. Valid values are hdd and ssd. Default any storage type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorageTypes")]
    #[builder(default)]
    pub local_storage_types: Option<Vec<String>>,
    /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Conflicts with spot_max_price_percentage_over_lowest_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSpotPriceAsPercentageOfOptimalOnDemandPrice")]
    #[builder(default)]
    pub max_spot_price_as_percentage_of_optimal_on_demand_price: Option<f64>,
    /// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGibPerVcpu")]
    #[builder(default)]
    pub memory_gib_per_vcpu: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpu>,
    /// The minimum and maximum amount of memory per vCPU, in GiB. Default is no minimum or maximum limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryMib")]
    #[builder(default)]
    pub memory_mib: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryMib>,
    /// The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is No minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkBandwidthGbps")]
    #[builder(default)]
    pub network_bandwidth_gbps: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbps>,
    /// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceCount")]
    #[builder(default)]
    pub network_interface_count: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCount>,
    /// The price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandMaxPricePercentageOverLowestPrice")]
    #[builder(default)]
    pub on_demand_max_price_percentage_over_lowest_price: Option<f64>,
    /// Indicate whether instance types must support On-Demand Instance Hibernation, either true or false. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireHibernateSupport")]
    #[builder(default)]
    pub require_hibernate_support: Option<bool>,
    /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 100. Conflicts with max_spot_price_as_percentage_of_optimal_on_demand_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotMaxPricePercentageOverLowestPrice")]
    #[builder(default)]
    pub spot_max_price_percentage_over_lowest_price: Option<f64>,
    /// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalLocalStorageGb")]
    #[builder(default)]
    pub total_local_storage_gb: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGb>,
    /// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vcpuCount")]
    #[builder(default)]
    pub vcpu_count: Option<FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsVcpuCount>,
}

/// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum limits.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCount {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMib {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbps {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpu {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// The minimum and maximum amount of memory per vCPU, in GiB. Default is no minimum or maximum limits.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryMib {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is No minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbps {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCount {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGb {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderLaunchTemplateConfigOverrideInstanceRequirementsVcpuCount {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Nested argument containing On-Demand configurations. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderOnDemandOptions {
    /// The order of the launch template overrides to use in fulfilling On-Demand capacity. Valid values: lowestPrice, prioritized. Default: lowestPrice.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocationStrategy")]
    #[builder(default)]
    pub allocation_strategy: Option<String>,
    /// Demand capacity. Supported only for fleets of type instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationOptions")]
    #[builder(default)]
    pub capacity_reservation_options: Option<FleetInitProviderOnDemandOptionsCapacityReservationOptions>,
    /// The maximum amount per hour for On-Demand Instances that you're willing to pay.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTotalPrice")]
    #[builder(default)]
    pub max_total_price: Option<String>,
    /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type instant.
    /// If you specify min_target_capacity, at least one of the following must be specified: single_availability_zone or single_instance_type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTargetCapacity")]
    #[builder(default)]
    pub min_target_capacity: Option<f64>,
    /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleAvailabilityZone")]
    #[builder(default)]
    pub single_availability_zone: Option<bool>,
    /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleInstanceType")]
    #[builder(default)]
    pub single_instance_type: Option<bool>,
}

/// Demand capacity. Supported only for fleets of type instant.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderOnDemandOptionsCapacityReservationOptions {
    /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. Valid values: use-capacity-reservations-first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usageStrategy")]
    #[builder(default)]
    pub usage_strategy: Option<String>,
}

/// Nested argument containing Spot configurations. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderSpotOptions {
    /// How to allocate the target capacity across the Spot pools. Valid values: diversified, lowestPrice, capacity-optimized, capacity-optimized-prioritized and price-capacity-optimized. Default: lowestPrice.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocationStrategy")]
    #[builder(default)]
    pub allocation_strategy: Option<String>,
    /// Behavior when a Spot Instance is interrupted. Valid values: hibernate, stop, terminate. Default: terminate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInterruptionBehavior")]
    #[builder(default)]
    pub instance_interruption_behavior: Option<String>,
    /// Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot allocation_strategy is set to lowestPrice. Default: 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancePoolsToUseCount")]
    #[builder(default)]
    pub instance_pools_to_use_count: Option<f64>,
    /// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceStrategies")]
    #[builder(default)]
    pub maintenance_strategies: Option<FleetInitProviderSpotOptionsMaintenanceStrategies>,
}

/// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderSpotOptionsMaintenanceStrategies {
    /// Nested argument containing the capacity rebalance for your fleet request. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityRebalance")]
    #[builder(default)]
    pub capacity_rebalance: Option<FleetInitProviderSpotOptionsMaintenanceStrategiesCapacityRebalance>,
}

/// Nested argument containing the capacity rebalance for your fleet request. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderSpotOptionsMaintenanceStrategiesCapacityRebalance {
    /// The replacement strategy to use. Only available for fleets of type set to maintain. Valid values: launch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementStrategy")]
    #[builder(default)]
    pub replacement_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationDelay")]
    #[builder(default)]
    pub termination_delay: Option<f64>,
}

/// Nested argument containing target capacity configurations. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderTargetCapacitySpecification {
    /// Default target capacity type. Valid values: on-demand, spot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetCapacityType")]
    #[builder(default)]
    pub default_target_capacity_type: Option<String>,
    /// The number of On-Demand units to request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandTargetCapacity")]
    #[builder(default)]
    pub on_demand_target_capacity: Option<f64>,
    /// The number of Spot units to request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotTargetCapacity")]
    #[builder(default)]
    pub spot_target_capacity: Option<f64>,
    /// The unit for the target capacity.
    /// If you specify target_capacity_unit_type, instance_requirements must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCapacityUnitType")]
    #[builder(default)]
    pub target_capacity_unit_type: Option<String>,
    /// The number of units to request, filled using default_target_capacity_type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalTargetCapacity")]
    #[builder(default)]
    pub total_target_capacity: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<FleetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<FleetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FleetStatus defines the observed state of Fleet.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<FleetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProvider {
    /// The ARN of the fleet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Reserved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub context: Option<String>,
    /// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: no-termination, termination. Defaults to termination. Supported only for fleets of type maintain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excessCapacityTerminationPolicy")]
    #[builder(default)]
    pub excess_capacity_termination_policy: Option<String>,
    /// Information about the instances that were launched by the fleet. Available only when type is set to instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetInstanceSet")]
    #[builder(default)]
    pub fleet_instance_set: Option<Vec<FleetStatusAtProviderFleetInstanceSet>>,
    /// The state of the EC2 Fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetState")]
    #[builder(default)]
    pub fleet_state: Option<String>,
    /// The number of units fulfilled by this request compared to the set target capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fulfilledCapacity")]
    #[builder(default)]
    pub fulfilled_capacity: Option<f64>,
    /// The number of units fulfilled by this request compared to the set target On-Demand capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fulfilledOnDemandCapacity")]
    #[builder(default)]
    pub fulfilled_on_demand_capacity: Option<f64>,
    /// Fleet identifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Nested argument containing EC2 Launch Template configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateConfig")]
    #[builder(default)]
    pub launch_template_config: Option<Vec<FleetStatusAtProviderLaunchTemplateConfig>>,
    /// Nested argument containing On-Demand configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandOptions")]
    #[builder(default)]
    pub on_demand_options: Option<FleetStatusAtProviderOnDemandOptions>,
    /// Whether EC2 Fleet should replace unhealthy instances. Defaults to false. Supported only for fleets of type maintain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replaceUnhealthyInstances")]
    #[builder(default)]
    pub replace_unhealthy_instances: Option<bool>,
    /// Nested argument containing Spot configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotOptions")]
    #[builder(default)]
    pub spot_options: Option<FleetStatusAtProviderSpotOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Nested argument containing target capacity configurations. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCapacitySpecification")]
    #[builder(default)]
    pub target_capacity_specification: Option<FleetStatusAtProviderTargetCapacitySpecification>,
    /// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminateInstances")]
    #[builder(default)]
    pub terminate_instances: Option<bool>,
    /// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminateInstancesWithExpiration")]
    #[builder(default)]
    pub terminate_instances_with_expiration: Option<bool>,
    /// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: maintain, request, instant. Defaults to maintain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validFrom")]
    #[builder(default)]
    pub valid_from: Option<String>,
    /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validUntil")]
    #[builder(default)]
    pub valid_until: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderFleetInstanceSet {
    /// The IDs of the instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIds")]
    #[builder(default)]
    pub instance_ids: Option<Vec<String>>,
    /// Instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifecycle: Option<String>,
    /// The value is Windows for Windows instances. Otherwise, the value is blank.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub platform: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfig {
    /// Nested argument containing EC2 Launch Template to use. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateSpecification")]
    #[builder(default)]
    pub launch_template_specification: Option<FleetStatusAtProviderLaunchTemplateConfigLaunchTemplateSpecification>,
    /// Nested argument(s) containing parameters to override the same parameters in the Launch Template. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default)]
    pub r#override: Option<Vec<FleetStatusAtProviderLaunchTemplateConfigOverride>>,
}

/// Nested argument containing EC2 Launch Template to use. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigLaunchTemplateSpecification {
    /// The ID of the launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateId")]
    #[builder(default)]
    pub launch_template_id: Option<String>,
    /// The name of the launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateName")]
    #[builder(default)]
    pub launch_template_name: Option<String>,
    /// The launch template version number, $Latest, or $Default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverride {
    /// Availability Zone in which to launch the instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    #[builder(default)]
    pub availability_zone: Option<String>,
    /// Override the instance type in the Launch Template with instance types that satisfy the requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceRequirements")]
    #[builder(default)]
    pub instance_requirements: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirements>,
    /// Instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Maximum price per unit hour that you are willing to pay for a Spot Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPrice")]
    #[builder(default)]
    pub max_price: Option<String>,
    /// Priority for the launch template override. If on_demand_options allocation_strategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. Valid values are whole numbers starting at 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// ID of the subnet in which to launch the instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Number of units provided by the specified instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weightedCapacity")]
    #[builder(default)]
    pub weighted_capacity: Option<f64>,
}

/// Override the instance type in the Launch Template with instance types that satisfy the requirements.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirements {
    /// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorCount")]
    #[builder(default)]
    pub accelerator_count: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCount>,
    /// List of accelerator manufacturer names. Default is any manufacturer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorManufacturers")]
    #[builder(default)]
    pub accelerator_manufacturers: Option<Vec<String>>,
    /// List of accelerator names. Default is any acclerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorNames")]
    #[builder(default)]
    pub accelerator_names: Option<Vec<String>>,
    /// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTotalMemoryMib")]
    #[builder(default)]
    pub accelerator_total_memory_mib: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMib>,
    /// The accelerator types that must be on the instance type. Default is any accelerator type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTypes")]
    #[builder(default)]
    pub accelerator_types: Option<Vec<String>>,
    /// The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards,represented by an asterisk (*). The following are examples: c5*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types. Default is any instance type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedInstanceTypes")]
    #[builder(default)]
    pub allowed_instance_types: Option<Vec<String>>,
    /// Indicate whether bare metal instace types should be included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bareMetal")]
    #[builder(default)]
    pub bare_metal: Option<String>,
    /// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baselineEbsBandwidthMbps")]
    #[builder(default)]
    pub baseline_ebs_bandwidth_mbps: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbps>,
    /// Indicates whether burstable performance T instance types are included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstablePerformance")]
    #[builder(default)]
    pub burstable_performance: Option<String>,
    /// The CPU manufacturers to include. Default is any manufacturer.
    /// ~> NOTE: Don't confuse the CPU hardware manufacturer with the CPU hardware architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuManufacturers")]
    #[builder(default)]
    pub cpu_manufacturers: Option<Vec<String>>,
    /// The instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*). The following are examples: c5*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedInstanceTypes")]
    #[builder(default)]
    pub excluded_instance_types: Option<Vec<String>>,
    /// Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Valid values are current and previous. Default is current and previous generation instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceGenerations")]
    #[builder(default)]
    pub instance_generations: Option<Vec<String>>,
    /// Indicate whether instance types with local storage volumes are included, excluded, or required. Default is included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorage")]
    #[builder(default)]
    pub local_storage: Option<String>,
    /// List of local storage type names. Valid values are hdd and ssd. Default any storage type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorageTypes")]
    #[builder(default)]
    pub local_storage_types: Option<Vec<String>>,
    /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Conflicts with spot_max_price_percentage_over_lowest_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSpotPriceAsPercentageOfOptimalOnDemandPrice")]
    #[builder(default)]
    pub max_spot_price_as_percentage_of_optimal_on_demand_price: Option<f64>,
    /// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGibPerVcpu")]
    #[builder(default)]
    pub memory_gib_per_vcpu: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpu>,
    /// The minimum and maximum amount of memory per vCPU, in GiB. Default is no minimum or maximum limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryMib")]
    #[builder(default)]
    pub memory_mib: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryMib>,
    /// The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is No minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkBandwidthGbps")]
    #[builder(default)]
    pub network_bandwidth_gbps: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbps>,
    /// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceCount")]
    #[builder(default)]
    pub network_interface_count: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCount>,
    /// The price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandMaxPricePercentageOverLowestPrice")]
    #[builder(default)]
    pub on_demand_max_price_percentage_over_lowest_price: Option<f64>,
    /// Indicate whether instance types must support On-Demand Instance Hibernation, either true or false. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireHibernateSupport")]
    #[builder(default)]
    pub require_hibernate_support: Option<bool>,
    /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 100. Conflicts with max_spot_price_as_percentage_of_optimal_on_demand_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotMaxPricePercentageOverLowestPrice")]
    #[builder(default)]
    pub spot_max_price_percentage_over_lowest_price: Option<f64>,
    /// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalLocalStorageGb")]
    #[builder(default)]
    pub total_local_storage_gb: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGb>,
    /// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vcpuCount")]
    #[builder(default)]
    pub vcpu_count: Option<FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsVcpuCount>,
}

/// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum limits.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCount {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMib {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbps {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpu {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// The minimum and maximum amount of memory per vCPU, in GiB. Default is no minimum or maximum limits.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsMemoryMib {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is No minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbps {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCount {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGb {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderLaunchTemplateConfigOverrideInstanceRequirementsVcpuCount {
    /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub max: Option<f64>,
    /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub min: Option<f64>,
}

/// Nested argument containing On-Demand configurations. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderOnDemandOptions {
    /// The order of the launch template overrides to use in fulfilling On-Demand capacity. Valid values: lowestPrice, prioritized. Default: lowestPrice.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocationStrategy")]
    #[builder(default)]
    pub allocation_strategy: Option<String>,
    /// Demand capacity. Supported only for fleets of type instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationOptions")]
    #[builder(default)]
    pub capacity_reservation_options: Option<FleetStatusAtProviderOnDemandOptionsCapacityReservationOptions>,
    /// The maximum amount per hour for On-Demand Instances that you're willing to pay.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTotalPrice")]
    #[builder(default)]
    pub max_total_price: Option<String>,
    /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type instant.
    /// If you specify min_target_capacity, at least one of the following must be specified: single_availability_zone or single_instance_type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTargetCapacity")]
    #[builder(default)]
    pub min_target_capacity: Option<f64>,
    /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleAvailabilityZone")]
    #[builder(default)]
    pub single_availability_zone: Option<bool>,
    /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleInstanceType")]
    #[builder(default)]
    pub single_instance_type: Option<bool>,
}

/// Demand capacity. Supported only for fleets of type instant.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderOnDemandOptionsCapacityReservationOptions {
    /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. Valid values: use-capacity-reservations-first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usageStrategy")]
    #[builder(default)]
    pub usage_strategy: Option<String>,
}

/// Nested argument containing Spot configurations. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderSpotOptions {
    /// How to allocate the target capacity across the Spot pools. Valid values: diversified, lowestPrice, capacity-optimized, capacity-optimized-prioritized and price-capacity-optimized. Default: lowestPrice.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocationStrategy")]
    #[builder(default)]
    pub allocation_strategy: Option<String>,
    /// Behavior when a Spot Instance is interrupted. Valid values: hibernate, stop, terminate. Default: terminate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInterruptionBehavior")]
    #[builder(default)]
    pub instance_interruption_behavior: Option<String>,
    /// Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot allocation_strategy is set to lowestPrice. Default: 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancePoolsToUseCount")]
    #[builder(default)]
    pub instance_pools_to_use_count: Option<f64>,
    /// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceStrategies")]
    #[builder(default)]
    pub maintenance_strategies: Option<FleetStatusAtProviderSpotOptionsMaintenanceStrategies>,
}

/// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderSpotOptionsMaintenanceStrategies {
    /// Nested argument containing the capacity rebalance for your fleet request. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityRebalance")]
    #[builder(default)]
    pub capacity_rebalance: Option<FleetStatusAtProviderSpotOptionsMaintenanceStrategiesCapacityRebalance>,
}

/// Nested argument containing the capacity rebalance for your fleet request. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderSpotOptionsMaintenanceStrategiesCapacityRebalance {
    /// The replacement strategy to use. Only available for fleets of type set to maintain. Valid values: launch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementStrategy")]
    #[builder(default)]
    pub replacement_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationDelay")]
    #[builder(default)]
    pub termination_delay: Option<f64>,
}

/// Nested argument containing target capacity configurations. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderTargetCapacitySpecification {
    /// Default target capacity type. Valid values: on-demand, spot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetCapacityType")]
    #[builder(default)]
    pub default_target_capacity_type: Option<String>,
    /// The number of On-Demand units to request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandTargetCapacity")]
    #[builder(default)]
    pub on_demand_target_capacity: Option<f64>,
    /// The number of Spot units to request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotTargetCapacity")]
    #[builder(default)]
    pub spot_target_capacity: Option<f64>,
    /// The unit for the target capacity.
    /// If you specify target_capacity_unit_type, instance_requirements must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCapacityUnitType")]
    #[builder(default)]
    pub target_capacity_unit_type: Option<String>,
    /// The number of units to request, filled using default_target_capacity_type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalTargetCapacity")]
    #[builder(default)]
    pub total_target_capacity: Option<f64>,
}


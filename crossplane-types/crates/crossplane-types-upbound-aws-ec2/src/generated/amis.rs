// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AMISpec defines the desired state of AMI
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "ec2.aws.upbound.io",
    version = "v1beta1",
    kind = "AMI",
    plural = "amis"
)]
#[kube(status = "AMIStatus")]
pub struct AMISpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<AMIDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AMIForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<AMIInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<AMIProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<AMIPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<AMIWriteConnectionSecretToRef>,
}

/// AMISpec defines the desired state of AMI
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIForProvider {
    /// Machine architecture for created instances. Defaults to "x86_64".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub architecture: Option<String>,
    /// Boot mode of the AMI. For more information, see Boot modes in the Amazon Elastic Compute Cloud User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootMode")]
    #[builder(default)]
    pub boot_mode: Option<String>,
    /// Date and time to deprecate the AMI. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deprecationTime"
    )]
    #[builder(default)]
    pub deprecation_time: Option<String>,
    /// Longer, human-readable description for the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Nested block describing an EBS block device that should be
    /// attached to created instances. The structure of this block is described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsBlockDevice"
    )]
    #[builder(default)]
    pub ebs_block_device: Option<Vec<AMIForProviderEbsBlockDevice>>,
    /// Whether enhanced networking with ENA is enabled. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enaSupport"
    )]
    #[builder(default)]
    pub ena_support: Option<bool>,
    /// Nested block describing an ephemeral block device that
    /// should be attached to created instances. The structure of this block is described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ephemeralBlockDevice"
    )]
    #[builder(default)]
    pub ephemeral_block_device: Option<Vec<AMIForProviderEphemeralBlockDevice>>,
    /// Path to an S3 object containing an image manifest, e.g., created
    /// by the ec2-upload-bundle command in the EC2 command line tools.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageLocation"
    )]
    #[builder(default)]
    pub image_location: Option<String>,
    /// If EC2 instances started from this image should require the use of the Instance Metadata Service V2 (IMDSv2), set this argument to v2.0. For more information, see Configure instance metadata options for new instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imdsSupport"
    )]
    #[builder(default)]
    pub imds_support: Option<String>,
    /// ID of the kernel image (AKI) that will be used as the paravirtual
    /// kernel in created instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelId")]
    #[builder(default)]
    pub kernel_id: Option<String>,
    /// Region-unique name for the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// ID of an initrd image (ARI) that will be used when booting the
    /// created instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ramdiskId")]
    #[builder(default)]
    pub ramdisk_id: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Name of the root device (for example, /dev/sda1, or /dev/xvda).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootDeviceName"
    )]
    #[builder(default)]
    pub root_device_name: Option<String>,
    /// When set to "simple" (the default), enables enhanced networking
    /// for created instances. No other value is supported at this time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sriovNetSupport"
    )]
    #[builder(default)]
    pub sriov_net_support: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// If the image is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM in the Amazon Elastic Compute Cloud User Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tpmSupport"
    )]
    #[builder(default)]
    pub tpm_support: Option<String>,
    /// Keyword to choose what virtualization mode created instances
    /// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
    /// changes the set of further arguments that are required, as described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualizationType"
    )]
    #[builder(default)]
    pub virtualization_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIForProviderEbsBlockDevice {
    /// Boolean controlling whether the EBS volumes created to
    /// support each created instance will be deleted once that instance is terminated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    /// Path at which the device is exposed to created instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with snapshot_id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// Number of I/O operations per second the
    /// created volumes will support.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// ARN of the Outpost on which the snapshot is stored.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostArn"
    )]
    #[builder(default)]
    pub outpost_arn: Option<String>,
    /// ID of an EBS snapshot that will be used to initialize the created
    /// EBS volumes. If set, the volume_size attribute must be at least as large as the referenced
    /// snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default)]
    pub snapshot_id: Option<String>,
    /// Reference to a EBSSnapshot in ec2 to populate snapshotId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotIdRef"
    )]
    #[builder(default)]
    pub snapshot_id_ref: Option<AMIForProviderEbsBlockDeviceSnapshotIdRef>,
    /// Selector for a EBSSnapshot in ec2 to populate snapshotId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotIdSelector"
    )]
    #[builder(default)]
    pub snapshot_id_selector: Option<AMIForProviderEbsBlockDeviceSnapshotIdSelector>,
    /// Throughput that the EBS volume supports, in MiB/s. Only valid for volume_type of gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Size of created volumes in GiB.
    /// If snapshot_id is set and volume_size is omitted then the volume will have the same size
    /// as the selected snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// Type of EBS volume to create. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: standard).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Reference to a EBSSnapshot in ec2 to populate snapshotId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIForProviderEbsBlockDeviceSnapshotIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AMIForProviderEbsBlockDeviceSnapshotIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIForProviderEbsBlockDeviceSnapshotIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AMIForProviderEbsBlockDeviceSnapshotIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AMIForProviderEbsBlockDeviceSnapshotIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIForProviderEbsBlockDeviceSnapshotIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIForProviderEbsBlockDeviceSnapshotIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a EBSSnapshot in ec2 to populate snapshotId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIForProviderEbsBlockDeviceSnapshotIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AMIForProviderEbsBlockDeviceSnapshotIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIForProviderEbsBlockDeviceSnapshotIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AMIForProviderEbsBlockDeviceSnapshotIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AMIForProviderEbsBlockDeviceSnapshotIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIForProviderEbsBlockDeviceSnapshotIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIForProviderEbsBlockDeviceSnapshotIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIForProviderEphemeralBlockDevice {
    /// Path at which the device is exposed to created instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Name for the ephemeral device, of the form "ephemeralN" where
    /// N is a volume number starting from zero.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default)]
    pub virtual_name: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIInitProvider {
    /// Machine architecture for created instances. Defaults to "x86_64".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub architecture: Option<String>,
    /// Boot mode of the AMI. For more information, see Boot modes in the Amazon Elastic Compute Cloud User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootMode")]
    #[builder(default)]
    pub boot_mode: Option<String>,
    /// Date and time to deprecate the AMI. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deprecationTime"
    )]
    #[builder(default)]
    pub deprecation_time: Option<String>,
    /// Longer, human-readable description for the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Nested block describing an EBS block device that should be
    /// attached to created instances. The structure of this block is described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsBlockDevice"
    )]
    #[builder(default)]
    pub ebs_block_device: Option<Vec<AMIInitProviderEbsBlockDevice>>,
    /// Whether enhanced networking with ENA is enabled. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enaSupport"
    )]
    #[builder(default)]
    pub ena_support: Option<bool>,
    /// Nested block describing an ephemeral block device that
    /// should be attached to created instances. The structure of this block is described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ephemeralBlockDevice"
    )]
    #[builder(default)]
    pub ephemeral_block_device: Option<Vec<AMIInitProviderEphemeralBlockDevice>>,
    /// Path to an S3 object containing an image manifest, e.g., created
    /// by the ec2-upload-bundle command in the EC2 command line tools.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageLocation"
    )]
    #[builder(default)]
    pub image_location: Option<String>,
    /// If EC2 instances started from this image should require the use of the Instance Metadata Service V2 (IMDSv2), set this argument to v2.0. For more information, see Configure instance metadata options for new instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imdsSupport"
    )]
    #[builder(default)]
    pub imds_support: Option<String>,
    /// ID of the kernel image (AKI) that will be used as the paravirtual
    /// kernel in created instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelId")]
    #[builder(default)]
    pub kernel_id: Option<String>,
    /// Region-unique name for the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// ID of an initrd image (ARI) that will be used when booting the
    /// created instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ramdiskId")]
    #[builder(default)]
    pub ramdisk_id: Option<String>,
    /// Name of the root device (for example, /dev/sda1, or /dev/xvda).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootDeviceName"
    )]
    #[builder(default)]
    pub root_device_name: Option<String>,
    /// When set to "simple" (the default), enables enhanced networking
    /// for created instances. No other value is supported at this time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sriovNetSupport"
    )]
    #[builder(default)]
    pub sriov_net_support: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// If the image is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM in the Amazon Elastic Compute Cloud User Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tpmSupport"
    )]
    #[builder(default)]
    pub tpm_support: Option<String>,
    /// Keyword to choose what virtualization mode created instances
    /// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
    /// changes the set of further arguments that are required, as described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualizationType"
    )]
    #[builder(default)]
    pub virtualization_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIInitProviderEbsBlockDevice {
    /// Boolean controlling whether the EBS volumes created to
    /// support each created instance will be deleted once that instance is terminated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    /// Path at which the device is exposed to created instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with snapshot_id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// Number of I/O operations per second the
    /// created volumes will support.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// ARN of the Outpost on which the snapshot is stored.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostArn"
    )]
    #[builder(default)]
    pub outpost_arn: Option<String>,
    /// ID of an EBS snapshot that will be used to initialize the created
    /// EBS volumes. If set, the volume_size attribute must be at least as large as the referenced
    /// snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default)]
    pub snapshot_id: Option<String>,
    /// Reference to a EBSSnapshot in ec2 to populate snapshotId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotIdRef"
    )]
    #[builder(default)]
    pub snapshot_id_ref: Option<AMIInitProviderEbsBlockDeviceSnapshotIdRef>,
    /// Selector for a EBSSnapshot in ec2 to populate snapshotId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotIdSelector"
    )]
    #[builder(default)]
    pub snapshot_id_selector: Option<AMIInitProviderEbsBlockDeviceSnapshotIdSelector>,
    /// Throughput that the EBS volume supports, in MiB/s. Only valid for volume_type of gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Size of created volumes in GiB.
    /// If snapshot_id is set and volume_size is omitted then the volume will have the same size
    /// as the selected snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// Type of EBS volume to create. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: standard).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Reference to a EBSSnapshot in ec2 to populate snapshotId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIInitProviderEbsBlockDeviceSnapshotIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AMIInitProviderEbsBlockDeviceSnapshotIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIInitProviderEbsBlockDeviceSnapshotIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AMIInitProviderEbsBlockDeviceSnapshotIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AMIInitProviderEbsBlockDeviceSnapshotIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIInitProviderEbsBlockDeviceSnapshotIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIInitProviderEbsBlockDeviceSnapshotIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a EBSSnapshot in ec2 to populate snapshotId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIInitProviderEbsBlockDeviceSnapshotIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AMIInitProviderEbsBlockDeviceSnapshotIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIInitProviderEbsBlockDeviceSnapshotIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AMIInitProviderEbsBlockDeviceSnapshotIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AMIInitProviderEbsBlockDeviceSnapshotIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIInitProviderEbsBlockDeviceSnapshotIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIInitProviderEbsBlockDeviceSnapshotIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIInitProviderEphemeralBlockDevice {
    /// Path at which the device is exposed to created instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Name for the ephemeral device, of the form "ephemeralN" where
    /// N is a volume number starting from zero.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default)]
    pub virtual_name: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AMIProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AMIProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AMIProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<AMIPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<AMIPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AMIPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AMIPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AMIPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AMIPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AMIStatus defines the observed state of AMI.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<AMIStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIStatusAtProvider {
    /// Machine architecture for created instances. Defaults to "x86_64".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub architecture: Option<String>,
    /// ARN of the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Boot mode of the AMI. For more information, see Boot modes in the Amazon Elastic Compute Cloud User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootMode")]
    #[builder(default)]
    pub boot_mode: Option<String>,
    /// Date and time to deprecate the AMI. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deprecationTime"
    )]
    #[builder(default)]
    pub deprecation_time: Option<String>,
    /// Longer, human-readable description for the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Nested block describing an EBS block device that should be
    /// attached to created instances. The structure of this block is described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsBlockDevice"
    )]
    #[builder(default)]
    pub ebs_block_device: Option<Vec<AMIStatusAtProviderEbsBlockDevice>>,
    /// Whether enhanced networking with ENA is enabled. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enaSupport"
    )]
    #[builder(default)]
    pub ena_support: Option<bool>,
    /// Nested block describing an ephemeral block device that
    /// should be attached to created instances. The structure of this block is described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ephemeralBlockDevice"
    )]
    #[builder(default)]
    pub ephemeral_block_device: Option<Vec<AMIStatusAtProviderEphemeralBlockDevice>>,
    /// Hypervisor type of the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hypervisor: Option<String>,
    /// ID of the created AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Path to an S3 object containing an image manifest, e.g., created
    /// by the ec2-upload-bundle command in the EC2 command line tools.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageLocation"
    )]
    #[builder(default)]
    pub image_location: Option<String>,
    /// AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageOwnerAlias"
    )]
    #[builder(default)]
    pub image_owner_alias: Option<String>,
    /// Type of image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    #[builder(default)]
    pub image_type: Option<String>,
    /// If EC2 instances started from this image should require the use of the Instance Metadata Service V2 (IMDSv2), set this argument to v2.0. For more information, see Configure instance metadata options for new instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imdsSupport"
    )]
    #[builder(default)]
    pub imds_support: Option<String>,
    /// ID of the kernel image (AKI) that will be used as the paravirtual
    /// kernel in created instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelId")]
    #[builder(default)]
    pub kernel_id: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "manageEbsSnapshots"
    )]
    #[builder(default)]
    pub manage_ebs_snapshots: Option<bool>,
    /// Region-unique name for the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// AWS account ID of the image owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerId")]
    #[builder(default)]
    pub owner_id: Option<String>,
    /// This value is set to windows for Windows AMIs; otherwise, it is blank.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub platform: Option<String>,
    /// Platform details associated with the billing code of the AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformDetails"
    )]
    #[builder(default)]
    pub platform_details: Option<String>,
    /// Whether the image has public launch permissions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub public: Option<bool>,
    /// ID of an initrd image (ARI) that will be used when booting the
    /// created instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ramdiskId")]
    #[builder(default)]
    pub ramdisk_id: Option<String>,
    /// Name of the root device (for example, /dev/sda1, or /dev/xvda).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootDeviceName"
    )]
    #[builder(default)]
    pub root_device_name: Option<String>,
    /// Snapshot ID for the root volume (for EBS-backed AMIs)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootSnapshotId"
    )]
    #[builder(default)]
    pub root_snapshot_id: Option<String>,
    /// When set to "simple" (the default), enables enhanced networking
    /// for created instances. No other value is supported at this time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sriovNetSupport"
    )]
    #[builder(default)]
    pub sriov_net_support: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// If the image is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM in the Amazon Elastic Compute Cloud User Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tpmSupport"
    )]
    #[builder(default)]
    pub tpm_support: Option<String>,
    /// Operation of the Amazon EC2 instance and the billing code that is associated with the AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usageOperation"
    )]
    #[builder(default)]
    pub usage_operation: Option<String>,
    /// Keyword to choose what virtualization mode created instances
    /// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
    /// changes the set of further arguments that are required, as described below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualizationType"
    )]
    #[builder(default)]
    pub virtualization_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIStatusAtProviderEbsBlockDevice {
    /// Boolean controlling whether the EBS volumes created to
    /// support each created instance will be deleted once that instance is terminated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default)]
    pub delete_on_termination: Option<bool>,
    /// Path at which the device is exposed to created instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with snapshot_id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// Number of I/O operations per second the
    /// created volumes will support.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// ARN of the Outpost on which the snapshot is stored.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostArn"
    )]
    #[builder(default)]
    pub outpost_arn: Option<String>,
    /// ID of an EBS snapshot that will be used to initialize the created
    /// EBS volumes. If set, the volume_size attribute must be at least as large as the referenced
    /// snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default)]
    pub snapshot_id: Option<String>,
    /// Throughput that the EBS volume supports, in MiB/s. Only valid for volume_type of gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Size of created volumes in GiB.
    /// If snapshot_id is set and volume_size is omitted then the volume will have the same size
    /// as the selected snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// Type of EBS volume to create. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: standard).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AMIStatusAtProviderEphemeralBlockDevice {
    /// Path at which the device is exposed to created instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default)]
    pub device_name: Option<String>,
    /// Name for the ephemeral device, of the form "ephemeralN" where
    /// N is a volume number starting from zero.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default)]
    pub virtual_name: Option<String>,
}

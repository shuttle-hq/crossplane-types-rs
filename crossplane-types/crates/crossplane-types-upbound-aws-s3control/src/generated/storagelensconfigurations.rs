// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// StorageLensConfigurationSpec defines the desired state of StorageLensConfiguration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "s3control.aws.upbound.io", version = "v1beta2", kind = "StorageLensConfiguration", plural = "storagelensconfigurations")]
#[kube(status = "StorageLensConfigurationStatus")]
pub struct StorageLensConfigurationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<StorageLensConfigurationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: StorageLensConfigurationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<StorageLensConfigurationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<StorageLensConfigurationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<StorageLensConfigurationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<StorageLensConfigurationWriteConnectionSecretToRef>,
}

/// StorageLensConfigurationSpec defines the desired state of StorageLensConfiguration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProvider {
    /// The AWS account ID for the S3 Storage Lens configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// The ID of the S3 Storage Lens configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configId")]
    #[builder(default)]
    pub config_id: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLensConfiguration")]
    #[builder(default)]
    pub storage_lens_configuration: Option<StorageLensConfigurationForProviderStorageLensConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfiguration {
    /// level configurations of the S3 Storage Lens configuration. See Account Level below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountLevel")]
    #[builder(default)]
    pub account_level: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevel>,
    /// The Amazon Web Services organization for the S3 Storage Lens configuration. See AWS Org below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsOrg")]
    #[builder(default)]
    pub aws_org: Option<StorageLensConfigurationForProviderStorageLensConfigurationAwsOrg>,
    /// Properties of S3 Storage Lens metrics export including the destination, schema and format. See Data Export below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataExport")]
    #[builder(default)]
    pub data_export: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExport>,
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// What is excluded in this configuration. Conflicts with include. See Exclude below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub exclude: Option<StorageLensConfigurationForProviderStorageLensConfigurationExclude>,
    /// What is included in this configuration. Conflicts with exclude. See Include below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub include: Option<StorageLensConfigurationForProviderStorageLensConfigurationInclude>,
}

/// level configurations of the S3 Storage Lens configuration. See Account Level below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevel {
    /// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityMetrics")]
    #[builder(default)]
    pub activity_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelActivityMetrics>,
    /// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedCostOptimizationMetrics")]
    #[builder(default)]
    pub advanced_cost_optimization_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetrics>,
    /// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedDataProtectionMetrics")]
    #[builder(default)]
    pub advanced_data_protection_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelAdvancedDataProtectionMetrics>,
    /// level configuration. See Bucket Level below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketLevel")]
    #[builder(default)]
    pub bucket_level: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevel>,
    /// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detailedStatusCodeMetrics")]
    #[builder(default)]
    pub detailed_status_code_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelDetailedStatusCodeMetrics>,
}

/// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelActivityMetrics {
    /// Whether the activity metrics are enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelAdvancedDataProtectionMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// level configuration. See Bucket Level below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevel {
    /// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityMetrics")]
    #[builder(default)]
    pub activity_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelActivityMetrics>,
    /// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedCostOptimizationMetrics")]
    #[builder(default)]
    pub advanced_cost_optimization_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetrics>,
    /// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedDataProtectionMetrics")]
    #[builder(default)]
    pub advanced_data_protection_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetrics>,
    /// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detailedStatusCodeMetrics")]
    #[builder(default)]
    pub detailed_status_code_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetrics>,
    /// level metrics for S3 Storage Lens. See Prefix Level below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixLevel")]
    #[builder(default)]
    pub prefix_level: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevel>,
}

/// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelActivityMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// level metrics for S3 Storage Lens. See Prefix Level below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevel {
    /// level storage metrics for S3 Storage Lens. See Prefix Level Storage Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMetrics")]
    #[builder(default)]
    pub storage_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetrics>,
}

/// level storage metrics for S3 Storage Lens. See Prefix Level Storage Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Selection criteria. See Selection Criteria below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectionCriteria")]
    #[builder(default)]
    pub selection_criteria: Option<StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteria>,
}

/// Selection criteria. See Selection Criteria below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteria {
    /// The delimiter of the selection criteria being used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub delimiter: Option<String>,
    /// The max depth of the selection criteria.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDepth")]
    #[builder(default)]
    pub max_depth: Option<f64>,
    /// The minimum number of storage bytes percentage whose metrics will be selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minStorageBytesPercentage")]
    #[builder(default)]
    pub min_storage_bytes_percentage: Option<f64>,
}

/// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAccountLevelDetailedStatusCodeMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// The Amazon Web Services organization for the S3 Storage Lens configuration. See AWS Org below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationAwsOrg {
    /// The Amazon Resource Name (ARN) of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
}

/// Properties of S3 Storage Lens metrics export including the destination, schema and format. See Data Export below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExport {
    /// Amazon CloudWatch publishing for S3 Storage Lens metrics. See Cloud Watch Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchMetrics")]
    #[builder(default)]
    pub cloud_watch_metrics: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportCloudWatchMetrics>,
    /// The bucket where the S3 Storage Lens metrics export will be located. See S3 Bucket Destination below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BucketDestination")]
    #[builder(default)]
    pub s3_bucket_destination: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestination>,
}

/// Amazon CloudWatch publishing for S3 Storage Lens metrics. See Cloud Watch Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExportCloudWatchMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// The bucket where the S3 Storage Lens metrics export will be located. See S3 Bucket Destination below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestination {
    /// The account ID of the owner of the S3 Storage Lens metrics export bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// The Amazon Resource Name (ARN) of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Reference to a Bucket in s3 to populate arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arnRef")]
    #[builder(default)]
    pub arn_ref: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnRef>,
    /// Selector for a Bucket in s3 to populate arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arnSelector")]
    #[builder(default)]
    pub arn_selector: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelector>,
    /// Encryption of the metrics exports in this bucket. See Encryption below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encryption: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationEncryption>,
    /// The export format. Valid values: CSV, Parquet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// The schema version of the export file. Valid values: V_1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSchemaVersion")]
    #[builder(default)]
    pub output_schema_version: Option<String>,
    /// The prefix of the destination bucket where the metrics export will be delivered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prefix: Option<String>,
}

/// Reference to a Bucket in s3 to populate arn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate arn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Encryption of the metrics exports in this bucket. See Encryption below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationEncryption {
    /// KMS encryption. See SSE KMS below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKms")]
    #[builder(default)]
    pub sse_kms: Option<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKms>,
    /// S3 encryption. An empty configuration block {} should be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseS3")]
    #[builder(default)]
    pub sse_s3: Option<Vec<StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3>>,
}

/// KMS encryption. See SSE KMS below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKms {
    /// KMS key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3 {
}

/// What is excluded in this configuration. Conflicts with include. See Exclude below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationExclude {
    /// List of S3 bucket ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub buckets: Option<Vec<String>>,
    /// References to Bucket in s3 to populate buckets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketsRefs")]
    #[builder(default)]
    pub buckets_refs: Option<Vec<StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsRefs>>,
    /// Selector for a list of Bucket in s3 to populate buckets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketsSelector")]
    #[builder(default)]
    pub buckets_selector: Option<StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsSelector>,
    /// List of AWS Regions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regions: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Bucket in s3 to populate buckets.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationForProviderStorageLensConfigurationExcludeBucketsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// What is included in this configuration. Conflicts with exclude. See Include below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationForProviderStorageLensConfigurationInclude {
    /// List of S3 bucket ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub buckets: Option<Vec<String>>,
    /// List of AWS Regions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regions: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProvider {
    /// The AWS account ID for the S3 Storage Lens configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// The ID of the S3 Storage Lens configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configId")]
    #[builder(default)]
    pub config_id: Option<String>,
    /// The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLensConfiguration")]
    #[builder(default)]
    pub storage_lens_configuration: Option<StorageLensConfigurationInitProviderStorageLensConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfiguration {
    /// level configurations of the S3 Storage Lens configuration. See Account Level below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountLevel")]
    #[builder(default)]
    pub account_level: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevel>,
    /// The Amazon Web Services organization for the S3 Storage Lens configuration. See AWS Org below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsOrg")]
    #[builder(default)]
    pub aws_org: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAwsOrg>,
    /// Properties of S3 Storage Lens metrics export including the destination, schema and format. See Data Export below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataExport")]
    #[builder(default)]
    pub data_export: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExport>,
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// What is excluded in this configuration. Conflicts with include. See Exclude below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub exclude: Option<StorageLensConfigurationInitProviderStorageLensConfigurationExclude>,
    /// What is included in this configuration. Conflicts with exclude. See Include below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub include: Option<StorageLensConfigurationInitProviderStorageLensConfigurationInclude>,
}

/// level configurations of the S3 Storage Lens configuration. See Account Level below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevel {
    /// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityMetrics")]
    #[builder(default)]
    pub activity_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelActivityMetrics>,
    /// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedCostOptimizationMetrics")]
    #[builder(default)]
    pub advanced_cost_optimization_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetrics>,
    /// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedDataProtectionMetrics")]
    #[builder(default)]
    pub advanced_data_protection_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelAdvancedDataProtectionMetrics>,
    /// level configuration. See Bucket Level below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketLevel")]
    #[builder(default)]
    pub bucket_level: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevel>,
    /// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detailedStatusCodeMetrics")]
    #[builder(default)]
    pub detailed_status_code_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelDetailedStatusCodeMetrics>,
}

/// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelActivityMetrics {
    /// Whether the activity metrics are enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelAdvancedDataProtectionMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// level configuration. See Bucket Level below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevel {
    /// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityMetrics")]
    #[builder(default)]
    pub activity_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelActivityMetrics>,
    /// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedCostOptimizationMetrics")]
    #[builder(default)]
    pub advanced_cost_optimization_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetrics>,
    /// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedDataProtectionMetrics")]
    #[builder(default)]
    pub advanced_data_protection_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetrics>,
    /// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detailedStatusCodeMetrics")]
    #[builder(default)]
    pub detailed_status_code_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetrics>,
    /// level metrics for S3 Storage Lens. See Prefix Level below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixLevel")]
    #[builder(default)]
    pub prefix_level: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevel>,
}

/// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelActivityMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// level metrics for S3 Storage Lens. See Prefix Level below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevel {
    /// level storage metrics for S3 Storage Lens. See Prefix Level Storage Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMetrics")]
    #[builder(default)]
    pub storage_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetrics>,
}

/// level storage metrics for S3 Storage Lens. See Prefix Level Storage Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Selection criteria. See Selection Criteria below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectionCriteria")]
    #[builder(default)]
    pub selection_criteria: Option<StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteria>,
}

/// Selection criteria. See Selection Criteria below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteria {
    /// The delimiter of the selection criteria being used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub delimiter: Option<String>,
    /// The max depth of the selection criteria.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDepth")]
    #[builder(default)]
    pub max_depth: Option<f64>,
    /// The minimum number of storage bytes percentage whose metrics will be selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minStorageBytesPercentage")]
    #[builder(default)]
    pub min_storage_bytes_percentage: Option<f64>,
}

/// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAccountLevelDetailedStatusCodeMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// The Amazon Web Services organization for the S3 Storage Lens configuration. See AWS Org below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationAwsOrg {
    /// The Amazon Resource Name (ARN) of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
}

/// Properties of S3 Storage Lens metrics export including the destination, schema and format. See Data Export below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExport {
    /// Amazon CloudWatch publishing for S3 Storage Lens metrics. See Cloud Watch Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchMetrics")]
    #[builder(default)]
    pub cloud_watch_metrics: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportCloudWatchMetrics>,
    /// The bucket where the S3 Storage Lens metrics export will be located. See S3 Bucket Destination below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BucketDestination")]
    #[builder(default)]
    pub s3_bucket_destination: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestination>,
}

/// Amazon CloudWatch publishing for S3 Storage Lens metrics. See Cloud Watch Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExportCloudWatchMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// The bucket where the S3 Storage Lens metrics export will be located. See S3 Bucket Destination below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestination {
    /// The account ID of the owner of the S3 Storage Lens metrics export bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// The Amazon Resource Name (ARN) of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Reference to a Bucket in s3 to populate arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arnRef")]
    #[builder(default)]
    pub arn_ref: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnRef>,
    /// Selector for a Bucket in s3 to populate arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arnSelector")]
    #[builder(default)]
    pub arn_selector: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelector>,
    /// Encryption of the metrics exports in this bucket. See Encryption below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encryption: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationEncryption>,
    /// The export format. Valid values: CSV, Parquet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// The schema version of the export file. Valid values: V_1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSchemaVersion")]
    #[builder(default)]
    pub output_schema_version: Option<String>,
    /// The prefix of the destination bucket where the metrics export will be delivered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prefix: Option<String>,
}

/// Reference to a Bucket in s3 to populate arn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate arn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Encryption of the metrics exports in this bucket. See Encryption below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationEncryption {
    /// KMS encryption. See SSE KMS below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKms")]
    #[builder(default)]
    pub sse_kms: Option<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKms>,
    /// S3 encryption. An empty configuration block {} should be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseS3")]
    #[builder(default)]
    pub sse_s3: Option<Vec<StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3>>,
}

/// KMS encryption. See SSE KMS below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKms {
    /// KMS key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3 {
}

/// What is excluded in this configuration. Conflicts with include. See Exclude below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationExclude {
    /// List of S3 bucket ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub buckets: Option<Vec<String>>,
    /// References to Bucket in s3 to populate buckets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketsRefs")]
    #[builder(default)]
    pub buckets_refs: Option<Vec<StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsRefs>>,
    /// Selector for a list of Bucket in s3 to populate buckets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketsSelector")]
    #[builder(default)]
    pub buckets_selector: Option<StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsSelector>,
    /// List of AWS Regions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regions: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Bucket in s3 to populate buckets.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationInitProviderStorageLensConfigurationExcludeBucketsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// What is included in this configuration. Conflicts with exclude. See Include below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationInitProviderStorageLensConfigurationInclude {
    /// List of S3 bucket ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub buckets: Option<Vec<String>>,
    /// List of AWS Regions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regions: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<StorageLensConfigurationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<StorageLensConfigurationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StorageLensConfigurationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StorageLensConfigurationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StorageLensConfigurationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StorageLensConfigurationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// StorageLensConfigurationStatus defines the observed state of StorageLensConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<StorageLensConfigurationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProvider {
    /// The AWS account ID for the S3 Storage Lens configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// Amazon Resource Name (ARN) of the S3 Storage Lens configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// The ID of the S3 Storage Lens configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configId")]
    #[builder(default)]
    pub config_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLensConfiguration")]
    #[builder(default)]
    pub storage_lens_configuration: Option<StorageLensConfigurationStatusAtProviderStorageLensConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

/// The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfiguration {
    /// level configurations of the S3 Storage Lens configuration. See Account Level below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountLevel")]
    #[builder(default)]
    pub account_level: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevel>,
    /// The Amazon Web Services organization for the S3 Storage Lens configuration. See AWS Org below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsOrg")]
    #[builder(default)]
    pub aws_org: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAwsOrg>,
    /// Properties of S3 Storage Lens metrics export including the destination, schema and format. See Data Export below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataExport")]
    #[builder(default)]
    pub data_export: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExport>,
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// What is excluded in this configuration. Conflicts with include. See Exclude below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub exclude: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationExclude>,
    /// What is included in this configuration. Conflicts with exclude. See Include below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub include: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationInclude>,
}

/// level configurations of the S3 Storage Lens configuration. See Account Level below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevel {
    /// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityMetrics")]
    #[builder(default)]
    pub activity_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelActivityMetrics>,
    /// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedCostOptimizationMetrics")]
    #[builder(default)]
    pub advanced_cost_optimization_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetrics>,
    /// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedDataProtectionMetrics")]
    #[builder(default)]
    pub advanced_data_protection_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelAdvancedDataProtectionMetrics>,
    /// level configuration. See Bucket Level below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketLevel")]
    #[builder(default)]
    pub bucket_level: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevel>,
    /// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detailedStatusCodeMetrics")]
    #[builder(default)]
    pub detailed_status_code_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelDetailedStatusCodeMetrics>,
}

/// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelActivityMetrics {
    /// Whether the activity metrics are enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelAdvancedDataProtectionMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// level configuration. See Bucket Level below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevel {
    /// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityMetrics")]
    #[builder(default)]
    pub activity_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelActivityMetrics>,
    /// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedCostOptimizationMetrics")]
    #[builder(default)]
    pub advanced_cost_optimization_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetrics>,
    /// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedDataProtectionMetrics")]
    #[builder(default)]
    pub advanced_data_protection_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetrics>,
    /// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detailedStatusCodeMetrics")]
    #[builder(default)]
    pub detailed_status_code_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetrics>,
    /// level metrics for S3 Storage Lens. See Prefix Level below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixLevel")]
    #[builder(default)]
    pub prefix_level: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevel>,
}

/// S3 Storage Lens activity metrics. See Activity Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelActivityMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// level metrics for S3 Storage Lens. See Prefix Level below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevel {
    /// level storage metrics for S3 Storage Lens. See Prefix Level Storage Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMetrics")]
    #[builder(default)]
    pub storage_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetrics>,
}

/// level storage metrics for S3 Storage Lens. See Prefix Level Storage Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Selection criteria. See Selection Criteria below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectionCriteria")]
    #[builder(default)]
    pub selection_criteria: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteria>,
}

/// Selection criteria. See Selection Criteria below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteria {
    /// The delimiter of the selection criteria being used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub delimiter: Option<String>,
    /// The max depth of the selection criteria.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDepth")]
    #[builder(default)]
    pub max_depth: Option<f64>,
    /// The minimum number of storage bytes percentage whose metrics will be selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minStorageBytesPercentage")]
    #[builder(default)]
    pub min_storage_bytes_percentage: Option<f64>,
}

/// Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAccountLevelDetailedStatusCodeMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// The Amazon Web Services organization for the S3 Storage Lens configuration. See AWS Org below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationAwsOrg {
    /// The Amazon Resource Name (ARN) of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
}

/// Properties of S3 Storage Lens metrics export including the destination, schema and format. See Data Export below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExport {
    /// Amazon CloudWatch publishing for S3 Storage Lens metrics. See Cloud Watch Metrics below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchMetrics")]
    #[builder(default)]
    pub cloud_watch_metrics: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportCloudWatchMetrics>,
    /// The bucket where the S3 Storage Lens metrics export will be located. See S3 Bucket Destination below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BucketDestination")]
    #[builder(default)]
    pub s3_bucket_destination: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportS3BucketDestination>,
}

/// Amazon CloudWatch publishing for S3 Storage Lens metrics. See Cloud Watch Metrics below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportCloudWatchMetrics {
    /// Whether the S3 Storage Lens configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// The bucket where the S3 Storage Lens metrics export will be located. See S3 Bucket Destination below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportS3BucketDestination {
    /// The account ID of the owner of the S3 Storage Lens metrics export bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// The Amazon Resource Name (ARN) of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Encryption of the metrics exports in this bucket. See Encryption below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encryption: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportS3BucketDestinationEncryption>,
    /// The export format. Valid values: CSV, Parquet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// The schema version of the export file. Valid values: V_1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSchemaVersion")]
    #[builder(default)]
    pub output_schema_version: Option<String>,
    /// The prefix of the destination bucket where the metrics export will be delivered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prefix: Option<String>,
}

/// Encryption of the metrics exports in this bucket. See Encryption below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportS3BucketDestinationEncryption {
    /// KMS encryption. See SSE KMS below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKms")]
    #[builder(default)]
    pub sse_kms: Option<StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKms>,
    /// S3 encryption. An empty configuration block {} should be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseS3")]
    #[builder(default)]
    pub sse_s3: Option<Vec<StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3>>,
}

/// KMS encryption. See SSE KMS below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKms {
    /// KMS key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3 {
}

/// What is excluded in this configuration. Conflicts with include. See Exclude below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationExclude {
    /// List of S3 bucket ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub buckets: Option<Vec<String>>,
    /// List of AWS Regions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regions: Option<Vec<String>>,
}

/// What is included in this configuration. Conflicts with exclude. See Include below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StorageLensConfigurationStatusAtProviderStorageLensConfigurationInclude {
    /// List of S3 bucket ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub buckets: Option<Vec<String>>,
    /// List of AWS Regions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regions: Option<Vec<String>>,
}


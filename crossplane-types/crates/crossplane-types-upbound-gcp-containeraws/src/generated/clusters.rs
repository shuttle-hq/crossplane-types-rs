// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ClusterSpec defines the desired state of Cluster
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "containeraws.gcp.upbound.io",
    version = "v1beta2",
    kind = "Cluster",
    plural = "clusters"
)]
#[kube(status = "ClusterStatus")]
pub struct ClusterSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<ClusterDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ClusterForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<ClusterInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<ClusterProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<ClusterPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ClusterWriteConnectionSecretToRef>,
}

/// ClusterSpec defines the desired state of Cluster
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProvider {
    /// Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Configuration related to the cluster RBAC settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub authorization: Option<ClusterForProviderAuthorization>,
    /// The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    #[builder(default)]
    pub aws_region: Option<String>,
    /// Configuration options for the Binary Authorization feature.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "binaryAuthorization"
    )]
    #[builder(default)]
    pub binary_authorization: Option<ClusterForProviderBinaryAuthorization>,
    /// Configuration related to the cluster control plane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlane"
    )]
    #[builder(default)]
    pub control_plane: Option<ClusterForProviderControlPlane>,
    /// Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Fleet configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub fleet: Option<ClusterForProviderFleet>,
    /// The location for the resource
    pub location: String,
    /// Cluster-wide networking configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub networking: Option<ClusterForProviderNetworking>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Configuration related to the cluster RBAC settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderAuthorization {
    /// Groups of users that can perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the groups. Up to ten admin groups can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminGroups"
    )]
    #[builder(default)]
    pub admin_groups: Option<Vec<ClusterForProviderAuthorizationAdminGroups>>,
    /// Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminUsers"
    )]
    #[builder(default)]
    pub admin_users: Option<Vec<ClusterForProviderAuthorizationAdminUsers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderAuthorizationAdminGroups {
    /// The name of the group, e.g. my-group@domain.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderAuthorizationAdminUsers {
    /// The name of the user, e.g. my-gcp-id@gmail.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Configuration options for the Binary Authorization feature.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderBinaryAuthorization {
    /// Mode of operation for Binary Authorization policy evaluation. Possible values: DISABLED, PROJECT_SINGLETON_POLICY_ENFORCE
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "evaluationMode"
    )]
    #[builder(default)]
    pub evaluation_mode: Option<String>,
}

/// Configuration related to the cluster control plane.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlane {
    /// Authentication configuration for management of AWS resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "awsServicesAuthentication"
    )]
    #[builder(default)]
    pub aws_services_authentication:
        Option<ClusterForProviderControlPlaneAwsServicesAuthentication>,
    /// The ARN of the AWS KMS key used to encrypt cluster configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configEncryption"
    )]
    #[builder(default)]
    pub config_encryption: Option<ClusterForProviderControlPlaneConfigEncryption>,
    /// The ARN of the AWS KMS key used to encrypt cluster secrets.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseEncryption"
    )]
    #[builder(default)]
    pub database_encryption: Option<ClusterForProviderControlPlaneDatabaseEncryption>,
    /// The name of the AWS IAM instance pofile to assign to each control plane replica.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamInstanceProfile"
    )]
    #[builder(default)]
    pub iam_instance_profile: Option<String>,
    /// Optional. The AWS instance type. When unspecified, it defaults to m5.large.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 8 GiB with the GP2 volume type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainVolume"
    )]
    #[builder(default)]
    pub main_volume: Option<ClusterForProviderControlPlaneMainVolume>,
    /// Proxy configuration for outbound HTTP(S) traffic.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConfig"
    )]
    #[builder(default)]
    pub proxy_config: Option<ClusterForProviderControlPlaneProxyConfig>,
    /// Optional. Configuration related to the root volume provisioned for each control plane replica. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootVolume"
    )]
    #[builder(default)]
    pub root_volume: Option<ClusterForProviderControlPlaneRootVolume>,
    /// Optional. The IDs of additional security groups to add to control plane replicas. The Anthos Multi-Cloud API will automatically create and manage security groups with the minimum rules needed for a functioning cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// Optional. SSH configuration for how to access the underlying control plane machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshConfig")]
    #[builder(default)]
    pub ssh_config: Option<ClusterForProviderControlPlaneSshConfig>,
    /// The list of subnets where control plane replicas will run. A replica will be provisioned on each subnet and up to three values can be provided. Each subnet must be in a different AWS Availability Zone (AZ).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// Optional. A set of AWS resource tags to propagate to all underlying managed AWS resources. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling .
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Authentication configuration for management of AWS resources.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneAwsServicesAuthentication {
    /// The Amazon Resource Name (ARN) of the role that the Anthos Multi-Cloud API will assume when managing AWS resources on your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Optional. An identifier for the assumed role session. When unspecified, it defaults to multicloud-service-agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleSessionName"
    )]
    #[builder(default)]
    pub role_session_name: Option<String>,
}

/// The ARN of the AWS KMS key used to encrypt cluster configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneConfigEncryption {
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
}

/// The ARN of the AWS KMS key used to encrypt cluster secrets.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneDatabaseEncryption {
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
}

/// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 8 GiB with the GP2 volume type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneMainVolume {
    /// Optional. The number of I/O operations per second (IOPS) to provision for GP3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
    /// Optional. The size of the volume, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
    /// Optional. The throughput to provision for the volume, in MiB/s. Only valid if the volume type is GP3. If volume type is gp3 and throughput is not specified, the throughput will defaults to 125.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Optional. Type of the EBS volume. When unspecified, it defaults to GP2 volume. Possible values: VOLUME_TYPE_UNSPECIFIED, GP2, GP3
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Proxy configuration for outbound HTTP(S) traffic.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneProxyConfig {
    /// The ARN of the AWS Secret Manager secret that contains the HTTP(S) proxy configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    #[builder(default)]
    pub secret_arn: Option<String>,
    /// The version string of the AWS Secret Manager secret that contains the HTTP(S) proxy configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretVersion"
    )]
    #[builder(default)]
    pub secret_version: Option<String>,
}

/// Optional. Configuration related to the root volume provisioned for each control plane replica. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneRootVolume {
    /// Optional. The number of I/O operations per second (IOPS) to provision for GP3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
    /// Optional. The size of the volume, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
    /// Optional. The throughput to provision for the volume, in MiB/s. Only valid if the volume type is GP3. If volume type is gp3 and throughput is not specified, the throughput will defaults to 125.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Optional. Type of the EBS volume. When unspecified, it defaults to GP2 volume. Possible values: VOLUME_TYPE_UNSPECIFIED, GP2, GP3
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Optional. SSH configuration for how to access the underlying control plane machines.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneSshConfig {
    /// The name of the EC2 key pair used to login into cluster machines.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2KeyPair"
    )]
    #[builder(default)]
    pub ec2_key_pair: Option<String>,
}

/// Fleet configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderFleet {
    /// The number of the Fleet host project where this cluster will be registered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Cluster-wide networking configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderNetworking {
    /// Disable the per node pool subnet security group rules on the control plane security group. When set to true, you must also provide one or more security groups that ensure node pools are able to send requests to the control plane on TCP/443 and TCP/8132. Failure to do so may result in unavailable node pools.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "perNodePoolSgRulesDisabled"
    )]
    #[builder(default)]
    pub per_node_pool_sg_rules_disabled: Option<bool>,
    /// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podAddressCidrBlocks"
    )]
    #[builder(default)]
    pub pod_address_cidr_blocks: Option<Vec<String>>,
    /// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceAddressCidrBlocks"
    )]
    #[builder(default)]
    pub service_address_cidr_blocks: Option<Vec<String>>,
    /// The VPC associated with the cluster. All component clusters (i.e. control plane and node pools) run on a single VPC. This field cannot be changed after creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProvider {
    /// Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Configuration related to the cluster RBAC settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub authorization: Option<ClusterInitProviderAuthorization>,
    /// The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    #[builder(default)]
    pub aws_region: Option<String>,
    /// Configuration options for the Binary Authorization feature.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "binaryAuthorization"
    )]
    #[builder(default)]
    pub binary_authorization: Option<ClusterInitProviderBinaryAuthorization>,
    /// Configuration related to the cluster control plane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlane"
    )]
    #[builder(default)]
    pub control_plane: Option<ClusterInitProviderControlPlane>,
    /// Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Fleet configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub fleet: Option<ClusterInitProviderFleet>,
    /// Cluster-wide networking configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub networking: Option<ClusterInitProviderNetworking>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Configuration related to the cluster RBAC settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderAuthorization {
    /// Groups of users that can perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the groups. Up to ten admin groups can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminGroups"
    )]
    #[builder(default)]
    pub admin_groups: Option<Vec<ClusterInitProviderAuthorizationAdminGroups>>,
    /// Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminUsers"
    )]
    #[builder(default)]
    pub admin_users: Option<Vec<ClusterInitProviderAuthorizationAdminUsers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderAuthorizationAdminGroups {
    /// The name of the group, e.g. my-group@domain.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderAuthorizationAdminUsers {
    /// The name of the user, e.g. my-gcp-id@gmail.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Configuration options for the Binary Authorization feature.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderBinaryAuthorization {
    /// Mode of operation for Binary Authorization policy evaluation. Possible values: DISABLED, PROJECT_SINGLETON_POLICY_ENFORCE
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "evaluationMode"
    )]
    #[builder(default)]
    pub evaluation_mode: Option<String>,
}

/// Configuration related to the cluster control plane.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlane {
    /// Authentication configuration for management of AWS resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "awsServicesAuthentication"
    )]
    #[builder(default)]
    pub aws_services_authentication:
        Option<ClusterInitProviderControlPlaneAwsServicesAuthentication>,
    /// The ARN of the AWS KMS key used to encrypt cluster configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configEncryption"
    )]
    #[builder(default)]
    pub config_encryption: Option<ClusterInitProviderControlPlaneConfigEncryption>,
    /// The ARN of the AWS KMS key used to encrypt cluster secrets.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseEncryption"
    )]
    #[builder(default)]
    pub database_encryption: Option<ClusterInitProviderControlPlaneDatabaseEncryption>,
    /// The name of the AWS IAM instance pofile to assign to each control plane replica.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamInstanceProfile"
    )]
    #[builder(default)]
    pub iam_instance_profile: Option<String>,
    /// Optional. The AWS instance type. When unspecified, it defaults to m5.large.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 8 GiB with the GP2 volume type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainVolume"
    )]
    #[builder(default)]
    pub main_volume: Option<ClusterInitProviderControlPlaneMainVolume>,
    /// Proxy configuration for outbound HTTP(S) traffic.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConfig"
    )]
    #[builder(default)]
    pub proxy_config: Option<ClusterInitProviderControlPlaneProxyConfig>,
    /// Optional. Configuration related to the root volume provisioned for each control plane replica. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootVolume"
    )]
    #[builder(default)]
    pub root_volume: Option<ClusterInitProviderControlPlaneRootVolume>,
    /// Optional. The IDs of additional security groups to add to control plane replicas. The Anthos Multi-Cloud API will automatically create and manage security groups with the minimum rules needed for a functioning cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// Optional. SSH configuration for how to access the underlying control plane machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshConfig")]
    #[builder(default)]
    pub ssh_config: Option<ClusterInitProviderControlPlaneSshConfig>,
    /// The list of subnets where control plane replicas will run. A replica will be provisioned on each subnet and up to three values can be provided. Each subnet must be in a different AWS Availability Zone (AZ).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// Optional. A set of AWS resource tags to propagate to all underlying managed AWS resources. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling .
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Authentication configuration for management of AWS resources.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneAwsServicesAuthentication {
    /// The Amazon Resource Name (ARN) of the role that the Anthos Multi-Cloud API will assume when managing AWS resources on your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Optional. An identifier for the assumed role session. When unspecified, it defaults to multicloud-service-agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleSessionName"
    )]
    #[builder(default)]
    pub role_session_name: Option<String>,
}

/// The ARN of the AWS KMS key used to encrypt cluster configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneConfigEncryption {
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
}

/// The ARN of the AWS KMS key used to encrypt cluster secrets.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneDatabaseEncryption {
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
}

/// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 8 GiB with the GP2 volume type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneMainVolume {
    /// Optional. The number of I/O operations per second (IOPS) to provision for GP3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
    /// Optional. The size of the volume, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
    /// Optional. The throughput to provision for the volume, in MiB/s. Only valid if the volume type is GP3. If volume type is gp3 and throughput is not specified, the throughput will defaults to 125.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Optional. Type of the EBS volume. When unspecified, it defaults to GP2 volume. Possible values: VOLUME_TYPE_UNSPECIFIED, GP2, GP3
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Proxy configuration for outbound HTTP(S) traffic.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneProxyConfig {
    /// The ARN of the AWS Secret Manager secret that contains the HTTP(S) proxy configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    #[builder(default)]
    pub secret_arn: Option<String>,
    /// The version string of the AWS Secret Manager secret that contains the HTTP(S) proxy configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretVersion"
    )]
    #[builder(default)]
    pub secret_version: Option<String>,
}

/// Optional. Configuration related to the root volume provisioned for each control plane replica. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneRootVolume {
    /// Optional. The number of I/O operations per second (IOPS) to provision for GP3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
    /// Optional. The size of the volume, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
    /// Optional. The throughput to provision for the volume, in MiB/s. Only valid if the volume type is GP3. If volume type is gp3 and throughput is not specified, the throughput will defaults to 125.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Optional. Type of the EBS volume. When unspecified, it defaults to GP2 volume. Possible values: VOLUME_TYPE_UNSPECIFIED, GP2, GP3
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Optional. SSH configuration for how to access the underlying control plane machines.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneSshConfig {
    /// The name of the EC2 key pair used to login into cluster machines.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2KeyPair"
    )]
    #[builder(default)]
    pub ec2_key_pair: Option<String>,
}

/// Fleet configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderFleet {
    /// The number of the Fleet host project where this cluster will be registered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Cluster-wide networking configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderNetworking {
    /// Disable the per node pool subnet security group rules on the control plane security group. When set to true, you must also provide one or more security groups that ensure node pools are able to send requests to the control plane on TCP/443 and TCP/8132. Failure to do so may result in unavailable node pools.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "perNodePoolSgRulesDisabled"
    )]
    #[builder(default)]
    pub per_node_pool_sg_rules_disabled: Option<bool>,
    /// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podAddressCidrBlocks"
    )]
    #[builder(default)]
    pub pod_address_cidr_blocks: Option<Vec<String>>,
    /// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceAddressCidrBlocks"
    )]
    #[builder(default)]
    pub service_address_cidr_blocks: Option<Vec<String>>,
    /// The VPC associated with the cluster. All component clusters (i.e. control plane and node pools) run on a single VPC. This field cannot be changed after creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ClusterPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ClusterPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ClusterStatus defines the observed state of Cluster.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<ClusterStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProvider {
    /// Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Configuration related to the cluster RBAC settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub authorization: Option<ClusterStatusAtProviderAuthorization>,
    /// The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    #[builder(default)]
    pub aws_region: Option<String>,
    /// Configuration options for the Binary Authorization feature.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "binaryAuthorization"
    )]
    #[builder(default)]
    pub binary_authorization: Option<ClusterStatusAtProviderBinaryAuthorization>,
    /// Configuration related to the cluster control plane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlane"
    )]
    #[builder(default)]
    pub control_plane: Option<ClusterStatusAtProviderControlPlane>,
    /// Output only. The time at which this cluster was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createTime"
    )]
    #[builder(default)]
    pub create_time: Option<String>,
    /// Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "effectiveAnnotations"
    )]
    #[builder(default)]
    pub effective_annotations: Option<HashMap<String, String>>,
    /// Output only. The endpoint of the cluster's API server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub endpoint: Option<String>,
    /// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub etag: Option<String>,
    /// Fleet configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub fleet: Option<ClusterStatusAtProviderFleet>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/awsClusters/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// Cluster-wide networking configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub networking: Option<ClusterStatusAtProviderNetworking>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Output only. If set, there are currently changes in flight to the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub reconciling: Option<bool>,
    /// Output only. The current state of the cluster. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Output only. A globally unique identifier for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<String>,
    /// Output only. The time at which this cluster was last updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "updateTime"
    )]
    #[builder(default)]
    pub update_time: Option<String>,
    /// Output only. Workload Identity settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workloadIdentityConfig"
    )]
    #[builder(default)]
    pub workload_identity_config: Option<Vec<ClusterStatusAtProviderWorkloadIdentityConfig>>,
}

/// Configuration related to the cluster RBAC settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderAuthorization {
    /// Groups of users that can perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the groups. Up to ten admin groups can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminGroups"
    )]
    #[builder(default)]
    pub admin_groups: Option<Vec<ClusterStatusAtProviderAuthorizationAdminGroups>>,
    /// Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminUsers"
    )]
    #[builder(default)]
    pub admin_users: Option<Vec<ClusterStatusAtProviderAuthorizationAdminUsers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderAuthorizationAdminGroups {
    /// The name of the group, e.g. my-group@domain.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderAuthorizationAdminUsers {
    /// The name of the user, e.g. my-gcp-id@gmail.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Configuration options for the Binary Authorization feature.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderBinaryAuthorization {
    /// Mode of operation for Binary Authorization policy evaluation. Possible values: DISABLED, PROJECT_SINGLETON_POLICY_ENFORCE
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "evaluationMode"
    )]
    #[builder(default)]
    pub evaluation_mode: Option<String>,
}

/// Configuration related to the cluster control plane.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlane {
    /// Authentication configuration for management of AWS resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "awsServicesAuthentication"
    )]
    #[builder(default)]
    pub aws_services_authentication:
        Option<ClusterStatusAtProviderControlPlaneAwsServicesAuthentication>,
    /// The ARN of the AWS KMS key used to encrypt cluster configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configEncryption"
    )]
    #[builder(default)]
    pub config_encryption: Option<ClusterStatusAtProviderControlPlaneConfigEncryption>,
    /// The ARN of the AWS KMS key used to encrypt cluster secrets.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseEncryption"
    )]
    #[builder(default)]
    pub database_encryption: Option<ClusterStatusAtProviderControlPlaneDatabaseEncryption>,
    /// The name of the AWS IAM instance pofile to assign to each control plane replica.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamInstanceProfile"
    )]
    #[builder(default)]
    pub iam_instance_profile: Option<String>,
    /// Optional. The AWS instance type. When unspecified, it defaults to m5.large.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 8 GiB with the GP2 volume type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainVolume"
    )]
    #[builder(default)]
    pub main_volume: Option<ClusterStatusAtProviderControlPlaneMainVolume>,
    /// Proxy configuration for outbound HTTP(S) traffic.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConfig"
    )]
    #[builder(default)]
    pub proxy_config: Option<ClusterStatusAtProviderControlPlaneProxyConfig>,
    /// Optional. Configuration related to the root volume provisioned for each control plane replica. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootVolume"
    )]
    #[builder(default)]
    pub root_volume: Option<ClusterStatusAtProviderControlPlaneRootVolume>,
    /// Optional. The IDs of additional security groups to add to control plane replicas. The Anthos Multi-Cloud API will automatically create and manage security groups with the minimum rules needed for a functioning cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// Optional. SSH configuration for how to access the underlying control plane machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshConfig")]
    #[builder(default)]
    pub ssh_config: Option<ClusterStatusAtProviderControlPlaneSshConfig>,
    /// The list of subnets where control plane replicas will run. A replica will be provisioned on each subnet and up to three values can be provided. Each subnet must be in a different AWS Availability Zone (AZ).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// Optional. A set of AWS resource tags to propagate to all underlying managed AWS resources. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling .
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Authentication configuration for management of AWS resources.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneAwsServicesAuthentication {
    /// The Amazon Resource Name (ARN) of the role that the Anthos Multi-Cloud API will assume when managing AWS resources on your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Optional. An identifier for the assumed role session. When unspecified, it defaults to multicloud-service-agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleSessionName"
    )]
    #[builder(default)]
    pub role_session_name: Option<String>,
}

/// The ARN of the AWS KMS key used to encrypt cluster configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneConfigEncryption {
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
}

/// The ARN of the AWS KMS key used to encrypt cluster secrets.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneDatabaseEncryption {
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
}

/// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 8 GiB with the GP2 volume type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneMainVolume {
    /// Optional. The number of I/O operations per second (IOPS) to provision for GP3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
    /// Optional. The size of the volume, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
    /// Optional. The throughput to provision for the volume, in MiB/s. Only valid if the volume type is GP3. If volume type is gp3 and throughput is not specified, the throughput will defaults to 125.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Optional. Type of the EBS volume. When unspecified, it defaults to GP2 volume. Possible values: VOLUME_TYPE_UNSPECIFIED, GP2, GP3
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Proxy configuration for outbound HTTP(S) traffic.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneProxyConfig {
    /// The ARN of the AWS Secret Manager secret that contains the HTTP(S) proxy configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    #[builder(default)]
    pub secret_arn: Option<String>,
    /// The version string of the AWS Secret Manager secret that contains the HTTP(S) proxy configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretVersion"
    )]
    #[builder(default)]
    pub secret_version: Option<String>,
}

/// Optional. Configuration related to the root volume provisioned for each control plane replica. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneRootVolume {
    /// Optional. The number of I/O operations per second (IOPS) to provision for GP3 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
    /// Optional. The size of the volume, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
    /// Optional. The throughput to provision for the volume, in MiB/s. Only valid if the volume type is GP3. If volume type is gp3 and throughput is not specified, the throughput will defaults to 125.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Optional. Type of the EBS volume. When unspecified, it defaults to GP2 volume. Possible values: VOLUME_TYPE_UNSPECIFIED, GP2, GP3
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Optional. SSH configuration for how to access the underlying control plane machines.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneSshConfig {
    /// The name of the EC2 key pair used to login into cluster machines.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2KeyPair"
    )]
    #[builder(default)]
    pub ec2_key_pair: Option<String>,
}

/// Fleet configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderFleet {
    /// The name of the managed Hub Membership resource associated to this cluster. Membership names are formatted as projects//locations/global/membership/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub membership: Option<String>,
    /// The number of the Fleet host project where this cluster will be registered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Cluster-wide networking configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderNetworking {
    /// Disable the per node pool subnet security group rules on the control plane security group. When set to true, you must also provide one or more security groups that ensure node pools are able to send requests to the control plane on TCP/443 and TCP/8132. Failure to do so may result in unavailable node pools.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "perNodePoolSgRulesDisabled"
    )]
    #[builder(default)]
    pub per_node_pool_sg_rules_disabled: Option<bool>,
    /// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podAddressCidrBlocks"
    )]
    #[builder(default)]
    pub pod_address_cidr_blocks: Option<Vec<String>>,
    /// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceAddressCidrBlocks"
    )]
    #[builder(default)]
    pub service_address_cidr_blocks: Option<Vec<String>>,
    /// The VPC associated with the cluster. All component clusters (i.e. control plane and node pools) run on a single VPC. This field cannot be changed after creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderWorkloadIdentityConfig {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityProvider"
    )]
    #[builder(default)]
    pub identity_provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuerUri")]
    #[builder(default)]
    pub issuer_uri: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workloadPool"
    )]
    #[builder(default)]
    pub workload_pool: Option<String>,
}

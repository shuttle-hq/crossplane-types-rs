// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ClusterInstanceSpec defines the desired state of ClusterInstance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "rds.aws.upbound.io",
    version = "v1beta1",
    kind = "ClusterInstance",
    plural = "clusterinstances"
)]
#[kube(status = "ClusterInstanceStatus")]
pub struct ClusterInstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<ClusterInstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ClusterInstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<ClusterInstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<ClusterInstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<ClusterInstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ClusterInstanceWriteConnectionSecretToRef>,
}

/// ClusterInstanceSpec defines the desired state of ClusterInstance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProvider {
    /// Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default isfalse.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applyImmediately"
    )]
    #[builder(default)]
    pub apply_immediately: Option<bool>,
    /// Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. Default true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoMinorVersionUpgrade"
    )]
    #[builder(default)]
    pub auto_minor_version_upgrade: Option<bool>,
    /// EC2 Availability Zone that the DB instance is created in. See docs about the details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZone"
    )]
    #[builder(default)]
    pub availability_zone: Option<String>,
    /// Identifier of the CA certificate for the DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "caCertIdentifier"
    )]
    #[builder(default)]
    pub ca_cert_identifier: Option<String>,
    /// Identifier of the aws_rds_cluster in which to launch this instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterIdentifier"
    )]
    #[builder(default)]
    pub cluster_identifier: Option<String>,
    /// Reference to a Cluster in rds to populate clusterIdentifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterIdentifierRef"
    )]
    #[builder(default)]
    pub cluster_identifier_ref: Option<ClusterInstanceForProviderClusterIdentifierRef>,
    /// Selector for a Cluster in rds to populate clusterIdentifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterIdentifierSelector"
    )]
    #[builder(default)]
    pub cluster_identifier_selector: Option<ClusterInstanceForProviderClusterIdentifierSelector>,
    /// defined tags from the DB instance to snapshots of the DB instance. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "copyTagsToSnapshot"
    )]
    #[builder(default)]
    pub copy_tags_to_snapshot: Option<bool>,
    /// Instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customIamInstanceProfile"
    )]
    #[builder(default)]
    pub custom_iam_instance_profile: Option<String>,
    /// Name of the DB parameter group to associate with this instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbParameterGroupName"
    )]
    #[builder(default)]
    pub db_parameter_group_name: Option<String>,
    /// Reference to a ParameterGroup in rds to populate dbParameterGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbParameterGroupNameRef"
    )]
    #[builder(default)]
    pub db_parameter_group_name_ref: Option<ClusterInstanceForProviderDbParameterGroupNameRef>,
    /// Selector for a ParameterGroup in rds to populate dbParameterGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbParameterGroupNameSelector"
    )]
    #[builder(default)]
    pub db_parameter_group_name_selector:
        Option<ClusterInstanceForProviderDbParameterGroupNameSelector>,
    /// Specifies the DB subnet group to associate with this DB instance. The default behavior varies depending on whether db_subnet_group_name is specified. Please refer to official AWS documentation to understand how db_subnet_group_name and publicly_accessible parameters affect DB instance behaviour. NOTE: This must match the db_subnet_group_name of the attached aws_rds_cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupName"
    )]
    #[builder(default)]
    pub db_subnet_group_name: Option<String>,
    /// Reference to a SubnetGroup in rds to populate dbSubnetGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupNameRef"
    )]
    #[builder(default)]
    pub db_subnet_group_name_ref: Option<ClusterInstanceForProviderDbSubnetGroupNameRef>,
    /// Selector for a SubnetGroup in rds to populate dbSubnetGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupNameSelector"
    )]
    #[builder(default)]
    pub db_subnet_group_name_selector: Option<ClusterInstanceForProviderDbSubnetGroupNameSelector>,
    /// Name of the database engine to be used for the RDS cluster instance.
    /// Valid Values: aurora-mysql, aurora-postgresql, mysql, postgres.(Note that mysql and postgres are Multi-AZ RDS clusters).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub engine: Option<String>,
    /// Database engine version. Please note that to upgrade the engine_version of the instance, it must be done on the aws_rds_cluster engine_version. Trying to upgrade in aws_cluster_instance will not update the engine_version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersion"
    )]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// Forces an instance to be destroyed when a part of a read replica cluster. Note: will promote the read replica to a standalone cluster before instance deletion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDestroy"
    )]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// Instance class to use. For details on CPU and memory, see Scaling Aurora DB Instances. Aurora uses db.* instance classes/types. Please see AWS Documentation for currently available instance classes and complete details. For Aurora Serverless v2 use db.serverless.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceClass"
    )]
    #[builder(default)]
    pub instance_class: Option<String>,
    /// Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringInterval"
    )]
    #[builder(default)]
    pub monitoring_interval: Option<f64>,
    /// ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. You can find more information on the AWS Documentation what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringRoleArn"
    )]
    #[builder(default)]
    pub monitoring_role_arn: Option<String>,
    /// Reference to a Role in iam to populate monitoringRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringRoleArnRef"
    )]
    #[builder(default)]
    pub monitoring_role_arn_ref: Option<ClusterInstanceForProviderMonitoringRoleArnRef>,
    /// Selector for a Role in iam to populate monitoringRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringRoleArnSelector"
    )]
    #[builder(default)]
    pub monitoring_role_arn_selector: Option<ClusterInstanceForProviderMonitoringRoleArnSelector>,
    /// Specifies whether Performance Insights is enabled or not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsEnabled"
    )]
    #[builder(default)]
    pub performance_insights_enabled: Option<bool>,
    /// ARN for the KMS key to encrypt Performance Insights data. When specifying performance_insights_kms_key_id, performance_insights_enabled needs to be set to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsKmsKeyId"
    )]
    #[builder(default)]
    pub performance_insights_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate performanceInsightsKmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsKmsKeyIdRef"
    )]
    #[builder(default)]
    pub performance_insights_kms_key_id_ref:
        Option<ClusterInstanceForProviderPerformanceInsightsKmsKeyIdRef>,
    /// Selector for a Key in kms to populate performanceInsightsKmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsKmsKeyIdSelector"
    )]
    #[builder(default)]
    pub performance_insights_kms_key_id_selector:
        Option<ClusterInstanceForProviderPerformanceInsightsKmsKeyIdSelector>,
    /// Amount of time in days to retain Performance Insights data. Valid values are 7, 731 (2 years) or a multiple of 31. When specifying performance_insights_retention_period, performance_insights_enabled needs to be set to true. Defaults to '7'.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsRetentionPeriod"
    )]
    #[builder(default)]
    pub performance_insights_retention_period: Option<f64>,
    /// Daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00". NOTE: If preferred_backup_window is set at the cluster level, this argument must be omitted.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredBackupWindow"
    )]
    #[builder(default)]
    pub preferred_backup_window: Option<String>,
    /// Window to perform maintenance in. Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredMaintenanceWindow"
    )]
    #[builder(default)]
    pub preferred_maintenance_window: Option<String>,
    /// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoted to writer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promotionTier"
    )]
    #[builder(default)]
    pub promotion_tier: Option<f64>,
    /// Bool to control if instance is publicly accessible. Default false. See the documentation on Creating DB Instances for more details on controlling this property.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publiclyAccessible"
    )]
    #[builder(default)]
    pub publicly_accessible: Option<bool>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a Cluster in rds to populate clusterIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderClusterIdentifierRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderClusterIdentifierRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderClusterIdentifierRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceForProviderClusterIdentifierRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderClusterIdentifierRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderClusterIdentifierRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderClusterIdentifierRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in rds to populate clusterIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderClusterIdentifierSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderClusterIdentifierSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderClusterIdentifierSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceForProviderClusterIdentifierSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderClusterIdentifierSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderClusterIdentifierSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderClusterIdentifierSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ParameterGroup in rds to populate dbParameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderDbParameterGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderDbParameterGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderDbParameterGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceForProviderDbParameterGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderDbParameterGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderDbParameterGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderDbParameterGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ParameterGroup in rds to populate dbParameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderDbParameterGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderDbParameterGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderDbParameterGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceForProviderDbParameterGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderDbParameterGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderDbParameterGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderDbParameterGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a SubnetGroup in rds to populate dbSubnetGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderDbSubnetGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderDbSubnetGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderDbSubnetGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceForProviderDbSubnetGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderDbSubnetGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderDbSubnetGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderDbSubnetGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SubnetGroup in rds to populate dbSubnetGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderDbSubnetGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderDbSubnetGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderDbSubnetGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceForProviderDbSubnetGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderDbSubnetGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderDbSubnetGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderDbSubnetGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate monitoringRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderMonitoringRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderMonitoringRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderMonitoringRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceForProviderMonitoringRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderMonitoringRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderMonitoringRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderMonitoringRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate monitoringRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderMonitoringRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderMonitoringRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderMonitoringRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceForProviderMonitoringRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderMonitoringRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderMonitoringRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderMonitoringRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate performanceInsightsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderPerformanceInsightsKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderPerformanceInsightsKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderPerformanceInsightsKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ClusterInstanceForProviderPerformanceInsightsKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderPerformanceInsightsKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderPerformanceInsightsKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderPerformanceInsightsKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate performanceInsightsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderPerformanceInsightsKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceForProviderPerformanceInsightsKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceForProviderPerformanceInsightsKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ClusterInstanceForProviderPerformanceInsightsKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceForProviderPerformanceInsightsKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderPerformanceInsightsKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceForProviderPerformanceInsightsKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProvider {
    /// Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default isfalse.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applyImmediately"
    )]
    #[builder(default)]
    pub apply_immediately: Option<bool>,
    /// Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. Default true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoMinorVersionUpgrade"
    )]
    #[builder(default)]
    pub auto_minor_version_upgrade: Option<bool>,
    /// EC2 Availability Zone that the DB instance is created in. See docs about the details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZone"
    )]
    #[builder(default)]
    pub availability_zone: Option<String>,
    /// Identifier of the CA certificate for the DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "caCertIdentifier"
    )]
    #[builder(default)]
    pub ca_cert_identifier: Option<String>,
    /// Identifier of the aws_rds_cluster in which to launch this instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterIdentifier"
    )]
    #[builder(default)]
    pub cluster_identifier: Option<String>,
    /// Reference to a Cluster in rds to populate clusterIdentifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterIdentifierRef"
    )]
    #[builder(default)]
    pub cluster_identifier_ref: Option<ClusterInstanceInitProviderClusterIdentifierRef>,
    /// Selector for a Cluster in rds to populate clusterIdentifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterIdentifierSelector"
    )]
    #[builder(default)]
    pub cluster_identifier_selector: Option<ClusterInstanceInitProviderClusterIdentifierSelector>,
    /// defined tags from the DB instance to snapshots of the DB instance. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "copyTagsToSnapshot"
    )]
    #[builder(default)]
    pub copy_tags_to_snapshot: Option<bool>,
    /// Instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customIamInstanceProfile"
    )]
    #[builder(default)]
    pub custom_iam_instance_profile: Option<String>,
    /// Name of the DB parameter group to associate with this instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbParameterGroupName"
    )]
    #[builder(default)]
    pub db_parameter_group_name: Option<String>,
    /// Reference to a ParameterGroup in rds to populate dbParameterGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbParameterGroupNameRef"
    )]
    #[builder(default)]
    pub db_parameter_group_name_ref: Option<ClusterInstanceInitProviderDbParameterGroupNameRef>,
    /// Selector for a ParameterGroup in rds to populate dbParameterGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbParameterGroupNameSelector"
    )]
    #[builder(default)]
    pub db_parameter_group_name_selector:
        Option<ClusterInstanceInitProviderDbParameterGroupNameSelector>,
    /// Specifies the DB subnet group to associate with this DB instance. The default behavior varies depending on whether db_subnet_group_name is specified. Please refer to official AWS documentation to understand how db_subnet_group_name and publicly_accessible parameters affect DB instance behaviour. NOTE: This must match the db_subnet_group_name of the attached aws_rds_cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupName"
    )]
    #[builder(default)]
    pub db_subnet_group_name: Option<String>,
    /// Reference to a SubnetGroup in rds to populate dbSubnetGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupNameRef"
    )]
    #[builder(default)]
    pub db_subnet_group_name_ref: Option<ClusterInstanceInitProviderDbSubnetGroupNameRef>,
    /// Selector for a SubnetGroup in rds to populate dbSubnetGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupNameSelector"
    )]
    #[builder(default)]
    pub db_subnet_group_name_selector: Option<ClusterInstanceInitProviderDbSubnetGroupNameSelector>,
    /// Name of the database engine to be used for the RDS cluster instance.
    /// Valid Values: aurora-mysql, aurora-postgresql, mysql, postgres.(Note that mysql and postgres are Multi-AZ RDS clusters).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub engine: Option<String>,
    /// Database engine version. Please note that to upgrade the engine_version of the instance, it must be done on the aws_rds_cluster engine_version. Trying to upgrade in aws_cluster_instance will not update the engine_version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersion"
    )]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// Forces an instance to be destroyed when a part of a read replica cluster. Note: will promote the read replica to a standalone cluster before instance deletion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDestroy"
    )]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// Instance class to use. For details on CPU and memory, see Scaling Aurora DB Instances. Aurora uses db.* instance classes/types. Please see AWS Documentation for currently available instance classes and complete details. For Aurora Serverless v2 use db.serverless.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceClass"
    )]
    #[builder(default)]
    pub instance_class: Option<String>,
    /// Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringInterval"
    )]
    #[builder(default)]
    pub monitoring_interval: Option<f64>,
    /// ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. You can find more information on the AWS Documentation what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringRoleArn"
    )]
    #[builder(default)]
    pub monitoring_role_arn: Option<String>,
    /// Reference to a Role in iam to populate monitoringRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringRoleArnRef"
    )]
    #[builder(default)]
    pub monitoring_role_arn_ref: Option<ClusterInstanceInitProviderMonitoringRoleArnRef>,
    /// Selector for a Role in iam to populate monitoringRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringRoleArnSelector"
    )]
    #[builder(default)]
    pub monitoring_role_arn_selector: Option<ClusterInstanceInitProviderMonitoringRoleArnSelector>,
    /// Specifies whether Performance Insights is enabled or not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsEnabled"
    )]
    #[builder(default)]
    pub performance_insights_enabled: Option<bool>,
    /// ARN for the KMS key to encrypt Performance Insights data. When specifying performance_insights_kms_key_id, performance_insights_enabled needs to be set to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsKmsKeyId"
    )]
    #[builder(default)]
    pub performance_insights_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate performanceInsightsKmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsKmsKeyIdRef"
    )]
    #[builder(default)]
    pub performance_insights_kms_key_id_ref:
        Option<ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdRef>,
    /// Selector for a Key in kms to populate performanceInsightsKmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsKmsKeyIdSelector"
    )]
    #[builder(default)]
    pub performance_insights_kms_key_id_selector:
        Option<ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdSelector>,
    /// Amount of time in days to retain Performance Insights data. Valid values are 7, 731 (2 years) or a multiple of 31. When specifying performance_insights_retention_period, performance_insights_enabled needs to be set to true. Defaults to '7'.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsRetentionPeriod"
    )]
    #[builder(default)]
    pub performance_insights_retention_period: Option<f64>,
    /// Daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00". NOTE: If preferred_backup_window is set at the cluster level, this argument must be omitted.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredBackupWindow"
    )]
    #[builder(default)]
    pub preferred_backup_window: Option<String>,
    /// Window to perform maintenance in. Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredMaintenanceWindow"
    )]
    #[builder(default)]
    pub preferred_maintenance_window: Option<String>,
    /// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoted to writer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promotionTier"
    )]
    #[builder(default)]
    pub promotion_tier: Option<f64>,
    /// Bool to control if instance is publicly accessible. Default false. See the documentation on Creating DB Instances for more details on controlling this property.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publiclyAccessible"
    )]
    #[builder(default)]
    pub publicly_accessible: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a Cluster in rds to populate clusterIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderClusterIdentifierRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderClusterIdentifierRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderClusterIdentifierRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceInitProviderClusterIdentifierRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceInitProviderClusterIdentifierRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderClusterIdentifierRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderClusterIdentifierRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in rds to populate clusterIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderClusterIdentifierSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderClusterIdentifierSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderClusterIdentifierSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceInitProviderClusterIdentifierSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceInitProviderClusterIdentifierSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderClusterIdentifierSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderClusterIdentifierSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ParameterGroup in rds to populate dbParameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderDbParameterGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderDbParameterGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderDbParameterGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceInitProviderDbParameterGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceInitProviderDbParameterGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderDbParameterGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderDbParameterGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ParameterGroup in rds to populate dbParameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderDbParameterGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderDbParameterGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderDbParameterGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceInitProviderDbParameterGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceInitProviderDbParameterGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderDbParameterGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderDbParameterGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a SubnetGroup in rds to populate dbSubnetGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderDbSubnetGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderDbSubnetGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderDbSubnetGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceInitProviderDbSubnetGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceInitProviderDbSubnetGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderDbSubnetGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderDbSubnetGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SubnetGroup in rds to populate dbSubnetGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderDbSubnetGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderDbSubnetGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderDbSubnetGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceInitProviderDbSubnetGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceInitProviderDbSubnetGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderDbSubnetGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderDbSubnetGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate monitoringRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderMonitoringRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderMonitoringRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderMonitoringRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceInitProviderMonitoringRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceInitProviderMonitoringRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderMonitoringRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderMonitoringRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate monitoringRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderMonitoringRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderMonitoringRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderMonitoringRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceInitProviderMonitoringRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceInitProviderMonitoringRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderMonitoringRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderMonitoringRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate performanceInsightsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate performanceInsightsKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceInitProviderPerformanceInsightsKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ClusterInstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ClusterInstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ClusterInstanceStatus defines the observed state of ClusterInstance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<ClusterInstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInstanceStatusAtProvider {
    /// Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default isfalse.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applyImmediately"
    )]
    #[builder(default)]
    pub apply_immediately: Option<bool>,
    /// Amazon Resource Name (ARN) of cluster instance
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. Default true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoMinorVersionUpgrade"
    )]
    #[builder(default)]
    pub auto_minor_version_upgrade: Option<bool>,
    /// EC2 Availability Zone that the DB instance is created in. See docs about the details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZone"
    )]
    #[builder(default)]
    pub availability_zone: Option<String>,
    /// Identifier of the CA certificate for the DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "caCertIdentifier"
    )]
    #[builder(default)]
    pub ca_cert_identifier: Option<String>,
    /// Identifier of the aws_rds_cluster in which to launch this instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterIdentifier"
    )]
    #[builder(default)]
    pub cluster_identifier: Option<String>,
    /// defined tags from the DB instance to snapshots of the DB instance. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "copyTagsToSnapshot"
    )]
    #[builder(default)]
    pub copy_tags_to_snapshot: Option<bool>,
    /// Instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customIamInstanceProfile"
    )]
    #[builder(default)]
    pub custom_iam_instance_profile: Option<String>,
    /// Name of the DB parameter group to associate with this instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbParameterGroupName"
    )]
    #[builder(default)]
    pub db_parameter_group_name: Option<String>,
    /// Specifies the DB subnet group to associate with this DB instance. The default behavior varies depending on whether db_subnet_group_name is specified. Please refer to official AWS documentation to understand how db_subnet_group_name and publicly_accessible parameters affect DB instance behaviour. NOTE: This must match the db_subnet_group_name of the attached aws_rds_cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupName"
    )]
    #[builder(default)]
    pub db_subnet_group_name: Option<String>,
    /// Region-unique, immutable identifier for the DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbiResourceId"
    )]
    #[builder(default)]
    pub dbi_resource_id: Option<String>,
    /// DNS address for this instance. May not be writable
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub endpoint: Option<String>,
    /// Name of the database engine to be used for the RDS cluster instance.
    /// Valid Values: aurora-mysql, aurora-postgresql, mysql, postgres.(Note that mysql and postgres are Multi-AZ RDS clusters).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub engine: Option<String>,
    /// Database engine version. Please note that to upgrade the engine_version of the instance, it must be done on the aws_rds_cluster engine_version. Trying to upgrade in aws_cluster_instance will not update the engine_version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersion"
    )]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// Database engine version
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersionActual"
    )]
    #[builder(default)]
    pub engine_version_actual: Option<String>,
    /// Forces an instance to be destroyed when a part of a read replica cluster. Note: will promote the read replica to a standalone cluster before instance deletion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDestroy"
    )]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// Instance identifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Instance class to use. For details on CPU and memory, see Scaling Aurora DB Instances. Aurora uses db.* instance classes/types. Please see AWS Documentation for currently available instance classes and complete details. For Aurora Serverless v2 use db.serverless.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceClass"
    )]
    #[builder(default)]
    pub instance_class: Option<String>,
    /// ARN for the KMS encryption key if one is set to the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringInterval"
    )]
    #[builder(default)]
    pub monitoring_interval: Option<f64>,
    /// ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. You can find more information on the AWS Documentation what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitoringRoleArn"
    )]
    #[builder(default)]
    pub monitoring_role_arn: Option<String>,
    /// Network type of the DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkType"
    )]
    #[builder(default)]
    pub network_type: Option<String>,
    /// Specifies whether Performance Insights is enabled or not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsEnabled"
    )]
    #[builder(default)]
    pub performance_insights_enabled: Option<bool>,
    /// ARN for the KMS key to encrypt Performance Insights data. When specifying performance_insights_kms_key_id, performance_insights_enabled needs to be set to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsKmsKeyId"
    )]
    #[builder(default)]
    pub performance_insights_kms_key_id: Option<String>,
    /// Amount of time in days to retain Performance Insights data. Valid values are 7, 731 (2 years) or a multiple of 31. When specifying performance_insights_retention_period, performance_insights_enabled needs to be set to true. Defaults to '7'.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "performanceInsightsRetentionPeriod"
    )]
    #[builder(default)]
    pub performance_insights_retention_period: Option<f64>,
    /// Database port
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00". NOTE: If preferred_backup_window is set at the cluster level, this argument must be omitted.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredBackupWindow"
    )]
    #[builder(default)]
    pub preferred_backup_window: Option<String>,
    /// Window to perform maintenance in. Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredMaintenanceWindow"
    )]
    #[builder(default)]
    pub preferred_maintenance_window: Option<String>,
    /// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoted to writer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promotionTier"
    )]
    #[builder(default)]
    pub promotion_tier: Option<f64>,
    /// Bool to control if instance is publicly accessible. Default false. See the documentation on Creating DB Instances for more details on controlling this property.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publiclyAccessible"
    )]
    #[builder(default)]
    pub publicly_accessible: Option<bool>,
    /// Specifies whether the DB cluster is encrypted.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageEncrypted"
    )]
    #[builder(default)]
    pub storage_encrypted: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// – Boolean indicating if this instance is writable. False indicates this instance is a read replica.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub writer: Option<bool>,
}

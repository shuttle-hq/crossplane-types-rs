// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// DomainSpec defines the desired state of Domain
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "opensearch.aws.upbound.io",
    version = "v1beta2",
    kind = "Domain",
    plural = "domains"
)]
#[kube(status = "DomainStatus")]
pub struct DomainSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<DomainDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DomainForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<DomainInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<DomainProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<DomainPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<DomainWriteConnectionSecretToRef>,
}

/// DomainSpec defines the desired state of Domain
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProvider {
    /// Key-value string pairs to specify advanced configuration options.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedOptions"
    )]
    #[builder(default)]
    pub advanced_options: Option<HashMap<String, String>>,
    /// Configuration block for fine-grained access control. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedSecurityOptions"
    )]
    #[builder(default)]
    pub advanced_security_options: Option<DomainForProviderAdvancedSecurityOptions>,
    /// Configuration block for the Auto-Tune options of the domain. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoTuneOptions"
    )]
    #[builder(default)]
    pub auto_tune_options: Option<DomainForProviderAutoTuneOptions>,
    /// Configuration block for the cluster of the domain. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterConfig"
    )]
    #[builder(default)]
    pub cluster_config: Option<DomainForProviderClusterConfig>,
    /// Configuration block for authenticating dashboard with Cognito. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cognitoOptions"
    )]
    #[builder(default)]
    pub cognito_options: Option<DomainForProviderCognitoOptions>,
    /// Configuration block for domain endpoint HTTP(S) related options. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainEndpointOptions"
    )]
    #[builder(default)]
    pub domain_endpoint_options: Option<DomainForProviderDomainEndpointOptions>,
    /// Name of the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// Configuration block for EBS related options, may be required based on chosen instance size. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsOptions"
    )]
    #[builder(default)]
    pub ebs_options: Option<DomainForProviderEbsOptions>,
    /// Configuration block for encrypt at rest options. Only available for certain instance types. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptAtRest"
    )]
    #[builder(default)]
    pub encrypt_at_rest: Option<DomainForProviderEncryptAtRest>,
    /// while Elasticsearch has elasticsearch_version
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersion"
    )]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// The IP address type for the endpoint. Valid values are ipv4 and dualstack.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddressType"
    )]
    #[builder(default)]
    pub ip_address_type: Option<String>,
    /// Configuration block for publishing slow and application logs to CloudWatch Logs. This block can be declared multiple times, for each log_type, within the same resource. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logPublishingOptions"
    )]
    #[builder(default)]
    pub log_publishing_options: Option<Vec<DomainForProviderLogPublishingOptions>>,
    /// Configuration block for node-to-node encryption options. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeToNodeEncryption"
    )]
    #[builder(default)]
    pub node_to_node_encryption: Option<DomainForProviderNodeToNodeEncryption>,
    /// Configuration to add Off Peak update options. (documentation). Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "offPeakWindowOptions"
    )]
    #[builder(default)]
    pub off_peak_window_options: Option<DomainForProviderOffPeakWindowOptions>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Configuration block for snapshot related options. Detailed below. DEPRECATED. For domains running OpenSearch 5.3 and later, Amazon OpenSearch takes hourly automated snapshots, making this setting irrelevant. For domains running earlier versions, OpenSearch takes daily automated snapshots.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotOptions"
    )]
    #[builder(default)]
    pub snapshot_options: Option<DomainForProviderSnapshotOptions>,
    /// Software update options for the domain. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "softwareUpdateOptions"
    )]
    #[builder(default)]
    pub software_update_options: Option<DomainForProviderSoftwareUpdateOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block for VPC related options. Adding or removing this configuration forces a new resource (documentation). Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcOptions"
    )]
    #[builder(default)]
    pub vpc_options: Option<DomainForProviderVpcOptions>,
}

/// Configuration block for fine-grained access control. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderAdvancedSecurityOptions {
    /// Whether Anonymous auth is enabled. Enables fine-grained access control on an existing domain. Ignored unless advanced_security_options are enabled. Can only be enabled on an existing domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anonymousAuthEnabled"
    )]
    #[builder(default)]
    pub anonymous_auth_enabled: Option<bool>,
    /// Whether advanced security is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Whether the internal user database is enabled. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "internalUserDatabaseEnabled"
    )]
    #[builder(default)]
    pub internal_user_database_enabled: Option<bool>,
    /// Configuration block for the main user. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserOptions"
    )]
    #[builder(default)]
    pub master_user_options: Option<DomainForProviderAdvancedSecurityOptionsMasterUserOptions>,
}

/// Configuration block for the main user. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderAdvancedSecurityOptionsMasterUserOptions {
    /// ARN for the main user. Only specify if internal_user_database_enabled is not set or set to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserArn"
    )]
    #[builder(default)]
    pub master_user_arn: Option<String>,
    /// Main user's username, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if internal_user_database_enabled is set to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserName"
    )]
    #[builder(default)]
    pub master_user_name: Option<String>,
    /// Main user's password, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if internal_user_database_enabled is set to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserPasswordSecretRef"
    )]
    #[builder(default)]
    pub master_user_password_secret_ref: Option<
        DomainForProviderAdvancedSecurityOptionsMasterUserOptionsMasterUserPasswordSecretRef,
    >,
}

/// Main user's password, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if internal_user_database_enabled is set to true.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderAdvancedSecurityOptionsMasterUserOptionsMasterUserPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block for the Auto-Tune options of the domain. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderAutoTuneOptions {
    /// Auto-Tune desired state for the domain. Valid values: ENABLED or DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredState"
    )]
    #[builder(default)]
    pub desired_state: Option<String>,
    /// Configuration block for Auto-Tune maintenance windows. Can be specified multiple times for each maintenance window. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceSchedule"
    )]
    #[builder(default)]
    pub maintenance_schedule: Option<Vec<DomainForProviderAutoTuneOptionsMaintenanceSchedule>>,
    /// Whether to roll back to default Auto-Tune settings when disabling Auto-Tune. Valid values: DEFAULT_ROLLBACK or NO_ROLLBACK.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollbackOnDisable"
    )]
    #[builder(default)]
    pub rollback_on_disable: Option<String>,
    /// Whether to schedule Auto-Tune optimizations that require blue/green deployments during the domain's configured daily off-peak window. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useOffPeakWindow"
    )]
    #[builder(default)]
    pub use_off_peak_window: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderAutoTuneOptionsMaintenanceSchedule {
    /// A cron expression specifying the recurrence pattern for an Auto-Tune maintenance schedule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cronExpressionForRecurrence"
    )]
    #[builder(default)]
    pub cron_expression_for_recurrence: Option<String>,
    /// Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub duration: Option<DomainForProviderAutoTuneOptionsMaintenanceScheduleDuration>,
    /// Date and time at which to start the Auto-Tune maintenance schedule in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startAt")]
    #[builder(default)]
    pub start_at: Option<String>,
}

/// Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderAutoTuneOptionsMaintenanceScheduleDuration {
    /// Unit of time specifying the duration of an Auto-Tune maintenance window. Valid values: HOURS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// An integer specifying the value of the duration of an Auto-Tune maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Configuration block for the cluster of the domain. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderClusterConfig {
    /// Configuration block containing cold storage configuration. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coldStorageOptions"
    )]
    #[builder(default)]
    pub cold_storage_options: Option<DomainForProviderClusterConfigColdStorageOptions>,
    /// Number of dedicated main nodes in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedMasterCount"
    )]
    #[builder(default)]
    pub dedicated_master_count: Option<f64>,
    /// Whether dedicated main nodes are enabled for the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedMasterEnabled"
    )]
    #[builder(default)]
    pub dedicated_master_enabled: Option<bool>,
    /// Instance type of the dedicated main nodes in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedMasterType"
    )]
    #[builder(default)]
    pub dedicated_master_type: Option<String>,
    /// Number of instances in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceCount"
    )]
    #[builder(default)]
    pub instance_count: Option<f64>,
    /// Instance type of data nodes in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Whether a multi-AZ domain is turned on with a standby AZ. For more information, see Configuring a multi-AZ domain in Amazon OpenSearch Service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiAzWithStandbyEnabled"
    )]
    #[builder(default)]
    pub multi_az_with_standby_enabled: Option<bool>,
    /// Number of warm nodes in the cluster. Valid values are between 2 and 150. warm_count can be only and must be set when warm_enabled is set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmCount")]
    #[builder(default)]
    pub warm_count: Option<f64>,
    /// Whether to enable warm storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "warmEnabled"
    )]
    #[builder(default)]
    pub warm_enabled: Option<bool>,
    /// Instance type for the OpenSearch cluster's warm nodes. Valid values are ultrawarm1.medium.search, ultrawarm1.large.search and ultrawarm1.xlarge.search. warm_type can be only and must be set when warm_enabled is set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmType")]
    #[builder(default)]
    pub warm_type: Option<String>,
    /// Configuration block containing zone awareness settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zoneAwarenessConfig"
    )]
    #[builder(default)]
    pub zone_awareness_config: Option<DomainForProviderClusterConfigZoneAwarenessConfig>,
    /// Whether zone awareness is enabled, set to true for multi-az deployment. To enable awareness with three Availability Zones, the availability_zone_count within the zone_awareness_config must be set to 3.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zoneAwarenessEnabled"
    )]
    #[builder(default)]
    pub zone_awareness_enabled: Option<bool>,
}

/// Configuration block containing cold storage configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderClusterConfigColdStorageOptions {
    /// Boolean to enable cold storage for an OpenSearch domain. Defaults to false. Master and ultrawarm nodes must be enabled for cold storage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Configuration block containing zone awareness settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderClusterConfigZoneAwarenessConfig {
    /// Number of Availability Zones for the domain to use with zone_awareness_enabled. Defaults to 2. Valid values: 2 or 3.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZoneCount"
    )]
    #[builder(default)]
    pub availability_zone_count: Option<f64>,
}

/// Configuration block for authenticating dashboard with Cognito. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderCognitoOptions {
    /// Whether Amazon Cognito authentication with Dashboard is enabled or not. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// ID of the Cognito Identity Pool to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityPoolId"
    )]
    #[builder(default)]
    pub identity_pool_id: Option<String>,
    /// ARN of the IAM role that has the AmazonOpenSearchServiceCognitoAccess policy attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// ID of the Cognito User Pool to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userPoolId"
    )]
    #[builder(default)]
    pub user_pool_id: Option<String>,
}

/// Configuration block for domain endpoint HTTP(S) related options. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDomainEndpointOptions {
    /// Fully qualified domain for your custom endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEndpoint"
    )]
    #[builder(default)]
    pub custom_endpoint: Option<String>,
    /// ACM certificate ARN for your custom endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEndpointCertificateArn"
    )]
    #[builder(default)]
    pub custom_endpoint_certificate_arn: Option<String>,
    /// Whether to enable custom endpoint for the OpenSearch domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEndpointEnabled"
    )]
    #[builder(default)]
    pub custom_endpoint_enabled: Option<bool>,
    /// Whether or not to require HTTPS. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enforceHttps"
    )]
    #[builder(default)]
    pub enforce_https: Option<bool>,
    /// Name of the TLS security policy that needs to be applied to the HTTPS endpoint. For valid values, refer to the AWS documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tlsSecurityPolicy"
    )]
    #[builder(default)]
    pub tls_security_policy: Option<String>,
}

/// Configuration block for EBS related options, may be required based on chosen instance size. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderEbsOptions {
    /// Whether EBS volumes are attached to data nodes in the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsEnabled"
    )]
    #[builder(default)]
    pub ebs_enabled: Option<bool>,
    /// Baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the GP3 and Provisioned IOPS EBS volume types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Size of EBS volumes attached to data nodes (in GiB).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// Type of EBS volumes attached to data nodes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Configuration block for encrypt at rest options. Only available for certain instance types. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderEncryptAtRest {
    /// Whether to enable encryption at rest. If the encrypt_at_rest block is not provided then this defaults to false. Enabling encryption on new domains requires an engine_version of OpenSearch_X.Y or Elasticsearch_5.1 or greater.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// KMS key ARN to encrypt the Elasticsearch domain with. If not specified then it defaults to using the aws/es service KMS key. Note that KMS will accept a KMS key ID but will return the key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default)]
    pub kms_key_id_ref: Option<DomainForProviderEncryptAtRestKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default)]
    pub kms_key_id_selector: Option<DomainForProviderEncryptAtRestKmsKeyIdSelector>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderEncryptAtRestKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderEncryptAtRestKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderEncryptAtRestKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderEncryptAtRestKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderEncryptAtRestKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderEncryptAtRestKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderEncryptAtRestKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderEncryptAtRestKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderEncryptAtRestKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderEncryptAtRestKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderEncryptAtRestKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderEncryptAtRestKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderEncryptAtRestKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderEncryptAtRestKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderLogPublishingOptions {
    /// ARN of the Cloudwatch log group to which log needs to be published.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupArn"
    )]
    #[builder(default)]
    pub cloudwatch_log_group_arn: Option<String>,
    /// Reference to a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupArnRef"
    )]
    #[builder(default)]
    pub cloudwatch_log_group_arn_ref:
        Option<DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnRef>,
    /// Selector for a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupArnSelector"
    )]
    #[builder(default)]
    pub cloudwatch_log_group_arn_selector:
        Option<DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnSelector>,
    /// Whether given log publishing option is enabled or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Type of OpenSearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS, AUDIT_LOGS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    #[builder(default)]
    pub log_type: Option<String>,
}

/// Reference to a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for node-to-node encryption options. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderNodeToNodeEncryption {
    /// Whether to enable node-to-node encryption. If the node_to_node_encryption block is not provided then this defaults to false. Enabling node-to-node encryption of a new domain requires an engine_version of OpenSearch_X.Y or Elasticsearch_6.0 or greater.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Configuration to add Off Peak update options. (documentation). Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderOffPeakWindowOptions {
    /// Enabled disabled toggle for off-peak update window.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "offPeakWindow"
    )]
    #[builder(default)]
    pub off_peak_window: Option<DomainForProviderOffPeakWindowOptionsOffPeakWindow>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderOffPeakWindowOptionsOffPeakWindow {
    /// 10h window for updates
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "windowStartTime"
    )]
    #[builder(default)]
    pub window_start_time:
        Option<DomainForProviderOffPeakWindowOptionsOffPeakWindowWindowStartTime>,
}

/// 10h window for updates
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderOffPeakWindowOptionsOffPeakWindowWindowStartTime {
    /// Starting hour of the 10-hour window for updates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hours: Option<f64>,
    /// Starting minute of the 10-hour window for updates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub minutes: Option<f64>,
}

/// Configuration block for snapshot related options. Detailed below. DEPRECATED. For domains running OpenSearch 5.3 and later, Amazon OpenSearch takes hourly automated snapshots, making this setting irrelevant. For domains running earlier versions, OpenSearch takes daily automated snapshots.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderSnapshotOptions {
    /// Hour during which the service takes an automated daily snapshot of the indices in the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automatedSnapshotStartHour"
    )]
    #[builder(default)]
    pub automated_snapshot_start_hour: Option<f64>,
}

/// Software update options for the domain. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderSoftwareUpdateOptions {
    /// Whether automatic service software updates are enabled for the domain. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoSoftwareUpdateEnabled"
    )]
    #[builder(default)]
    pub auto_software_update_enabled: Option<bool>,
}

/// Configuration block for VPC related options. Adding or removing this configuration forces a new resource (documentation). Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcOptions {
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdRefs"
    )]
    #[builder(default)]
    pub security_group_id_refs: Option<Vec<DomainForProviderVpcOptionsSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdSelector"
    )]
    #[builder(default)]
    pub security_group_id_selector: Option<DomainForProviderVpcOptionsSecurityGroupIdSelector>,
    /// List of VPC Security Group IDs to be applied to the OpenSearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRefs"
    )]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<DomainForProviderVpcOptionsSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default)]
    pub subnet_id_selector: Option<DomainForProviderVpcOptionsSubnetIdSelector>,
    /// List of VPC Subnet IDs for the OpenSearch domain endpoints to be created in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcOptionsSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderVpcOptionsSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcOptionsSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderVpcOptionsSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderVpcOptionsSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcOptionsSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcOptionsSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcOptionsSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderVpcOptionsSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcOptionsSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderVpcOptionsSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderVpcOptionsSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcOptionsSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcOptionsSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcOptionsSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderVpcOptionsSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcOptionsSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderVpcOptionsSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderVpcOptionsSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcOptionsSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcOptionsSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcOptionsSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderVpcOptionsSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcOptionsSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderVpcOptionsSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderVpcOptionsSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcOptionsSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcOptionsSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProvider {
    /// Key-value string pairs to specify advanced configuration options.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedOptions"
    )]
    #[builder(default)]
    pub advanced_options: Option<HashMap<String, String>>,
    /// Configuration block for fine-grained access control. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedSecurityOptions"
    )]
    #[builder(default)]
    pub advanced_security_options: Option<DomainInitProviderAdvancedSecurityOptions>,
    /// Configuration block for the Auto-Tune options of the domain. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoTuneOptions"
    )]
    #[builder(default)]
    pub auto_tune_options: Option<DomainInitProviderAutoTuneOptions>,
    /// Configuration block for the cluster of the domain. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterConfig"
    )]
    #[builder(default)]
    pub cluster_config: Option<DomainInitProviderClusterConfig>,
    /// Configuration block for authenticating dashboard with Cognito. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cognitoOptions"
    )]
    #[builder(default)]
    pub cognito_options: Option<DomainInitProviderCognitoOptions>,
    /// Configuration block for domain endpoint HTTP(S) related options. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainEndpointOptions"
    )]
    #[builder(default)]
    pub domain_endpoint_options: Option<DomainInitProviderDomainEndpointOptions>,
    /// Name of the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// Configuration block for EBS related options, may be required based on chosen instance size. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsOptions"
    )]
    #[builder(default)]
    pub ebs_options: Option<DomainInitProviderEbsOptions>,
    /// Configuration block for encrypt at rest options. Only available for certain instance types. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptAtRest"
    )]
    #[builder(default)]
    pub encrypt_at_rest: Option<DomainInitProviderEncryptAtRest>,
    /// while Elasticsearch has elasticsearch_version
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersion"
    )]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// The IP address type for the endpoint. Valid values are ipv4 and dualstack.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddressType"
    )]
    #[builder(default)]
    pub ip_address_type: Option<String>,
    /// Configuration block for publishing slow and application logs to CloudWatch Logs. This block can be declared multiple times, for each log_type, within the same resource. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logPublishingOptions"
    )]
    #[builder(default)]
    pub log_publishing_options: Option<Vec<DomainInitProviderLogPublishingOptions>>,
    /// Configuration block for node-to-node encryption options. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeToNodeEncryption"
    )]
    #[builder(default)]
    pub node_to_node_encryption: Option<DomainInitProviderNodeToNodeEncryption>,
    /// Configuration to add Off Peak update options. (documentation). Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "offPeakWindowOptions"
    )]
    #[builder(default)]
    pub off_peak_window_options: Option<DomainInitProviderOffPeakWindowOptions>,
    /// Configuration block for snapshot related options. Detailed below. DEPRECATED. For domains running OpenSearch 5.3 and later, Amazon OpenSearch takes hourly automated snapshots, making this setting irrelevant. For domains running earlier versions, OpenSearch takes daily automated snapshots.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotOptions"
    )]
    #[builder(default)]
    pub snapshot_options: Option<DomainInitProviderSnapshotOptions>,
    /// Software update options for the domain. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "softwareUpdateOptions"
    )]
    #[builder(default)]
    pub software_update_options: Option<DomainInitProviderSoftwareUpdateOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block for VPC related options. Adding or removing this configuration forces a new resource (documentation). Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcOptions"
    )]
    #[builder(default)]
    pub vpc_options: Option<DomainInitProviderVpcOptions>,
}

/// Configuration block for fine-grained access control. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderAdvancedSecurityOptions {
    /// Whether Anonymous auth is enabled. Enables fine-grained access control on an existing domain. Ignored unless advanced_security_options are enabled. Can only be enabled on an existing domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anonymousAuthEnabled"
    )]
    #[builder(default)]
    pub anonymous_auth_enabled: Option<bool>,
    /// Whether advanced security is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Whether the internal user database is enabled. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "internalUserDatabaseEnabled"
    )]
    #[builder(default)]
    pub internal_user_database_enabled: Option<bool>,
    /// Configuration block for the main user. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserOptions"
    )]
    #[builder(default)]
    pub master_user_options: Option<DomainInitProviderAdvancedSecurityOptionsMasterUserOptions>,
}

/// Configuration block for the main user. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderAdvancedSecurityOptionsMasterUserOptions {
    /// ARN for the main user. Only specify if internal_user_database_enabled is not set or set to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserArn"
    )]
    #[builder(default)]
    pub master_user_arn: Option<String>,
    /// Main user's username, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if internal_user_database_enabled is set to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserName"
    )]
    #[builder(default)]
    pub master_user_name: Option<String>,
    /// Main user's password, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if internal_user_database_enabled is set to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserPasswordSecretRef"
    )]
    #[builder(default)]
    pub master_user_password_secret_ref: Option<
        DomainInitProviderAdvancedSecurityOptionsMasterUserOptionsMasterUserPasswordSecretRef,
    >,
}

/// Main user's password, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if internal_user_database_enabled is set to true.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderAdvancedSecurityOptionsMasterUserOptionsMasterUserPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block for the Auto-Tune options of the domain. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderAutoTuneOptions {
    /// Auto-Tune desired state for the domain. Valid values: ENABLED or DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredState"
    )]
    #[builder(default)]
    pub desired_state: Option<String>,
    /// Configuration block for Auto-Tune maintenance windows. Can be specified multiple times for each maintenance window. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceSchedule"
    )]
    #[builder(default)]
    pub maintenance_schedule: Option<Vec<DomainInitProviderAutoTuneOptionsMaintenanceSchedule>>,
    /// Whether to roll back to default Auto-Tune settings when disabling Auto-Tune. Valid values: DEFAULT_ROLLBACK or NO_ROLLBACK.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollbackOnDisable"
    )]
    #[builder(default)]
    pub rollback_on_disable: Option<String>,
    /// Whether to schedule Auto-Tune optimizations that require blue/green deployments during the domain's configured daily off-peak window. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useOffPeakWindow"
    )]
    #[builder(default)]
    pub use_off_peak_window: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderAutoTuneOptionsMaintenanceSchedule {
    /// A cron expression specifying the recurrence pattern for an Auto-Tune maintenance schedule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cronExpressionForRecurrence"
    )]
    #[builder(default)]
    pub cron_expression_for_recurrence: Option<String>,
    /// Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub duration: Option<DomainInitProviderAutoTuneOptionsMaintenanceScheduleDuration>,
    /// Date and time at which to start the Auto-Tune maintenance schedule in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startAt")]
    #[builder(default)]
    pub start_at: Option<String>,
}

/// Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderAutoTuneOptionsMaintenanceScheduleDuration {
    /// Unit of time specifying the duration of an Auto-Tune maintenance window. Valid values: HOURS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// An integer specifying the value of the duration of an Auto-Tune maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Configuration block for the cluster of the domain. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderClusterConfig {
    /// Configuration block containing cold storage configuration. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coldStorageOptions"
    )]
    #[builder(default)]
    pub cold_storage_options: Option<DomainInitProviderClusterConfigColdStorageOptions>,
    /// Number of dedicated main nodes in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedMasterCount"
    )]
    #[builder(default)]
    pub dedicated_master_count: Option<f64>,
    /// Whether dedicated main nodes are enabled for the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedMasterEnabled"
    )]
    #[builder(default)]
    pub dedicated_master_enabled: Option<bool>,
    /// Instance type of the dedicated main nodes in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedMasterType"
    )]
    #[builder(default)]
    pub dedicated_master_type: Option<String>,
    /// Number of instances in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceCount"
    )]
    #[builder(default)]
    pub instance_count: Option<f64>,
    /// Instance type of data nodes in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Whether a multi-AZ domain is turned on with a standby AZ. For more information, see Configuring a multi-AZ domain in Amazon OpenSearch Service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiAzWithStandbyEnabled"
    )]
    #[builder(default)]
    pub multi_az_with_standby_enabled: Option<bool>,
    /// Number of warm nodes in the cluster. Valid values are between 2 and 150. warm_count can be only and must be set when warm_enabled is set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmCount")]
    #[builder(default)]
    pub warm_count: Option<f64>,
    /// Whether to enable warm storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "warmEnabled"
    )]
    #[builder(default)]
    pub warm_enabled: Option<bool>,
    /// Instance type for the OpenSearch cluster's warm nodes. Valid values are ultrawarm1.medium.search, ultrawarm1.large.search and ultrawarm1.xlarge.search. warm_type can be only and must be set when warm_enabled is set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmType")]
    #[builder(default)]
    pub warm_type: Option<String>,
    /// Configuration block containing zone awareness settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zoneAwarenessConfig"
    )]
    #[builder(default)]
    pub zone_awareness_config: Option<DomainInitProviderClusterConfigZoneAwarenessConfig>,
    /// Whether zone awareness is enabled, set to true for multi-az deployment. To enable awareness with three Availability Zones, the availability_zone_count within the zone_awareness_config must be set to 3.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zoneAwarenessEnabled"
    )]
    #[builder(default)]
    pub zone_awareness_enabled: Option<bool>,
}

/// Configuration block containing cold storage configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderClusterConfigColdStorageOptions {
    /// Boolean to enable cold storage for an OpenSearch domain. Defaults to false. Master and ultrawarm nodes must be enabled for cold storage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Configuration block containing zone awareness settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderClusterConfigZoneAwarenessConfig {
    /// Number of Availability Zones for the domain to use with zone_awareness_enabled. Defaults to 2. Valid values: 2 or 3.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZoneCount"
    )]
    #[builder(default)]
    pub availability_zone_count: Option<f64>,
}

/// Configuration block for authenticating dashboard with Cognito. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderCognitoOptions {
    /// Whether Amazon Cognito authentication with Dashboard is enabled or not. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// ID of the Cognito Identity Pool to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityPoolId"
    )]
    #[builder(default)]
    pub identity_pool_id: Option<String>,
    /// ARN of the IAM role that has the AmazonOpenSearchServiceCognitoAccess policy attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// ID of the Cognito User Pool to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userPoolId"
    )]
    #[builder(default)]
    pub user_pool_id: Option<String>,
}

/// Configuration block for domain endpoint HTTP(S) related options. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDomainEndpointOptions {
    /// Fully qualified domain for your custom endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEndpoint"
    )]
    #[builder(default)]
    pub custom_endpoint: Option<String>,
    /// ACM certificate ARN for your custom endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEndpointCertificateArn"
    )]
    #[builder(default)]
    pub custom_endpoint_certificate_arn: Option<String>,
    /// Whether to enable custom endpoint for the OpenSearch domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEndpointEnabled"
    )]
    #[builder(default)]
    pub custom_endpoint_enabled: Option<bool>,
    /// Whether or not to require HTTPS. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enforceHttps"
    )]
    #[builder(default)]
    pub enforce_https: Option<bool>,
    /// Name of the TLS security policy that needs to be applied to the HTTPS endpoint. For valid values, refer to the AWS documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tlsSecurityPolicy"
    )]
    #[builder(default)]
    pub tls_security_policy: Option<String>,
}

/// Configuration block for EBS related options, may be required based on chosen instance size. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderEbsOptions {
    /// Whether EBS volumes are attached to data nodes in the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsEnabled"
    )]
    #[builder(default)]
    pub ebs_enabled: Option<bool>,
    /// Baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the GP3 and Provisioned IOPS EBS volume types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Size of EBS volumes attached to data nodes (in GiB).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// Type of EBS volumes attached to data nodes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Configuration block for encrypt at rest options. Only available for certain instance types. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderEncryptAtRest {
    /// Whether to enable encryption at rest. If the encrypt_at_rest block is not provided then this defaults to false. Enabling encryption on new domains requires an engine_version of OpenSearch_X.Y or Elasticsearch_5.1 or greater.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// KMS key ARN to encrypt the Elasticsearch domain with. If not specified then it defaults to using the aws/es service KMS key. Note that KMS will accept a KMS key ID but will return the key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default)]
    pub kms_key_id_ref: Option<DomainInitProviderEncryptAtRestKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default)]
    pub kms_key_id_selector: Option<DomainInitProviderEncryptAtRestKmsKeyIdSelector>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderEncryptAtRestKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderEncryptAtRestKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderEncryptAtRestKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderEncryptAtRestKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderEncryptAtRestKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderEncryptAtRestKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderEncryptAtRestKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderEncryptAtRestKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderEncryptAtRestKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderEncryptAtRestKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderEncryptAtRestKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderEncryptAtRestKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderEncryptAtRestKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderEncryptAtRestKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderLogPublishingOptions {
    /// ARN of the Cloudwatch log group to which log needs to be published.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupArn"
    )]
    #[builder(default)]
    pub cloudwatch_log_group_arn: Option<String>,
    /// Reference to a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupArnRef"
    )]
    #[builder(default)]
    pub cloudwatch_log_group_arn_ref:
        Option<DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnRef>,
    /// Selector for a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupArnSelector"
    )]
    #[builder(default)]
    pub cloudwatch_log_group_arn_selector:
        Option<DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnSelector>,
    /// Whether given log publishing option is enabled or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Type of OpenSearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS, AUDIT_LOGS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    #[builder(default)]
    pub log_type: Option<String>,
}

/// Reference to a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderLogPublishingOptionsCloudwatchLogGroupArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for node-to-node encryption options. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderNodeToNodeEncryption {
    /// Whether to enable node-to-node encryption. If the node_to_node_encryption block is not provided then this defaults to false. Enabling node-to-node encryption of a new domain requires an engine_version of OpenSearch_X.Y or Elasticsearch_6.0 or greater.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Configuration to add Off Peak update options. (documentation). Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderOffPeakWindowOptions {
    /// Enabled disabled toggle for off-peak update window.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "offPeakWindow"
    )]
    #[builder(default)]
    pub off_peak_window: Option<DomainInitProviderOffPeakWindowOptionsOffPeakWindow>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderOffPeakWindowOptionsOffPeakWindow {
    /// 10h window for updates
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "windowStartTime"
    )]
    #[builder(default)]
    pub window_start_time:
        Option<DomainInitProviderOffPeakWindowOptionsOffPeakWindowWindowStartTime>,
}

/// 10h window for updates
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderOffPeakWindowOptionsOffPeakWindowWindowStartTime {
    /// Starting hour of the 10-hour window for updates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hours: Option<f64>,
    /// Starting minute of the 10-hour window for updates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub minutes: Option<f64>,
}

/// Configuration block for snapshot related options. Detailed below. DEPRECATED. For domains running OpenSearch 5.3 and later, Amazon OpenSearch takes hourly automated snapshots, making this setting irrelevant. For domains running earlier versions, OpenSearch takes daily automated snapshots.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderSnapshotOptions {
    /// Hour during which the service takes an automated daily snapshot of the indices in the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automatedSnapshotStartHour"
    )]
    #[builder(default)]
    pub automated_snapshot_start_hour: Option<f64>,
}

/// Software update options for the domain. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderSoftwareUpdateOptions {
    /// Whether automatic service software updates are enabled for the domain. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoSoftwareUpdateEnabled"
    )]
    #[builder(default)]
    pub auto_software_update_enabled: Option<bool>,
}

/// Configuration block for VPC related options. Adding or removing this configuration forces a new resource (documentation). Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcOptions {
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdRefs"
    )]
    #[builder(default)]
    pub security_group_id_refs: Option<Vec<DomainInitProviderVpcOptionsSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdSelector"
    )]
    #[builder(default)]
    pub security_group_id_selector: Option<DomainInitProviderVpcOptionsSecurityGroupIdSelector>,
    /// List of VPC Security Group IDs to be applied to the OpenSearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRefs"
    )]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<DomainInitProviderVpcOptionsSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default)]
    pub subnet_id_selector: Option<DomainInitProviderVpcOptionsSubnetIdSelector>,
    /// List of VPC Subnet IDs for the OpenSearch domain endpoints to be created in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcOptionsSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderVpcOptionsSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcOptionsSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderVpcOptionsSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderVpcOptionsSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcOptionsSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcOptionsSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcOptionsSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderVpcOptionsSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcOptionsSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderVpcOptionsSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderVpcOptionsSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcOptionsSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcOptionsSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcOptionsSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderVpcOptionsSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcOptionsSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderVpcOptionsSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderVpcOptionsSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcOptionsSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcOptionsSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcOptionsSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderVpcOptionsSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcOptionsSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderVpcOptionsSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderVpcOptionsSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcOptionsSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcOptionsSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<DomainPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<DomainPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DomainStatus defines the observed state of Domain.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<DomainStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProvider {
    /// , are prefaced with es: for both.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessPolicies"
    )]
    #[builder(default)]
    pub access_policies: Option<String>,
    /// Key-value string pairs to specify advanced configuration options.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedOptions"
    )]
    #[builder(default)]
    pub advanced_options: Option<HashMap<String, String>>,
    /// Configuration block for fine-grained access control. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedSecurityOptions"
    )]
    #[builder(default)]
    pub advanced_security_options: Option<DomainStatusAtProviderAdvancedSecurityOptions>,
    /// ARN of the domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Configuration block for the Auto-Tune options of the domain. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoTuneOptions"
    )]
    #[builder(default)]
    pub auto_tune_options: Option<DomainStatusAtProviderAutoTuneOptions>,
    /// Configuration block for the cluster of the domain. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterConfig"
    )]
    #[builder(default)]
    pub cluster_config: Option<DomainStatusAtProviderClusterConfig>,
    /// Configuration block for authenticating dashboard with Cognito. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cognitoOptions"
    )]
    #[builder(default)]
    pub cognito_options: Option<DomainStatusAtProviderCognitoOptions>,
    /// Domain-specific endpoint for Dashboard without https scheme.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dashboardEndpoint"
    )]
    #[builder(default)]
    pub dashboard_endpoint: Option<String>,
    /// V2 domain endpoint for Dashboard that works with both IPv4 and IPv6 addresses, without https scheme.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dashboardEndpointV2"
    )]
    #[builder(default)]
    pub dashboard_endpoint_v2: Option<String>,
    /// Configuration block for domain endpoint HTTP(S) related options. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainEndpointOptions"
    )]
    #[builder(default)]
    pub domain_endpoint_options: Option<DomainStatusAtProviderDomainEndpointOptions>,
    /// Dual stack hosted zone ID for the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainEndpointV2HostedZoneId"
    )]
    #[builder(default)]
    pub domain_endpoint_v2_hosted_zone_id: Option<String>,
    /// Unique identifier for the domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    #[builder(default)]
    pub domain_id: Option<String>,
    /// Name of the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// Configuration block for EBS related options, may be required based on chosen instance size. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsOptions"
    )]
    #[builder(default)]
    pub ebs_options: Option<DomainStatusAtProviderEbsOptions>,
    /// Configuration block for encrypt at rest options. Only available for certain instance types. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptAtRest"
    )]
    #[builder(default)]
    pub encrypt_at_rest: Option<DomainStatusAtProviderEncryptAtRest>,
    /// Domain-specific endpoint used to submit index, search, and data upload requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub endpoint: Option<String>,
    /// V2 domain endpoint that works with both IPv4 and IPv6 addresses, used to submit index, search, and data upload requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointV2"
    )]
    #[builder(default)]
    pub endpoint_v2: Option<String>,
    /// while Elasticsearch has elasticsearch_version
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersion"
    )]
    #[builder(default)]
    pub engine_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The IP address type for the endpoint. Valid values are ipv4 and dualstack.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddressType"
    )]
    #[builder(default)]
    pub ip_address_type: Option<String>,
    /// (Deprecated) Domain-specific endpoint for kibana without https scheme. Use the dashboard_endpoint attribute instead.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kibanaEndpoint"
    )]
    #[builder(default)]
    pub kibana_endpoint: Option<String>,
    /// Configuration block for publishing slow and application logs to CloudWatch Logs. This block can be declared multiple times, for each log_type, within the same resource. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logPublishingOptions"
    )]
    #[builder(default)]
    pub log_publishing_options: Option<Vec<DomainStatusAtProviderLogPublishingOptions>>,
    /// Configuration block for node-to-node encryption options. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeToNodeEncryption"
    )]
    #[builder(default)]
    pub node_to_node_encryption: Option<DomainStatusAtProviderNodeToNodeEncryption>,
    /// Configuration to add Off Peak update options. (documentation). Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "offPeakWindowOptions"
    )]
    #[builder(default)]
    pub off_peak_window_options: Option<DomainStatusAtProviderOffPeakWindowOptions>,
    /// Configuration block for snapshot related options. Detailed below. DEPRECATED. For domains running OpenSearch 5.3 and later, Amazon OpenSearch takes hourly automated snapshots, making this setting irrelevant. For domains running earlier versions, OpenSearch takes daily automated snapshots.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotOptions"
    )]
    #[builder(default)]
    pub snapshot_options: Option<DomainStatusAtProviderSnapshotOptions>,
    /// Software update options for the domain. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "softwareUpdateOptions"
    )]
    #[builder(default)]
    pub software_update_options: Option<DomainStatusAtProviderSoftwareUpdateOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Configuration block for VPC related options. Adding or removing this configuration forces a new resource (documentation). Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcOptions"
    )]
    #[builder(default)]
    pub vpc_options: Option<DomainStatusAtProviderVpcOptions>,
}

/// Configuration block for fine-grained access control. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderAdvancedSecurityOptions {
    /// Whether Anonymous auth is enabled. Enables fine-grained access control on an existing domain. Ignored unless advanced_security_options are enabled. Can only be enabled on an existing domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anonymousAuthEnabled"
    )]
    #[builder(default)]
    pub anonymous_auth_enabled: Option<bool>,
    /// Whether advanced security is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Whether the internal user database is enabled. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "internalUserDatabaseEnabled"
    )]
    #[builder(default)]
    pub internal_user_database_enabled: Option<bool>,
    /// Configuration block for the main user. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserOptions"
    )]
    #[builder(default)]
    pub master_user_options: Option<DomainStatusAtProviderAdvancedSecurityOptionsMasterUserOptions>,
}

/// Configuration block for the main user. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderAdvancedSecurityOptionsMasterUserOptions {
    /// ARN for the main user. Only specify if internal_user_database_enabled is not set or set to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserArn"
    )]
    #[builder(default)]
    pub master_user_arn: Option<String>,
    /// Main user's username, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if internal_user_database_enabled is set to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUserName"
    )]
    #[builder(default)]
    pub master_user_name: Option<String>,
}

/// Configuration block for the Auto-Tune options of the domain. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderAutoTuneOptions {
    /// Auto-Tune desired state for the domain. Valid values: ENABLED or DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredState"
    )]
    #[builder(default)]
    pub desired_state: Option<String>,
    /// Configuration block for Auto-Tune maintenance windows. Can be specified multiple times for each maintenance window. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceSchedule"
    )]
    #[builder(default)]
    pub maintenance_schedule: Option<Vec<DomainStatusAtProviderAutoTuneOptionsMaintenanceSchedule>>,
    /// Whether to roll back to default Auto-Tune settings when disabling Auto-Tune. Valid values: DEFAULT_ROLLBACK or NO_ROLLBACK.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollbackOnDisable"
    )]
    #[builder(default)]
    pub rollback_on_disable: Option<String>,
    /// Whether to schedule Auto-Tune optimizations that require blue/green deployments during the domain's configured daily off-peak window. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useOffPeakWindow"
    )]
    #[builder(default)]
    pub use_off_peak_window: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderAutoTuneOptionsMaintenanceSchedule {
    /// A cron expression specifying the recurrence pattern for an Auto-Tune maintenance schedule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cronExpressionForRecurrence"
    )]
    #[builder(default)]
    pub cron_expression_for_recurrence: Option<String>,
    /// Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub duration: Option<DomainStatusAtProviderAutoTuneOptionsMaintenanceScheduleDuration>,
    /// Date and time at which to start the Auto-Tune maintenance schedule in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startAt")]
    #[builder(default)]
    pub start_at: Option<String>,
}

/// Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderAutoTuneOptionsMaintenanceScheduleDuration {
    /// Unit of time specifying the duration of an Auto-Tune maintenance window. Valid values: HOURS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// An integer specifying the value of the duration of an Auto-Tune maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Configuration block for the cluster of the domain. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderClusterConfig {
    /// Configuration block containing cold storage configuration. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coldStorageOptions"
    )]
    #[builder(default)]
    pub cold_storage_options: Option<DomainStatusAtProviderClusterConfigColdStorageOptions>,
    /// Number of dedicated main nodes in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedMasterCount"
    )]
    #[builder(default)]
    pub dedicated_master_count: Option<f64>,
    /// Whether dedicated main nodes are enabled for the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedMasterEnabled"
    )]
    #[builder(default)]
    pub dedicated_master_enabled: Option<bool>,
    /// Instance type of the dedicated main nodes in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedMasterType"
    )]
    #[builder(default)]
    pub dedicated_master_type: Option<String>,
    /// Number of instances in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceCount"
    )]
    #[builder(default)]
    pub instance_count: Option<f64>,
    /// Instance type of data nodes in the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Whether a multi-AZ domain is turned on with a standby AZ. For more information, see Configuring a multi-AZ domain in Amazon OpenSearch Service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiAzWithStandbyEnabled"
    )]
    #[builder(default)]
    pub multi_az_with_standby_enabled: Option<bool>,
    /// Number of warm nodes in the cluster. Valid values are between 2 and 150. warm_count can be only and must be set when warm_enabled is set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmCount")]
    #[builder(default)]
    pub warm_count: Option<f64>,
    /// Whether to enable warm storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "warmEnabled"
    )]
    #[builder(default)]
    pub warm_enabled: Option<bool>,
    /// Instance type for the OpenSearch cluster's warm nodes. Valid values are ultrawarm1.medium.search, ultrawarm1.large.search and ultrawarm1.xlarge.search. warm_type can be only and must be set when warm_enabled is set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmType")]
    #[builder(default)]
    pub warm_type: Option<String>,
    /// Configuration block containing zone awareness settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zoneAwarenessConfig"
    )]
    #[builder(default)]
    pub zone_awareness_config: Option<DomainStatusAtProviderClusterConfigZoneAwarenessConfig>,
    /// Whether zone awareness is enabled, set to true for multi-az deployment. To enable awareness with three Availability Zones, the availability_zone_count within the zone_awareness_config must be set to 3.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zoneAwarenessEnabled"
    )]
    #[builder(default)]
    pub zone_awareness_enabled: Option<bool>,
}

/// Configuration block containing cold storage configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderClusterConfigColdStorageOptions {
    /// Boolean to enable cold storage for an OpenSearch domain. Defaults to false. Master and ultrawarm nodes must be enabled for cold storage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Configuration block containing zone awareness settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderClusterConfigZoneAwarenessConfig {
    /// Number of Availability Zones for the domain to use with zone_awareness_enabled. Defaults to 2. Valid values: 2 or 3.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZoneCount"
    )]
    #[builder(default)]
    pub availability_zone_count: Option<f64>,
}

/// Configuration block for authenticating dashboard with Cognito. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderCognitoOptions {
    /// Whether Amazon Cognito authentication with Dashboard is enabled or not. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// ID of the Cognito Identity Pool to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityPoolId"
    )]
    #[builder(default)]
    pub identity_pool_id: Option<String>,
    /// ARN of the IAM role that has the AmazonOpenSearchServiceCognitoAccess policy attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// ID of the Cognito User Pool to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userPoolId"
    )]
    #[builder(default)]
    pub user_pool_id: Option<String>,
}

/// Configuration block for domain endpoint HTTP(S) related options. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDomainEndpointOptions {
    /// Fully qualified domain for your custom endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEndpoint"
    )]
    #[builder(default)]
    pub custom_endpoint: Option<String>,
    /// ACM certificate ARN for your custom endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEndpointCertificateArn"
    )]
    #[builder(default)]
    pub custom_endpoint_certificate_arn: Option<String>,
    /// Whether to enable custom endpoint for the OpenSearch domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEndpointEnabled"
    )]
    #[builder(default)]
    pub custom_endpoint_enabled: Option<bool>,
    /// Whether or not to require HTTPS. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enforceHttps"
    )]
    #[builder(default)]
    pub enforce_https: Option<bool>,
    /// Name of the TLS security policy that needs to be applied to the HTTPS endpoint. For valid values, refer to the AWS documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tlsSecurityPolicy"
    )]
    #[builder(default)]
    pub tls_security_policy: Option<String>,
}

/// Configuration block for EBS related options, may be required based on chosen instance size. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderEbsOptions {
    /// Whether EBS volumes are attached to data nodes in the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsEnabled"
    )]
    #[builder(default)]
    pub ebs_enabled: Option<bool>,
    /// Baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the GP3 and Provisioned IOPS EBS volume types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throughput: Option<f64>,
    /// Size of EBS volumes attached to data nodes (in GiB).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default)]
    pub volume_size: Option<f64>,
    /// Type of EBS volumes attached to data nodes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default)]
    pub volume_type: Option<String>,
}

/// Configuration block for encrypt at rest options. Only available for certain instance types. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderEncryptAtRest {
    /// Whether to enable encryption at rest. If the encrypt_at_rest block is not provided then this defaults to false. Enabling encryption on new domains requires an engine_version of OpenSearch_X.Y or Elasticsearch_5.1 or greater.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// KMS key ARN to encrypt the Elasticsearch domain with. If not specified then it defaults to using the aws/es service KMS key. Note that KMS will accept a KMS key ID but will return the key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderLogPublishingOptions {
    /// ARN of the Cloudwatch log group to which log needs to be published.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupArn"
    )]
    #[builder(default)]
    pub cloudwatch_log_group_arn: Option<String>,
    /// Whether given log publishing option is enabled or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Type of OpenSearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS, AUDIT_LOGS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    #[builder(default)]
    pub log_type: Option<String>,
}

/// Configuration block for node-to-node encryption options. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderNodeToNodeEncryption {
    /// Whether to enable node-to-node encryption. If the node_to_node_encryption block is not provided then this defaults to false. Enabling node-to-node encryption of a new domain requires an engine_version of OpenSearch_X.Y or Elasticsearch_6.0 or greater.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Configuration to add Off Peak update options. (documentation). Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderOffPeakWindowOptions {
    /// Enabled disabled toggle for off-peak update window.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "offPeakWindow"
    )]
    #[builder(default)]
    pub off_peak_window: Option<DomainStatusAtProviderOffPeakWindowOptionsOffPeakWindow>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderOffPeakWindowOptionsOffPeakWindow {
    /// 10h window for updates
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "windowStartTime"
    )]
    #[builder(default)]
    pub window_start_time:
        Option<DomainStatusAtProviderOffPeakWindowOptionsOffPeakWindowWindowStartTime>,
}

/// 10h window for updates
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderOffPeakWindowOptionsOffPeakWindowWindowStartTime {
    /// Starting hour of the 10-hour window for updates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hours: Option<f64>,
    /// Starting minute of the 10-hour window for updates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub minutes: Option<f64>,
}

/// Configuration block for snapshot related options. Detailed below. DEPRECATED. For domains running OpenSearch 5.3 and later, Amazon OpenSearch takes hourly automated snapshots, making this setting irrelevant. For domains running earlier versions, OpenSearch takes daily automated snapshots.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderSnapshotOptions {
    /// Hour during which the service takes an automated daily snapshot of the indices in the domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automatedSnapshotStartHour"
    )]
    #[builder(default)]
    pub automated_snapshot_start_hour: Option<f64>,
}

/// Software update options for the domain. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderSoftwareUpdateOptions {
    /// Whether automatic service software updates are enabled for the domain. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoSoftwareUpdateEnabled"
    )]
    #[builder(default)]
    pub auto_software_update_enabled: Option<bool>,
}

/// Configuration block for VPC related options. Adding or removing this configuration forces a new resource (documentation). Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderVpcOptions {
    /// If the domain was created inside a VPC, the names of the availability zones the configured subnet_ids were created inside.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZones"
    )]
    #[builder(default)]
    pub availability_zones: Option<Vec<String>>,
    /// List of VPC Security Group IDs to be applied to the OpenSearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// List of VPC Subnet IDs for the OpenSearch domain endpoints to be created in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// If the domain was created inside a VPC, the ID of the VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
}

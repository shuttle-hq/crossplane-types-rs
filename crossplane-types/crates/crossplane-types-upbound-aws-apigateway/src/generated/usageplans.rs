// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// UsagePlanSpec defines the desired state of UsagePlan
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "apigateway.aws.upbound.io", version = "v1beta2", kind = "UsagePlan", plural = "usageplans")]
#[kube(status = "UsagePlanStatus")]
pub struct UsagePlanSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<UsagePlanDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: UsagePlanForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<UsagePlanInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<UsagePlanProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<UsagePlanPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<UsagePlanWriteConnectionSecretToRef>,
}

/// UsagePlanSpec defines the desired state of UsagePlan
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProvider {
    /// Associated API stages of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiStages")]
    #[builder(default)]
    pub api_stages: Option<Vec<UsagePlanForProviderApiStages>>,
    /// Description of a usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Name of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productCode")]
    #[builder(default)]
    pub product_code: Option<String>,
    /// The quota settings of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quotaSettings")]
    #[builder(default)]
    pub quota_settings: Option<UsagePlanForProviderQuotaSettings>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The throttling limits of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttleSettings")]
    #[builder(default)]
    pub throttle_settings: Option<UsagePlanForProviderThrottleSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStages {
    /// API Id of the associated API stage in a usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default)]
    pub api_id: Option<String>,
    /// Reference to a RestAPI in apigateway to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    #[builder(default)]
    pub api_id_ref: Option<UsagePlanForProviderApiStagesApiIdRef>,
    /// Selector for a RestAPI in apigateway to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdSelector")]
    #[builder(default)]
    pub api_id_selector: Option<UsagePlanForProviderApiStagesApiIdSelector>,
    /// API stage name of the associated API stage in a usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stage: Option<String>,
    /// Reference to a Stage in apigateway to populate stage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageRef")]
    #[builder(default)]
    pub stage_ref: Option<UsagePlanForProviderApiStagesStageRef>,
    /// Selector for a Stage in apigateway to populate stage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageSelector")]
    #[builder(default)]
    pub stage_selector: Option<UsagePlanForProviderApiStagesStageSelector>,
    /// The throttling limits of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throttle: Option<Vec<UsagePlanForProviderApiStagesThrottle>>,
}

/// Reference to a RestAPI in apigateway to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStagesApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanForProviderApiStagesApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStagesApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanForProviderApiStagesApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanForProviderApiStagesApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanForProviderApiStagesApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanForProviderApiStagesApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RestAPI in apigateway to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStagesApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanForProviderApiStagesApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStagesApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanForProviderApiStagesApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanForProviderApiStagesApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanForProviderApiStagesApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanForProviderApiStagesApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Stage in apigateway to populate stage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStagesStageRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanForProviderApiStagesStageRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStagesStageRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanForProviderApiStagesStageRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanForProviderApiStagesStageRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanForProviderApiStagesStageRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanForProviderApiStagesStageRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stage in apigateway to populate stage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStagesStageSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanForProviderApiStagesStageSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStagesStageSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanForProviderApiStagesStageSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanForProviderApiStagesStageSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanForProviderApiStagesStageSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanForProviderApiStagesStageSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderApiStagesThrottle {
    /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstLimit")]
    #[builder(default)]
    pub burst_limit: Option<f64>,
    /// Method to apply the throttle settings for. Specfiy the path and method, for example /test/GET.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// The API request steady-state rate limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimit")]
    #[builder(default)]
    pub rate_limit: Option<f64>,
}

/// The quota settings of the usage plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderQuotaSettings {
    /// Maximum number of requests that can be made in a given time period.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limit: Option<f64>,
    /// Number of requests subtracted from the given limit in the initial time period.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub offset: Option<f64>,
    /// Time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub period: Option<String>,
}

/// The throttling limits of the usage plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanForProviderThrottleSettings {
    /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstLimit")]
    #[builder(default)]
    pub burst_limit: Option<f64>,
    /// The API request steady-state rate limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimit")]
    #[builder(default)]
    pub rate_limit: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProvider {
    /// Associated API stages of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiStages")]
    #[builder(default)]
    pub api_stages: Option<Vec<UsagePlanInitProviderApiStages>>,
    /// Description of a usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Name of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productCode")]
    #[builder(default)]
    pub product_code: Option<String>,
    /// The quota settings of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quotaSettings")]
    #[builder(default)]
    pub quota_settings: Option<UsagePlanInitProviderQuotaSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The throttling limits of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttleSettings")]
    #[builder(default)]
    pub throttle_settings: Option<UsagePlanInitProviderThrottleSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStages {
    /// API Id of the associated API stage in a usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default)]
    pub api_id: Option<String>,
    /// Reference to a RestAPI in apigateway to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    #[builder(default)]
    pub api_id_ref: Option<UsagePlanInitProviderApiStagesApiIdRef>,
    /// Selector for a RestAPI in apigateway to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdSelector")]
    #[builder(default)]
    pub api_id_selector: Option<UsagePlanInitProviderApiStagesApiIdSelector>,
    /// API stage name of the associated API stage in a usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stage: Option<String>,
    /// Reference to a Stage in apigateway to populate stage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageRef")]
    #[builder(default)]
    pub stage_ref: Option<UsagePlanInitProviderApiStagesStageRef>,
    /// Selector for a Stage in apigateway to populate stage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageSelector")]
    #[builder(default)]
    pub stage_selector: Option<UsagePlanInitProviderApiStagesStageSelector>,
    /// The throttling limits of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throttle: Option<Vec<UsagePlanInitProviderApiStagesThrottle>>,
}

/// Reference to a RestAPI in apigateway to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStagesApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanInitProviderApiStagesApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStagesApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanInitProviderApiStagesApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanInitProviderApiStagesApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanInitProviderApiStagesApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanInitProviderApiStagesApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RestAPI in apigateway to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStagesApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanInitProviderApiStagesApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStagesApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanInitProviderApiStagesApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanInitProviderApiStagesApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanInitProviderApiStagesApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanInitProviderApiStagesApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Stage in apigateway to populate stage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStagesStageRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanInitProviderApiStagesStageRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStagesStageRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanInitProviderApiStagesStageRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanInitProviderApiStagesStageRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanInitProviderApiStagesStageRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanInitProviderApiStagesStageRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stage in apigateway to populate stage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStagesStageSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanInitProviderApiStagesStageSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStagesStageSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanInitProviderApiStagesStageSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanInitProviderApiStagesStageSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanInitProviderApiStagesStageSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanInitProviderApiStagesStageSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderApiStagesThrottle {
    /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstLimit")]
    #[builder(default)]
    pub burst_limit: Option<f64>,
    /// Method to apply the throttle settings for. Specfiy the path and method, for example /test/GET.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// The API request steady-state rate limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimit")]
    #[builder(default)]
    pub rate_limit: Option<f64>,
}

/// The quota settings of the usage plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderQuotaSettings {
    /// Maximum number of requests that can be made in a given time period.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limit: Option<f64>,
    /// Number of requests subtracted from the given limit in the initial time period.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub offset: Option<f64>,
    /// Time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub period: Option<String>,
}

/// The throttling limits of the usage plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanInitProviderThrottleSettings {
    /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstLimit")]
    #[builder(default)]
    pub burst_limit: Option<f64>,
    /// The API request steady-state rate limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimit")]
    #[builder(default)]
    pub rate_limit: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<UsagePlanPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<UsagePlanPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UsagePlanPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UsagePlanPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UsagePlanPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UsagePlanPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// UsagePlanStatus defines the observed state of UsagePlan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<UsagePlanStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanStatusAtProvider {
    /// Associated API stages of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiStages")]
    #[builder(default)]
    pub api_stages: Option<Vec<UsagePlanStatusAtProviderApiStages>>,
    /// ARN
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Description of a usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// ID of the API resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Name of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productCode")]
    #[builder(default)]
    pub product_code: Option<String>,
    /// The quota settings of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quotaSettings")]
    #[builder(default)]
    pub quota_settings: Option<UsagePlanStatusAtProviderQuotaSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// The throttling limits of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttleSettings")]
    #[builder(default)]
    pub throttle_settings: Option<UsagePlanStatusAtProviderThrottleSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanStatusAtProviderApiStages {
    /// API Id of the associated API stage in a usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default)]
    pub api_id: Option<String>,
    /// API stage name of the associated API stage in a usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub stage: Option<String>,
    /// The throttling limits of the usage plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub throttle: Option<Vec<UsagePlanStatusAtProviderApiStagesThrottle>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanStatusAtProviderApiStagesThrottle {
    /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstLimit")]
    #[builder(default)]
    pub burst_limit: Option<f64>,
    /// Method to apply the throttle settings for. Specfiy the path and method, for example /test/GET.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// The API request steady-state rate limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimit")]
    #[builder(default)]
    pub rate_limit: Option<f64>,
}

/// The quota settings of the usage plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanStatusAtProviderQuotaSettings {
    /// Maximum number of requests that can be made in a given time period.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limit: Option<f64>,
    /// Number of requests subtracted from the given limit in the initial time period.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub offset: Option<f64>,
    /// Time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub period: Option<String>,
}

/// The throttling limits of the usage plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UsagePlanStatusAtProviderThrottleSettings {
    /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstLimit")]
    #[builder(default)]
    pub burst_limit: Option<f64>,
    /// The API request steady-state rate limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimit")]
    #[builder(default)]
    pub rate_limit: Option<f64>,
}


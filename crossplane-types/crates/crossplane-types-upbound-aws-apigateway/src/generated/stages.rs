// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// StageSpec defines the desired state of Stage
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "apigateway.aws.upbound.io", version = "v1beta2", kind = "Stage", plural = "stages")]
#[kube(status = "StageStatus")]
pub struct StageSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<StageDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: StageForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<StageInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<StageProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<StagePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<StageWriteConnectionSecretToRef>,
}

/// StageSpec defines the desired state of Stage
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProvider {
    /// Enables access logs for the API stage. See Access Log Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogSettings")]
    #[builder(default)]
    pub access_log_settings: Option<StageForProviderAccessLogSettings>,
    /// Whether a cache cluster is enabled for the stage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheClusterEnabled")]
    #[builder(default)]
    pub cache_cluster_enabled: Option<bool>,
    /// Size of the cache cluster for the stage, if enabled. Allowed values include 0.5, 1.6, 6.1, 13.5, 28.4, 58.2, 118 and 237.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheClusterSize")]
    #[builder(default)]
    pub cache_cluster_size: Option<String>,
    /// Configuration settings of a canary deployment. See Canary Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "canarySettings")]
    #[builder(default)]
    pub canary_settings: Option<StageForProviderCanarySettings>,
    /// Identifier of a client certificate for the stage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificateId")]
    #[builder(default)]
    pub client_certificate_id: Option<String>,
    /// ID of the deployment that the stage points to
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentId")]
    #[builder(default)]
    pub deployment_id: Option<String>,
    /// Reference to a Deployment in apigateway to populate deploymentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentIdRef")]
    #[builder(default)]
    pub deployment_id_ref: Option<StageForProviderDeploymentIdRef>,
    /// Selector for a Deployment in apigateway to populate deploymentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentIdSelector")]
    #[builder(default)]
    pub deployment_id_selector: Option<StageForProviderDeploymentIdSelector>,
    /// Description of the stage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Version of the associated API documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentationVersion")]
    #[builder(default)]
    pub documentation_version: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// ID of the associated REST API
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiId")]
    #[builder(default)]
    pub rest_api_id: Option<String>,
    /// Reference to a RestAPI in apigateway to populate restApiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiIdRef")]
    #[builder(default)]
    pub rest_api_id_ref: Option<StageForProviderRestApiIdRef>,
    /// Selector for a RestAPI in apigateway to populate restApiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiIdSelector")]
    #[builder(default)]
    pub rest_api_id_selector: Option<StageForProviderRestApiIdSelector>,
    /// Name of the stage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageName")]
    #[builder(default)]
    pub stage_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map that defines the stage variables
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub variables: Option<HashMap<String, String>>,
    /// Whether active tracing with X-ray is enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xrayTracingEnabled")]
    #[builder(default)]
    pub xray_tracing_enabled: Option<bool>,
}

/// Enables access logs for the API stage. See Access Log Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderAccessLogSettings {
    /// ARN of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with amazon-apigateway-. Automatically removes trailing :* if present.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationArn")]
    #[builder(default)]
    pub destination_arn: Option<String>,
    /// Formatting and values recorded in the logs.
    /// For more information on configuring the log format rules visit the AWS documentation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
}

/// Configuration settings of a canary deployment. See Canary Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderCanarySettings {
    /// ID of the deployment that the stage points to
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentId")]
    #[builder(default)]
    pub deployment_id: Option<String>,
    /// Percent 0.0 - 100.0 of traffic to divert to the canary deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "percentTraffic")]
    #[builder(default)]
    pub percent_traffic: Option<f64>,
    /// Map of overridden stage variables (including new variables) for the canary deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageVariableOverrides")]
    #[builder(default)]
    pub stage_variable_overrides: Option<HashMap<String, String>>,
    /// Whether the canary deployment uses the stage cache. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useStageCache")]
    #[builder(default)]
    pub use_stage_cache: Option<bool>,
}

/// Reference to a Deployment in apigateway to populate deploymentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderDeploymentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StageForProviderDeploymentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderDeploymentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StageForProviderDeploymentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StageForProviderDeploymentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderDeploymentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderDeploymentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Deployment in apigateway to populate deploymentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderDeploymentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StageForProviderDeploymentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderDeploymentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StageForProviderDeploymentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StageForProviderDeploymentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderDeploymentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderDeploymentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a RestAPI in apigateway to populate restApiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderRestApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StageForProviderRestApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderRestApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StageForProviderRestApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StageForProviderRestApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderRestApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderRestApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RestAPI in apigateway to populate restApiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderRestApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StageForProviderRestApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageForProviderRestApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StageForProviderRestApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StageForProviderRestApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderRestApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderRestApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProvider {
    /// Enables access logs for the API stage. See Access Log Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogSettings")]
    #[builder(default)]
    pub access_log_settings: Option<StageInitProviderAccessLogSettings>,
    /// Whether a cache cluster is enabled for the stage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheClusterEnabled")]
    #[builder(default)]
    pub cache_cluster_enabled: Option<bool>,
    /// Size of the cache cluster for the stage, if enabled. Allowed values include 0.5, 1.6, 6.1, 13.5, 28.4, 58.2, 118 and 237.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheClusterSize")]
    #[builder(default)]
    pub cache_cluster_size: Option<String>,
    /// Configuration settings of a canary deployment. See Canary Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "canarySettings")]
    #[builder(default)]
    pub canary_settings: Option<StageInitProviderCanarySettings>,
    /// Identifier of a client certificate for the stage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificateId")]
    #[builder(default)]
    pub client_certificate_id: Option<String>,
    /// ID of the deployment that the stage points to
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentId")]
    #[builder(default)]
    pub deployment_id: Option<String>,
    /// Reference to a Deployment in apigateway to populate deploymentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentIdRef")]
    #[builder(default)]
    pub deployment_id_ref: Option<StageInitProviderDeploymentIdRef>,
    /// Selector for a Deployment in apigateway to populate deploymentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentIdSelector")]
    #[builder(default)]
    pub deployment_id_selector: Option<StageInitProviderDeploymentIdSelector>,
    /// Description of the stage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Version of the associated API documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentationVersion")]
    #[builder(default)]
    pub documentation_version: Option<String>,
    /// ID of the associated REST API
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiId")]
    #[builder(default)]
    pub rest_api_id: Option<String>,
    /// Reference to a RestAPI in apigateway to populate restApiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiIdRef")]
    #[builder(default)]
    pub rest_api_id_ref: Option<StageInitProviderRestApiIdRef>,
    /// Selector for a RestAPI in apigateway to populate restApiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiIdSelector")]
    #[builder(default)]
    pub rest_api_id_selector: Option<StageInitProviderRestApiIdSelector>,
    /// Name of the stage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageName")]
    #[builder(default)]
    pub stage_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map that defines the stage variables
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub variables: Option<HashMap<String, String>>,
    /// Whether active tracing with X-ray is enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xrayTracingEnabled")]
    #[builder(default)]
    pub xray_tracing_enabled: Option<bool>,
}

/// Enables access logs for the API stage. See Access Log Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderAccessLogSettings {
    /// ARN of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with amazon-apigateway-. Automatically removes trailing :* if present.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationArn")]
    #[builder(default)]
    pub destination_arn: Option<String>,
    /// Formatting and values recorded in the logs.
    /// For more information on configuring the log format rules visit the AWS documentation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
}

/// Configuration settings of a canary deployment. See Canary Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderCanarySettings {
    /// ID of the deployment that the stage points to
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentId")]
    #[builder(default)]
    pub deployment_id: Option<String>,
    /// Percent 0.0 - 100.0 of traffic to divert to the canary deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "percentTraffic")]
    #[builder(default)]
    pub percent_traffic: Option<f64>,
    /// Map of overridden stage variables (including new variables) for the canary deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageVariableOverrides")]
    #[builder(default)]
    pub stage_variable_overrides: Option<HashMap<String, String>>,
    /// Whether the canary deployment uses the stage cache. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useStageCache")]
    #[builder(default)]
    pub use_stage_cache: Option<bool>,
}

/// Reference to a Deployment in apigateway to populate deploymentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderDeploymentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StageInitProviderDeploymentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderDeploymentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StageInitProviderDeploymentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StageInitProviderDeploymentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderDeploymentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderDeploymentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Deployment in apigateway to populate deploymentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderDeploymentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StageInitProviderDeploymentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderDeploymentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StageInitProviderDeploymentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StageInitProviderDeploymentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderDeploymentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderDeploymentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a RestAPI in apigateway to populate restApiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderRestApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StageInitProviderRestApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderRestApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StageInitProviderRestApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StageInitProviderRestApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderRestApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderRestApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RestAPI in apigateway to populate restApiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderRestApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StageInitProviderRestApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageInitProviderRestApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StageInitProviderRestApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StageInitProviderRestApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderRestApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderRestApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StageProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StageProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StageProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StagePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<StagePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<StagePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StagePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StagePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StagePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StagePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StagePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StagePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StagePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StagePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// StageStatus defines the observed state of Stage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<StageStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageStatusAtProvider {
    /// Enables access logs for the API stage. See Access Log Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogSettings")]
    #[builder(default)]
    pub access_log_settings: Option<StageStatusAtProviderAccessLogSettings>,
    /// ARN
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Whether a cache cluster is enabled for the stage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheClusterEnabled")]
    #[builder(default)]
    pub cache_cluster_enabled: Option<bool>,
    /// Size of the cache cluster for the stage, if enabled. Allowed values include 0.5, 1.6, 6.1, 13.5, 28.4, 58.2, 118 and 237.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheClusterSize")]
    #[builder(default)]
    pub cache_cluster_size: Option<String>,
    /// Configuration settings of a canary deployment. See Canary Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "canarySettings")]
    #[builder(default)]
    pub canary_settings: Option<StageStatusAtProviderCanarySettings>,
    /// Identifier of a client certificate for the stage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificateId")]
    #[builder(default)]
    pub client_certificate_id: Option<String>,
    /// ID of the deployment that the stage points to
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentId")]
    #[builder(default)]
    pub deployment_id: Option<String>,
    /// Description of the stage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Version of the associated API documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentationVersion")]
    #[builder(default)]
    pub documentation_version: Option<String>,
    /// Execution ARN to be used in lambda_permission's source_arn
    /// when allowing API Gateway to invoke a Lambda function,
    /// e.g., arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionArn")]
    #[builder(default)]
    pub execution_arn: Option<String>,
    /// ID of the stage
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// URL to invoke the API pointing to the stage,
    /// e.g., https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invokeUrl")]
    #[builder(default)]
    pub invoke_url: Option<String>,
    /// ID of the associated REST API
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiId")]
    #[builder(default)]
    pub rest_api_id: Option<String>,
    /// Name of the stage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageName")]
    #[builder(default)]
    pub stage_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Map that defines the stage variables
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub variables: Option<HashMap<String, String>>,
    /// ARN of the WebAcl associated with the Stage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAclArn")]
    #[builder(default)]
    pub web_acl_arn: Option<String>,
    /// Whether active tracing with X-ray is enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xrayTracingEnabled")]
    #[builder(default)]
    pub xray_tracing_enabled: Option<bool>,
}

/// Enables access logs for the API stage. See Access Log Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageStatusAtProviderAccessLogSettings {
    /// ARN of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with amazon-apigateway-. Automatically removes trailing :* if present.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationArn")]
    #[builder(default)]
    pub destination_arn: Option<String>,
    /// Formatting and values recorded in the logs.
    /// For more information on configuring the log format rules visit the AWS documentation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
}

/// Configuration settings of a canary deployment. See Canary Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StageStatusAtProviderCanarySettings {
    /// ID of the deployment that the stage points to
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentId")]
    #[builder(default)]
    pub deployment_id: Option<String>,
    /// Percent 0.0 - 100.0 of traffic to divert to the canary deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "percentTraffic")]
    #[builder(default)]
    pub percent_traffic: Option<f64>,
    /// Map of overridden stage variables (including new variables) for the canary deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageVariableOverrides")]
    #[builder(default)]
    pub stage_variable_overrides: Option<HashMap<String, String>>,
    /// Whether the canary deployment uses the stage cache. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useStageCache")]
    #[builder(default)]
    pub use_stage_cache: Option<bool>,
}


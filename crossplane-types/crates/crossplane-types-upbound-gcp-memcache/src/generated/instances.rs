// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "memcache.gcp.upbound.io", version = "v1beta2", kind = "Instance", plural = "instances")]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProvider {
    /// The full name of the GCE network to connect the instance to.  If not provided,
    /// 'default' will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetwork")]
    #[builder(default)]
    pub authorized_network: Option<String>,
    /// Reference to a Connection in servicenetworking to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkRef")]
    #[builder(default)]
    pub authorized_network_ref: Option<InstanceForProviderAuthorizedNetworkRef>,
    /// Selector for a Connection in servicenetworking to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkSelector")]
    #[builder(default)]
    pub authorized_network_selector: Option<InstanceForProviderAuthorizedNetworkSelector>,
    /// A user-visible name for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Resource labels to represent user-provided metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Maintenance policy for an instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenancePolicy")]
    #[builder(default)]
    pub maintenance_policy: Option<InstanceForProviderMaintenancePolicy>,
    /// User-specified parameters for this memcache instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memcacheParameters")]
    #[builder(default)]
    pub memcache_parameters: Option<InstanceForProviderMemcacheParameters>,
    /// The major version of Memcached software. If not provided, latest supported version will be used.
    /// Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
    /// determined by our system based on the latest supported minor version.
    /// Default value is MEMCACHE_1_5.
    /// Possible values are: MEMCACHE_1_5, MEMCACHE_1_6_15.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memcacheVersion")]
    #[builder(default)]
    pub memcache_version: Option<String>,
    /// The resource name of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Configuration for memcache nodes.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeConfig")]
    #[builder(default)]
    pub node_config: Option<InstanceForProviderNodeConfig>,
    /// Number of nodes in the memcache instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    #[builder(default)]
    pub node_count: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The region of the Memcache instance. If it is not provided, the provider region is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// Contains the name of allocated IP address ranges associated with
    /// the private service access connection for example, "test-default"
    /// associated with IP range 10.0.0.0/29.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRangeId")]
    #[builder(default)]
    pub reserved_ip_range_id: Option<Vec<String>>,
    /// Zones where memcache nodes should be provisioned.  If not
    /// provided, all zones will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub zones: Option<Vec<String>>,
}

/// Reference to a Connection in servicenetworking to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProviderAuthorizedNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<InstanceForProviderAuthorizedNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProviderAuthorizedNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<InstanceForProviderAuthorizedNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<InstanceForProviderAuthorizedNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderAuthorizedNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderAuthorizedNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Connection in servicenetworking to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProviderAuthorizedNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<InstanceForProviderAuthorizedNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProviderAuthorizedNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<InstanceForProviderAuthorizedNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<InstanceForProviderAuthorizedNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderAuthorizedNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderAuthorizedNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Maintenance policy for an instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProviderMaintenancePolicy {
    /// Optional. Description of what this policy is for.
    /// Create/Update methods return INVALID_ARGUMENT if the
    /// length is greater than 512.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Required. Maintenance window that is applied to resources covered by this policy.
    /// Minimum 1. For the current version, the maximum number of weekly_maintenance_windows
    /// is expected to be one.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklyMaintenanceWindow")]
    #[builder(default)]
    pub weekly_maintenance_window: Option<Vec<InstanceForProviderMaintenancePolicyWeeklyMaintenanceWindow>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProviderMaintenancePolicyWeeklyMaintenanceWindow {
    /// Required. The day of week that maintenance updates occur.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub day: Option<String>,
    /// Required. The length of the maintenance window, ranging from 3 hours to 8 hours.
    /// A duration in seconds with up to nine fractional digits,
    /// terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub duration: Option<String>,
    /// Required. Start time of the window in UTC time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    #[builder(default)]
    pub start_time: Option<InstanceForProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime>,
}

/// Required. Start time of the window in UTC time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime {
    /// Hours of day in 24 hour format. Should be from 0 to 23.
    /// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hours: Option<f64>,
    /// Minutes of hour of day. Must be from 0 to 59.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub minutes: Option<f64>,
    /// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Seconds of minutes of the time. Must normally be from 0 to 59.
    /// An API may allow the value 60 if it allows leap-seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// User-specified parameters for this memcache instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProviderMemcacheParameters {
    /// User-defined set of parameters to use in the memcache process.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub params: Option<HashMap<String, String>>,
}

/// Configuration for memcache nodes.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceForProviderNodeConfig {
    /// Number of CPUs per node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCount")]
    #[builder(default)]
    pub cpu_count: Option<f64>,
    /// Memory size in Mebibytes for each memcache node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memorySizeMb")]
    #[builder(default)]
    pub memory_size_mb: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProvider {
    /// The full name of the GCE network to connect the instance to.  If not provided,
    /// 'default' will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetwork")]
    #[builder(default)]
    pub authorized_network: Option<String>,
    /// Reference to a Connection in servicenetworking to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkRef")]
    #[builder(default)]
    pub authorized_network_ref: Option<InstanceInitProviderAuthorizedNetworkRef>,
    /// Selector for a Connection in servicenetworking to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkSelector")]
    #[builder(default)]
    pub authorized_network_selector: Option<InstanceInitProviderAuthorizedNetworkSelector>,
    /// A user-visible name for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Resource labels to represent user-provided metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Maintenance policy for an instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenancePolicy")]
    #[builder(default)]
    pub maintenance_policy: Option<InstanceInitProviderMaintenancePolicy>,
    /// User-specified parameters for this memcache instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memcacheParameters")]
    #[builder(default)]
    pub memcache_parameters: Option<InstanceInitProviderMemcacheParameters>,
    /// The major version of Memcached software. If not provided, latest supported version will be used.
    /// Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
    /// determined by our system based on the latest supported minor version.
    /// Default value is MEMCACHE_1_5.
    /// Possible values are: MEMCACHE_1_5, MEMCACHE_1_6_15.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memcacheVersion")]
    #[builder(default)]
    pub memcache_version: Option<String>,
    /// The resource name of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Configuration for memcache nodes.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeConfig")]
    #[builder(default)]
    pub node_config: Option<InstanceInitProviderNodeConfig>,
    /// Number of nodes in the memcache instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    #[builder(default)]
    pub node_count: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The region of the Memcache instance. If it is not provided, the provider region is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// Contains the name of allocated IP address ranges associated with
    /// the private service access connection for example, "test-default"
    /// associated with IP range 10.0.0.0/29.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRangeId")]
    #[builder(default)]
    pub reserved_ip_range_id: Option<Vec<String>>,
    /// Zones where memcache nodes should be provisioned.  If not
    /// provided, all zones will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub zones: Option<Vec<String>>,
}

/// Reference to a Connection in servicenetworking to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProviderAuthorizedNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<InstanceInitProviderAuthorizedNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProviderAuthorizedNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<InstanceInitProviderAuthorizedNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<InstanceInitProviderAuthorizedNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderAuthorizedNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderAuthorizedNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Connection in servicenetworking to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProviderAuthorizedNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<InstanceInitProviderAuthorizedNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProviderAuthorizedNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<InstanceInitProviderAuthorizedNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<InstanceInitProviderAuthorizedNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderAuthorizedNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderAuthorizedNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Maintenance policy for an instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProviderMaintenancePolicy {
    /// Optional. Description of what this policy is for.
    /// Create/Update methods return INVALID_ARGUMENT if the
    /// length is greater than 512.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Required. Maintenance window that is applied to resources covered by this policy.
    /// Minimum 1. For the current version, the maximum number of weekly_maintenance_windows
    /// is expected to be one.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklyMaintenanceWindow")]
    #[builder(default)]
    pub weekly_maintenance_window: Option<Vec<InstanceInitProviderMaintenancePolicyWeeklyMaintenanceWindow>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProviderMaintenancePolicyWeeklyMaintenanceWindow {
    /// Required. The day of week that maintenance updates occur.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub day: Option<String>,
    /// Required. The length of the maintenance window, ranging from 3 hours to 8 hours.
    /// A duration in seconds with up to nine fractional digits,
    /// terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub duration: Option<String>,
    /// Required. Start time of the window in UTC time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    #[builder(default)]
    pub start_time: Option<InstanceInitProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime>,
}

/// Required. Start time of the window in UTC time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime {
    /// Hours of day in 24 hour format. Should be from 0 to 23.
    /// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hours: Option<f64>,
    /// Minutes of hour of day. Must be from 0 to 59.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub minutes: Option<f64>,
    /// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Seconds of minutes of the time. Must normally be from 0 to 59.
    /// An API may allow the value 60 if it allows leap-seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// User-specified parameters for this memcache instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProviderMemcacheParameters {
    /// User-defined set of parameters to use in the memcache process.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub params: Option<HashMap<String, String>>,
}

/// Configuration for memcache nodes.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceInitProviderNodeConfig {
    /// Number of CPUs per node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCount")]
    #[builder(default)]
    pub cpu_count: Option<f64>,
    /// Memory size in Mebibytes for each memcache node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memorySizeMb")]
    #[builder(default)]
    pub memory_size_mb: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceStatusAtProvider {
    /// The full name of the GCE network to connect the instance to.  If not provided,
    /// 'default' will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetwork")]
    #[builder(default)]
    pub authorized_network: Option<String>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    #[builder(default)]
    pub create_time: Option<String>,
    /// Endpoint for Discovery API
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryEndpoint")]
    #[builder(default)]
    pub discovery_endpoint: Option<String>,
    /// A user-visible name for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{region}}/instances/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Resource labels to represent user-provided metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Maintenance policy for an instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenancePolicy")]
    #[builder(default)]
    pub maintenance_policy: Option<InstanceStatusAtProviderMaintenancePolicy>,
    /// Output only. Published maintenance schedule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceSchedule")]
    #[builder(default)]
    pub maintenance_schedule: Option<Vec<InstanceStatusAtProviderMaintenanceSchedule>>,
    /// The full version of memcached server running on this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memcacheFullVersion")]
    #[builder(default)]
    pub memcache_full_version: Option<String>,
    /// Additional information about the instance state, if available.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memcacheNodes")]
    #[builder(default)]
    pub memcache_nodes: Option<Vec<InstanceStatusAtProviderMemcacheNodes>>,
    /// User-specified parameters for this memcache instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memcacheParameters")]
    #[builder(default)]
    pub memcache_parameters: Option<InstanceStatusAtProviderMemcacheParameters>,
    /// The major version of Memcached software. If not provided, latest supported version will be used.
    /// Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
    /// determined by our system based on the latest supported minor version.
    /// Default value is MEMCACHE_1_5.
    /// Possible values are: MEMCACHE_1_5, MEMCACHE_1_6_15.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memcacheVersion")]
    #[builder(default)]
    pub memcache_version: Option<String>,
    /// The resource name of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Configuration for memcache nodes.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeConfig")]
    #[builder(default)]
    pub node_config: Option<InstanceStatusAtProviderNodeConfig>,
    /// Number of nodes in the memcache instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    #[builder(default)]
    pub node_count: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The region of the Memcache instance. If it is not provided, the provider region is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// Contains the name of allocated IP address ranges associated with
    /// the private service access connection for example, "test-default"
    /// associated with IP range 10.0.0.0/29.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRangeId")]
    #[builder(default)]
    pub reserved_ip_range_id: Option<Vec<String>>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Zones where memcache nodes should be provisioned.  If not
    /// provided, all zones will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub zones: Option<Vec<String>>,
}

/// Maintenance policy for an instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceStatusAtProviderMaintenancePolicy {
    /// (Output)
    /// Output only. The time when the policy was created.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    #[builder(default)]
    pub create_time: Option<String>,
    /// Optional. Description of what this policy is for.
    /// Create/Update methods return INVALID_ARGUMENT if the
    /// length is greater than 512.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// (Output)
    /// Output only. The time when the policy was updated.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    #[builder(default)]
    pub update_time: Option<String>,
    /// Required. Maintenance window that is applied to resources covered by this policy.
    /// Minimum 1. For the current version, the maximum number of weekly_maintenance_windows
    /// is expected to be one.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklyMaintenanceWindow")]
    #[builder(default)]
    pub weekly_maintenance_window: Option<Vec<InstanceStatusAtProviderMaintenancePolicyWeeklyMaintenanceWindow>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceStatusAtProviderMaintenancePolicyWeeklyMaintenanceWindow {
    /// Required. The day of week that maintenance updates occur.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub day: Option<String>,
    /// Required. The length of the maintenance window, ranging from 3 hours to 8 hours.
    /// A duration in seconds with up to nine fractional digits,
    /// terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub duration: Option<String>,
    /// Required. Start time of the window in UTC time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    #[builder(default)]
    pub start_time: Option<InstanceStatusAtProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime>,
}

/// Required. Start time of the window in UTC time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceStatusAtProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime {
    /// Hours of day in 24 hour format. Should be from 0 to 23.
    /// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hours: Option<f64>,
    /// Minutes of hour of day. Must be from 0 to 59.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub minutes: Option<f64>,
    /// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Seconds of minutes of the time. Must normally be from 0 to 59.
    /// An API may allow the value 60 if it allows leap-seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceStatusAtProviderMaintenanceSchedule {
    /// (Output)
    /// Output only. The end time of any upcoming scheduled maintenance for this instance.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endTime")]
    #[builder(default)]
    pub end_time: Option<String>,
    /// (Output)
    /// Output only. The deadline that the maintenance schedule start time
    /// can not go beyond, including reschedule.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduleDeadlineTime")]
    #[builder(default)]
    pub schedule_deadline_time: Option<String>,
    /// (Output)
    /// Output only. The start time of any upcoming scheduled maintenance for this instance.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    #[builder(default)]
    pub start_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceStatusAtProviderMemcacheNodes {
    /// (Output)
    /// Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub host: Option<String>,
    /// (Output)
    /// Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeId")]
    #[builder(default)]
    pub node_id: Option<String>,
    /// (Output)
    /// The port number of the Memcached server on this node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// (Output)
    /// Current state of the Memcached node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// (Output)
    /// Location (GCP Zone) for the Memcached node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub zone: Option<String>,
}

/// User-specified parameters for this memcache instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceStatusAtProviderMemcacheParameters {
    /// (Output)
    /// This is a unique ID associated with this set of parameters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// User-defined set of parameters to use in the memcache process.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub params: Option<HashMap<String, String>>,
}

/// Configuration for memcache nodes.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InstanceStatusAtProviderNodeConfig {
    /// Number of CPUs per node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCount")]
    #[builder(default)]
    pub cpu_count: Option<f64>,
    /// Memory size in Mebibytes for each memcache node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memorySizeMb")]
    #[builder(default)]
    pub memory_size_mb: Option<f64>,
}


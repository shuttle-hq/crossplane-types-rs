// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RuleGroupSpec defines the desired state of RuleGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "networkfirewall.aws.upbound.io", version = "v1beta2", kind = "RuleGroup", plural = "rulegroups")]
#[kube(status = "RuleGroupStatus")]
pub struct RuleGroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<RuleGroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RuleGroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<RuleGroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<RuleGroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<RuleGroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<RuleGroupWriteConnectionSecretToRef>,
}

/// RuleGroupSpec defines the desired state of RuleGroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProvider {
    /// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub capacity: Option<f64>,
    /// A friendly description of the rule group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// KMS encryption configuration settings. See Encryption Configuration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    #[builder(default)]
    pub encryption_configuration: Option<RuleGroupForProviderEncryptionConfiguration>,
    /// A friendly name of the rule group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A configuration block that defines the rule group rules. Required unless rules is specified. See Rule Group below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleGroup")]
    #[builder(default)]
    pub rule_group: Option<RuleGroupForProviderRuleGroup>,
    /// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless rule_group is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub rules: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: STATEFUL or STATELESS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// KMS encryption configuration settings. See Encryption Configuration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderEncryptionConfiguration {
    /// The ID of the customer managed key. You can use any of the key identifiers that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
    /// The type of AWS KMS key to use for encryption of your Network Firewall resources. Valid values are CUSTOMER_KMS and AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// A configuration block that defines the rule group rules. Required unless rules is specified. See Rule Group below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroup {
    /// A configuration block that defines the IP Set References for the rule group. See Reference Sets below for details. Please notes that there can only be a maximum of 5 reference_sets in a rule_group. See the AWS documentation for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceSets")]
    #[builder(default)]
    pub reference_sets: Option<RuleGroupForProviderRuleGroupReferenceSets>,
    /// A configuration block that defines additional settings available to use in the rules defined in the rule group. Can only be specified for stateful rule groups. See Rule Variables below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleVariables")]
    #[builder(default)]
    pub rule_variables: Option<RuleGroupForProviderRuleGroupRuleVariables>,
    /// A configuration block that defines the stateful or stateless rules for the rule group. See Rules Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulesSource")]
    #[builder(default)]
    pub rules_source: Option<RuleGroupForProviderRuleGroupRulesSource>,
    /// A configuration block that defines stateful rule options for the rule group. See Stateful Rule Options below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulRuleOptions")]
    #[builder(default)]
    pub stateful_rule_options: Option<RuleGroupForProviderRuleGroupStatefulRuleOptions>,
}

/// A configuration block that defines the IP Set References for the rule group. See Reference Sets below for details. Please notes that there can only be a maximum of 5 reference_sets in a rule_group. See the AWS documentation for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupReferenceSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSetReferences")]
    #[builder(default)]
    pub ip_set_references: Option<Vec<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferences>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupReferenceSetsIpSetReferences {
    /// Set of configuration blocks that define the IP Reference information. See IP Set Reference below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSetReference")]
    #[builder(default)]
    pub ip_set_reference: Option<Vec<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReference>>,
    /// An unique alphanumeric string to identify the port_set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReference {
    /// Set of Managed Prefix IP ARN(s)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceArn")]
    #[builder(default)]
    pub reference_arn: Option<String>,
    /// Reference to a ManagedPrefixList in ec2 to populate referenceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceArnRef")]
    #[builder(default)]
    pub reference_arn_ref: Option<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRef>,
    /// Selector for a ManagedPrefixList in ec2 to populate referenceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceArnSelector")]
    #[builder(default)]
    pub reference_arn_selector: Option<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelector>,
}

/// Reference to a ManagedPrefixList in ec2 to populate referenceArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ManagedPrefixList in ec2 to populate referenceArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupForProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A configuration block that defines additional settings available to use in the rules defined in the rule group. Can only be specified for stateful rule groups. See Rule Variables below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRuleVariables {
    /// Set of configuration blocks that define IP address information. See IP Sets below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSets")]
    #[builder(default)]
    pub ip_sets: Option<Vec<RuleGroupForProviderRuleGroupRuleVariablesIpSets>>,
    /// Set of configuration blocks that define port range information. See Port Sets below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSets")]
    #[builder(default)]
    pub port_sets: Option<Vec<RuleGroupForProviderRuleGroupRuleVariablesPortSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRuleVariablesIpSets {
    /// A configuration block that defines a set of IP addresses. See IP Set below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSet")]
    #[builder(default)]
    pub ip_set: Option<RuleGroupForProviderRuleGroupRuleVariablesIpSetsIpSet>,
    /// An unique alphanumeric string to identify the port_set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// A configuration block that defines a set of IP addresses. See IP Set below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRuleVariablesIpSetsIpSet {
    /// Set of port ranges.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub definition: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRuleVariablesPortSets {
    /// An unique alphanumeric string to identify the port_set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A configuration block that defines a set of port ranges. See Port Set below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSet")]
    #[builder(default)]
    pub port_set: Option<RuleGroupForProviderRuleGroupRuleVariablesPortSetsPortSet>,
}

/// A configuration block that defines a set of port ranges. See Port Set below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRuleVariablesPortSetsPortSet {
    /// Set of port ranges.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub definition: Option<Vec<String>>,
}

/// A configuration block that defines the stateful or stateless rules for the rule group. See Rules Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSource {
    /// A configuration block containing stateful inspection criteria for a domain list rule group. See Rules Source List below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulesSourceList")]
    #[builder(default)]
    pub rules_source_list: Option<RuleGroupForProviderRuleGroupRulesSourceRulesSourceList>,
    /// The fully qualified name of a file in an S3 bucket that contains Suricata compatible intrusion preventions system (IPS) rules or the Suricata rules as a string. These rules contain stateful inspection criteria and the action to take for traffic that matches the criteria.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulesString")]
    #[builder(default)]
    pub rules_string: Option<String>,
    /// Set of configuration blocks containing stateful inspection criteria for 5-tuple rules to be used together in a rule group. See Stateful Rule below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulRule")]
    #[builder(default)]
    pub stateful_rule: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatefulRule>>,
    /// A configuration block containing stateless inspection criteria for a stateless rule group. See Stateless Rules and Custom Actions below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessRulesAndCustomActions")]
    #[builder(default)]
    pub stateless_rules_and_custom_actions: Option<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActions>,
}

/// A configuration block containing stateful inspection criteria for a domain list rule group. See Rules Source List below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceRulesSourceList {
    /// String value to specify whether domains in the target list are allowed or denied access. Valid values: ALLOWLIST, DENYLIST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatedRulesType")]
    #[builder(default)]
    pub generated_rules_type: Option<String>,
    /// Set of types of domain specifications that are provided in the targets argument. Valid values: HTTP_HOST, TLS_SNI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTypes")]
    #[builder(default)]
    pub target_types: Option<Vec<String>>,
    /// Set of domains that you want to inspect for in your traffic flows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub targets: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatefulRule {
    /// Action to take with packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, AWS Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. Valid values: ALERT, DROP, PASS, or REJECT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// A configuration block containing the stateful 5-tuple inspection criteria for the rule, used to inspect traffic flows. See Header below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub header: Option<RuleGroupForProviderRuleGroupRulesSourceStatefulRuleHeader>,
    /// Set of configuration blocks containing additional settings for a stateful rule. See Rule Option below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleOption")]
    #[builder(default)]
    pub rule_option: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatefulRuleRuleOption>>,
}

/// A configuration block containing the stateful 5-tuple inspection criteria for the rule, used to inspect traffic flows. See Header below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatefulRuleHeader {
    /// Set of configuration blocks describing the destination IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. See Destination below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<String>,
    /// Set of configuration blocks describing the destination ports to inspect for. If not specified, this matches with any destination port. See Destination Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPort")]
    #[builder(default)]
    pub destination_port: Option<String>,
    /// The direction of traffic flow to inspect. Valid values: ANY or FORWARD.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub direction: Option<String>,
    /// The protocol to inspect. Valid values: IP, TCP, UDP, ICMP, HTTP, FTP, TLS, SMB, DNS, DCERPC, SSH, SMTP, IMAP, MSN, KRB5, IKEV2, TFTP, NTP, DHCP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
    /// Set of configuration blocks describing the source IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. See Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
    /// Set of configuration blocks describing the source ports to inspect for. If not specified, this matches with any source port. See Source Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePort")]
    #[builder(default)]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatefulRuleRuleOption {
    /// Keyword defined by open source detection systems like Snort or Suricata for stateful rule inspection.
    /// See Snort General Rule Options or Suricata Rule Options for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub keyword: Option<String>,
    /// Set of strings for additional settings to use in stateful rule inspection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub settings: Option<Vec<String>>,
}

/// A configuration block containing stateless inspection criteria for a stateless rule group. See Stateless Rules and Custom Actions below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActions {
    /// Set of configuration blocks containing custom action definitions that are available for use by the set of stateless rule. See Custom Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    #[builder(default)]
    pub custom_action: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction>>,
    /// Set of configuration blocks containing the stateless rules for use in the stateless rule group. See Stateless Rule below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessRule")]
    #[builder(default)]
    pub stateless_rule: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction {
    /// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionDefinition")]
    #[builder(default)]
    pub action_definition: Option<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition>,
    /// A friendly name of the custom action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionName")]
    #[builder(default)]
    pub action_name: Option<String>,
}

/// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition {
    /// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishMetricAction")]
    #[builder(default)]
    pub publish_metric_action: Option<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction>,
}

/// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction {
    /// Set of configuration blocks containing the dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimension: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension {
    /// The value to use in the custom metric dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule {
    /// A setting that indicates the order in which to run this rule relative to all of the rules that are defined for a stateless rule group. AWS Network Firewall evaluates the rules in a rule group starting with the lowest priority setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// A configuration block defining the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria. See Rule Definition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleDefinition")]
    #[builder(default)]
    pub rule_definition: Option<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition>,
}

/// A configuration block defining the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria. See Rule Definition below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition {
    /// Set of actions to take on a packet that matches one of the stateless rule definition's match_attributes. For every rule you must specify 1 standard action, and you can add custom actions. Standard actions include: aws:pass, aws:drop, aws:forward_to_sfe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub actions: Option<Vec<String>>,
    /// A configuration block containing criteria for AWS Network Firewall to use to inspect an individual packet in stateless rule inspection. See Match Attributes below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchAttributes")]
    #[builder(default)]
    pub match_attributes: Option<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes>,
}

/// A configuration block containing criteria for AWS Network Firewall to use to inspect an individual packet in stateless rule inspection. See Match Attributes below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes {
    /// Set of configuration blocks describing the destination IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. See Destination below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination>>,
    /// Set of configuration blocks describing the destination ports to inspect for. If not specified, this matches with any destination port. See Destination Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPort")]
    #[builder(default)]
    pub destination_port: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort>>,
    /// Set of protocols to inspect for, specified using the protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocols: Option<Vec<f64>>,
    /// Set of configuration blocks describing the source IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. See Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource>>,
    /// Set of configuration blocks describing the source ports to inspect for. If not specified, this matches with any source port. See Source Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePort")]
    #[builder(default)]
    pub source_port: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort>>,
    /// Set of configuration blocks containing the TCP flags and masks to inspect for. If not specified, this matches with any settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpFlag")]
    #[builder(default)]
    pub tcp_flag: Option<Vec<RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination {
    /// An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressDefinition")]
    #[builder(default)]
    pub address_definition: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort {
    /// The lower limit of the port range. This must be less than or equal to the to_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    #[builder(default)]
    pub from_port: Option<f64>,
    /// The upper limit of the port range. This must be greater than or equal to the from_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    #[builder(default)]
    pub to_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource {
    /// An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressDefinition")]
    #[builder(default)]
    pub address_definition: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort {
    /// The lower limit of the port range. This must be less than or equal to the to_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    #[builder(default)]
    pub from_port: Option<f64>,
    /// The upper limit of the port range. This must be greater than or equal to the from_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    #[builder(default)]
    pub to_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag {
    /// Set of flags to look for in a packet. This setting can only specify values that are also specified in masks.
    /// Valid values: FIN, SYN, RST, PSH, ACK, URG, ECE, CWR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub flags: Option<Vec<String>>,
    /// Set of flags to consider in the inspection. To inspect all flags, leave this empty.
    /// Valid values: FIN, SYN, RST, PSH, ACK, URG, ECE, CWR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub masks: Option<Vec<String>>,
}

/// A configuration block that defines stateful rule options for the rule group. See Stateful Rule Options below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupForProviderRuleGroupStatefulRuleOptions {
    /// Indicates how to manage the order of the rule evaluation for the rule group. Default value: DEFAULT_ACTION_ORDER. Valid values: DEFAULT_ACTION_ORDER, STRICT_ORDER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleOrder")]
    #[builder(default)]
    pub rule_order: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProvider {
    /// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub capacity: Option<f64>,
    /// A friendly description of the rule group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// KMS encryption configuration settings. See Encryption Configuration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    #[builder(default)]
    pub encryption_configuration: Option<RuleGroupInitProviderEncryptionConfiguration>,
    /// A friendly name of the rule group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A configuration block that defines the rule group rules. Required unless rules is specified. See Rule Group below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleGroup")]
    #[builder(default)]
    pub rule_group: Option<RuleGroupInitProviderRuleGroup>,
    /// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless rule_group is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub rules: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: STATEFUL or STATELESS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// KMS encryption configuration settings. See Encryption Configuration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderEncryptionConfiguration {
    /// The ID of the customer managed key. You can use any of the key identifiers that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
    /// The type of AWS KMS key to use for encryption of your Network Firewall resources. Valid values are CUSTOMER_KMS and AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// A configuration block that defines the rule group rules. Required unless rules is specified. See Rule Group below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroup {
    /// A configuration block that defines the IP Set References for the rule group. See Reference Sets below for details. Please notes that there can only be a maximum of 5 reference_sets in a rule_group. See the AWS documentation for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceSets")]
    #[builder(default)]
    pub reference_sets: Option<RuleGroupInitProviderRuleGroupReferenceSets>,
    /// A configuration block that defines additional settings available to use in the rules defined in the rule group. Can only be specified for stateful rule groups. See Rule Variables below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleVariables")]
    #[builder(default)]
    pub rule_variables: Option<RuleGroupInitProviderRuleGroupRuleVariables>,
    /// A configuration block that defines the stateful or stateless rules for the rule group. See Rules Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulesSource")]
    #[builder(default)]
    pub rules_source: Option<RuleGroupInitProviderRuleGroupRulesSource>,
    /// A configuration block that defines stateful rule options for the rule group. See Stateful Rule Options below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulRuleOptions")]
    #[builder(default)]
    pub stateful_rule_options: Option<RuleGroupInitProviderRuleGroupStatefulRuleOptions>,
}

/// A configuration block that defines the IP Set References for the rule group. See Reference Sets below for details. Please notes that there can only be a maximum of 5 reference_sets in a rule_group. See the AWS documentation for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupReferenceSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSetReferences")]
    #[builder(default)]
    pub ip_set_references: Option<Vec<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferences>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferences {
    /// Set of configuration blocks that define the IP Reference information. See IP Set Reference below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSetReference")]
    #[builder(default)]
    pub ip_set_reference: Option<Vec<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReference>>,
    /// An unique alphanumeric string to identify the port_set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReference {
    /// Set of Managed Prefix IP ARN(s)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceArn")]
    #[builder(default)]
    pub reference_arn: Option<String>,
    /// Reference to a ManagedPrefixList in ec2 to populate referenceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceArnRef")]
    #[builder(default)]
    pub reference_arn_ref: Option<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRef>,
    /// Selector for a ManagedPrefixList in ec2 to populate referenceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceArnSelector")]
    #[builder(default)]
    pub reference_arn_selector: Option<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelector>,
}

/// Reference to a ManagedPrefixList in ec2 to populate referenceArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ManagedPrefixList in ec2 to populate referenceArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupInitProviderRuleGroupReferenceSetsIpSetReferencesIpSetReferenceReferenceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A configuration block that defines additional settings available to use in the rules defined in the rule group. Can only be specified for stateful rule groups. See Rule Variables below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRuleVariables {
    /// Set of configuration blocks that define IP address information. See IP Sets below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSets")]
    #[builder(default)]
    pub ip_sets: Option<Vec<RuleGroupInitProviderRuleGroupRuleVariablesIpSets>>,
    /// Set of configuration blocks that define port range information. See Port Sets below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSets")]
    #[builder(default)]
    pub port_sets: Option<Vec<RuleGroupInitProviderRuleGroupRuleVariablesPortSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRuleVariablesIpSets {
    /// A configuration block that defines a set of IP addresses. See IP Set below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSet")]
    #[builder(default)]
    pub ip_set: Option<RuleGroupInitProviderRuleGroupRuleVariablesIpSetsIpSet>,
    /// An unique alphanumeric string to identify the port_set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// A configuration block that defines a set of IP addresses. See IP Set below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRuleVariablesIpSetsIpSet {
    /// Set of port ranges.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub definition: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRuleVariablesPortSets {
    /// An unique alphanumeric string to identify the port_set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A configuration block that defines a set of port ranges. See Port Set below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSet")]
    #[builder(default)]
    pub port_set: Option<RuleGroupInitProviderRuleGroupRuleVariablesPortSetsPortSet>,
}

/// A configuration block that defines a set of port ranges. See Port Set below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRuleVariablesPortSetsPortSet {
    /// Set of port ranges.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub definition: Option<Vec<String>>,
}

/// A configuration block that defines the stateful or stateless rules for the rule group. See Rules Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSource {
    /// A configuration block containing stateful inspection criteria for a domain list rule group. See Rules Source List below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulesSourceList")]
    #[builder(default)]
    pub rules_source_list: Option<RuleGroupInitProviderRuleGroupRulesSourceRulesSourceList>,
    /// The fully qualified name of a file in an S3 bucket that contains Suricata compatible intrusion preventions system (IPS) rules or the Suricata rules as a string. These rules contain stateful inspection criteria and the action to take for traffic that matches the criteria.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulesString")]
    #[builder(default)]
    pub rules_string: Option<String>,
    /// Set of configuration blocks containing stateful inspection criteria for 5-tuple rules to be used together in a rule group. See Stateful Rule below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulRule")]
    #[builder(default)]
    pub stateful_rule: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatefulRule>>,
    /// A configuration block containing stateless inspection criteria for a stateless rule group. See Stateless Rules and Custom Actions below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessRulesAndCustomActions")]
    #[builder(default)]
    pub stateless_rules_and_custom_actions: Option<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActions>,
}

/// A configuration block containing stateful inspection criteria for a domain list rule group. See Rules Source List below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceRulesSourceList {
    /// String value to specify whether domains in the target list are allowed or denied access. Valid values: ALLOWLIST, DENYLIST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatedRulesType")]
    #[builder(default)]
    pub generated_rules_type: Option<String>,
    /// Set of types of domain specifications that are provided in the targets argument. Valid values: HTTP_HOST, TLS_SNI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTypes")]
    #[builder(default)]
    pub target_types: Option<Vec<String>>,
    /// Set of domains that you want to inspect for in your traffic flows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub targets: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatefulRule {
    /// Action to take with packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, AWS Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. Valid values: ALERT, DROP, PASS, or REJECT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// A configuration block containing the stateful 5-tuple inspection criteria for the rule, used to inspect traffic flows. See Header below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub header: Option<RuleGroupInitProviderRuleGroupRulesSourceStatefulRuleHeader>,
    /// Set of configuration blocks containing additional settings for a stateful rule. See Rule Option below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleOption")]
    #[builder(default)]
    pub rule_option: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatefulRuleRuleOption>>,
}

/// A configuration block containing the stateful 5-tuple inspection criteria for the rule, used to inspect traffic flows. See Header below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatefulRuleHeader {
    /// Set of configuration blocks describing the destination IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. See Destination below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<String>,
    /// Set of configuration blocks describing the destination ports to inspect for. If not specified, this matches with any destination port. See Destination Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPort")]
    #[builder(default)]
    pub destination_port: Option<String>,
    /// The direction of traffic flow to inspect. Valid values: ANY or FORWARD.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub direction: Option<String>,
    /// The protocol to inspect. Valid values: IP, TCP, UDP, ICMP, HTTP, FTP, TLS, SMB, DNS, DCERPC, SSH, SMTP, IMAP, MSN, KRB5, IKEV2, TFTP, NTP, DHCP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
    /// Set of configuration blocks describing the source IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. See Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
    /// Set of configuration blocks describing the source ports to inspect for. If not specified, this matches with any source port. See Source Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePort")]
    #[builder(default)]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatefulRuleRuleOption {
    /// Keyword defined by open source detection systems like Snort or Suricata for stateful rule inspection.
    /// See Snort General Rule Options or Suricata Rule Options for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub keyword: Option<String>,
    /// Set of strings for additional settings to use in stateful rule inspection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub settings: Option<Vec<String>>,
}

/// A configuration block containing stateless inspection criteria for a stateless rule group. See Stateless Rules and Custom Actions below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActions {
    /// Set of configuration blocks containing custom action definitions that are available for use by the set of stateless rule. See Custom Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    #[builder(default)]
    pub custom_action: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction>>,
    /// Set of configuration blocks containing the stateless rules for use in the stateless rule group. See Stateless Rule below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessRule")]
    #[builder(default)]
    pub stateless_rule: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction {
    /// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionDefinition")]
    #[builder(default)]
    pub action_definition: Option<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition>,
    /// A friendly name of the custom action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionName")]
    #[builder(default)]
    pub action_name: Option<String>,
}

/// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition {
    /// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishMetricAction")]
    #[builder(default)]
    pub publish_metric_action: Option<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction>,
}

/// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction {
    /// Set of configuration blocks containing the dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimension: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension {
    /// The value to use in the custom metric dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule {
    /// A setting that indicates the order in which to run this rule relative to all of the rules that are defined for a stateless rule group. AWS Network Firewall evaluates the rules in a rule group starting with the lowest priority setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// A configuration block defining the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria. See Rule Definition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleDefinition")]
    #[builder(default)]
    pub rule_definition: Option<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition>,
}

/// A configuration block defining the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria. See Rule Definition below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition {
    /// Set of actions to take on a packet that matches one of the stateless rule definition's match_attributes. For every rule you must specify 1 standard action, and you can add custom actions. Standard actions include: aws:pass, aws:drop, aws:forward_to_sfe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub actions: Option<Vec<String>>,
    /// A configuration block containing criteria for AWS Network Firewall to use to inspect an individual packet in stateless rule inspection. See Match Attributes below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchAttributes")]
    #[builder(default)]
    pub match_attributes: Option<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes>,
}

/// A configuration block containing criteria for AWS Network Firewall to use to inspect an individual packet in stateless rule inspection. See Match Attributes below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes {
    /// Set of configuration blocks describing the destination IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. See Destination below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination>>,
    /// Set of configuration blocks describing the destination ports to inspect for. If not specified, this matches with any destination port. See Destination Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPort")]
    #[builder(default)]
    pub destination_port: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort>>,
    /// Set of protocols to inspect for, specified using the protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocols: Option<Vec<f64>>,
    /// Set of configuration blocks describing the source IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. See Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource>>,
    /// Set of configuration blocks describing the source ports to inspect for. If not specified, this matches with any source port. See Source Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePort")]
    #[builder(default)]
    pub source_port: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort>>,
    /// Set of configuration blocks containing the TCP flags and masks to inspect for. If not specified, this matches with any settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpFlag")]
    #[builder(default)]
    pub tcp_flag: Option<Vec<RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination {
    /// An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressDefinition")]
    #[builder(default)]
    pub address_definition: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort {
    /// The lower limit of the port range. This must be less than or equal to the to_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    #[builder(default)]
    pub from_port: Option<f64>,
    /// The upper limit of the port range. This must be greater than or equal to the from_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    #[builder(default)]
    pub to_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource {
    /// An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressDefinition")]
    #[builder(default)]
    pub address_definition: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort {
    /// The lower limit of the port range. This must be less than or equal to the to_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    #[builder(default)]
    pub from_port: Option<f64>,
    /// The upper limit of the port range. This must be greater than or equal to the from_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    #[builder(default)]
    pub to_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag {
    /// Set of flags to look for in a packet. This setting can only specify values that are also specified in masks.
    /// Valid values: FIN, SYN, RST, PSH, ACK, URG, ECE, CWR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub flags: Option<Vec<String>>,
    /// Set of flags to consider in the inspection. To inspect all flags, leave this empty.
    /// Valid values: FIN, SYN, RST, PSH, ACK, URG, ECE, CWR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub masks: Option<Vec<String>>,
}

/// A configuration block that defines stateful rule options for the rule group. See Stateful Rule Options below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupInitProviderRuleGroupStatefulRuleOptions {
    /// Indicates how to manage the order of the rule evaluation for the rule group. Default value: DEFAULT_ACTION_ORDER. Valid values: DEFAULT_ACTION_ORDER, STRICT_ORDER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleOrder")]
    #[builder(default)]
    pub rule_order: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RuleGroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RuleGroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RuleGroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<RuleGroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<RuleGroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RuleGroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RuleGroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RuleGroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuleGroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RuleGroupStatus defines the observed state of RuleGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<RuleGroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProvider {
    /// The Amazon Resource Name (ARN) that identifies the rule group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub capacity: Option<f64>,
    /// A friendly description of the rule group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// KMS encryption configuration settings. See Encryption Configuration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    #[builder(default)]
    pub encryption_configuration: Option<RuleGroupStatusAtProviderEncryptionConfiguration>,
    /// The Amazon Resource Name (ARN) that identifies the rule group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// A friendly name of the rule group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A configuration block that defines the rule group rules. Required unless rules is specified. See Rule Group below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleGroup")]
    #[builder(default)]
    pub rule_group: Option<RuleGroupStatusAtProviderRuleGroup>,
    /// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless rule_group is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub rules: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: STATEFUL or STATELESS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// A string token used when updating the rule group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateToken")]
    #[builder(default)]
    pub update_token: Option<String>,
}

/// KMS encryption configuration settings. See Encryption Configuration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderEncryptionConfiguration {
    /// The ID of the customer managed key. You can use any of the key identifiers that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
    /// The type of AWS KMS key to use for encryption of your Network Firewall resources. Valid values are CUSTOMER_KMS and AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// A configuration block that defines the rule group rules. Required unless rules is specified. See Rule Group below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroup {
    /// A configuration block that defines the IP Set References for the rule group. See Reference Sets below for details. Please notes that there can only be a maximum of 5 reference_sets in a rule_group. See the AWS documentation for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceSets")]
    #[builder(default)]
    pub reference_sets: Option<RuleGroupStatusAtProviderRuleGroupReferenceSets>,
    /// A configuration block that defines additional settings available to use in the rules defined in the rule group. Can only be specified for stateful rule groups. See Rule Variables below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleVariables")]
    #[builder(default)]
    pub rule_variables: Option<RuleGroupStatusAtProviderRuleGroupRuleVariables>,
    /// A configuration block that defines the stateful or stateless rules for the rule group. See Rules Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulesSource")]
    #[builder(default)]
    pub rules_source: Option<RuleGroupStatusAtProviderRuleGroupRulesSource>,
    /// A configuration block that defines stateful rule options for the rule group. See Stateful Rule Options below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulRuleOptions")]
    #[builder(default)]
    pub stateful_rule_options: Option<RuleGroupStatusAtProviderRuleGroupStatefulRuleOptions>,
}

/// A configuration block that defines the IP Set References for the rule group. See Reference Sets below for details. Please notes that there can only be a maximum of 5 reference_sets in a rule_group. See the AWS documentation for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupReferenceSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSetReferences")]
    #[builder(default)]
    pub ip_set_references: Option<Vec<RuleGroupStatusAtProviderRuleGroupReferenceSetsIpSetReferences>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupReferenceSetsIpSetReferences {
    /// Set of configuration blocks that define the IP Reference information. See IP Set Reference below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSetReference")]
    #[builder(default)]
    pub ip_set_reference: Option<Vec<RuleGroupStatusAtProviderRuleGroupReferenceSetsIpSetReferencesIpSetReference>>,
    /// An unique alphanumeric string to identify the port_set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupReferenceSetsIpSetReferencesIpSetReference {
    /// Set of Managed Prefix IP ARN(s)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceArn")]
    #[builder(default)]
    pub reference_arn: Option<String>,
}

/// A configuration block that defines additional settings available to use in the rules defined in the rule group. Can only be specified for stateful rule groups. See Rule Variables below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRuleVariables {
    /// Set of configuration blocks that define IP address information. See IP Sets below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSets")]
    #[builder(default)]
    pub ip_sets: Option<Vec<RuleGroupStatusAtProviderRuleGroupRuleVariablesIpSets>>,
    /// Set of configuration blocks that define port range information. See Port Sets below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSets")]
    #[builder(default)]
    pub port_sets: Option<Vec<RuleGroupStatusAtProviderRuleGroupRuleVariablesPortSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRuleVariablesIpSets {
    /// A configuration block that defines a set of IP addresses. See IP Set below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSet")]
    #[builder(default)]
    pub ip_set: Option<RuleGroupStatusAtProviderRuleGroupRuleVariablesIpSetsIpSet>,
    /// An unique alphanumeric string to identify the port_set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// A configuration block that defines a set of IP addresses. See IP Set below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRuleVariablesIpSetsIpSet {
    /// Set of port ranges.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub definition: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRuleVariablesPortSets {
    /// An unique alphanumeric string to identify the port_set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A configuration block that defines a set of port ranges. See Port Set below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSet")]
    #[builder(default)]
    pub port_set: Option<RuleGroupStatusAtProviderRuleGroupRuleVariablesPortSetsPortSet>,
}

/// A configuration block that defines a set of port ranges. See Port Set below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRuleVariablesPortSetsPortSet {
    /// Set of port ranges.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub definition: Option<Vec<String>>,
}

/// A configuration block that defines the stateful or stateless rules for the rule group. See Rules Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSource {
    /// A configuration block containing stateful inspection criteria for a domain list rule group. See Rules Source List below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulesSourceList")]
    #[builder(default)]
    pub rules_source_list: Option<RuleGroupStatusAtProviderRuleGroupRulesSourceRulesSourceList>,
    /// The fully qualified name of a file in an S3 bucket that contains Suricata compatible intrusion preventions system (IPS) rules or the Suricata rules as a string. These rules contain stateful inspection criteria and the action to take for traffic that matches the criteria.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulesString")]
    #[builder(default)]
    pub rules_string: Option<String>,
    /// Set of configuration blocks containing stateful inspection criteria for 5-tuple rules to be used together in a rule group. See Stateful Rule below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulRule")]
    #[builder(default)]
    pub stateful_rule: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatefulRule>>,
    /// A configuration block containing stateless inspection criteria for a stateless rule group. See Stateless Rules and Custom Actions below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessRulesAndCustomActions")]
    #[builder(default)]
    pub stateless_rules_and_custom_actions: Option<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActions>,
}

/// A configuration block containing stateful inspection criteria for a domain list rule group. See Rules Source List below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceRulesSourceList {
    /// String value to specify whether domains in the target list are allowed or denied access. Valid values: ALLOWLIST, DENYLIST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatedRulesType")]
    #[builder(default)]
    pub generated_rules_type: Option<String>,
    /// Set of types of domain specifications that are provided in the targets argument. Valid values: HTTP_HOST, TLS_SNI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTypes")]
    #[builder(default)]
    pub target_types: Option<Vec<String>>,
    /// Set of domains that you want to inspect for in your traffic flows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub targets: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatefulRule {
    /// Action to take with packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, AWS Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. Valid values: ALERT, DROP, PASS, or REJECT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// A configuration block containing the stateful 5-tuple inspection criteria for the rule, used to inspect traffic flows. See Header below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub header: Option<RuleGroupStatusAtProviderRuleGroupRulesSourceStatefulRuleHeader>,
    /// Set of configuration blocks containing additional settings for a stateful rule. See Rule Option below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleOption")]
    #[builder(default)]
    pub rule_option: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatefulRuleRuleOption>>,
}

/// A configuration block containing the stateful 5-tuple inspection criteria for the rule, used to inspect traffic flows. See Header below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatefulRuleHeader {
    /// Set of configuration blocks describing the destination IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. See Destination below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<String>,
    /// Set of configuration blocks describing the destination ports to inspect for. If not specified, this matches with any destination port. See Destination Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPort")]
    #[builder(default)]
    pub destination_port: Option<String>,
    /// The direction of traffic flow to inspect. Valid values: ANY or FORWARD.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub direction: Option<String>,
    /// The protocol to inspect. Valid values: IP, TCP, UDP, ICMP, HTTP, FTP, TLS, SMB, DNS, DCERPC, SSH, SMTP, IMAP, MSN, KRB5, IKEV2, TFTP, NTP, DHCP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
    /// Set of configuration blocks describing the source IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. See Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
    /// Set of configuration blocks describing the source ports to inspect for. If not specified, this matches with any source port. See Source Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePort")]
    #[builder(default)]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatefulRuleRuleOption {
    /// Keyword defined by open source detection systems like Snort or Suricata for stateful rule inspection.
    /// See Snort General Rule Options or Suricata Rule Options for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub keyword: Option<String>,
    /// Set of strings for additional settings to use in stateful rule inspection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub settings: Option<Vec<String>>,
}

/// A configuration block containing stateless inspection criteria for a stateless rule group. See Stateless Rules and Custom Actions below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActions {
    /// Set of configuration blocks containing custom action definitions that are available for use by the set of stateless rule. See Custom Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    #[builder(default)]
    pub custom_action: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction>>,
    /// Set of configuration blocks containing the stateless rules for use in the stateless rule group. See Stateless Rule below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessRule")]
    #[builder(default)]
    pub stateless_rule: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction {
    /// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionDefinition")]
    #[builder(default)]
    pub action_definition: Option<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition>,
    /// A friendly name of the custom action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionName")]
    #[builder(default)]
    pub action_name: Option<String>,
}

/// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition {
    /// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishMetricAction")]
    #[builder(default)]
    pub publish_metric_action: Option<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction>,
}

/// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction {
    /// Set of configuration blocks containing the dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimension: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension {
    /// The value to use in the custom metric dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule {
    /// A setting that indicates the order in which to run this rule relative to all of the rules that are defined for a stateless rule group. AWS Network Firewall evaluates the rules in a rule group starting with the lowest priority setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// A configuration block defining the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria. See Rule Definition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleDefinition")]
    #[builder(default)]
    pub rule_definition: Option<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition>,
}

/// A configuration block defining the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria. See Rule Definition below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition {
    /// Set of actions to take on a packet that matches one of the stateless rule definition's match_attributes. For every rule you must specify 1 standard action, and you can add custom actions. Standard actions include: aws:pass, aws:drop, aws:forward_to_sfe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub actions: Option<Vec<String>>,
    /// A configuration block containing criteria for AWS Network Firewall to use to inspect an individual packet in stateless rule inspection. See Match Attributes below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchAttributes")]
    #[builder(default)]
    pub match_attributes: Option<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes>,
}

/// A configuration block containing criteria for AWS Network Firewall to use to inspect an individual packet in stateless rule inspection. See Match Attributes below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes {
    /// Set of configuration blocks describing the destination IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. See Destination below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination>>,
    /// Set of configuration blocks describing the destination ports to inspect for. If not specified, this matches with any destination port. See Destination Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPort")]
    #[builder(default)]
    pub destination_port: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort>>,
    /// Set of protocols to inspect for, specified using the protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocols: Option<Vec<f64>>,
    /// Set of configuration blocks describing the source IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. See Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource>>,
    /// Set of configuration blocks describing the source ports to inspect for. If not specified, this matches with any source port. See Source Port below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePort")]
    #[builder(default)]
    pub source_port: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort>>,
    /// Set of configuration blocks containing the TCP flags and masks to inspect for. If not specified, this matches with any settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpFlag")]
    #[builder(default)]
    pub tcp_flag: Option<Vec<RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination {
    /// An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressDefinition")]
    #[builder(default)]
    pub address_definition: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort {
    /// The lower limit of the port range. This must be less than or equal to the to_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    #[builder(default)]
    pub from_port: Option<f64>,
    /// The upper limit of the port range. This must be greater than or equal to the from_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    #[builder(default)]
    pub to_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource {
    /// An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressDefinition")]
    #[builder(default)]
    pub address_definition: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort {
    /// The lower limit of the port range. This must be less than or equal to the to_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    #[builder(default)]
    pub from_port: Option<f64>,
    /// The upper limit of the port range. This must be greater than or equal to the from_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    #[builder(default)]
    pub to_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag {
    /// Set of flags to look for in a packet. This setting can only specify values that are also specified in masks.
    /// Valid values: FIN, SYN, RST, PSH, ACK, URG, ECE, CWR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub flags: Option<Vec<String>>,
    /// Set of flags to consider in the inspection. To inspect all flags, leave this empty.
    /// Valid values: FIN, SYN, RST, PSH, ACK, URG, ECE, CWR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub masks: Option<Vec<String>>,
}

/// A configuration block that defines stateful rule options for the rule group. See Stateful Rule Options below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RuleGroupStatusAtProviderRuleGroupStatefulRuleOptions {
    /// Indicates how to manage the order of the rule evaluation for the rule group. Default value: DEFAULT_ACTION_ORDER. Valid values: DEFAULT_ACTION_ORDER, STRICT_ORDER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleOrder")]
    #[builder(default)]
    pub rule_order: Option<String>,
}


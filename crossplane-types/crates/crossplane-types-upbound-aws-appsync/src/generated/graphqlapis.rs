// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// GraphQLAPISpec defines the desired state of GraphQLAPI
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "appsync.aws.upbound.io", version = "v1beta2", kind = "GraphQLAPI", plural = "graphqlapis")]
#[kube(status = "GraphQLAPIStatus")]
pub struct GraphQLAPISpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<GraphQLAPIDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: GraphQLAPIForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<GraphQLAPIInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<GraphQLAPIProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<GraphQLAPIPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<GraphQLAPIWriteConnectionSecretToRef>,
}

/// GraphQLAPISpec defines the desired state of GraphQLAPI
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProvider {
    /// One or more additional authentication providers for the GraphQL API. See additional_authentication_provider Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalAuthenticationProvider")]
    #[builder(default)]
    pub additional_authentication_provider: Option<Vec<GraphQLAPIForProviderAdditionalAuthenticationProvider>>,
    /// API type. Valid values are GRAPHQL or MERGED. A MERGED type requires merged_api_execution_role_arn to be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiType")]
    #[builder(default)]
    pub api_type: Option<String>,
    /// Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationType")]
    #[builder(default)]
    pub authentication_type: Option<String>,
    /// Enables and controls the enhanced metrics feature. See enhanced_metrics_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedMetricsConfig")]
    #[builder(default)]
    pub enhanced_metrics_config: Option<GraphQLAPIForProviderEnhancedMetricsConfig>,
    /// Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled. For more information about introspection, see GraphQL introspection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "introspectionConfig")]
    #[builder(default)]
    pub introspection_config: Option<String>,
    /// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaAuthorizerConfig")]
    #[builder(default)]
    pub lambda_authorizer_config: Option<GraphQLAPIForProviderLambdaAuthorizerConfig>,
    /// Nested argument containing logging configuration. See log_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<GraphQLAPIForProviderLogConfig>,
    /// ARN of the execution role when api_type is set to MERGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergedApiExecutionRoleArn")]
    #[builder(default)]
    pub merged_api_execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate mergedApiExecutionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergedApiExecutionRoleArnRef")]
    #[builder(default)]
    pub merged_api_execution_role_arn_ref: Option<GraphQLAPIForProviderMergedApiExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate mergedApiExecutionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergedApiExecutionRoleArnSelector")]
    #[builder(default)]
    pub merged_api_execution_role_arn_selector: Option<GraphQLAPIForProviderMergedApiExecutionRoleArnSelector>,
    /// User-supplied name for the GraphQL API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openidConnectConfig")]
    #[builder(default)]
    pub openid_connect_config: Option<GraphQLAPIForProviderOpenidConnectConfig>,
    /// The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query. The default value is 0 (or unspecified), which indicates there's no depth limit. If you set a limit, it can be between 1 and 75 nested levels. This field will produce a limit error if the operation falls out of bounds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryDepthLimit")]
    #[builder(default)]
    pub query_depth_limit: Option<f64>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The maximum number of resolvers that can be invoked in a single request. The default value is 0 (or unspecified), which will set the limit to 10000. When specified, the limit value can be between 1 and 10000. This field will produce a limit error if the operation falls out of bounds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverCountLimit")]
    #[builder(default)]
    pub resolver_count_limit: Option<f64>,
    /// Schema definition, in GraphQL schema language format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schema: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolConfig")]
    #[builder(default)]
    pub user_pool_config: Option<GraphQLAPIForProviderUserPoolConfig>,
    /// Sets the value of the GraphQL API to public (GLOBAL) or private (PRIVATE). If no value is provided, the visibility will be set to GLOBAL by default. This value cannot be changed once the API has been created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub visibility: Option<String>,
    /// Whether tracing with X-ray is enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xrayEnabled")]
    #[builder(default)]
    pub xray_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderAdditionalAuthenticationProvider {
    /// Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationType")]
    #[builder(default)]
    pub authentication_type: Option<String>,
    /// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaAuthorizerConfig")]
    #[builder(default)]
    pub lambda_authorizer_config: Option<GraphQLAPIForProviderAdditionalAuthenticationProviderLambdaAuthorizerConfig>,
    /// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openidConnectConfig")]
    #[builder(default)]
    pub openid_connect_config: Option<GraphQLAPIForProviderAdditionalAuthenticationProviderOpenidConnectConfig>,
    /// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolConfig")]
    #[builder(default)]
    pub user_pool_config: Option<GraphQLAPIForProviderAdditionalAuthenticationProviderUserPoolConfig>,
}

/// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderAdditionalAuthenticationProviderLambdaAuthorizerConfig {
    /// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerResultTtlInSeconds")]
    #[builder(default)]
    pub authorizer_result_ttl_in_seconds: Option<f64>,
    /// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerUri")]
    #[builder(default)]
    pub authorizer_uri: Option<String>,
    /// Regular expression for validation of tokens before the Lambda function is called.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityValidationExpression")]
    #[builder(default)]
    pub identity_validation_expression: Option<String>,
}

/// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderAdditionalAuthenticationProviderOpenidConnectConfig {
    /// Number of milliseconds a token is valid after being authenticated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTtl")]
    #[builder(default)]
    pub auth_ttl: Option<f64>,
    /// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    #[builder(default)]
    pub client_id: Option<String>,
    /// Number of milliseconds a token is valid after being issued to a user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iatTtl")]
    #[builder(default)]
    pub iat_ttl: Option<f64>,
    /// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub issuer: Option<String>,
}

/// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderAdditionalAuthenticationProviderUserPoolConfig {
    /// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appIdClientRegex")]
    #[builder(default)]
    pub app_id_client_regex: Option<String>,
    /// AWS region in which the user pool was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    #[builder(default)]
    pub aws_region: Option<String>,
    /// User pool ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolId")]
    #[builder(default)]
    pub user_pool_id: Option<String>,
}

/// Enables and controls the enhanced metrics feature. See enhanced_metrics_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderEnhancedMetricsConfig {
    /// How data source metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_DATA_SOURCE_METRICS, PER_DATA_SOURCE_METRICS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceLevelMetricsBehavior")]
    #[builder(default)]
    pub data_source_level_metrics_behavior: Option<String>,
    /// How operation metrics will be emitted to CloudWatch. Valid values: ENABLED, DISABLED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationLevelMetricsConfig")]
    #[builder(default)]
    pub operation_level_metrics_config: Option<String>,
    /// How resolver metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_RESOLVER_METRICS, PER_RESOLVER_METRICS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverLevelMetricsBehavior")]
    #[builder(default)]
    pub resolver_level_metrics_behavior: Option<String>,
}

/// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderLambdaAuthorizerConfig {
    /// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerResultTtlInSeconds")]
    #[builder(default)]
    pub authorizer_result_ttl_in_seconds: Option<f64>,
    /// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerUri")]
    #[builder(default)]
    pub authorizer_uri: Option<String>,
    /// Regular expression for validation of tokens before the Lambda function is called.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityValidationExpression")]
    #[builder(default)]
    pub identity_validation_expression: Option<String>,
}

/// Nested argument containing logging configuration. See log_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderLogConfig {
    /// Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogsRoleArn")]
    #[builder(default)]
    pub cloudwatch_logs_role_arn: Option<String>,
    /// Reference to a Role in iam to populate cloudwatchLogsRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogsRoleArnRef")]
    #[builder(default)]
    pub cloudwatch_logs_role_arn_ref: Option<GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnRef>,
    /// Selector for a Role in iam to populate cloudwatchLogsRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogsRoleArnSelector")]
    #[builder(default)]
    pub cloudwatch_logs_role_arn_selector: Option<GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnSelector>,
    /// Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: true, false. Default value: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeVerboseContent")]
    #[builder(default)]
    pub exclude_verbose_content: Option<bool>,
    /// Field logging level. Valid values: ALL, ERROR, NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldLogLevel")]
    #[builder(default)]
    pub field_log_level: Option<String>,
}

/// Reference to a Role in iam to populate cloudwatchLogsRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate cloudwatchLogsRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderLogConfigCloudwatchLogsRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate mergedApiExecutionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderMergedApiExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIForProviderMergedApiExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderMergedApiExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIForProviderMergedApiExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIForProviderMergedApiExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderMergedApiExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderMergedApiExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate mergedApiExecutionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderMergedApiExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIForProviderMergedApiExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderMergedApiExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIForProviderMergedApiExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIForProviderMergedApiExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderMergedApiExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderMergedApiExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderOpenidConnectConfig {
    /// Number of milliseconds a token is valid after being authenticated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTtl")]
    #[builder(default)]
    pub auth_ttl: Option<f64>,
    /// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    #[builder(default)]
    pub client_id: Option<String>,
    /// Number of milliseconds a token is valid after being issued to a user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iatTtl")]
    #[builder(default)]
    pub iat_ttl: Option<f64>,
    /// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub issuer: Option<String>,
}

/// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderUserPoolConfig {
    /// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appIdClientRegex")]
    #[builder(default)]
    pub app_id_client_regex: Option<String>,
    /// AWS region in which the user pool was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    #[builder(default)]
    pub aws_region: Option<String>,
    /// Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: ALLOW and DENY
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    #[builder(default)]
    pub default_action: Option<String>,
    /// User pool ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolId")]
    #[builder(default)]
    pub user_pool_id: Option<String>,
    /// Reference to a UserPool in cognitoidp to populate userPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolIdRef")]
    #[builder(default)]
    pub user_pool_id_ref: Option<GraphQLAPIForProviderUserPoolConfigUserPoolIdRef>,
    /// Selector for a UserPool in cognitoidp to populate userPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolIdSelector")]
    #[builder(default)]
    pub user_pool_id_selector: Option<GraphQLAPIForProviderUserPoolConfigUserPoolIdSelector>,
}

/// Reference to a UserPool in cognitoidp to populate userPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderUserPoolConfigUserPoolIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIForProviderUserPoolConfigUserPoolIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderUserPoolConfigUserPoolIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIForProviderUserPoolConfigUserPoolIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIForProviderUserPoolConfigUserPoolIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderUserPoolConfigUserPoolIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderUserPoolConfigUserPoolIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPool in cognitoidp to populate userPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderUserPoolConfigUserPoolIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIForProviderUserPoolConfigUserPoolIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIForProviderUserPoolConfigUserPoolIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIForProviderUserPoolConfigUserPoolIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIForProviderUserPoolConfigUserPoolIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderUserPoolConfigUserPoolIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIForProviderUserPoolConfigUserPoolIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProvider {
    /// One or more additional authentication providers for the GraphQL API. See additional_authentication_provider Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalAuthenticationProvider")]
    #[builder(default)]
    pub additional_authentication_provider: Option<Vec<GraphQLAPIInitProviderAdditionalAuthenticationProvider>>,
    /// API type. Valid values are GRAPHQL or MERGED. A MERGED type requires merged_api_execution_role_arn to be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiType")]
    #[builder(default)]
    pub api_type: Option<String>,
    /// Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationType")]
    #[builder(default)]
    pub authentication_type: Option<String>,
    /// Enables and controls the enhanced metrics feature. See enhanced_metrics_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedMetricsConfig")]
    #[builder(default)]
    pub enhanced_metrics_config: Option<GraphQLAPIInitProviderEnhancedMetricsConfig>,
    /// Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled. For more information about introspection, see GraphQL introspection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "introspectionConfig")]
    #[builder(default)]
    pub introspection_config: Option<String>,
    /// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaAuthorizerConfig")]
    #[builder(default)]
    pub lambda_authorizer_config: Option<GraphQLAPIInitProviderLambdaAuthorizerConfig>,
    /// Nested argument containing logging configuration. See log_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<GraphQLAPIInitProviderLogConfig>,
    /// ARN of the execution role when api_type is set to MERGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergedApiExecutionRoleArn")]
    #[builder(default)]
    pub merged_api_execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate mergedApiExecutionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergedApiExecutionRoleArnRef")]
    #[builder(default)]
    pub merged_api_execution_role_arn_ref: Option<GraphQLAPIInitProviderMergedApiExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate mergedApiExecutionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergedApiExecutionRoleArnSelector")]
    #[builder(default)]
    pub merged_api_execution_role_arn_selector: Option<GraphQLAPIInitProviderMergedApiExecutionRoleArnSelector>,
    /// User-supplied name for the GraphQL API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openidConnectConfig")]
    #[builder(default)]
    pub openid_connect_config: Option<GraphQLAPIInitProviderOpenidConnectConfig>,
    /// The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query. The default value is 0 (or unspecified), which indicates there's no depth limit. If you set a limit, it can be between 1 and 75 nested levels. This field will produce a limit error if the operation falls out of bounds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryDepthLimit")]
    #[builder(default)]
    pub query_depth_limit: Option<f64>,
    /// The maximum number of resolvers that can be invoked in a single request. The default value is 0 (or unspecified), which will set the limit to 10000. When specified, the limit value can be between 1 and 10000. This field will produce a limit error if the operation falls out of bounds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverCountLimit")]
    #[builder(default)]
    pub resolver_count_limit: Option<f64>,
    /// Schema definition, in GraphQL schema language format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schema: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolConfig")]
    #[builder(default)]
    pub user_pool_config: Option<GraphQLAPIInitProviderUserPoolConfig>,
    /// Sets the value of the GraphQL API to public (GLOBAL) or private (PRIVATE). If no value is provided, the visibility will be set to GLOBAL by default. This value cannot be changed once the API has been created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub visibility: Option<String>,
    /// Whether tracing with X-ray is enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xrayEnabled")]
    #[builder(default)]
    pub xray_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderAdditionalAuthenticationProvider {
    /// Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationType")]
    #[builder(default)]
    pub authentication_type: Option<String>,
    /// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaAuthorizerConfig")]
    #[builder(default)]
    pub lambda_authorizer_config: Option<GraphQLAPIInitProviderAdditionalAuthenticationProviderLambdaAuthorizerConfig>,
    /// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openidConnectConfig")]
    #[builder(default)]
    pub openid_connect_config: Option<GraphQLAPIInitProviderAdditionalAuthenticationProviderOpenidConnectConfig>,
    /// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolConfig")]
    #[builder(default)]
    pub user_pool_config: Option<GraphQLAPIInitProviderAdditionalAuthenticationProviderUserPoolConfig>,
}

/// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderAdditionalAuthenticationProviderLambdaAuthorizerConfig {
    /// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerResultTtlInSeconds")]
    #[builder(default)]
    pub authorizer_result_ttl_in_seconds: Option<f64>,
    /// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerUri")]
    #[builder(default)]
    pub authorizer_uri: Option<String>,
    /// Regular expression for validation of tokens before the Lambda function is called.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityValidationExpression")]
    #[builder(default)]
    pub identity_validation_expression: Option<String>,
}

/// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderAdditionalAuthenticationProviderOpenidConnectConfig {
    /// Number of milliseconds a token is valid after being authenticated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTtl")]
    #[builder(default)]
    pub auth_ttl: Option<f64>,
    /// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    #[builder(default)]
    pub client_id: Option<String>,
    /// Number of milliseconds a token is valid after being issued to a user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iatTtl")]
    #[builder(default)]
    pub iat_ttl: Option<f64>,
    /// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub issuer: Option<String>,
}

/// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderAdditionalAuthenticationProviderUserPoolConfig {
    /// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appIdClientRegex")]
    #[builder(default)]
    pub app_id_client_regex: Option<String>,
    /// AWS region in which the user pool was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    #[builder(default)]
    pub aws_region: Option<String>,
    /// User pool ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolId")]
    #[builder(default)]
    pub user_pool_id: Option<String>,
}

/// Enables and controls the enhanced metrics feature. See enhanced_metrics_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderEnhancedMetricsConfig {
    /// How data source metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_DATA_SOURCE_METRICS, PER_DATA_SOURCE_METRICS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceLevelMetricsBehavior")]
    #[builder(default)]
    pub data_source_level_metrics_behavior: Option<String>,
    /// How operation metrics will be emitted to CloudWatch. Valid values: ENABLED, DISABLED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationLevelMetricsConfig")]
    #[builder(default)]
    pub operation_level_metrics_config: Option<String>,
    /// How resolver metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_RESOLVER_METRICS, PER_RESOLVER_METRICS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverLevelMetricsBehavior")]
    #[builder(default)]
    pub resolver_level_metrics_behavior: Option<String>,
}

/// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderLambdaAuthorizerConfig {
    /// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerResultTtlInSeconds")]
    #[builder(default)]
    pub authorizer_result_ttl_in_seconds: Option<f64>,
    /// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerUri")]
    #[builder(default)]
    pub authorizer_uri: Option<String>,
    /// Regular expression for validation of tokens before the Lambda function is called.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityValidationExpression")]
    #[builder(default)]
    pub identity_validation_expression: Option<String>,
}

/// Nested argument containing logging configuration. See log_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderLogConfig {
    /// Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogsRoleArn")]
    #[builder(default)]
    pub cloudwatch_logs_role_arn: Option<String>,
    /// Reference to a Role in iam to populate cloudwatchLogsRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogsRoleArnRef")]
    #[builder(default)]
    pub cloudwatch_logs_role_arn_ref: Option<GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnRef>,
    /// Selector for a Role in iam to populate cloudwatchLogsRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogsRoleArnSelector")]
    #[builder(default)]
    pub cloudwatch_logs_role_arn_selector: Option<GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnSelector>,
    /// Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: true, false. Default value: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeVerboseContent")]
    #[builder(default)]
    pub exclude_verbose_content: Option<bool>,
    /// Field logging level. Valid values: ALL, ERROR, NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldLogLevel")]
    #[builder(default)]
    pub field_log_level: Option<String>,
}

/// Reference to a Role in iam to populate cloudwatchLogsRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate cloudwatchLogsRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderLogConfigCloudwatchLogsRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate mergedApiExecutionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderMergedApiExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIInitProviderMergedApiExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderMergedApiExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIInitProviderMergedApiExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIInitProviderMergedApiExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderMergedApiExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderMergedApiExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate mergedApiExecutionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderMergedApiExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIInitProviderMergedApiExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderMergedApiExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIInitProviderMergedApiExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIInitProviderMergedApiExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderMergedApiExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderMergedApiExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderOpenidConnectConfig {
    /// Number of milliseconds a token is valid after being authenticated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTtl")]
    #[builder(default)]
    pub auth_ttl: Option<f64>,
    /// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    #[builder(default)]
    pub client_id: Option<String>,
    /// Number of milliseconds a token is valid after being issued to a user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iatTtl")]
    #[builder(default)]
    pub iat_ttl: Option<f64>,
    /// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub issuer: Option<String>,
}

/// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderUserPoolConfig {
    /// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appIdClientRegex")]
    #[builder(default)]
    pub app_id_client_regex: Option<String>,
    /// AWS region in which the user pool was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    #[builder(default)]
    pub aws_region: Option<String>,
    /// Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: ALLOW and DENY
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    #[builder(default)]
    pub default_action: Option<String>,
    /// User pool ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolId")]
    #[builder(default)]
    pub user_pool_id: Option<String>,
    /// Reference to a UserPool in cognitoidp to populate userPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolIdRef")]
    #[builder(default)]
    pub user_pool_id_ref: Option<GraphQLAPIInitProviderUserPoolConfigUserPoolIdRef>,
    /// Selector for a UserPool in cognitoidp to populate userPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolIdSelector")]
    #[builder(default)]
    pub user_pool_id_selector: Option<GraphQLAPIInitProviderUserPoolConfigUserPoolIdSelector>,
}

/// Reference to a UserPool in cognitoidp to populate userPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderUserPoolConfigUserPoolIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIInitProviderUserPoolConfigUserPoolIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderUserPoolConfigUserPoolIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIInitProviderUserPoolConfigUserPoolIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIInitProviderUserPoolConfigUserPoolIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderUserPoolConfigUserPoolIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderUserPoolConfigUserPoolIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPool in cognitoidp to populate userPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderUserPoolConfigUserPoolIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIInitProviderUserPoolConfigUserPoolIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIInitProviderUserPoolConfigUserPoolIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIInitProviderUserPoolConfigUserPoolIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIInitProviderUserPoolConfigUserPoolIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderUserPoolConfigUserPoolIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIInitProviderUserPoolConfigUserPoolIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<GraphQLAPIPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<GraphQLAPIPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GraphQLAPIPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GraphQLAPIPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GraphQLAPIPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GraphQLAPIPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// GraphQLAPIStatus defines the observed state of GraphQLAPI.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<GraphQLAPIStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProvider {
    /// One or more additional authentication providers for the GraphQL API. See additional_authentication_provider Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalAuthenticationProvider")]
    #[builder(default)]
    pub additional_authentication_provider: Option<Vec<GraphQLAPIStatusAtProviderAdditionalAuthenticationProvider>>,
    /// API type. Valid values are GRAPHQL or MERGED. A MERGED type requires merged_api_execution_role_arn to be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiType")]
    #[builder(default)]
    pub api_type: Option<String>,
    /// ARN
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationType")]
    #[builder(default)]
    pub authentication_type: Option<String>,
    /// Enables and controls the enhanced metrics feature. See enhanced_metrics_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedMetricsConfig")]
    #[builder(default)]
    pub enhanced_metrics_config: Option<GraphQLAPIStatusAtProviderEnhancedMetricsConfig>,
    /// API ID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled. For more information about introspection, see GraphQL introspection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "introspectionConfig")]
    #[builder(default)]
    pub introspection_config: Option<String>,
    /// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaAuthorizerConfig")]
    #[builder(default)]
    pub lambda_authorizer_config: Option<GraphQLAPIStatusAtProviderLambdaAuthorizerConfig>,
    /// Nested argument containing logging configuration. See log_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<GraphQLAPIStatusAtProviderLogConfig>,
    /// ARN of the execution role when api_type is set to MERGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergedApiExecutionRoleArn")]
    #[builder(default)]
    pub merged_api_execution_role_arn: Option<String>,
    /// User-supplied name for the GraphQL API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openidConnectConfig")]
    #[builder(default)]
    pub openid_connect_config: Option<GraphQLAPIStatusAtProviderOpenidConnectConfig>,
    /// The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query. The default value is 0 (or unspecified), which indicates there's no depth limit. If you set a limit, it can be between 1 and 75 nested levels. This field will produce a limit error if the operation falls out of bounds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryDepthLimit")]
    #[builder(default)]
    pub query_depth_limit: Option<f64>,
    /// The maximum number of resolvers that can be invoked in a single request. The default value is 0 (or unspecified), which will set the limit to 10000. When specified, the limit value can be between 1 and 10000. This field will produce a limit error if the operation falls out of bounds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverCountLimit")]
    #[builder(default)]
    pub resolver_count_limit: Option<f64>,
    /// Schema definition, in GraphQL schema language format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schema: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Map of URIs associated with the API E.g., uris["GRAPHQL"] = https://ID.appsync-api.REGION.amazonaws.com/graphql
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uris: Option<HashMap<String, String>>,
    /// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolConfig")]
    #[builder(default)]
    pub user_pool_config: Option<GraphQLAPIStatusAtProviderUserPoolConfig>,
    /// Sets the value of the GraphQL API to public (GLOBAL) or private (PRIVATE). If no value is provided, the visibility will be set to GLOBAL by default. This value cannot be changed once the API has been created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub visibility: Option<String>,
    /// Whether tracing with X-ray is enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xrayEnabled")]
    #[builder(default)]
    pub xray_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProviderAdditionalAuthenticationProvider {
    /// Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationType")]
    #[builder(default)]
    pub authentication_type: Option<String>,
    /// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaAuthorizerConfig")]
    #[builder(default)]
    pub lambda_authorizer_config: Option<GraphQLAPIStatusAtProviderAdditionalAuthenticationProviderLambdaAuthorizerConfig>,
    /// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openidConnectConfig")]
    #[builder(default)]
    pub openid_connect_config: Option<GraphQLAPIStatusAtProviderAdditionalAuthenticationProviderOpenidConnectConfig>,
    /// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolConfig")]
    #[builder(default)]
    pub user_pool_config: Option<GraphQLAPIStatusAtProviderAdditionalAuthenticationProviderUserPoolConfig>,
}

/// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProviderAdditionalAuthenticationProviderLambdaAuthorizerConfig {
    /// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerResultTtlInSeconds")]
    #[builder(default)]
    pub authorizer_result_ttl_in_seconds: Option<f64>,
    /// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerUri")]
    #[builder(default)]
    pub authorizer_uri: Option<String>,
    /// Regular expression for validation of tokens before the Lambda function is called.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityValidationExpression")]
    #[builder(default)]
    pub identity_validation_expression: Option<String>,
}

/// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProviderAdditionalAuthenticationProviderOpenidConnectConfig {
    /// Number of milliseconds a token is valid after being authenticated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTtl")]
    #[builder(default)]
    pub auth_ttl: Option<f64>,
    /// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    #[builder(default)]
    pub client_id: Option<String>,
    /// Number of milliseconds a token is valid after being issued to a user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iatTtl")]
    #[builder(default)]
    pub iat_ttl: Option<f64>,
    /// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub issuer: Option<String>,
}

/// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProviderAdditionalAuthenticationProviderUserPoolConfig {
    /// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appIdClientRegex")]
    #[builder(default)]
    pub app_id_client_regex: Option<String>,
    /// AWS region in which the user pool was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    #[builder(default)]
    pub aws_region: Option<String>,
    /// User pool ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolId")]
    #[builder(default)]
    pub user_pool_id: Option<String>,
}

/// Enables and controls the enhanced metrics feature. See enhanced_metrics_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProviderEnhancedMetricsConfig {
    /// How data source metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_DATA_SOURCE_METRICS, PER_DATA_SOURCE_METRICS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceLevelMetricsBehavior")]
    #[builder(default)]
    pub data_source_level_metrics_behavior: Option<String>,
    /// How operation metrics will be emitted to CloudWatch. Valid values: ENABLED, DISABLED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationLevelMetricsConfig")]
    #[builder(default)]
    pub operation_level_metrics_config: Option<String>,
    /// How resolver metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_RESOLVER_METRICS, PER_RESOLVER_METRICS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverLevelMetricsBehavior")]
    #[builder(default)]
    pub resolver_level_metrics_behavior: Option<String>,
}

/// Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProviderLambdaAuthorizerConfig {
    /// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerResultTtlInSeconds")]
    #[builder(default)]
    pub authorizer_result_ttl_in_seconds: Option<f64>,
    /// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizerUri")]
    #[builder(default)]
    pub authorizer_uri: Option<String>,
    /// Regular expression for validation of tokens before the Lambda function is called.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityValidationExpression")]
    #[builder(default)]
    pub identity_validation_expression: Option<String>,
}

/// Nested argument containing logging configuration. See log_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProviderLogConfig {
    /// Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogsRoleArn")]
    #[builder(default)]
    pub cloudwatch_logs_role_arn: Option<String>,
    /// Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: true, false. Default value: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeVerboseContent")]
    #[builder(default)]
    pub exclude_verbose_content: Option<bool>,
    /// Field logging level. Valid values: ALL, ERROR, NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldLogLevel")]
    #[builder(default)]
    pub field_log_level: Option<String>,
}

/// Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProviderOpenidConnectConfig {
    /// Number of milliseconds a token is valid after being authenticated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTtl")]
    #[builder(default)]
    pub auth_ttl: Option<f64>,
    /// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    #[builder(default)]
    pub client_id: Option<String>,
    /// Number of milliseconds a token is valid after being issued to a user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iatTtl")]
    #[builder(default)]
    pub iat_ttl: Option<f64>,
    /// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub issuer: Option<String>,
}

/// Amazon Cognito User Pool configuration. See user_pool_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GraphQLAPIStatusAtProviderUserPoolConfig {
    /// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appIdClientRegex")]
    #[builder(default)]
    pub app_id_client_regex: Option<String>,
    /// AWS region in which the user pool was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    #[builder(default)]
    pub aws_region: Option<String>,
    /// Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: ALLOW and DENY
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    #[builder(default)]
    pub default_action: Option<String>,
    /// User pool ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolId")]
    #[builder(default)]
    pub user_pool_id: Option<String>,
}


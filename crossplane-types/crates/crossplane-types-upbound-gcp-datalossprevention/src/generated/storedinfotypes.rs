// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// StoredInfoTypeSpec defines the desired state of StoredInfoType
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "datalossprevention.gcp.upbound.io", version = "v1beta2", kind = "StoredInfoType", plural = "storedinfotypes")]
#[kube(status = "StoredInfoTypeStatus")]
pub struct StoredInfoTypeSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<StoredInfoTypeDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: StoredInfoTypeForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<StoredInfoTypeInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<StoredInfoTypeProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<StoredInfoTypePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<StoredInfoTypeWriteConnectionSecretToRef>,
}

/// StoredInfoTypeSpec defines the desired state of StoredInfoType
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StoredInfoTypeDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProvider {
    /// A description of the info type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Dictionary which defines the rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dictionary: Option<StoredInfoTypeForProviderDictionary>,
    /// User set display name of the info type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Dictionary which defines the rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "largeCustomDictionary")]
    #[builder(default)]
    pub large_custom_dictionary: Option<StoredInfoTypeForProviderLargeCustomDictionary>,
    /// The parent of the info type in any of the following formats:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parent: Option<String>,
    /// Regular expression which defines the rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regex: Option<StoredInfoTypeForProviderRegex>,
    /// The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens;
    /// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is 100
    /// characters. Can be empty to allow the system to generate one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storedInfoTypeId")]
    #[builder(default)]
    pub stored_info_type_id: Option<String>,
}

/// Dictionary which defines the rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderDictionary {
    /// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudStoragePath")]
    #[builder(default)]
    pub cloud_storage_path: Option<StoredInfoTypeForProviderDictionaryCloudStoragePath>,
    /// List of words or phrases to search for.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wordList")]
    #[builder(default)]
    pub word_list: Option<StoredInfoTypeForProviderDictionaryWordList>,
}

/// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderDictionaryCloudStoragePath {
    /// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// List of words or phrases to search for.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderDictionaryWordList {
    /// Words or phrases defining the dictionary. The dictionary must contain at least one
    /// phrase and every phrase must contain at least 2 characters that are letters or digits.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub words: Option<Vec<String>>,
}

/// Dictionary which defines the rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderLargeCustomDictionary {
    /// Field in a BigQuery table where each cell represents a dictionary phrase.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bigQueryField")]
    #[builder(default)]
    pub big_query_field: Option<StoredInfoTypeForProviderLargeCustomDictionaryBigQueryField>,
    /// Set of files containing newline-delimited lists of dictionary phrases.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudStorageFileSet")]
    #[builder(default)]
    pub cloud_storage_file_set: Option<StoredInfoTypeForProviderLargeCustomDictionaryCloudStorageFileSet>,
    /// Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API.
    /// If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputPath")]
    #[builder(default)]
    pub output_path: Option<StoredInfoTypeForProviderLargeCustomDictionaryOutputPath>,
}

/// Field in a BigQuery table where each cell represents a dictionary phrase.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderLargeCustomDictionaryBigQueryField {
    /// Designated field in the BigQuery table.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub field: Option<StoredInfoTypeForProviderLargeCustomDictionaryBigQueryFieldField>,
    /// Field in a BigQuery table where each cell represents a dictionary phrase.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub table: Option<StoredInfoTypeForProviderLargeCustomDictionaryBigQueryFieldTable>,
}

/// Designated field in the BigQuery table.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderLargeCustomDictionaryBigQueryFieldField {
    /// The resource name of the info type. Set by the server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Field in a BigQuery table where each cell represents a dictionary phrase.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderLargeCustomDictionaryBigQueryFieldTable {
    /// The dataset ID of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    #[builder(default)]
    pub dataset_id: Option<String>,
    /// The Google Cloud Platform project ID of the project containing the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    #[builder(default)]
    pub project_id: Option<String>,
    /// The name of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableId")]
    #[builder(default)]
    pub table_id: Option<String>,
}

/// Set of files containing newline-delimited lists of dictionary phrases.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderLargeCustomDictionaryCloudStorageFileSet {
    /// The url, in the format gs://<bucket>/<path>. Trailing wildcard in the path is allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
}

/// Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API.
/// If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderLargeCustomDictionaryOutputPath {
    /// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Regular expression which defines the rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeForProviderRegex {
    /// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIndexes")]
    #[builder(default)]
    pub group_indexes: Option<Vec<f64>>,
    /// Pattern defining the regular expression.
    /// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pattern: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProvider {
    /// A description of the info type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Dictionary which defines the rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dictionary: Option<StoredInfoTypeInitProviderDictionary>,
    /// User set display name of the info type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Dictionary which defines the rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "largeCustomDictionary")]
    #[builder(default)]
    pub large_custom_dictionary: Option<StoredInfoTypeInitProviderLargeCustomDictionary>,
    /// The parent of the info type in any of the following formats:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parent: Option<String>,
    /// Regular expression which defines the rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regex: Option<StoredInfoTypeInitProviderRegex>,
    /// The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens;
    /// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is 100
    /// characters. Can be empty to allow the system to generate one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storedInfoTypeId")]
    #[builder(default)]
    pub stored_info_type_id: Option<String>,
}

/// Dictionary which defines the rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderDictionary {
    /// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudStoragePath")]
    #[builder(default)]
    pub cloud_storage_path: Option<StoredInfoTypeInitProviderDictionaryCloudStoragePath>,
    /// List of words or phrases to search for.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wordList")]
    #[builder(default)]
    pub word_list: Option<StoredInfoTypeInitProviderDictionaryWordList>,
}

/// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderDictionaryCloudStoragePath {
    /// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// List of words or phrases to search for.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderDictionaryWordList {
    /// Words or phrases defining the dictionary. The dictionary must contain at least one
    /// phrase and every phrase must contain at least 2 characters that are letters or digits.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub words: Option<Vec<String>>,
}

/// Dictionary which defines the rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderLargeCustomDictionary {
    /// Field in a BigQuery table where each cell represents a dictionary phrase.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bigQueryField")]
    #[builder(default)]
    pub big_query_field: Option<StoredInfoTypeInitProviderLargeCustomDictionaryBigQueryField>,
    /// Set of files containing newline-delimited lists of dictionary phrases.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudStorageFileSet")]
    #[builder(default)]
    pub cloud_storage_file_set: Option<StoredInfoTypeInitProviderLargeCustomDictionaryCloudStorageFileSet>,
    /// Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API.
    /// If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputPath")]
    #[builder(default)]
    pub output_path: Option<StoredInfoTypeInitProviderLargeCustomDictionaryOutputPath>,
}

/// Field in a BigQuery table where each cell represents a dictionary phrase.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderLargeCustomDictionaryBigQueryField {
    /// Designated field in the BigQuery table.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub field: Option<StoredInfoTypeInitProviderLargeCustomDictionaryBigQueryFieldField>,
    /// Field in a BigQuery table where each cell represents a dictionary phrase.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub table: Option<StoredInfoTypeInitProviderLargeCustomDictionaryBigQueryFieldTable>,
}

/// Designated field in the BigQuery table.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderLargeCustomDictionaryBigQueryFieldField {
    /// The resource name of the info type. Set by the server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Field in a BigQuery table where each cell represents a dictionary phrase.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderLargeCustomDictionaryBigQueryFieldTable {
    /// The dataset ID of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    #[builder(default)]
    pub dataset_id: Option<String>,
    /// The Google Cloud Platform project ID of the project containing the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    #[builder(default)]
    pub project_id: Option<String>,
    /// The name of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableId")]
    #[builder(default)]
    pub table_id: Option<String>,
}

/// Set of files containing newline-delimited lists of dictionary phrases.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderLargeCustomDictionaryCloudStorageFileSet {
    /// The url, in the format gs://<bucket>/<path>. Trailing wildcard in the path is allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
}

/// Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API.
/// If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderLargeCustomDictionaryOutputPath {
    /// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Regular expression which defines the rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeInitProviderRegex {
    /// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIndexes")]
    #[builder(default)]
    pub group_indexes: Option<Vec<f64>>,
    /// Pattern defining the regular expression.
    /// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pattern: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StoredInfoTypeProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StoredInfoTypeProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StoredInfoTypeProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StoredInfoTypeProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StoredInfoTypeProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<StoredInfoTypePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<StoredInfoTypePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StoredInfoTypePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StoredInfoTypePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StoredInfoTypePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StoredInfoTypePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StoredInfoTypePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// StoredInfoTypeStatus defines the observed state of StoredInfoType.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<StoredInfoTypeStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProvider {
    /// A description of the info type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Dictionary which defines the rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dictionary: Option<StoredInfoTypeStatusAtProviderDictionary>,
    /// User set display name of the info type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// an identifier for the resource with format {{parent}}/storedInfoTypes/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Dictionary which defines the rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "largeCustomDictionary")]
    #[builder(default)]
    pub large_custom_dictionary: Option<StoredInfoTypeStatusAtProviderLargeCustomDictionary>,
    /// The resource name of the info type. Set by the server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The parent of the info type in any of the following formats:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parent: Option<String>,
    /// Regular expression which defines the rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regex: Option<StoredInfoTypeStatusAtProviderRegex>,
    /// The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens;
    /// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is 100
    /// characters. Can be empty to allow the system to generate one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storedInfoTypeId")]
    #[builder(default)]
    pub stored_info_type_id: Option<String>,
}

/// Dictionary which defines the rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderDictionary {
    /// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudStoragePath")]
    #[builder(default)]
    pub cloud_storage_path: Option<StoredInfoTypeStatusAtProviderDictionaryCloudStoragePath>,
    /// List of words or phrases to search for.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wordList")]
    #[builder(default)]
    pub word_list: Option<StoredInfoTypeStatusAtProviderDictionaryWordList>,
}

/// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderDictionaryCloudStoragePath {
    /// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// List of words or phrases to search for.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderDictionaryWordList {
    /// Words or phrases defining the dictionary. The dictionary must contain at least one
    /// phrase and every phrase must contain at least 2 characters that are letters or digits.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub words: Option<Vec<String>>,
}

/// Dictionary which defines the rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderLargeCustomDictionary {
    /// Field in a BigQuery table where each cell represents a dictionary phrase.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bigQueryField")]
    #[builder(default)]
    pub big_query_field: Option<StoredInfoTypeStatusAtProviderLargeCustomDictionaryBigQueryField>,
    /// Set of files containing newline-delimited lists of dictionary phrases.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudStorageFileSet")]
    #[builder(default)]
    pub cloud_storage_file_set: Option<StoredInfoTypeStatusAtProviderLargeCustomDictionaryCloudStorageFileSet>,
    /// Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API.
    /// If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputPath")]
    #[builder(default)]
    pub output_path: Option<StoredInfoTypeStatusAtProviderLargeCustomDictionaryOutputPath>,
}

/// Field in a BigQuery table where each cell represents a dictionary phrase.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderLargeCustomDictionaryBigQueryField {
    /// Designated field in the BigQuery table.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub field: Option<StoredInfoTypeStatusAtProviderLargeCustomDictionaryBigQueryFieldField>,
    /// Field in a BigQuery table where each cell represents a dictionary phrase.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub table: Option<StoredInfoTypeStatusAtProviderLargeCustomDictionaryBigQueryFieldTable>,
}

/// Designated field in the BigQuery table.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderLargeCustomDictionaryBigQueryFieldField {
    /// The resource name of the info type. Set by the server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Field in a BigQuery table where each cell represents a dictionary phrase.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderLargeCustomDictionaryBigQueryFieldTable {
    /// The dataset ID of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    #[builder(default)]
    pub dataset_id: Option<String>,
    /// The Google Cloud Platform project ID of the project containing the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    #[builder(default)]
    pub project_id: Option<String>,
    /// The name of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableId")]
    #[builder(default)]
    pub table_id: Option<String>,
}

/// Set of files containing newline-delimited lists of dictionary phrases.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderLargeCustomDictionaryCloudStorageFileSet {
    /// The url, in the format gs://<bucket>/<path>. Trailing wildcard in the path is allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
}

/// Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API.
/// If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderLargeCustomDictionaryOutputPath {
    /// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Regular expression which defines the rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StoredInfoTypeStatusAtProviderRegex {
    /// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIndexes")]
    #[builder(default)]
    pub group_indexes: Option<Vec<f64>>,
    /// Pattern defining the regular expression.
    /// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pattern: Option<String>,
}


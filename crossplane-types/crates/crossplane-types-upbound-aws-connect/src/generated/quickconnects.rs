// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// QuickConnectSpec defines the desired state of QuickConnect
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "connect.aws.upbound.io", version = "v1beta2", kind = "QuickConnect", plural = "quickconnects")]
#[kube(status = "QuickConnectStatus")]
pub struct QuickConnectSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<QuickConnectDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: QuickConnectForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<QuickConnectInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<QuickConnectProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<QuickConnectPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<QuickConnectWriteConnectionSecretToRef>,
}

/// QuickConnectSpec defines the desired state of QuickConnect
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectForProvider {
    /// Specifies the description of the Quick Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Specifies the identifier of the hosting Amazon Connect Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    #[builder(default)]
    pub instance_id: Option<String>,
    /// Reference to a Instance in connect to populate instanceId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIdRef")]
    #[builder(default)]
    pub instance_id_ref: Option<QuickConnectForProviderInstanceIdRef>,
    /// Selector for a Instance in connect to populate instanceId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIdSelector")]
    #[builder(default)]
    pub instance_id_selector: Option<QuickConnectForProviderInstanceIdSelector>,
    /// Specifies the name of the Quick Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A block that defines the configuration information for the Quick Connect: quick_connect_type and one of phone_config, queue_config, user_config . The Quick Connect Config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quickConnectConfig")]
    #[builder(default)]
    pub quick_connect_config: Option<QuickConnectForProviderQuickConnectConfig>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a Instance in connect to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectForProviderInstanceIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<QuickConnectForProviderInstanceIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectForProviderInstanceIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<QuickConnectForProviderInstanceIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<QuickConnectForProviderInstanceIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectForProviderInstanceIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectForProviderInstanceIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in connect to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectForProviderInstanceIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<QuickConnectForProviderInstanceIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectForProviderInstanceIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<QuickConnectForProviderInstanceIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<QuickConnectForProviderInstanceIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectForProviderInstanceIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectForProviderInstanceIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A block that defines the configuration information for the Quick Connect: quick_connect_type and one of phone_config, queue_config, user_config . The Quick Connect Config block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectForProviderQuickConnectConfig {
    /// Specifies the phone configuration of the Quick Connect. This is required only if quick_connect_type is PHONE_NUMBER. The phone_config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneConfig")]
    #[builder(default)]
    pub phone_config: Option<Vec<QuickConnectForProviderQuickConnectConfigPhoneConfig>>,
    /// Specifies the queue configuration of the Quick Connect. This is required only if quick_connect_type is QUEUE. The queue_config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queueConfig")]
    #[builder(default)]
    pub queue_config: Option<Vec<QuickConnectForProviderQuickConnectConfigQueueConfig>>,
    /// Specifies the configuration type of the quick connect. valid values are PHONE_NUMBER, QUEUE, USER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quickConnectType")]
    #[builder(default)]
    pub quick_connect_type: Option<String>,
    /// Specifies the user configuration of the Quick Connect. This is required only if quick_connect_type is USER. The user_config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userConfig")]
    #[builder(default)]
    pub user_config: Option<Vec<QuickConnectForProviderQuickConnectConfigUserConfig>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectForProviderQuickConnectConfigPhoneConfig {
    /// Specifies the phone number in in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    #[builder(default)]
    pub phone_number: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectForProviderQuickConnectConfigQueueConfig {
    /// Specifies the identifier of the contact flow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contactFlowId")]
    #[builder(default)]
    pub contact_flow_id: Option<String>,
    /// Specifies the identifier for the queue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queueId")]
    #[builder(default)]
    pub queue_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectForProviderQuickConnectConfigUserConfig {
    /// Specifies the identifier of the contact flow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contactFlowId")]
    #[builder(default)]
    pub contact_flow_id: Option<String>,
    /// Specifies the identifier for the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userId")]
    #[builder(default)]
    pub user_id: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectInitProvider {
    /// Specifies the description of the Quick Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Specifies the identifier of the hosting Amazon Connect Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    #[builder(default)]
    pub instance_id: Option<String>,
    /// Reference to a Instance in connect to populate instanceId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIdRef")]
    #[builder(default)]
    pub instance_id_ref: Option<QuickConnectInitProviderInstanceIdRef>,
    /// Selector for a Instance in connect to populate instanceId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIdSelector")]
    #[builder(default)]
    pub instance_id_selector: Option<QuickConnectInitProviderInstanceIdSelector>,
    /// Specifies the name of the Quick Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A block that defines the configuration information for the Quick Connect: quick_connect_type and one of phone_config, queue_config, user_config . The Quick Connect Config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quickConnectConfig")]
    #[builder(default)]
    pub quick_connect_config: Option<QuickConnectInitProviderQuickConnectConfig>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a Instance in connect to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectInitProviderInstanceIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<QuickConnectInitProviderInstanceIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectInitProviderInstanceIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<QuickConnectInitProviderInstanceIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<QuickConnectInitProviderInstanceIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectInitProviderInstanceIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectInitProviderInstanceIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in connect to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectInitProviderInstanceIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<QuickConnectInitProviderInstanceIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectInitProviderInstanceIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<QuickConnectInitProviderInstanceIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<QuickConnectInitProviderInstanceIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectInitProviderInstanceIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectInitProviderInstanceIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A block that defines the configuration information for the Quick Connect: quick_connect_type and one of phone_config, queue_config, user_config . The Quick Connect Config block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectInitProviderQuickConnectConfig {
    /// Specifies the phone configuration of the Quick Connect. This is required only if quick_connect_type is PHONE_NUMBER. The phone_config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneConfig")]
    #[builder(default)]
    pub phone_config: Option<Vec<QuickConnectInitProviderQuickConnectConfigPhoneConfig>>,
    /// Specifies the queue configuration of the Quick Connect. This is required only if quick_connect_type is QUEUE. The queue_config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queueConfig")]
    #[builder(default)]
    pub queue_config: Option<Vec<QuickConnectInitProviderQuickConnectConfigQueueConfig>>,
    /// Specifies the configuration type of the quick connect. valid values are PHONE_NUMBER, QUEUE, USER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quickConnectType")]
    #[builder(default)]
    pub quick_connect_type: Option<String>,
    /// Specifies the user configuration of the Quick Connect. This is required only if quick_connect_type is USER. The user_config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userConfig")]
    #[builder(default)]
    pub user_config: Option<Vec<QuickConnectInitProviderQuickConnectConfigUserConfig>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectInitProviderQuickConnectConfigPhoneConfig {
    /// Specifies the phone number in in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    #[builder(default)]
    pub phone_number: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectInitProviderQuickConnectConfigQueueConfig {
    /// Specifies the identifier of the contact flow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contactFlowId")]
    #[builder(default)]
    pub contact_flow_id: Option<String>,
    /// Specifies the identifier for the queue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queueId")]
    #[builder(default)]
    pub queue_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectInitProviderQuickConnectConfigUserConfig {
    /// Specifies the identifier of the contact flow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contactFlowId")]
    #[builder(default)]
    pub contact_flow_id: Option<String>,
    /// Specifies the identifier for the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userId")]
    #[builder(default)]
    pub user_id: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<QuickConnectProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<QuickConnectProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<QuickConnectProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<QuickConnectPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<QuickConnectPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<QuickConnectPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<QuickConnectPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<QuickConnectPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QuickConnectPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// QuickConnectStatus defines the observed state of QuickConnect.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<QuickConnectStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectStatusAtProvider {
    /// The Amazon Resource Name (ARN) of the Quick Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Specifies the description of the Quick Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The identifier of the hosting Amazon Connect Instance and identifier of the Quick Connect separated by a colon (:).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Specifies the identifier of the hosting Amazon Connect Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    #[builder(default)]
    pub instance_id: Option<String>,
    /// Specifies the name of the Quick Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A block that defines the configuration information for the Quick Connect: quick_connect_type and one of phone_config, queue_config, user_config . The Quick Connect Config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quickConnectConfig")]
    #[builder(default)]
    pub quick_connect_config: Option<QuickConnectStatusAtProviderQuickConnectConfig>,
    /// The identifier for the Quick Connect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quickConnectId")]
    #[builder(default)]
    pub quick_connect_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

/// A block that defines the configuration information for the Quick Connect: quick_connect_type and one of phone_config, queue_config, user_config . The Quick Connect Config block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectStatusAtProviderQuickConnectConfig {
    /// Specifies the phone configuration of the Quick Connect. This is required only if quick_connect_type is PHONE_NUMBER. The phone_config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneConfig")]
    #[builder(default)]
    pub phone_config: Option<Vec<QuickConnectStatusAtProviderQuickConnectConfigPhoneConfig>>,
    /// Specifies the queue configuration of the Quick Connect. This is required only if quick_connect_type is QUEUE. The queue_config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queueConfig")]
    #[builder(default)]
    pub queue_config: Option<Vec<QuickConnectStatusAtProviderQuickConnectConfigQueueConfig>>,
    /// Specifies the configuration type of the quick connect. valid values are PHONE_NUMBER, QUEUE, USER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quickConnectType")]
    #[builder(default)]
    pub quick_connect_type: Option<String>,
    /// Specifies the user configuration of the Quick Connect. This is required only if quick_connect_type is USER. The user_config block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userConfig")]
    #[builder(default)]
    pub user_config: Option<Vec<QuickConnectStatusAtProviderQuickConnectConfigUserConfig>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectStatusAtProviderQuickConnectConfigPhoneConfig {
    /// Specifies the phone number in in E.164 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    #[builder(default)]
    pub phone_number: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectStatusAtProviderQuickConnectConfigQueueConfig {
    /// Specifies the identifier of the contact flow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contactFlowId")]
    #[builder(default)]
    pub contact_flow_id: Option<String>,
    /// Specifies the identifier for the queue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queueId")]
    #[builder(default)]
    pub queue_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct QuickConnectStatusAtProviderQuickConnectConfigUserConfig {
    /// Specifies the identifier of the contact flow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contactFlowId")]
    #[builder(default)]
    pub contact_flow_id: Option<String>,
    /// Specifies the identifier for the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userId")]
    #[builder(default)]
    pub user_id: Option<String>,
}


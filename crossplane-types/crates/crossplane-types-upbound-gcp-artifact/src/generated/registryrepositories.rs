// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RegistryRepositorySpec defines the desired state of RegistryRepository
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "artifact.gcp.upbound.io", version = "v1beta2", kind = "RegistryRepository", plural = "registryrepositories")]
#[kube(status = "RegistryRepositoryStatus")]
pub struct RegistryRepositorySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<RegistryRepositoryDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RegistryRepositoryForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<RegistryRepositoryInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<RegistryRepositoryProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<RegistryRepositoryPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<RegistryRepositoryWriteConnectionSecretToRef>,
}

/// RegistryRepositorySpec defines the desired state of RegistryRepository
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProvider {
    /// Cleanup policies for this repository. Cleanup policies indicate when
    /// certain package versions can be automatically deleted.
    /// Map keys are policy IDs supplied by users during policy creation. They must
    /// unique within a repository and be under 128 characters in length.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cleanupPolicies")]
    #[builder(default)]
    pub cleanup_policies: Option<Vec<RegistryRepositoryForProviderCleanupPolicies>>,
    /// If true, the cleanup pipeline is prevented from deleting versions in this
    /// repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cleanupPolicyDryRun")]
    #[builder(default)]
    pub cleanup_policy_dry_run: Option<bool>,
    /// The user-provided description of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Docker repository config contains repository level configuration for the repositories of docker type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerConfig")]
    #[builder(default)]
    pub docker_config: Option<RegistryRepositoryForProviderDockerConfig>,
    /// The format of packages that are stored in the repository. Supported formats
    /// can be found here.
    /// You can only create alpha formats if you are a member of the
    /// alpha user group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// The Cloud KMS resource name of the customer managed encryption key thatâ€™s
    /// used to encrypt the contents of the Repository. Has the form:
    /// projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key.
    /// This value may not be changed after the Repository has been created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    #[builder(default)]
    pub kms_key_name: Option<String>,
    /// Labels with user-defined metadata.
    /// This field may contain up to 64 entries. Label keys and values may be no
    /// longer than 63 characters. Label keys must begin with a lowercase letter
    /// and may only contain lowercase letters, numeric characters, underscores,
    /// and dashes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The name of the location this repository is located in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// MavenRepositoryConfig is maven related repository details.
    /// Provides additional configuration details for repositories of the maven
    /// format type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenConfig")]
    #[builder(default)]
    pub maven_config: Option<RegistryRepositoryForProviderMavenConfig>,
    /// The mode configures the repository to serve artifacts from different sources.
    /// Default value is STANDARD_REPOSITORY.
    /// Possible values are: STANDARD_REPOSITORY, VIRTUAL_REPOSITORY, REMOTE_REPOSITORY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Configuration specific for a Remote Repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteRepositoryConfig")]
    #[builder(default)]
    pub remote_repository_config: Option<RegistryRepositoryForProviderRemoteRepositoryConfig>,
    /// Configuration specific for a Virtual Repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualRepositoryConfig")]
    #[builder(default)]
    pub virtual_repository_config: Option<RegistryRepositoryForProviderVirtualRepositoryConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderCleanupPolicies {
    /// Policy action.
    /// Possible values are: DELETE, KEEP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// Policy condition for matching versions.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub condition: Option<RegistryRepositoryForProviderCleanupPoliciesCondition>,
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Policy condition for retaining a minimum number of versions. May only be
    /// specified with a Keep action.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mostRecentVersions")]
    #[builder(default)]
    pub most_recent_versions: Option<RegistryRepositoryForProviderCleanupPoliciesMostRecentVersions>,
}

/// Policy condition for matching versions.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderCleanupPoliciesCondition {
    /// Match versions newer than a duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "newerThan")]
    #[builder(default)]
    pub newer_than: Option<String>,
    /// Match versions older than a duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "olderThan")]
    #[builder(default)]
    pub older_than: Option<String>,
    /// Match versions by package prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageNamePrefixes")]
    #[builder(default)]
    pub package_name_prefixes: Option<Vec<String>>,
    /// Match versions by tag prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagPrefixes")]
    #[builder(default)]
    pub tag_prefixes: Option<Vec<String>>,
    /// Match versions by tag status.
    /// Default value is ANY.
    /// Possible values are: TAGGED, UNTAGGED, ANY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagState")]
    #[builder(default)]
    pub tag_state: Option<String>,
    /// Match versions by version name prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionNamePrefixes")]
    #[builder(default)]
    pub version_name_prefixes: Option<Vec<String>>,
}

/// Policy condition for retaining a minimum number of versions. May only be
/// specified with a Keep action.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderCleanupPoliciesMostRecentVersions {
    /// Minimum number of versions to keep.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepCount")]
    #[builder(default)]
    pub keep_count: Option<f64>,
    /// Match versions by package prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageNamePrefixes")]
    #[builder(default)]
    pub package_name_prefixes: Option<Vec<String>>,
}

/// Docker repository config contains repository level configuration for the repositories of docker type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderDockerConfig {
    /// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "immutableTags")]
    #[builder(default)]
    pub immutable_tags: Option<bool>,
}

/// MavenRepositoryConfig is maven related repository details.
/// Provides additional configuration details for repositories of the maven
/// format type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderMavenConfig {
    /// The repository with this flag will allow publishing the same
    /// snapshot versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSnapshotOverwrites")]
    #[builder(default)]
    pub allow_snapshot_overwrites: Option<bool>,
    /// Version policy defines the versions that the registry will accept.
    /// Default value is VERSION_POLICY_UNSPECIFIED.
    /// Possible values are: VERSION_POLICY_UNSPECIFIED, RELEASE, SNAPSHOT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionPolicy")]
    #[builder(default)]
    pub version_policy: Option<String>,
}

/// Configuration specific for a Remote Repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfig {
    /// Specific settings for an Apt remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aptRepository")]
    #[builder(default)]
    pub apt_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigAptRepository>,
    /// The description of the remote source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// If true, the remote repository upstream and upstream credentials will
    /// not be validated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableUpstreamValidation")]
    #[builder(default)]
    pub disable_upstream_validation: Option<bool>,
    /// Specific settings for a Docker remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerRepository")]
    #[builder(default)]
    pub docker_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigDockerRepository>,
    /// Specific settings for a Maven remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenRepository")]
    #[builder(default)]
    pub maven_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigMavenRepository>,
    /// Specific settings for an Npm remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "npmRepository")]
    #[builder(default)]
    pub npm_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigNpmRepository>,
    /// Specific settings for a Python remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pythonRepository")]
    #[builder(default)]
    pub python_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigPythonRepository>,
    /// The credentials used to access the remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamCredentials")]
    #[builder(default)]
    pub upstream_credentials: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentials>,
    /// Specific settings for an Yum remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yumRepository")]
    #[builder(default)]
    pub yum_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigYumRepository>,
}

/// Specific settings for an Apt remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigAptRepository {
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigAptRepositoryPublicRepository>,
}

/// One of the publicly available Yum repositories supported by Artifact Registry.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigAptRepositoryPublicRepository {
    /// A common public repository base for Yum.
    /// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryBase")]
    #[builder(default)]
    pub repository_base: Option<String>,
    /// Specific repository from the base, e.g. "pub/rocky/9/BaseOS/x86_64/os"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryPath")]
    #[builder(default)]
    pub repository_path: Option<String>,
}

/// Specific settings for a Docker remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigDockerRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigDockerRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigDockerRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specific settings for a Maven remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigMavenRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigMavenRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigMavenRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specific settings for an Npm remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigNpmRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigNpmRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigNpmRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specific settings for a Python remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigPythonRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigPythonRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigPythonRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// The credentials used to access the remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentials {
    /// Use username and password to access the remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernamePasswordCredentials")]
    #[builder(default)]
    pub username_password_credentials: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials>,
}

/// Use username and password to access the remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials {
    /// The Secret Manager key version that holds the password to access the
    /// remote repository. Must be in the format of
    /// projects/{project}/secrets/{secret}/versions/{version}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretVersion")]
    #[builder(default)]
    pub password_secret_version: Option<String>,
    /// Reference to a SecretVersion in secretmanager to populate passwordSecretVersion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretVersionRef")]
    #[builder(default)]
    pub password_secret_version_ref: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRef>,
    /// Selector for a SecretVersion in secretmanager to populate passwordSecretVersion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretVersionSelector")]
    #[builder(default)]
    pub password_secret_version_selector: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelector>,
    /// The username to access the remote repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Reference to a SecretVersion in secretmanager to populate passwordSecretVersion.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SecretVersion in secretmanager to populate passwordSecretVersion.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryForProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specific settings for an Yum remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigYumRepository {
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<RegistryRepositoryForProviderRemoteRepositoryConfigYumRepositoryPublicRepository>,
}

/// One of the publicly available Yum repositories supported by Artifact Registry.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderRemoteRepositoryConfigYumRepositoryPublicRepository {
    /// A common public repository base for Yum.
    /// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryBase")]
    #[builder(default)]
    pub repository_base: Option<String>,
    /// Specific repository from the base, e.g. "pub/rocky/9/BaseOS/x86_64/os"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryPath")]
    #[builder(default)]
    pub repository_path: Option<String>,
}

/// Configuration specific for a Virtual Repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderVirtualRepositoryConfig {
    /// Policies that configure the upstream artifacts distributed by the Virtual
    /// Repository. Upstream policies cannot be set on a standard repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamPolicies")]
    #[builder(default)]
    pub upstream_policies: Option<Vec<RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPolicies {
    /// The user-provided ID of the upstream policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Entries with a greater priority value take precedence in the pull order.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// A reference to the repository resource, for example:
    /// "projects/p1/locations/us-central1/repository/repo1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub repository: Option<String>,
    /// Reference to a RegistryRepository in artifact to populate repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryRef")]
    #[builder(default)]
    pub repository_ref: Option<RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRef>,
    /// Selector for a RegistryRepository in artifact to populate repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositorySelector")]
    #[builder(default)]
    pub repository_selector: Option<RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelector>,
}

/// Reference to a RegistryRepository in artifact to populate repository.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RegistryRepository in artifact to populate repository.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryForProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProvider {
    /// Cleanup policies for this repository. Cleanup policies indicate when
    /// certain package versions can be automatically deleted.
    /// Map keys are policy IDs supplied by users during policy creation. They must
    /// unique within a repository and be under 128 characters in length.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cleanupPolicies")]
    #[builder(default)]
    pub cleanup_policies: Option<Vec<RegistryRepositoryInitProviderCleanupPolicies>>,
    /// If true, the cleanup pipeline is prevented from deleting versions in this
    /// repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cleanupPolicyDryRun")]
    #[builder(default)]
    pub cleanup_policy_dry_run: Option<bool>,
    /// The user-provided description of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Docker repository config contains repository level configuration for the repositories of docker type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerConfig")]
    #[builder(default)]
    pub docker_config: Option<RegistryRepositoryInitProviderDockerConfig>,
    /// The format of packages that are stored in the repository. Supported formats
    /// can be found here.
    /// You can only create alpha formats if you are a member of the
    /// alpha user group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// The Cloud KMS resource name of the customer managed encryption key thatâ€™s
    /// used to encrypt the contents of the Repository. Has the form:
    /// projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key.
    /// This value may not be changed after the Repository has been created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    #[builder(default)]
    pub kms_key_name: Option<String>,
    /// Labels with user-defined metadata.
    /// This field may contain up to 64 entries. Label keys and values may be no
    /// longer than 63 characters. Label keys must begin with a lowercase letter
    /// and may only contain lowercase letters, numeric characters, underscores,
    /// and dashes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// MavenRepositoryConfig is maven related repository details.
    /// Provides additional configuration details for repositories of the maven
    /// format type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenConfig")]
    #[builder(default)]
    pub maven_config: Option<RegistryRepositoryInitProviderMavenConfig>,
    /// The mode configures the repository to serve artifacts from different sources.
    /// Default value is STANDARD_REPOSITORY.
    /// Possible values are: STANDARD_REPOSITORY, VIRTUAL_REPOSITORY, REMOTE_REPOSITORY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Configuration specific for a Remote Repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteRepositoryConfig")]
    #[builder(default)]
    pub remote_repository_config: Option<RegistryRepositoryInitProviderRemoteRepositoryConfig>,
    /// Configuration specific for a Virtual Repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualRepositoryConfig")]
    #[builder(default)]
    pub virtual_repository_config: Option<RegistryRepositoryInitProviderVirtualRepositoryConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderCleanupPolicies {
    /// Policy action.
    /// Possible values are: DELETE, KEEP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// Policy condition for matching versions.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub condition: Option<RegistryRepositoryInitProviderCleanupPoliciesCondition>,
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Policy condition for retaining a minimum number of versions. May only be
    /// specified with a Keep action.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mostRecentVersions")]
    #[builder(default)]
    pub most_recent_versions: Option<RegistryRepositoryInitProviderCleanupPoliciesMostRecentVersions>,
}

/// Policy condition for matching versions.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderCleanupPoliciesCondition {
    /// Match versions newer than a duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "newerThan")]
    #[builder(default)]
    pub newer_than: Option<String>,
    /// Match versions older than a duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "olderThan")]
    #[builder(default)]
    pub older_than: Option<String>,
    /// Match versions by package prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageNamePrefixes")]
    #[builder(default)]
    pub package_name_prefixes: Option<Vec<String>>,
    /// Match versions by tag prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagPrefixes")]
    #[builder(default)]
    pub tag_prefixes: Option<Vec<String>>,
    /// Match versions by tag status.
    /// Default value is ANY.
    /// Possible values are: TAGGED, UNTAGGED, ANY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagState")]
    #[builder(default)]
    pub tag_state: Option<String>,
    /// Match versions by version name prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionNamePrefixes")]
    #[builder(default)]
    pub version_name_prefixes: Option<Vec<String>>,
}

/// Policy condition for retaining a minimum number of versions. May only be
/// specified with a Keep action.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderCleanupPoliciesMostRecentVersions {
    /// Minimum number of versions to keep.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepCount")]
    #[builder(default)]
    pub keep_count: Option<f64>,
    /// Match versions by package prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageNamePrefixes")]
    #[builder(default)]
    pub package_name_prefixes: Option<Vec<String>>,
}

/// Docker repository config contains repository level configuration for the repositories of docker type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderDockerConfig {
    /// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "immutableTags")]
    #[builder(default)]
    pub immutable_tags: Option<bool>,
}

/// MavenRepositoryConfig is maven related repository details.
/// Provides additional configuration details for repositories of the maven
/// format type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderMavenConfig {
    /// The repository with this flag will allow publishing the same
    /// snapshot versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSnapshotOverwrites")]
    #[builder(default)]
    pub allow_snapshot_overwrites: Option<bool>,
    /// Version policy defines the versions that the registry will accept.
    /// Default value is VERSION_POLICY_UNSPECIFIED.
    /// Possible values are: VERSION_POLICY_UNSPECIFIED, RELEASE, SNAPSHOT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionPolicy")]
    #[builder(default)]
    pub version_policy: Option<String>,
}

/// Configuration specific for a Remote Repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfig {
    /// Specific settings for an Apt remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aptRepository")]
    #[builder(default)]
    pub apt_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigAptRepository>,
    /// The description of the remote source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// If true, the remote repository upstream and upstream credentials will
    /// not be validated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableUpstreamValidation")]
    #[builder(default)]
    pub disable_upstream_validation: Option<bool>,
    /// Specific settings for a Docker remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerRepository")]
    #[builder(default)]
    pub docker_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigDockerRepository>,
    /// Specific settings for a Maven remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenRepository")]
    #[builder(default)]
    pub maven_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigMavenRepository>,
    /// Specific settings for an Npm remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "npmRepository")]
    #[builder(default)]
    pub npm_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigNpmRepository>,
    /// Specific settings for a Python remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pythonRepository")]
    #[builder(default)]
    pub python_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigPythonRepository>,
    /// The credentials used to access the remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamCredentials")]
    #[builder(default)]
    pub upstream_credentials: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentials>,
    /// Specific settings for an Yum remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yumRepository")]
    #[builder(default)]
    pub yum_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigYumRepository>,
}

/// Specific settings for an Apt remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigAptRepository {
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigAptRepositoryPublicRepository>,
}

/// One of the publicly available Yum repositories supported by Artifact Registry.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigAptRepositoryPublicRepository {
    /// A common public repository base for Yum.
    /// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryBase")]
    #[builder(default)]
    pub repository_base: Option<String>,
    /// Specific repository from the base, e.g. "pub/rocky/9/BaseOS/x86_64/os"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryPath")]
    #[builder(default)]
    pub repository_path: Option<String>,
}

/// Specific settings for a Docker remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigDockerRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigDockerRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigDockerRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specific settings for a Maven remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigMavenRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigMavenRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigMavenRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specific settings for an Npm remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigNpmRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigNpmRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigNpmRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specific settings for a Python remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigPythonRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigPythonRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigPythonRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// The credentials used to access the remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentials {
    /// Use username and password to access the remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernamePasswordCredentials")]
    #[builder(default)]
    pub username_password_credentials: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials>,
}

/// Use username and password to access the remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials {
    /// The Secret Manager key version that holds the password to access the
    /// remote repository. Must be in the format of
    /// projects/{project}/secrets/{secret}/versions/{version}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretVersion")]
    #[builder(default)]
    pub password_secret_version: Option<String>,
    /// Reference to a SecretVersion in secretmanager to populate passwordSecretVersion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretVersionRef")]
    #[builder(default)]
    pub password_secret_version_ref: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRef>,
    /// Selector for a SecretVersion in secretmanager to populate passwordSecretVersion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretVersionSelector")]
    #[builder(default)]
    pub password_secret_version_selector: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelector>,
    /// The username to access the remote repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Reference to a SecretVersion in secretmanager to populate passwordSecretVersion.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SecretVersion in secretmanager to populate passwordSecretVersion.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryInitProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPasswordSecretVersionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specific settings for an Yum remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigYumRepository {
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<RegistryRepositoryInitProviderRemoteRepositoryConfigYumRepositoryPublicRepository>,
}

/// One of the publicly available Yum repositories supported by Artifact Registry.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderRemoteRepositoryConfigYumRepositoryPublicRepository {
    /// A common public repository base for Yum.
    /// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryBase")]
    #[builder(default)]
    pub repository_base: Option<String>,
    /// Specific repository from the base, e.g. "pub/rocky/9/BaseOS/x86_64/os"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryPath")]
    #[builder(default)]
    pub repository_path: Option<String>,
}

/// Configuration specific for a Virtual Repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderVirtualRepositoryConfig {
    /// Policies that configure the upstream artifacts distributed by the Virtual
    /// Repository. Upstream policies cannot be set on a standard repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamPolicies")]
    #[builder(default)]
    pub upstream_policies: Option<Vec<RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPolicies {
    /// The user-provided ID of the upstream policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Entries with a greater priority value take precedence in the pull order.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// A reference to the repository resource, for example:
    /// "projects/p1/locations/us-central1/repository/repo1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub repository: Option<String>,
    /// Reference to a RegistryRepository in artifact to populate repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryRef")]
    #[builder(default)]
    pub repository_ref: Option<RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRef>,
    /// Selector for a RegistryRepository in artifact to populate repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositorySelector")]
    #[builder(default)]
    pub repository_selector: Option<RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelector>,
}

/// Reference to a RegistryRepository in artifact to populate repository.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositoryRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RegistryRepository in artifact to populate repository.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryInitProviderVirtualRepositoryConfigUpstreamPoliciesRepositorySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<RegistryRepositoryPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<RegistryRepositoryPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegistryRepositoryPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegistryRepositoryPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegistryRepositoryPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegistryRepositoryPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RegistryRepositoryStatus defines the observed state of RegistryRepository.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<RegistryRepositoryStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProvider {
    /// Cleanup policies for this repository. Cleanup policies indicate when
    /// certain package versions can be automatically deleted.
    /// Map keys are policy IDs supplied by users during policy creation. They must
    /// unique within a repository and be under 128 characters in length.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cleanupPolicies")]
    #[builder(default)]
    pub cleanup_policies: Option<Vec<RegistryRepositoryStatusAtProviderCleanupPolicies>>,
    /// If true, the cleanup pipeline is prevented from deleting versions in this
    /// repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cleanupPolicyDryRun")]
    #[builder(default)]
    pub cleanup_policy_dry_run: Option<bool>,
    /// The time when the repository was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    #[builder(default)]
    pub create_time: Option<String>,
    /// The user-provided description of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Docker repository config contains repository level configuration for the repositories of docker type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerConfig")]
    #[builder(default)]
    pub docker_config: Option<RegistryRepositoryStatusAtProviderDockerConfig>,
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// The format of packages that are stored in the repository. Supported formats
    /// can be found here.
    /// You can only create alpha formats if you are a member of the
    /// alpha user group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The Cloud KMS resource name of the customer managed encryption key thatâ€™s
    /// used to encrypt the contents of the Repository. Has the form:
    /// projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key.
    /// This value may not be changed after the Repository has been created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    #[builder(default)]
    pub kms_key_name: Option<String>,
    /// Labels with user-defined metadata.
    /// This field may contain up to 64 entries. Label keys and values may be no
    /// longer than 63 characters. Label keys must begin with a lowercase letter
    /// and may only contain lowercase letters, numeric characters, underscores,
    /// and dashes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The name of the location this repository is located in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// MavenRepositoryConfig is maven related repository details.
    /// Provides additional configuration details for repositories of the maven
    /// format type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenConfig")]
    #[builder(default)]
    pub maven_config: Option<RegistryRepositoryStatusAtProviderMavenConfig>,
    /// The mode configures the repository to serve artifacts from different sources.
    /// Default value is STANDARD_REPOSITORY.
    /// Possible values are: STANDARD_REPOSITORY, VIRTUAL_REPOSITORY, REMOTE_REPOSITORY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    /// The name of the repository, for example:
    /// "repo1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Configuration specific for a Remote Repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteRepositoryConfig")]
    #[builder(default)]
    pub remote_repository_config: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfig>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// The time when the repository was last updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    #[builder(default)]
    pub update_time: Option<String>,
    /// Configuration specific for a Virtual Repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualRepositoryConfig")]
    #[builder(default)]
    pub virtual_repository_config: Option<RegistryRepositoryStatusAtProviderVirtualRepositoryConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderCleanupPolicies {
    /// Policy action.
    /// Possible values are: DELETE, KEEP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// Policy condition for matching versions.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub condition: Option<RegistryRepositoryStatusAtProviderCleanupPoliciesCondition>,
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Policy condition for retaining a minimum number of versions. May only be
    /// specified with a Keep action.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mostRecentVersions")]
    #[builder(default)]
    pub most_recent_versions: Option<RegistryRepositoryStatusAtProviderCleanupPoliciesMostRecentVersions>,
}

/// Policy condition for matching versions.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderCleanupPoliciesCondition {
    /// Match versions newer than a duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "newerThan")]
    #[builder(default)]
    pub newer_than: Option<String>,
    /// Match versions older than a duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "olderThan")]
    #[builder(default)]
    pub older_than: Option<String>,
    /// Match versions by package prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageNamePrefixes")]
    #[builder(default)]
    pub package_name_prefixes: Option<Vec<String>>,
    /// Match versions by tag prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagPrefixes")]
    #[builder(default)]
    pub tag_prefixes: Option<Vec<String>>,
    /// Match versions by tag status.
    /// Default value is ANY.
    /// Possible values are: TAGGED, UNTAGGED, ANY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagState")]
    #[builder(default)]
    pub tag_state: Option<String>,
    /// Match versions by version name prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionNamePrefixes")]
    #[builder(default)]
    pub version_name_prefixes: Option<Vec<String>>,
}

/// Policy condition for retaining a minimum number of versions. May only be
/// specified with a Keep action.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderCleanupPoliciesMostRecentVersions {
    /// Minimum number of versions to keep.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepCount")]
    #[builder(default)]
    pub keep_count: Option<f64>,
    /// Match versions by package prefix. Applied on any prefix match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageNamePrefixes")]
    #[builder(default)]
    pub package_name_prefixes: Option<Vec<String>>,
}

/// Docker repository config contains repository level configuration for the repositories of docker type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderDockerConfig {
    /// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "immutableTags")]
    #[builder(default)]
    pub immutable_tags: Option<bool>,
}

/// MavenRepositoryConfig is maven related repository details.
/// Provides additional configuration details for repositories of the maven
/// format type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderMavenConfig {
    /// The repository with this flag will allow publishing the same
    /// snapshot versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSnapshotOverwrites")]
    #[builder(default)]
    pub allow_snapshot_overwrites: Option<bool>,
    /// Version policy defines the versions that the registry will accept.
    /// Default value is VERSION_POLICY_UNSPECIFIED.
    /// Possible values are: VERSION_POLICY_UNSPECIFIED, RELEASE, SNAPSHOT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionPolicy")]
    #[builder(default)]
    pub version_policy: Option<String>,
}

/// Configuration specific for a Remote Repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfig {
    /// Specific settings for an Apt remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aptRepository")]
    #[builder(default)]
    pub apt_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigAptRepository>,
    /// The description of the remote source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// If true, the remote repository upstream and upstream credentials will
    /// not be validated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableUpstreamValidation")]
    #[builder(default)]
    pub disable_upstream_validation: Option<bool>,
    /// Specific settings for a Docker remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerRepository")]
    #[builder(default)]
    pub docker_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigDockerRepository>,
    /// Specific settings for a Maven remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenRepository")]
    #[builder(default)]
    pub maven_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigMavenRepository>,
    /// Specific settings for an Npm remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "npmRepository")]
    #[builder(default)]
    pub npm_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigNpmRepository>,
    /// Specific settings for a Python remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pythonRepository")]
    #[builder(default)]
    pub python_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigPythonRepository>,
    /// The credentials used to access the remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamCredentials")]
    #[builder(default)]
    pub upstream_credentials: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigUpstreamCredentials>,
    /// Specific settings for an Yum remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yumRepository")]
    #[builder(default)]
    pub yum_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigYumRepository>,
}

/// Specific settings for an Apt remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigAptRepository {
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigAptRepositoryPublicRepository>,
}

/// One of the publicly available Yum repositories supported by Artifact Registry.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigAptRepositoryPublicRepository {
    /// A common public repository base for Yum.
    /// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryBase")]
    #[builder(default)]
    pub repository_base: Option<String>,
    /// Specific repository from the base, e.g. "pub/rocky/9/BaseOS/x86_64/os"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryPath")]
    #[builder(default)]
    pub repository_path: Option<String>,
}

/// Specific settings for a Docker remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigDockerRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigDockerRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigDockerRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specific settings for a Maven remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigMavenRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigMavenRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigMavenRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specific settings for an Npm remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigNpmRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigNpmRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigNpmRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specific settings for a Python remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigPythonRepository {
    /// Settings for a remote repository with a custom uri.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRepository")]
    #[builder(default)]
    pub custom_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigPythonRepositoryCustomRepository>,
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<String>,
}

/// Settings for a remote repository with a custom uri.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigPythonRepositoryCustomRepository {
    /// Specific uri to the registry, e.g. "https://registry-1.docker.io"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// The credentials used to access the remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigUpstreamCredentials {
    /// Use username and password to access the remote repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernamePasswordCredentials")]
    #[builder(default)]
    pub username_password_credentials: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials>,
}

/// Use username and password to access the remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials {
    /// The Secret Manager key version that holds the password to access the
    /// remote repository. Must be in the format of
    /// projects/{project}/secrets/{secret}/versions/{version}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretVersion")]
    #[builder(default)]
    pub password_secret_version: Option<String>,
    /// The username to access the remote repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Specific settings for an Yum remote repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigYumRepository {
    /// One of the publicly available Yum repositories supported by Artifact Registry.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicRepository")]
    #[builder(default)]
    pub public_repository: Option<RegistryRepositoryStatusAtProviderRemoteRepositoryConfigYumRepositoryPublicRepository>,
}

/// One of the publicly available Yum repositories supported by Artifact Registry.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderRemoteRepositoryConfigYumRepositoryPublicRepository {
    /// A common public repository base for Yum.
    /// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryBase")]
    #[builder(default)]
    pub repository_base: Option<String>,
    /// Specific repository from the base, e.g. "pub/rocky/9/BaseOS/x86_64/os"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryPath")]
    #[builder(default)]
    pub repository_path: Option<String>,
}

/// Configuration specific for a Virtual Repository.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderVirtualRepositoryConfig {
    /// Policies that configure the upstream artifacts distributed by the Virtual
    /// Repository. Upstream policies cannot be set on a standard repository.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamPolicies")]
    #[builder(default)]
    pub upstream_policies: Option<Vec<RegistryRepositoryStatusAtProviderVirtualRepositoryConfigUpstreamPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegistryRepositoryStatusAtProviderVirtualRepositoryConfigUpstreamPolicies {
    /// The user-provided ID of the upstream policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Entries with a greater priority value take precedence in the pull order.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// A reference to the repository resource, for example:
    /// "projects/p1/locations/us-central1/repository/repo1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub repository: Option<String>,
}


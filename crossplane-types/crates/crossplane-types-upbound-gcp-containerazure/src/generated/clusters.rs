// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ClusterSpec defines the desired state of Cluster
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "containerazure.gcp.upbound.io",
    version = "v1beta2",
    kind = "Cluster",
    plural = "clusters"
)]
#[kube(status = "ClusterStatus")]
pub struct ClusterSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<ClusterDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ClusterForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<ClusterInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<ClusterProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<ClusterPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ClusterWriteConnectionSecretToRef>,
}

/// ClusterSpec defines the desired state of Cluster
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProvider {
    /// Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Configuration related to the cluster RBAC settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub authorization: Option<ClusterForProviderAuthorization>,
    /// The Azure region where the cluster runs. Each Google Cloud region supports a subset of nearby Azure regions. You can call to list all supported Azure regions within a given Google Cloud region.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureRegion"
    )]
    #[builder(default)]
    pub azure_region: Option<String>,
    /// Azure authentication configuration for management of Azure resources
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureServicesAuthentication"
    )]
    #[builder(default)]
    pub azure_services_authentication: Option<ClusterForProviderAzureServicesAuthentication>,
    /// Name of the AzureClient. The AzureClient resource must reside on the same GCP project and region as the AzureCluster. AzureClient names are formatted as projects/<project-number>/locations/<region>/azureClients/<client-id>. See Resource Names (https:cloud.google.com/apis/design/resource_names) for more details on Google Cloud resource names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub client: Option<String>,
    /// Configuration related to the cluster control plane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlane"
    )]
    #[builder(default)]
    pub control_plane: Option<ClusterForProviderControlPlane>,
    /// Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Fleet configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub fleet: Option<ClusterForProviderFleet>,
    /// The location for the resource
    pub location: String,
    /// Cluster-wide networking configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub networking: Option<ClusterForProviderNetworking>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceGroupId"
    )]
    #[builder(default)]
    pub resource_group_id: Option<String>,
}

/// Configuration related to the cluster RBAC settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderAuthorization {
    /// Groups of users that can perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the groups. Up to ten admin groups can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminGroups"
    )]
    #[builder(default)]
    pub admin_groups: Option<Vec<ClusterForProviderAuthorizationAdminGroups>>,
    /// Users that can perform operations as a cluster admin. A new ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminUsers"
    )]
    #[builder(default)]
    pub admin_users: Option<Vec<ClusterForProviderAuthorizationAdminUsers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderAuthorizationAdminGroups {
    /// The name of the group, e.g. my-group@domain.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderAuthorizationAdminUsers {
    /// The name of the user, e.g. my-gcp-id@gmail.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Azure authentication configuration for management of Azure resources
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderAzureServicesAuthentication {
    /// The Azure Active Directory Application ID for Authentication configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applicationId"
    )]
    #[builder(default)]
    pub application_id: Option<String>,
    /// The Azure Active Directory Tenant ID for Authentication configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantId")]
    #[builder(default)]
    pub tenant_id: Option<String>,
}

/// Configuration related to the cluster control plane.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlane {
    /// Optional. Configuration related to application-layer secrets encryption.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseEncryption"
    )]
    #[builder(default)]
    pub database_encryption: Option<ClusterForProviderControlPlaneDatabaseEncryption>,
    /// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainVolume"
    )]
    #[builder(default)]
    pub main_volume: Option<ClusterForProviderControlPlaneMainVolume>,
    /// Proxy configuration for outbound HTTP(S) traffic.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConfig"
    )]
    #[builder(default)]
    pub proxy_config: Option<ClusterForProviderControlPlaneProxyConfig>,
    /// Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicaPlacements"
    )]
    #[builder(default)]
    pub replica_placements: Option<Vec<ClusterForProviderControlPlaneReplicaPlacements>>,
    /// Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootVolume"
    )]
    #[builder(default)]
    pub root_volume: Option<ClusterForProviderControlPlaneRootVolume>,
    /// SSH configuration for how to access the underlying control plane machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshConfig")]
    #[builder(default)]
    pub ssh_config: Option<ClusterForProviderControlPlaneSshConfig>,
    /// The ARM ID of the subnet where the control plane VMs are deployed. Example: /subscriptions//resourceGroups//providers/Microsoft.Network/virtualNetworks//subnets/default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Optional. A set of tags to apply to all underlying control plane Azure resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
    /// Optional. The Azure VM size name. Example: Standard_DS2_v2. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to Standard_DS2_v2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmSize")]
    #[builder(default)]
    pub vm_size: Option<String>,
}

/// Optional. Configuration related to application-layer secrets encryption.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneDatabaseEncryption {
    /// The ARM ID of the Azure Key Vault key to encrypt / decrypt data. For example: /subscriptions/<subscription-id>/resourceGroups/<resource-group-id>/providers/Microsoft.KeyVault/vaults/<key-vault-id>/keys/<key-name> Encryption will always take the latest version of the key and hence specific version is not supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

/// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneMainVolume {
    /// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
}

/// Proxy configuration for outbound HTTP(S) traffic.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneProxyConfig {
    /// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceGroupId"
    )]
    #[builder(default)]
    pub resource_group_id: Option<String>,
    /// The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretId")]
    #[builder(default)]
    pub secret_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneReplicaPlacements {
    /// For a given replica, the Azure availability zone where to provision the control plane VM and the ETCD disk.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureAvailabilityZone"
    )]
    #[builder(default)]
    pub azure_availability_zone: Option<String>,
    /// For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it's a subnet under the virtual network in the cluster configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
}

/// Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneRootVolume {
    /// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
}

/// SSH configuration for how to access the underlying control plane machines.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderControlPlaneSshConfig {
    /// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizedKey"
    )]
    #[builder(default)]
    pub authorized_key: Option<String>,
}

/// Fleet configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderFleet {
    /// The number of the Fleet host project where this cluster will be registered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Cluster-wide networking configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderNetworking {
    /// The IP address range of the pods in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All pods in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podAddressCidrBlocks"
    )]
    #[builder(default)]
    pub pod_address_cidr_blocks: Option<Vec<String>>,
    /// The IP address range for services in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All services in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creating a cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceAddressCidrBlocks"
    )]
    #[builder(default)]
    pub service_address_cidr_blocks: Option<Vec<String>>,
    /// The Azure Resource Manager (ARM) ID of the VNet associated with your cluster. All components in the cluster (i.e. control plane and node pools) run on a single VNet. Example: /subscriptions/*/resourceGroups/*/providers/Microsoft.Network/virtualNetworks/* This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNetworkId"
    )]
    #[builder(default)]
    pub virtual_network_id: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProvider {
    /// Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Configuration related to the cluster RBAC settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub authorization: Option<ClusterInitProviderAuthorization>,
    /// The Azure region where the cluster runs. Each Google Cloud region supports a subset of nearby Azure regions. You can call to list all supported Azure regions within a given Google Cloud region.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureRegion"
    )]
    #[builder(default)]
    pub azure_region: Option<String>,
    /// Azure authentication configuration for management of Azure resources
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureServicesAuthentication"
    )]
    #[builder(default)]
    pub azure_services_authentication: Option<ClusterInitProviderAzureServicesAuthentication>,
    /// Name of the AzureClient. The AzureClient resource must reside on the same GCP project and region as the AzureCluster. AzureClient names are formatted as projects/<project-number>/locations/<region>/azureClients/<client-id>. See Resource Names (https:cloud.google.com/apis/design/resource_names) for more details on Google Cloud resource names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub client: Option<String>,
    /// Configuration related to the cluster control plane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlane"
    )]
    #[builder(default)]
    pub control_plane: Option<ClusterInitProviderControlPlane>,
    /// Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Fleet configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub fleet: Option<ClusterInitProviderFleet>,
    /// Cluster-wide networking configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub networking: Option<ClusterInitProviderNetworking>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceGroupId"
    )]
    #[builder(default)]
    pub resource_group_id: Option<String>,
}

/// Configuration related to the cluster RBAC settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderAuthorization {
    /// Groups of users that can perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the groups. Up to ten admin groups can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminGroups"
    )]
    #[builder(default)]
    pub admin_groups: Option<Vec<ClusterInitProviderAuthorizationAdminGroups>>,
    /// Users that can perform operations as a cluster admin. A new ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminUsers"
    )]
    #[builder(default)]
    pub admin_users: Option<Vec<ClusterInitProviderAuthorizationAdminUsers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderAuthorizationAdminGroups {
    /// The name of the group, e.g. my-group@domain.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderAuthorizationAdminUsers {
    /// The name of the user, e.g. my-gcp-id@gmail.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Azure authentication configuration for management of Azure resources
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderAzureServicesAuthentication {
    /// The Azure Active Directory Application ID for Authentication configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applicationId"
    )]
    #[builder(default)]
    pub application_id: Option<String>,
    /// The Azure Active Directory Tenant ID for Authentication configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantId")]
    #[builder(default)]
    pub tenant_id: Option<String>,
}

/// Configuration related to the cluster control plane.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlane {
    /// Optional. Configuration related to application-layer secrets encryption.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseEncryption"
    )]
    #[builder(default)]
    pub database_encryption: Option<ClusterInitProviderControlPlaneDatabaseEncryption>,
    /// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainVolume"
    )]
    #[builder(default)]
    pub main_volume: Option<ClusterInitProviderControlPlaneMainVolume>,
    /// Proxy configuration for outbound HTTP(S) traffic.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConfig"
    )]
    #[builder(default)]
    pub proxy_config: Option<ClusterInitProviderControlPlaneProxyConfig>,
    /// Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicaPlacements"
    )]
    #[builder(default)]
    pub replica_placements: Option<Vec<ClusterInitProviderControlPlaneReplicaPlacements>>,
    /// Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootVolume"
    )]
    #[builder(default)]
    pub root_volume: Option<ClusterInitProviderControlPlaneRootVolume>,
    /// SSH configuration for how to access the underlying control plane machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshConfig")]
    #[builder(default)]
    pub ssh_config: Option<ClusterInitProviderControlPlaneSshConfig>,
    /// The ARM ID of the subnet where the control plane VMs are deployed. Example: /subscriptions//resourceGroups//providers/Microsoft.Network/virtualNetworks//subnets/default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Optional. A set of tags to apply to all underlying control plane Azure resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
    /// Optional. The Azure VM size name. Example: Standard_DS2_v2. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to Standard_DS2_v2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmSize")]
    #[builder(default)]
    pub vm_size: Option<String>,
}

/// Optional. Configuration related to application-layer secrets encryption.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneDatabaseEncryption {
    /// The ARM ID of the Azure Key Vault key to encrypt / decrypt data. For example: /subscriptions/<subscription-id>/resourceGroups/<resource-group-id>/providers/Microsoft.KeyVault/vaults/<key-vault-id>/keys/<key-name> Encryption will always take the latest version of the key and hence specific version is not supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

/// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneMainVolume {
    /// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
}

/// Proxy configuration for outbound HTTP(S) traffic.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneProxyConfig {
    /// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceGroupId"
    )]
    #[builder(default)]
    pub resource_group_id: Option<String>,
    /// The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretId")]
    #[builder(default)]
    pub secret_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneReplicaPlacements {
    /// For a given replica, the Azure availability zone where to provision the control plane VM and the ETCD disk.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureAvailabilityZone"
    )]
    #[builder(default)]
    pub azure_availability_zone: Option<String>,
    /// For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it's a subnet under the virtual network in the cluster configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
}

/// Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneRootVolume {
    /// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
}

/// SSH configuration for how to access the underlying control plane machines.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderControlPlaneSshConfig {
    /// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizedKey"
    )]
    #[builder(default)]
    pub authorized_key: Option<String>,
}

/// Fleet configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderFleet {
    /// The number of the Fleet host project where this cluster will be registered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Cluster-wide networking configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderNetworking {
    /// The IP address range of the pods in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All pods in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podAddressCidrBlocks"
    )]
    #[builder(default)]
    pub pod_address_cidr_blocks: Option<Vec<String>>,
    /// The IP address range for services in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All services in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creating a cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceAddressCidrBlocks"
    )]
    #[builder(default)]
    pub service_address_cidr_blocks: Option<Vec<String>>,
    /// The Azure Resource Manager (ARM) ID of the VNet associated with your cluster. All components in the cluster (i.e. control plane and node pools) run on a single VNet. Example: /subscriptions/*/resourceGroups/*/providers/Microsoft.Network/virtualNetworks/* This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNetworkId"
    )]
    #[builder(default)]
    pub virtual_network_id: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ClusterPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ClusterPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ClusterStatus defines the observed state of Cluster.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<ClusterStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProvider {
    /// Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Configuration related to the cluster RBAC settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub authorization: Option<ClusterStatusAtProviderAuthorization>,
    /// The Azure region where the cluster runs. Each Google Cloud region supports a subset of nearby Azure regions. You can call to list all supported Azure regions within a given Google Cloud region.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureRegion"
    )]
    #[builder(default)]
    pub azure_region: Option<String>,
    /// Azure authentication configuration for management of Azure resources
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureServicesAuthentication"
    )]
    #[builder(default)]
    pub azure_services_authentication: Option<ClusterStatusAtProviderAzureServicesAuthentication>,
    /// Name of the AzureClient. The AzureClient resource must reside on the same GCP project and region as the AzureCluster. AzureClient names are formatted as projects/<project-number>/locations/<region>/azureClients/<client-id>. See Resource Names (https:cloud.google.com/apis/design/resource_names) for more details on Google Cloud resource names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub client: Option<String>,
    /// Configuration related to the cluster control plane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlane"
    )]
    #[builder(default)]
    pub control_plane: Option<ClusterStatusAtProviderControlPlane>,
    /// Output only. The time at which this cluster was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createTime"
    )]
    #[builder(default)]
    pub create_time: Option<String>,
    /// Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "effectiveAnnotations"
    )]
    #[builder(default)]
    pub effective_annotations: Option<HashMap<String, String>>,
    /// Output only. The endpoint of the cluster's API server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub endpoint: Option<String>,
    /// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub etag: Option<String>,
    /// Fleet configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub fleet: Option<ClusterStatusAtProviderFleet>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/azureClusters/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// Cluster-wide networking configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub networking: Option<ClusterStatusAtProviderNetworking>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Output only. If set, there are currently changes in flight to the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub reconciling: Option<bool>,
    /// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceGroupId"
    )]
    #[builder(default)]
    pub resource_group_id: Option<String>,
    /// Output only. The current state of the cluster. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Output only. A globally unique identifier for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<String>,
    /// Output only. The time at which this cluster was last updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "updateTime"
    )]
    #[builder(default)]
    pub update_time: Option<String>,
    /// Output only. Workload Identity settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workloadIdentityConfig"
    )]
    #[builder(default)]
    pub workload_identity_config: Option<Vec<ClusterStatusAtProviderWorkloadIdentityConfig>>,
}

/// Configuration related to the cluster RBAC settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderAuthorization {
    /// Groups of users that can perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the groups. Up to ten admin groups can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminGroups"
    )]
    #[builder(default)]
    pub admin_groups: Option<Vec<ClusterStatusAtProviderAuthorizationAdminGroups>>,
    /// Users that can perform operations as a cluster admin. A new ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminUsers"
    )]
    #[builder(default)]
    pub admin_users: Option<Vec<ClusterStatusAtProviderAuthorizationAdminUsers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderAuthorizationAdminGroups {
    /// The name of the group, e.g. my-group@domain.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderAuthorizationAdminUsers {
    /// The name of the user, e.g. my-gcp-id@gmail.com.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Azure authentication configuration for management of Azure resources
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderAzureServicesAuthentication {
    /// The Azure Active Directory Application ID for Authentication configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applicationId"
    )]
    #[builder(default)]
    pub application_id: Option<String>,
    /// The Azure Active Directory Tenant ID for Authentication configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantId")]
    #[builder(default)]
    pub tenant_id: Option<String>,
}

/// Configuration related to the cluster control plane.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlane {
    /// Optional. Configuration related to application-layer secrets encryption.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseEncryption"
    )]
    #[builder(default)]
    pub database_encryption: Option<ClusterStatusAtProviderControlPlaneDatabaseEncryption>,
    /// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainVolume"
    )]
    #[builder(default)]
    pub main_volume: Option<ClusterStatusAtProviderControlPlaneMainVolume>,
    /// Proxy configuration for outbound HTTP(S) traffic.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConfig"
    )]
    #[builder(default)]
    pub proxy_config: Option<ClusterStatusAtProviderControlPlaneProxyConfig>,
    /// Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicaPlacements"
    )]
    #[builder(default)]
    pub replica_placements: Option<Vec<ClusterStatusAtProviderControlPlaneReplicaPlacements>>,
    /// Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootVolume"
    )]
    #[builder(default)]
    pub root_volume: Option<ClusterStatusAtProviderControlPlaneRootVolume>,
    /// SSH configuration for how to access the underlying control plane machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshConfig")]
    #[builder(default)]
    pub ssh_config: Option<ClusterStatusAtProviderControlPlaneSshConfig>,
    /// The ARM ID of the subnet where the control plane VMs are deployed. Example: /subscriptions//resourceGroups//providers/Microsoft.Network/virtualNetworks//subnets/default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Optional. A set of tags to apply to all underlying control plane Azure resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
    /// Optional. The Azure VM size name. Example: Standard_DS2_v2. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to Standard_DS2_v2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmSize")]
    #[builder(default)]
    pub vm_size: Option<String>,
}

/// Optional. Configuration related to application-layer secrets encryption.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneDatabaseEncryption {
    /// The ARM ID of the Azure Key Vault key to encrypt / decrypt data. For example: /subscriptions/<subscription-id>/resourceGroups/<resource-group-id>/providers/Microsoft.KeyVault/vaults/<key-vault-id>/keys/<key-name> Encryption will always take the latest version of the key and hence specific version is not supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

/// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneMainVolume {
    /// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
}

/// Proxy configuration for outbound HTTP(S) traffic.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneProxyConfig {
    /// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceGroupId"
    )]
    #[builder(default)]
    pub resource_group_id: Option<String>,
    /// The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretId")]
    #[builder(default)]
    pub secret_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneReplicaPlacements {
    /// For a given replica, the Azure availability zone where to provision the control plane VM and the ETCD disk.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureAvailabilityZone"
    )]
    #[builder(default)]
    pub azure_availability_zone: Option<String>,
    /// For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it's a subnet under the virtual network in the cluster configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
}

/// Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneRootVolume {
    /// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
}

/// SSH configuration for how to access the underlying control plane machines.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderControlPlaneSshConfig {
    /// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizedKey"
    )]
    #[builder(default)]
    pub authorized_key: Option<String>,
}

/// Fleet configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderFleet {
    /// The name of the managed Hub Membership resource associated to this cluster. Membership names are formatted as projects//locations/global/membership/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub membership: Option<String>,
    /// The number of the Fleet host project where this cluster will be registered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Cluster-wide networking configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderNetworking {
    /// The IP address range of the pods in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All pods in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podAddressCidrBlocks"
    )]
    #[builder(default)]
    pub pod_address_cidr_blocks: Option<Vec<String>>,
    /// The IP address range for services in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All services in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creating a cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceAddressCidrBlocks"
    )]
    #[builder(default)]
    pub service_address_cidr_blocks: Option<Vec<String>>,
    /// The Azure Resource Manager (ARM) ID of the VNet associated with your cluster. All components in the cluster (i.e. control plane and node pools) run on a single VNet. Example: /subscriptions/*/resourceGroups/*/providers/Microsoft.Network/virtualNetworks/* This field cannot be changed after creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNetworkId"
    )]
    #[builder(default)]
    pub virtual_network_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderWorkloadIdentityConfig {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityProvider"
    )]
    #[builder(default)]
    pub identity_provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuerUri")]
    #[builder(default)]
    pub issuer_uri: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workloadPool"
    )]
    #[builder(default)]
    pub workload_pool: Option<String>,
}

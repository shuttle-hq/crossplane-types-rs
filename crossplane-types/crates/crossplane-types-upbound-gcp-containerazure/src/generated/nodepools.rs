// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// NodePoolSpec defines the desired state of NodePool
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "containerazure.gcp.upbound.io", version = "v1beta2", kind = "NodePool", plural = "nodepools")]
#[kube(status = "NodePoolStatus")]
pub struct NodePoolSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<NodePoolDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: NodePoolForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<NodePoolInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<NodePoolProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<NodePoolPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<NodePoolWriteConnectionSecretToRef>,
}

/// NodePoolSpec defines the desired state of NodePool
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodePoolDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProvider {
    /// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Autoscaler configuration for this node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub autoscaling: Option<NodePoolForProviderAutoscaling>,
    /// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureAvailabilityZone")]
    #[builder(default)]
    pub azure_availability_zone: Option<String>,
    /// The azureCluster for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cluster: Option<String>,
    /// Reference to a Cluster in containerazure to populate cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterRef")]
    #[builder(default)]
    pub cluster_ref: Option<NodePoolForProviderClusterRef>,
    /// Selector for a Cluster in containerazure to populate cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSelector")]
    #[builder(default)]
    pub cluster_selector: Option<NodePoolForProviderClusterSelector>,
    /// The node configuration of the node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub config: Option<NodePoolForProviderConfig>,
    /// The location for the resource
    pub location: String,
    /// The Management configuration for this node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub management: Option<NodePoolForProviderManagement>,
    /// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPodsConstraint")]
    #[builder(default)]
    pub max_pods_constraint: Option<NodePoolForProviderMaxPodsConstraint>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// The Kubernetes version (e.g. 1.19.10-gke.1000) running on this node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Autoscaler configuration for this node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderAutoscaling {
    /// Maximum number of nodes in the node pool. Must be >= min_node_count.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNodeCount")]
    #[builder(default)]
    pub max_node_count: Option<f64>,
    /// Minimum number of nodes in the node pool. Must be >= 1 and <= max_node_count.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minNodeCount")]
    #[builder(default)]
    pub min_node_count: Option<f64>,
}

/// Reference to a Cluster in containerazure to populate cluster.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderClusterRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<NodePoolForProviderClusterRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderClusterRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<NodePoolForProviderClusterRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<NodePoolForProviderClusterRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodePoolForProviderClusterRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodePoolForProviderClusterRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in containerazure to populate cluster.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderClusterSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<NodePoolForProviderClusterSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderClusterSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<NodePoolForProviderClusterSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<NodePoolForProviderClusterSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodePoolForProviderClusterSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodePoolForProviderClusterSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The node configuration of the node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderConfig {
    /// Optional. The initial labels assigned to nodes of this node pool. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Proxy configuration for outbound HTTP(S) traffic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyConfig")]
    #[builder(default)]
    pub proxy_config: Option<NodePoolForProviderConfigProxyConfig>,
    /// Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootVolume")]
    #[builder(default)]
    pub root_volume: Option<NodePoolForProviderConfigRootVolume>,
    /// SSH configuration for how to access the node pool machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshConfig")]
    #[builder(default)]
    pub ssh_config: Option<NodePoolForProviderConfigSshConfig>,
    /// Optional. A set of tags to apply to all underlying Azure resources for this node pool. This currently only includes Virtual Machine Scale Sets. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Optional. The Azure VM size name. Example: Standard_DS2_v2. See (/anthos/clusters/docs/azure/reference/supported-vms) for options. When unspecified, it defaults to Standard_DS2_v2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmSize")]
    #[builder(default)]
    pub vm_size: Option<String>,
}

/// Proxy configuration for outbound HTTP(S) traffic.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderConfigProxyConfig {
    /// The ARM ID the of the resource group containing proxy keyvault. Resource group ids are formatted as /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroupId")]
    #[builder(default)]
    pub resource_group_id: Option<String>,
    /// The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretId")]
    #[builder(default)]
    pub secret_id: Option<String>,
}

/// Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderConfigRootVolume {
    /// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
}

/// SSH configuration for how to access the node pool machines.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderConfigSshConfig {
    /// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedKey")]
    #[builder(default)]
    pub authorized_key: Option<String>,
}

/// The Management configuration for this node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderManagement {
    /// Optional. Whether or not the nodes will be automatically repaired.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoRepair")]
    #[builder(default)]
    pub auto_repair: Option<bool>,
}

/// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolForProviderMaxPodsConstraint {
    /// The maximum number of pods to schedule on a single node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPodsPerNode")]
    #[builder(default)]
    pub max_pods_per_node: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolInitProvider {
    /// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Autoscaler configuration for this node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub autoscaling: Option<NodePoolInitProviderAutoscaling>,
    /// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureAvailabilityZone")]
    #[builder(default)]
    pub azure_availability_zone: Option<String>,
    /// The node configuration of the node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub config: Option<NodePoolInitProviderConfig>,
    /// The Management configuration for this node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub management: Option<NodePoolInitProviderManagement>,
    /// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPodsConstraint")]
    #[builder(default)]
    pub max_pods_constraint: Option<NodePoolInitProviderMaxPodsConstraint>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// The Kubernetes version (e.g. 1.19.10-gke.1000) running on this node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Autoscaler configuration for this node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolInitProviderAutoscaling {
    /// Maximum number of nodes in the node pool. Must be >= min_node_count.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNodeCount")]
    #[builder(default)]
    pub max_node_count: Option<f64>,
    /// Minimum number of nodes in the node pool. Must be >= 1 and <= max_node_count.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minNodeCount")]
    #[builder(default)]
    pub min_node_count: Option<f64>,
}

/// The node configuration of the node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolInitProviderConfig {
    /// Optional. The initial labels assigned to nodes of this node pool. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Proxy configuration for outbound HTTP(S) traffic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyConfig")]
    #[builder(default)]
    pub proxy_config: Option<NodePoolInitProviderConfigProxyConfig>,
    /// Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootVolume")]
    #[builder(default)]
    pub root_volume: Option<NodePoolInitProviderConfigRootVolume>,
    /// SSH configuration for how to access the node pool machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshConfig")]
    #[builder(default)]
    pub ssh_config: Option<NodePoolInitProviderConfigSshConfig>,
    /// Optional. A set of tags to apply to all underlying Azure resources for this node pool. This currently only includes Virtual Machine Scale Sets. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Optional. The Azure VM size name. Example: Standard_DS2_v2. See (/anthos/clusters/docs/azure/reference/supported-vms) for options. When unspecified, it defaults to Standard_DS2_v2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmSize")]
    #[builder(default)]
    pub vm_size: Option<String>,
}

/// Proxy configuration for outbound HTTP(S) traffic.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolInitProviderConfigProxyConfig {
    /// The ARM ID the of the resource group containing proxy keyvault. Resource group ids are formatted as /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroupId")]
    #[builder(default)]
    pub resource_group_id: Option<String>,
    /// The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretId")]
    #[builder(default)]
    pub secret_id: Option<String>,
}

/// Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolInitProviderConfigRootVolume {
    /// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
}

/// SSH configuration for how to access the node pool machines.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolInitProviderConfigSshConfig {
    /// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedKey")]
    #[builder(default)]
    pub authorized_key: Option<String>,
}

/// The Management configuration for this node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolInitProviderManagement {
    /// Optional. Whether or not the nodes will be automatically repaired.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoRepair")]
    #[builder(default)]
    pub auto_repair: Option<bool>,
}

/// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolInitProviderMaxPodsConstraint {
    /// The maximum number of pods to schedule on a single node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPodsPerNode")]
    #[builder(default)]
    pub max_pods_per_node: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<NodePoolProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<NodePoolProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<NodePoolProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodePoolProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodePoolProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<NodePoolPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<NodePoolPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<NodePoolPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<NodePoolPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<NodePoolPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodePoolPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodePoolPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// NodePoolStatus defines the observed state of NodePool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<NodePoolStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolStatusAtProvider {
    /// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Autoscaler configuration for this node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub autoscaling: Option<NodePoolStatusAtProviderAutoscaling>,
    /// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureAvailabilityZone")]
    #[builder(default)]
    pub azure_availability_zone: Option<String>,
    /// The azureCluster for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cluster: Option<String>,
    /// The node configuration of the node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub config: Option<NodePoolStatusAtProviderConfig>,
    /// Output only. The time at which this node pool was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    #[builder(default)]
    pub create_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveAnnotations")]
    #[builder(default)]
    pub effective_annotations: Option<HashMap<String, String>>,
    /// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub etag: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/azureClusters/{{cluster}}/azureNodePools/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// The Management configuration for this node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub management: Option<NodePoolStatusAtProviderManagement>,
    /// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPodsConstraint")]
    #[builder(default)]
    pub max_pods_constraint: Option<NodePoolStatusAtProviderMaxPodsConstraint>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Output only. If set, there are currently pending changes to the node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub reconciling: Option<bool>,
    /// Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default)]
    pub subnet_id: Option<String>,
    /// Output only. A globally unique identifier for the node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<String>,
    /// Output only. The time at which this node pool was last updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    #[builder(default)]
    pub update_time: Option<String>,
    /// The Kubernetes version (e.g. 1.19.10-gke.1000) running on this node pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Autoscaler configuration for this node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolStatusAtProviderAutoscaling {
    /// Maximum number of nodes in the node pool. Must be >= min_node_count.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNodeCount")]
    #[builder(default)]
    pub max_node_count: Option<f64>,
    /// Minimum number of nodes in the node pool. Must be >= 1 and <= max_node_count.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minNodeCount")]
    #[builder(default)]
    pub min_node_count: Option<f64>,
}

/// The node configuration of the node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolStatusAtProviderConfig {
    /// Optional. The initial labels assigned to nodes of this node pool. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Proxy configuration for outbound HTTP(S) traffic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyConfig")]
    #[builder(default)]
    pub proxy_config: Option<NodePoolStatusAtProviderConfigProxyConfig>,
    /// Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootVolume")]
    #[builder(default)]
    pub root_volume: Option<NodePoolStatusAtProviderConfigRootVolume>,
    /// SSH configuration for how to access the node pool machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshConfig")]
    #[builder(default)]
    pub ssh_config: Option<NodePoolStatusAtProviderConfigSshConfig>,
    /// Optional. A set of tags to apply to all underlying Azure resources for this node pool. This currently only includes Virtual Machine Scale Sets. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Optional. The Azure VM size name. Example: Standard_DS2_v2. See (/anthos/clusters/docs/azure/reference/supported-vms) for options. When unspecified, it defaults to Standard_DS2_v2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmSize")]
    #[builder(default)]
    pub vm_size: Option<String>,
}

/// Proxy configuration for outbound HTTP(S) traffic.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolStatusAtProviderConfigProxyConfig {
    /// The ARM ID the of the resource group containing proxy keyvault. Resource group ids are formatted as /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroupId")]
    #[builder(default)]
    pub resource_group_id: Option<String>,
    /// The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretId")]
    #[builder(default)]
    pub secret_id: Option<String>,
}

/// Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolStatusAtProviderConfigRootVolume {
    /// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeGib")]
    #[builder(default)]
    pub size_gib: Option<f64>,
}

/// SSH configuration for how to access the node pool machines.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolStatusAtProviderConfigSshConfig {
    /// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedKey")]
    #[builder(default)]
    pub authorized_key: Option<String>,
}

/// The Management configuration for this node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolStatusAtProviderManagement {
    /// Optional. Whether or not the nodes will be automatically repaired.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoRepair")]
    #[builder(default)]
    pub auto_repair: Option<bool>,
}

/// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct NodePoolStatusAtProviderMaxPodsConstraint {
    /// The maximum number of pods to schedule on a single node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPodsPerNode")]
    #[builder(default)]
    pub max_pods_per_node: Option<f64>,
}


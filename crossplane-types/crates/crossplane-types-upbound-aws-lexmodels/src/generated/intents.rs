// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// IntentSpec defines the desired state of Intent
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "lexmodels.aws.upbound.io", version = "v1beta2", kind = "Intent", plural = "intents")]
#[kube(status = "IntentStatus")]
pub struct IntentSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<IntentDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: IntentForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<IntentInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<IntentProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<IntentPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<IntentWriteConnectionSecretToRef>,
}

/// IntentSpec defines the desired state of Intent
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntentDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProvider {
    /// The statement that you want Amazon Lex to convey to the user
    /// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
    /// you provide a Lambda function in the fulfillment_activity. If you return the intent to the client
    /// application, you can't specify this element. The follow_up_prompt and conclusion_statement are
    /// mutually exclusive. You can specify only one. Attributes are documented under statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conclusionStatement")]
    #[builder(default)]
    pub conclusion_statement: Option<IntentForProviderConclusionStatement>,
    /// Prompts the user to confirm the intent. This question should
    /// have a yes or no answer. You you must provide both the rejection_statement and confirmation_prompt,
    /// or neither. Attributes are documented under prompt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "confirmationPrompt")]
    #[builder(default)]
    pub confirmation_prompt: Option<IntentForProviderConfirmationPrompt>,
    /// Determines if a new slot type version is created when the initial
    /// resource is created and on each update. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createVersion")]
    #[builder(default)]
    pub create_version: Option<bool>,
    /// A description of the intent. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Specifies a Lambda function to invoke for each user input. You can
    /// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dialogCodeHook")]
    #[builder(default)]
    pub dialog_code_hook: Option<IntentForProviderDialogCodeHook>,
    /// Amazon Lex uses this prompt to solicit additional activity after
    /// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
    /// user to order a drink. The follow_up_prompt field and the conclusion_statement field are mutually
    /// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followUpPrompt")]
    #[builder(default)]
    pub follow_up_prompt: Option<IntentForProviderFollowUpPrompt>,
    /// Describes how the intent is fulfilled. For example, after a
    /// user provides all of the information for a pizza order, fulfillment_activity defines how the bot
    /// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fulfillmentActivity")]
    #[builder(default)]
    pub fulfillment_activity: Option<IntentForProviderFulfillmentActivity>,
    /// A unique identifier for the built-in intent to base this
    /// intent on. To find the signature for an intent, see
    /// Standard Built-in Intents
    /// in the Alexa Skills Kit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentIntentSignature")]
    #[builder(default)]
    pub parent_intent_signature: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// When the user answers "no" to the question defined in
    /// confirmation_prompt, Amazon Lex responds with this statement to acknowledge that the intent was
    /// canceled. You must provide both the rejection_statement and the confirmation_prompt, or neither.
    /// Attributes are documented under statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rejectionStatement")]
    #[builder(default)]
    pub rejection_statement: Option<IntentForProviderRejectionStatement>,
    /// An array of utterances (strings) that a user might say to signal
    /// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
    /// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleUtterances")]
    #[builder(default)]
    pub sample_utterances: Option<Vec<String>>,
    /// An list of intent slots. At runtime, Amazon Lex elicits required slot values
    /// from the user using prompts defined in the slots. Attributes are documented under slot.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slot: Option<Vec<IntentForProviderSlot>>,
}

/// The statement that you want Amazon Lex to convey to the user
/// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
/// you provide a Lambda function in the fulfillment_activity. If you return the intent to the client
/// application, you can't specify this element. The follow_up_prompt and conclusion_statement are
/// mutually exclusive. You can specify only one. Attributes are documented under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderConclusionStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentForProviderConclusionStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderConclusionStatementMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// Prompts the user to confirm the intent. This question should
/// have a yes or no answer. You you must provide both the rejection_statement and confirmation_prompt,
/// or neither. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderConfirmationPrompt {
    /// The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentForProviderConfirmationPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderConfirmationPromptMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// Specifies a Lambda function to invoke for each user input. You can
/// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderDialogCodeHook {
    /// The version of the request-response that you want Amazon Lex to use
    /// to invoke your Lambda function. For more information, see
    /// Using Lambda Functions. Must be less than or equal to 5 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageVersion")]
    #[builder(default)]
    pub message_version: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Amazon Lex uses this prompt to solicit additional activity after
/// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
/// user to order a drink. The follow_up_prompt field and the conclusion_statement field are mutually
/// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderFollowUpPrompt {
    /// Prompts for information from the user. Attributes are documented under prompt.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prompt: Option<IntentForProviderFollowUpPromptPrompt>,
    /// If the user answers "no" to the question defined in the prompt field,
    /// Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
    /// documented below under statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rejectionStatement")]
    #[builder(default)]
    pub rejection_statement: Option<IntentForProviderFollowUpPromptRejectionStatement>,
}

/// Prompts for information from the user. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderFollowUpPromptPrompt {
    /// The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentForProviderFollowUpPromptPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderFollowUpPromptPromptMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// If the user answers "no" to the question defined in the prompt field,
/// Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
/// documented below under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderFollowUpPromptRejectionStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentForProviderFollowUpPromptRejectionStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderFollowUpPromptRejectionStatementMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// Describes how the intent is fulfilled. For example, after a
/// user provides all of the information for a pizza order, fulfillment_activity defines how the bot
/// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderFulfillmentActivity {
    /// A description of the Lambda function that is run to fulfill the intent.
    /// Required if type is CodeHook. Attributes are documented under code_hook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeHook")]
    #[builder(default)]
    pub code_hook: Option<IntentForProviderFulfillmentActivityCodeHook>,
    /// How the intent should be fulfilled, either by running a Lambda function or by
    /// returning the slot data to the client application. Type can be either ReturnIntent or CodeHook, as documented here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// A description of the Lambda function that is run to fulfill the intent.
/// Required if type is CodeHook. Attributes are documented under code_hook.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderFulfillmentActivityCodeHook {
    /// The version of the request-response that you want Amazon Lex to use
    /// to invoke your Lambda function. For more information, see
    /// Using Lambda Functions. Must be less than or equal to 5 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageVersion")]
    #[builder(default)]
    pub message_version: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// When the user answers "no" to the question defined in
/// confirmation_prompt, Amazon Lex responds with this statement to acknowledge that the intent was
/// canceled. You must provide both the rejection_statement and the confirmation_prompt, or neither.
/// Attributes are documented under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderRejectionStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentForProviderRejectionStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderRejectionStatementMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderSlot {
    /// A description of the bot. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Directs Lex the order in which to elicit this slot value from the user.
    /// For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
    /// the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
    /// values is arbitrary. Must be between 1 and 100.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
    /// If you know a specific pattern with which users might respond to
    /// an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
    /// is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleUtterances")]
    #[builder(default)]
    pub sample_utterances: Option<Vec<String>>,
    /// Specifies whether the slot is required or optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotConstraint")]
    #[builder(default)]
    pub slot_constraint: Option<String>,
    /// The type of the slot, either a custom slot type that you defined or one of
    /// the built-in slot types. Must be less than or equal to 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotType")]
    #[builder(default)]
    pub slot_type: Option<String>,
    /// The version of the slot type. Must be less than or equal to 64 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotTypeVersion")]
    #[builder(default)]
    pub slot_type_version: Option<String>,
    /// The prompt that Amazon Lex uses to elicit the slot value
    /// from the user. Attributes are documented under prompt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueElicitationPrompt")]
    #[builder(default)]
    pub value_elicitation_prompt: Option<IntentForProviderSlotValueElicitationPrompt>,
}

/// The prompt that Amazon Lex uses to elicit the slot value
/// from the user. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderSlotValueElicitationPrompt {
    /// The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentForProviderSlotValueElicitationPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentForProviderSlotValueElicitationPromptMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProvider {
    /// The statement that you want Amazon Lex to convey to the user
    /// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
    /// you provide a Lambda function in the fulfillment_activity. If you return the intent to the client
    /// application, you can't specify this element. The follow_up_prompt and conclusion_statement are
    /// mutually exclusive. You can specify only one. Attributes are documented under statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conclusionStatement")]
    #[builder(default)]
    pub conclusion_statement: Option<IntentInitProviderConclusionStatement>,
    /// Prompts the user to confirm the intent. This question should
    /// have a yes or no answer. You you must provide both the rejection_statement and confirmation_prompt,
    /// or neither. Attributes are documented under prompt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "confirmationPrompt")]
    #[builder(default)]
    pub confirmation_prompt: Option<IntentInitProviderConfirmationPrompt>,
    /// Determines if a new slot type version is created when the initial
    /// resource is created and on each update. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createVersion")]
    #[builder(default)]
    pub create_version: Option<bool>,
    /// A description of the intent. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Specifies a Lambda function to invoke for each user input. You can
    /// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dialogCodeHook")]
    #[builder(default)]
    pub dialog_code_hook: Option<IntentInitProviderDialogCodeHook>,
    /// Amazon Lex uses this prompt to solicit additional activity after
    /// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
    /// user to order a drink. The follow_up_prompt field and the conclusion_statement field are mutually
    /// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followUpPrompt")]
    #[builder(default)]
    pub follow_up_prompt: Option<IntentInitProviderFollowUpPrompt>,
    /// Describes how the intent is fulfilled. For example, after a
    /// user provides all of the information for a pizza order, fulfillment_activity defines how the bot
    /// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fulfillmentActivity")]
    #[builder(default)]
    pub fulfillment_activity: Option<IntentInitProviderFulfillmentActivity>,
    /// A unique identifier for the built-in intent to base this
    /// intent on. To find the signature for an intent, see
    /// Standard Built-in Intents
    /// in the Alexa Skills Kit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentIntentSignature")]
    #[builder(default)]
    pub parent_intent_signature: Option<String>,
    /// When the user answers "no" to the question defined in
    /// confirmation_prompt, Amazon Lex responds with this statement to acknowledge that the intent was
    /// canceled. You must provide both the rejection_statement and the confirmation_prompt, or neither.
    /// Attributes are documented under statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rejectionStatement")]
    #[builder(default)]
    pub rejection_statement: Option<IntentInitProviderRejectionStatement>,
    /// An array of utterances (strings) that a user might say to signal
    /// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
    /// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleUtterances")]
    #[builder(default)]
    pub sample_utterances: Option<Vec<String>>,
    /// An list of intent slots. At runtime, Amazon Lex elicits required slot values
    /// from the user using prompts defined in the slots. Attributes are documented under slot.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slot: Option<Vec<IntentInitProviderSlot>>,
}

/// The statement that you want Amazon Lex to convey to the user
/// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
/// you provide a Lambda function in the fulfillment_activity. If you return the intent to the client
/// application, you can't specify this element. The follow_up_prompt and conclusion_statement are
/// mutually exclusive. You can specify only one. Attributes are documented under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderConclusionStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentInitProviderConclusionStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderConclusionStatementMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// Prompts the user to confirm the intent. This question should
/// have a yes or no answer. You you must provide both the rejection_statement and confirmation_prompt,
/// or neither. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderConfirmationPrompt {
    /// The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentInitProviderConfirmationPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderConfirmationPromptMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// Specifies a Lambda function to invoke for each user input. You can
/// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderDialogCodeHook {
    /// The version of the request-response that you want Amazon Lex to use
    /// to invoke your Lambda function. For more information, see
    /// Using Lambda Functions. Must be less than or equal to 5 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageVersion")]
    #[builder(default)]
    pub message_version: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Amazon Lex uses this prompt to solicit additional activity after
/// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
/// user to order a drink. The follow_up_prompt field and the conclusion_statement field are mutually
/// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderFollowUpPrompt {
    /// Prompts for information from the user. Attributes are documented under prompt.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prompt: Option<IntentInitProviderFollowUpPromptPrompt>,
    /// If the user answers "no" to the question defined in the prompt field,
    /// Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
    /// documented below under statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rejectionStatement")]
    #[builder(default)]
    pub rejection_statement: Option<IntentInitProviderFollowUpPromptRejectionStatement>,
}

/// Prompts for information from the user. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderFollowUpPromptPrompt {
    /// The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentInitProviderFollowUpPromptPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderFollowUpPromptPromptMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// If the user answers "no" to the question defined in the prompt field,
/// Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
/// documented below under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderFollowUpPromptRejectionStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentInitProviderFollowUpPromptRejectionStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderFollowUpPromptRejectionStatementMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// Describes how the intent is fulfilled. For example, after a
/// user provides all of the information for a pizza order, fulfillment_activity defines how the bot
/// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderFulfillmentActivity {
    /// A description of the Lambda function that is run to fulfill the intent.
    /// Required if type is CodeHook. Attributes are documented under code_hook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeHook")]
    #[builder(default)]
    pub code_hook: Option<IntentInitProviderFulfillmentActivityCodeHook>,
    /// How the intent should be fulfilled, either by running a Lambda function or by
    /// returning the slot data to the client application. Type can be either ReturnIntent or CodeHook, as documented here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// A description of the Lambda function that is run to fulfill the intent.
/// Required if type is CodeHook. Attributes are documented under code_hook.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderFulfillmentActivityCodeHook {
    /// The version of the request-response that you want Amazon Lex to use
    /// to invoke your Lambda function. For more information, see
    /// Using Lambda Functions. Must be less than or equal to 5 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageVersion")]
    #[builder(default)]
    pub message_version: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// When the user answers "no" to the question defined in
/// confirmation_prompt, Amazon Lex responds with this statement to acknowledge that the intent was
/// canceled. You must provide both the rejection_statement and the confirmation_prompt, or neither.
/// Attributes are documented under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderRejectionStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentInitProviderRejectionStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderRejectionStatementMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderSlot {
    /// A description of the bot. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Directs Lex the order in which to elicit this slot value from the user.
    /// For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
    /// the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
    /// values is arbitrary. Must be between 1 and 100.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
    /// If you know a specific pattern with which users might respond to
    /// an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
    /// is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleUtterances")]
    #[builder(default)]
    pub sample_utterances: Option<Vec<String>>,
    /// Specifies whether the slot is required or optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotConstraint")]
    #[builder(default)]
    pub slot_constraint: Option<String>,
    /// The type of the slot, either a custom slot type that you defined or one of
    /// the built-in slot types. Must be less than or equal to 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotType")]
    #[builder(default)]
    pub slot_type: Option<String>,
    /// The version of the slot type. Must be less than or equal to 64 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotTypeVersion")]
    #[builder(default)]
    pub slot_type_version: Option<String>,
    /// The prompt that Amazon Lex uses to elicit the slot value
    /// from the user. Attributes are documented under prompt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueElicitationPrompt")]
    #[builder(default)]
    pub value_elicitation_prompt: Option<IntentInitProviderSlotValueElicitationPrompt>,
}

/// The prompt that Amazon Lex uses to elicit the slot value
/// from the user. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderSlotValueElicitationPrompt {
    /// The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentInitProviderSlotValueElicitationPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentInitProviderSlotValueElicitationPromptMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<IntentProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<IntentProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<IntentProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntentProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntentProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<IntentPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<IntentPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<IntentPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<IntentPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<IntentPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntentPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntentPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// IntentStatus defines the observed state of Intent.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<IntentStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProvider {
    /// The ARN of the Lex intent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Checksum identifying the version of the intent that was created. The checksum is not
    /// included as an argument because the resource will add it automatically when updating the intent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub checksum: Option<String>,
    /// The statement that you want Amazon Lex to convey to the user
    /// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
    /// you provide a Lambda function in the fulfillment_activity. If you return the intent to the client
    /// application, you can't specify this element. The follow_up_prompt and conclusion_statement are
    /// mutually exclusive. You can specify only one. Attributes are documented under statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conclusionStatement")]
    #[builder(default)]
    pub conclusion_statement: Option<IntentStatusAtProviderConclusionStatement>,
    /// Prompts the user to confirm the intent. This question should
    /// have a yes or no answer. You you must provide both the rejection_statement and confirmation_prompt,
    /// or neither. Attributes are documented under prompt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "confirmationPrompt")]
    #[builder(default)]
    pub confirmation_prompt: Option<IntentStatusAtProviderConfirmationPrompt>,
    /// Determines if a new slot type version is created when the initial
    /// resource is created and on each update. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createVersion")]
    #[builder(default)]
    pub create_version: Option<bool>,
    /// The date when the intent version was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdDate")]
    #[builder(default)]
    pub created_date: Option<String>,
    /// A description of the intent. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Specifies a Lambda function to invoke for each user input. You can
    /// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dialogCodeHook")]
    #[builder(default)]
    pub dialog_code_hook: Option<IntentStatusAtProviderDialogCodeHook>,
    /// Amazon Lex uses this prompt to solicit additional activity after
    /// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
    /// user to order a drink. The follow_up_prompt field and the conclusion_statement field are mutually
    /// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followUpPrompt")]
    #[builder(default)]
    pub follow_up_prompt: Option<IntentStatusAtProviderFollowUpPrompt>,
    /// Describes how the intent is fulfilled. For example, after a
    /// user provides all of the information for a pizza order, fulfillment_activity defines how the bot
    /// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fulfillmentActivity")]
    #[builder(default)]
    pub fulfillment_activity: Option<IntentStatusAtProviderFulfillmentActivity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The date when the $LATEST version of this intent was updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdatedDate")]
    #[builder(default)]
    pub last_updated_date: Option<String>,
    /// A unique identifier for the built-in intent to base this
    /// intent on. To find the signature for an intent, see
    /// Standard Built-in Intents
    /// in the Alexa Skills Kit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentIntentSignature")]
    #[builder(default)]
    pub parent_intent_signature: Option<String>,
    /// When the user answers "no" to the question defined in
    /// confirmation_prompt, Amazon Lex responds with this statement to acknowledge that the intent was
    /// canceled. You must provide both the rejection_statement and the confirmation_prompt, or neither.
    /// Attributes are documented under statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rejectionStatement")]
    #[builder(default)]
    pub rejection_statement: Option<IntentStatusAtProviderRejectionStatement>,
    /// An array of utterances (strings) that a user might say to signal
    /// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
    /// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleUtterances")]
    #[builder(default)]
    pub sample_utterances: Option<Vec<String>>,
    /// An list of intent slots. At runtime, Amazon Lex elicits required slot values
    /// from the user using prompts defined in the slots. Attributes are documented under slot.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slot: Option<Vec<IntentStatusAtProviderSlot>>,
    /// The version of the bot.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// The statement that you want Amazon Lex to convey to the user
/// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
/// you provide a Lambda function in the fulfillment_activity. If you return the intent to the client
/// application, you can't specify this element. The follow_up_prompt and conclusion_statement are
/// mutually exclusive. You can specify only one. Attributes are documented under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderConclusionStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentStatusAtProviderConclusionStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderConclusionStatementMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// Prompts the user to confirm the intent. This question should
/// have a yes or no answer. You you must provide both the rejection_statement and confirmation_prompt,
/// or neither. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderConfirmationPrompt {
    /// The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentStatusAtProviderConfirmationPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderConfirmationPromptMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// Specifies a Lambda function to invoke for each user input. You can
/// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderDialogCodeHook {
    /// The version of the request-response that you want Amazon Lex to use
    /// to invoke your Lambda function. For more information, see
    /// Using Lambda Functions. Must be less than or equal to 5 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageVersion")]
    #[builder(default)]
    pub message_version: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Amazon Lex uses this prompt to solicit additional activity after
/// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
/// user to order a drink. The follow_up_prompt field and the conclusion_statement field are mutually
/// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderFollowUpPrompt {
    /// Prompts for information from the user. Attributes are documented under prompt.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prompt: Option<IntentStatusAtProviderFollowUpPromptPrompt>,
    /// If the user answers "no" to the question defined in the prompt field,
    /// Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
    /// documented below under statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rejectionStatement")]
    #[builder(default)]
    pub rejection_statement: Option<IntentStatusAtProviderFollowUpPromptRejectionStatement>,
}

/// Prompts for information from the user. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderFollowUpPromptPrompt {
    /// The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentStatusAtProviderFollowUpPromptPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderFollowUpPromptPromptMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// If the user answers "no" to the question defined in the prompt field,
/// Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
/// documented below under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderFollowUpPromptRejectionStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentStatusAtProviderFollowUpPromptRejectionStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderFollowUpPromptRejectionStatementMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// Describes how the intent is fulfilled. For example, after a
/// user provides all of the information for a pizza order, fulfillment_activity defines how the bot
/// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderFulfillmentActivity {
    /// A description of the Lambda function that is run to fulfill the intent.
    /// Required if type is CodeHook. Attributes are documented under code_hook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeHook")]
    #[builder(default)]
    pub code_hook: Option<IntentStatusAtProviderFulfillmentActivityCodeHook>,
    /// How the intent should be fulfilled, either by running a Lambda function or by
    /// returning the slot data to the client application. Type can be either ReturnIntent or CodeHook, as documented here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// A description of the Lambda function that is run to fulfill the intent.
/// Required if type is CodeHook. Attributes are documented under code_hook.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderFulfillmentActivityCodeHook {
    /// The version of the request-response that you want Amazon Lex to use
    /// to invoke your Lambda function. For more information, see
    /// Using Lambda Functions. Must be less than or equal to 5 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageVersion")]
    #[builder(default)]
    pub message_version: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// When the user answers "no" to the question defined in
/// confirmation_prompt, Amazon Lex responds with this statement to acknowledge that the intent was
/// canceled. You must provide both the rejection_statement and the confirmation_prompt, or neither.
/// Attributes are documented under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderRejectionStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentStatusAtProviderRejectionStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderRejectionStatementMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderSlot {
    /// A description of the bot. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Directs Lex the order in which to elicit this slot value from the user.
    /// For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
    /// the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
    /// values is arbitrary. Must be between 1 and 100.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
    /// If you know a specific pattern with which users might respond to
    /// an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
    /// is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleUtterances")]
    #[builder(default)]
    pub sample_utterances: Option<Vec<String>>,
    /// Specifies whether the slot is required or optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotConstraint")]
    #[builder(default)]
    pub slot_constraint: Option<String>,
    /// The type of the slot, either a custom slot type that you defined or one of
    /// the built-in slot types. Must be less than or equal to 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotType")]
    #[builder(default)]
    pub slot_type: Option<String>,
    /// The version of the slot type. Must be less than or equal to 64 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotTypeVersion")]
    #[builder(default)]
    pub slot_type_version: Option<String>,
    /// The prompt that Amazon Lex uses to elicit the slot value
    /// from the user. Attributes are documented under prompt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueElicitationPrompt")]
    #[builder(default)]
    pub value_elicitation_prompt: Option<IntentStatusAtProviderSlotValueElicitationPrompt>,
}

/// The prompt that Amazon Lex uses to elicit the slot value
/// from the user. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderSlotValueElicitationPrompt {
    /// The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message. Must contain between 1 and 15 messages.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<IntentStatusAtProviderSlotValueElicitationPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card. Must be less than or equal to 50000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCard")]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct IntentStatusAtProviderSlotValueElicitationPromptMessage {
    /// The text of the message. Must be less than or equal to 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupNumber")]
    #[builder(default)]
    pub group_number: Option<f64>,
}


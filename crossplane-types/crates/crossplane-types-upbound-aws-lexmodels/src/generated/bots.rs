// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// BotSpec defines the desired state of Bot
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "lexmodels.aws.upbound.io",
    version = "v1beta2",
    kind = "Bot",
    plural = "bots"
)]
#[kube(status = "BotStatus")]
pub struct BotSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<BotDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BotForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<BotInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<BotProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<BotPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<BotWriteConnectionSecretToRef>,
}

/// BotSpec defines the desired state of Bot
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotForProvider {
    /// The message that Amazon Lex uses to abort a conversation. Attributes are documented under statement.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "abortStatement"
    )]
    #[builder(default)]
    pub abort_statement: Option<BotForProviderAbortStatement>,
    /// By specifying true, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. For more information see the Amazon Lex FAQ and the Amazon Lex PutBot API Docs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "childDirected"
    )]
    #[builder(default)]
    pub child_directed: Option<bool>,
    /// The message that Amazon Lex uses when it doesn't understand the user's request. Attributes are documented under prompt.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clarificationPrompt"
    )]
    #[builder(default)]
    pub clarification_prompt: Option<BotForProviderClarificationPrompt>,
    /// Determines if a new bot version is created when the initial resource is created and on each update. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createVersion"
    )]
    #[builder(default)]
    pub create_version: Option<bool>,
    /// A description of the bot. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// When set to true user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify detectSentiment, the default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "detectSentiment"
    )]
    #[builder(default)]
    pub detect_sentiment: Option<bool>,
    /// Set to true to enable access to natural language understanding improvements. When you set the enable_model_improvements parameter to true you can use the nlu_intent_confidence_threshold parameter to configure confidence scores. For more information, see Confidence Scores. You can only set the enable_model_improvements parameter in certain Regions. If you set the parameter to true, your bot has access to accuracy improvements. For more information see the Amazon Lex Bot PutBot API Docs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableModelImprovements"
    )]
    #[builder(default)]
    pub enable_model_improvements: Option<bool>,
    /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. Default is 300. Must be a number between 60 and 86400 (inclusive).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSessionTtlInSeconds"
    )]
    #[builder(default)]
    pub idle_session_ttl_in_seconds: Option<f64>,
    /// A set of Intent objects. Each intent represents a command that a user can express. Attributes are documented under intent. Can have up to 250 Intent objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub intent: Option<Vec<BotForProviderIntent>>,
    /// Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. For available locales, see Amazon Lex Bot PutBot API Docs. Default is en-US.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locale: Option<String>,
    /// Determines the threshold where Amazon Lex will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a PostContent or PostText response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot. For more information see Amazon Lex Bot PutBot API Docs This value requires enable_model_improvements to be set to true and the default is 0. Must be a float between 0 and 1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nluIntentConfidenceThreshold"
    )]
    #[builder(default)]
    pub nlu_intent_confidence_threshold: Option<f64>,
    /// If you set the process_behavior element to BUILD, Amazon Lex builds the bot so that it can be run. If you set the element to SAVE Amazon Lex saves the bot, but doesn't build it. Default is SAVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "processBehavior"
    )]
    #[builder(default)]
    pub process_behavior: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see Available Voices in the Amazon Polly Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "voiceId")]
    #[builder(default)]
    pub voice_id: Option<String>,
}

/// The message that Amazon Lex uses to abort a conversation. Attributes are documented under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotForProviderAbortStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<BotForProviderAbortStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseCard"
    )]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotForProviderAbortStatementMessage {
    /// The text of the message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentType"
    )]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupNumber"
    )]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// The message that Amazon Lex uses when it doesn't understand the user's request. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotForProviderClarificationPrompt {
    /// The number of times to prompt the user for information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxAttempts"
    )]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<BotForProviderClarificationPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseCard"
    )]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotForProviderClarificationPromptMessage {
    /// The text of the message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentType"
    )]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupNumber"
    )]
    #[builder(default)]
    pub group_number: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotForProviderIntent {
    /// The name of the intent. Must be less than or equal to 100 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "intentName"
    )]
    #[builder(default)]
    pub intent_name: Option<String>,
    /// The version of the intent. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "intentVersion"
    )]
    #[builder(default)]
    pub intent_version: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotInitProvider {
    /// The message that Amazon Lex uses to abort a conversation. Attributes are documented under statement.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "abortStatement"
    )]
    #[builder(default)]
    pub abort_statement: Option<BotInitProviderAbortStatement>,
    /// By specifying true, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. For more information see the Amazon Lex FAQ and the Amazon Lex PutBot API Docs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "childDirected"
    )]
    #[builder(default)]
    pub child_directed: Option<bool>,
    /// The message that Amazon Lex uses when it doesn't understand the user's request. Attributes are documented under prompt.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clarificationPrompt"
    )]
    #[builder(default)]
    pub clarification_prompt: Option<BotInitProviderClarificationPrompt>,
    /// Determines if a new bot version is created when the initial resource is created and on each update. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createVersion"
    )]
    #[builder(default)]
    pub create_version: Option<bool>,
    /// A description of the bot. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// When set to true user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify detectSentiment, the default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "detectSentiment"
    )]
    #[builder(default)]
    pub detect_sentiment: Option<bool>,
    /// Set to true to enable access to natural language understanding improvements. When you set the enable_model_improvements parameter to true you can use the nlu_intent_confidence_threshold parameter to configure confidence scores. For more information, see Confidence Scores. You can only set the enable_model_improvements parameter in certain Regions. If you set the parameter to true, your bot has access to accuracy improvements. For more information see the Amazon Lex Bot PutBot API Docs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableModelImprovements"
    )]
    #[builder(default)]
    pub enable_model_improvements: Option<bool>,
    /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. Default is 300. Must be a number between 60 and 86400 (inclusive).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSessionTtlInSeconds"
    )]
    #[builder(default)]
    pub idle_session_ttl_in_seconds: Option<f64>,
    /// A set of Intent objects. Each intent represents a command that a user can express. Attributes are documented under intent. Can have up to 250 Intent objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub intent: Option<Vec<BotInitProviderIntent>>,
    /// Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. For available locales, see Amazon Lex Bot PutBot API Docs. Default is en-US.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locale: Option<String>,
    /// Determines the threshold where Amazon Lex will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a PostContent or PostText response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot. For more information see Amazon Lex Bot PutBot API Docs This value requires enable_model_improvements to be set to true and the default is 0. Must be a float between 0 and 1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nluIntentConfidenceThreshold"
    )]
    #[builder(default)]
    pub nlu_intent_confidence_threshold: Option<f64>,
    /// If you set the process_behavior element to BUILD, Amazon Lex builds the bot so that it can be run. If you set the element to SAVE Amazon Lex saves the bot, but doesn't build it. Default is SAVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "processBehavior"
    )]
    #[builder(default)]
    pub process_behavior: Option<String>,
    /// The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see Available Voices in the Amazon Polly Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "voiceId")]
    #[builder(default)]
    pub voice_id: Option<String>,
}

/// The message that Amazon Lex uses to abort a conversation. Attributes are documented under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotInitProviderAbortStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<BotInitProviderAbortStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseCard"
    )]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotInitProviderAbortStatementMessage {
    /// The text of the message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentType"
    )]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupNumber"
    )]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// The message that Amazon Lex uses when it doesn't understand the user's request. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotInitProviderClarificationPrompt {
    /// The number of times to prompt the user for information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxAttempts"
    )]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<BotInitProviderClarificationPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseCard"
    )]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotInitProviderClarificationPromptMessage {
    /// The text of the message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentType"
    )]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupNumber"
    )]
    #[builder(default)]
    pub group_number: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotInitProviderIntent {
    /// The name of the intent. Must be less than or equal to 100 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "intentName"
    )]
    #[builder(default)]
    pub intent_name: Option<String>,
    /// The version of the intent. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "intentVersion"
    )]
    #[builder(default)]
    pub intent_version: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BotProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<BotProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BotProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<BotPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<BotPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BotPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<BotPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BotPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BotStatus defines the observed state of Bot.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<BotStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotStatusAtProvider {
    /// The message that Amazon Lex uses to abort a conversation. Attributes are documented under statement.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "abortStatement"
    )]
    #[builder(default)]
    pub abort_statement: Option<BotStatusAtProviderAbortStatement>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Checksum identifying the version of the bot that was created. The checksum is not
    /// included as an argument because the resource will add it automatically when updating the bot.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub checksum: Option<String>,
    /// By specifying true, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. For more information see the Amazon Lex FAQ and the Amazon Lex PutBot API Docs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "childDirected"
    )]
    #[builder(default)]
    pub child_directed: Option<bool>,
    /// The message that Amazon Lex uses when it doesn't understand the user's request. Attributes are documented under prompt.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clarificationPrompt"
    )]
    #[builder(default)]
    pub clarification_prompt: Option<BotStatusAtProviderClarificationPrompt>,
    /// Determines if a new bot version is created when the initial resource is created and on each update. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createVersion"
    )]
    #[builder(default)]
    pub create_version: Option<bool>,
    /// The date when the bot version was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdDate"
    )]
    #[builder(default)]
    pub created_date: Option<String>,
    /// A description of the bot. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// When set to true user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify detectSentiment, the default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "detectSentiment"
    )]
    #[builder(default)]
    pub detect_sentiment: Option<bool>,
    /// Set to true to enable access to natural language understanding improvements. When you set the enable_model_improvements parameter to true you can use the nlu_intent_confidence_threshold parameter to configure confidence scores. For more information, see Confidence Scores. You can only set the enable_model_improvements parameter in certain Regions. If you set the parameter to true, your bot has access to accuracy improvements. For more information see the Amazon Lex Bot PutBot API Docs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableModelImprovements"
    )]
    #[builder(default)]
    pub enable_model_improvements: Option<bool>,
    /// If status is FAILED, Amazon Lex provides the reason that it failed to build the bot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "failureReason"
    )]
    #[builder(default)]
    pub failure_reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. Default is 300. Must be a number between 60 and 86400 (inclusive).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSessionTtlInSeconds"
    )]
    #[builder(default)]
    pub idle_session_ttl_in_seconds: Option<f64>,
    /// A set of Intent objects. Each intent represents a command that a user can express. Attributes are documented under intent. Can have up to 250 Intent objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub intent: Option<Vec<BotStatusAtProviderIntent>>,
    /// The date when the $LATEST version of this bot was updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastUpdatedDate"
    )]
    #[builder(default)]
    pub last_updated_date: Option<String>,
    /// Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. For available locales, see Amazon Lex Bot PutBot API Docs. Default is en-US.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locale: Option<String>,
    /// Determines the threshold where Amazon Lex will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a PostContent or PostText response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot. For more information see Amazon Lex Bot PutBot API Docs This value requires enable_model_improvements to be set to true and the default is 0. Must be a float between 0 and 1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nluIntentConfidenceThreshold"
    )]
    #[builder(default)]
    pub nlu_intent_confidence_threshold: Option<f64>,
    /// If you set the process_behavior element to BUILD, Amazon Lex builds the bot so that it can be run. If you set the element to SAVE Amazon Lex saves the bot, but doesn't build it. Default is SAVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "processBehavior"
    )]
    #[builder(default)]
    pub process_behavior: Option<String>,
    /// When you send a request to create or update a bot, Amazon Lex sets the status response
    /// element to BUILDING. After Amazon Lex builds the bot, it sets status to READY. If Amazon Lex can't
    /// build the bot, it sets status to FAILED. Amazon Lex returns the reason for the failure in the
    /// failure_reason response element.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
    /// The version of the bot.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
    /// The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see Available Voices in the Amazon Polly Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "voiceId")]
    #[builder(default)]
    pub voice_id: Option<String>,
}

/// The message that Amazon Lex uses to abort a conversation. Attributes are documented under statement.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotStatusAtProviderAbortStatement {
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<BotStatusAtProviderAbortStatementMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseCard"
    )]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotStatusAtProviderAbortStatementMessage {
    /// The text of the message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentType"
    )]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupNumber"
    )]
    #[builder(default)]
    pub group_number: Option<f64>,
}

/// The message that Amazon Lex uses when it doesn't understand the user's request. Attributes are documented under prompt.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotStatusAtProviderClarificationPrompt {
    /// The number of times to prompt the user for information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxAttempts"
    )]
    #[builder(default)]
    pub max_attempts: Option<f64>,
    /// A set of messages, each of which provides a message string and its type.
    /// You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    /// Attributes are documented under message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<Vec<BotStatusAtProviderClarificationPromptMessage>>,
    /// The response card. Amazon Lex will substitute session attributes and
    /// slot values into the response card. For more information, see
    /// Example: Using a Response Card.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseCard"
    )]
    #[builder(default)]
    pub response_card: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotStatusAtProviderClarificationPromptMessage {
    /// The text of the message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub content: Option<String>,
    /// The content type of the message string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentType"
    )]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Identifies the message group that the message belongs to. When a group
    /// is assigned to a message, Amazon Lex returns one message from each group in the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupNumber"
    )]
    #[builder(default)]
    pub group_number: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BotStatusAtProviderIntent {
    /// The name of the intent. Must be less than or equal to 100 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "intentName"
    )]
    #[builder(default)]
    pub intent_name: Option<String>,
    /// The version of the intent. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "intentVersion"
    )]
    #[builder(default)]
    pub intent_version: Option<String>,
}

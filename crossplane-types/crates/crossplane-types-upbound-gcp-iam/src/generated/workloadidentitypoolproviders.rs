// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// WorkloadIdentityPoolProviderSpec defines the desired state of WorkloadIdentityPoolProvider
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "iam.gcp.upbound.io", version = "v1beta2", kind = "WorkloadIdentityPoolProvider", plural = "workloadidentitypoolproviders")]
#[kube(status = "WorkloadIdentityPoolProviderStatus")]
pub struct WorkloadIdentityPoolProviderSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<WorkloadIdentityPoolProviderDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: WorkloadIdentityPoolProviderForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<WorkloadIdentityPoolProviderInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<WorkloadIdentityPoolProviderProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<WorkloadIdentityPoolProviderPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<WorkloadIdentityPoolProviderWriteConnectionSecretToRef>,
}

/// WorkloadIdentityPoolProviderSpec defines the desired state of WorkloadIdentityPoolProvider
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkloadIdentityPoolProviderDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderForProvider {
    /// A Common Expression Language expression, in
    /// plain text, to restrict what otherwise valid authentication credentials issued by the
    /// provider should not be accepted.
    /// The expression must output a boolean representing whether to allow the federation.
    /// The following keywords may be referenced in the expressions:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attributeCondition")]
    #[builder(default)]
    pub attribute_condition: Option<String>,
    /// Maps attributes from authentication credentials issued by an external identity provider
    /// to Google Cloud attributes, such as subject and segment.
    /// Each key must be a string specifying the Google Cloud IAM attribute to map to.
    /// The following keys are supported:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attributeMapping")]
    #[builder(default)]
    pub attribute_mapping: Option<HashMap<String, String>>,
    /// An Amazon Web Services identity provider. Not compatible with the property oidc or saml.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub aws: Option<WorkloadIdentityPoolProviderForProviderAws>,
    /// A description for the provider. Cannot exceed 256 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
    /// However, existing tokens still grant access.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub disabled: Option<bool>,
    /// A display name for the provider. Cannot exceed 32 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// An OpenId Connect 1.0 identity provider. Not compatible with the property aws or saml.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub oidc: Option<WorkloadIdentityPoolProviderForProviderOidc>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// An SAML 2.0 identity provider. Not compatible with the property oidc or aws.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub saml: Option<WorkloadIdentityPoolProviderForProviderSaml>,
    /// The ID used for the pool, which is the final component of the pool resource name. This
    /// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
    /// gcp- is reserved for use by Google, and may not be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadIdentityPoolId")]
    #[builder(default)]
    pub workload_identity_pool_id: Option<String>,
    /// Reference to a WorkloadIdentityPool in iam to populate workloadIdentityPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadIdentityPoolIdRef")]
    #[builder(default)]
    pub workload_identity_pool_id_ref: Option<WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdRef>,
    /// Selector for a WorkloadIdentityPool in iam to populate workloadIdentityPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadIdentityPoolIdSelector")]
    #[builder(default)]
    pub workload_identity_pool_id_selector: Option<WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdSelector>,
}

/// An Amazon Web Services identity provider. Not compatible with the property oidc or saml.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderForProviderAws {
    /// The AWS account ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
}

/// An OpenId Connect 1.0 identity provider. Not compatible with the property aws or saml.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderForProviderOidc {
    /// Acceptable values for the aud field (audience) in the OIDC token. Token exchange
    /// requests are rejected if the token audience does not match one of the configured
    /// values. Each audience may be at most 256 characters. A maximum of 10 audiences may
    /// be configured.
    /// If this list is empty, the OIDC token audience must be equal to the full canonical
    /// resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix.
    /// For example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedAudiences")]
    #[builder(default)]
    pub allowed_audiences: Option<Vec<String>>,
    /// The OIDC issuer URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuerUri")]
    #[builder(default)]
    pub issuer_uri: Option<String>,
    /// OIDC JWKs in JSON String format. For details on definition of a
    /// JWK, see https:tools.ietf.org/html/rfc7517. If not set, then we
    /// use the jwks_uri from the discovery document fetched from the
    /// .well-known path for the issuer_uri. Currently, RSA and EC asymmetric
    /// keys are supported. The JWK must use following format and include only
    /// the following fields:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwksJson")]
    #[builder(default)]
    pub jwks_json: Option<String>,
}

/// An SAML 2.0 identity provider. Not compatible with the property oidc or aws.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderForProviderSaml {
    /// SAML Identity provider configuration metadata xml doc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idpMetadataXml")]
    #[builder(default)]
    pub idp_metadata_xml: Option<String>,
}

/// Reference to a WorkloadIdentityPool in iam to populate workloadIdentityPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a WorkloadIdentityPool in iam to populate workloadIdentityPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkloadIdentityPoolProviderForProviderWorkloadIdentityPoolIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderInitProvider {
    /// A Common Expression Language expression, in
    /// plain text, to restrict what otherwise valid authentication credentials issued by the
    /// provider should not be accepted.
    /// The expression must output a boolean representing whether to allow the federation.
    /// The following keywords may be referenced in the expressions:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attributeCondition")]
    #[builder(default)]
    pub attribute_condition: Option<String>,
    /// Maps attributes from authentication credentials issued by an external identity provider
    /// to Google Cloud attributes, such as subject and segment.
    /// Each key must be a string specifying the Google Cloud IAM attribute to map to.
    /// The following keys are supported:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attributeMapping")]
    #[builder(default)]
    pub attribute_mapping: Option<HashMap<String, String>>,
    /// An Amazon Web Services identity provider. Not compatible with the property oidc or saml.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub aws: Option<WorkloadIdentityPoolProviderInitProviderAws>,
    /// A description for the provider. Cannot exceed 256 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
    /// However, existing tokens still grant access.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub disabled: Option<bool>,
    /// A display name for the provider. Cannot exceed 32 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// An OpenId Connect 1.0 identity provider. Not compatible with the property aws or saml.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub oidc: Option<WorkloadIdentityPoolProviderInitProviderOidc>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// An SAML 2.0 identity provider. Not compatible with the property oidc or aws.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub saml: Option<WorkloadIdentityPoolProviderInitProviderSaml>,
}

/// An Amazon Web Services identity provider. Not compatible with the property oidc or saml.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderInitProviderAws {
    /// The AWS account ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
}

/// An OpenId Connect 1.0 identity provider. Not compatible with the property aws or saml.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderInitProviderOidc {
    /// Acceptable values for the aud field (audience) in the OIDC token. Token exchange
    /// requests are rejected if the token audience does not match one of the configured
    /// values. Each audience may be at most 256 characters. A maximum of 10 audiences may
    /// be configured.
    /// If this list is empty, the OIDC token audience must be equal to the full canonical
    /// resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix.
    /// For example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedAudiences")]
    #[builder(default)]
    pub allowed_audiences: Option<Vec<String>>,
    /// The OIDC issuer URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuerUri")]
    #[builder(default)]
    pub issuer_uri: Option<String>,
    /// OIDC JWKs in JSON String format. For details on definition of a
    /// JWK, see https:tools.ietf.org/html/rfc7517. If not set, then we
    /// use the jwks_uri from the discovery document fetched from the
    /// .well-known path for the issuer_uri. Currently, RSA and EC asymmetric
    /// keys are supported. The JWK must use following format and include only
    /// the following fields:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwksJson")]
    #[builder(default)]
    pub jwks_json: Option<String>,
}

/// An SAML 2.0 identity provider. Not compatible with the property oidc or aws.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderInitProviderSaml {
    /// SAML Identity provider configuration metadata xml doc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idpMetadataXml")]
    #[builder(default)]
    pub idp_metadata_xml: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkloadIdentityPoolProviderProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkloadIdentityPoolProviderProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkloadIdentityPoolProviderProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkloadIdentityPoolProviderProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkloadIdentityPoolProviderProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<WorkloadIdentityPoolProviderPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<WorkloadIdentityPoolProviderPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkloadIdentityPoolProviderPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkloadIdentityPoolProviderPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkloadIdentityPoolProviderPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkloadIdentityPoolProviderPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkloadIdentityPoolProviderPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// WorkloadIdentityPoolProviderStatus defines the observed state of WorkloadIdentityPoolProvider.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<WorkloadIdentityPoolProviderStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderStatusAtProvider {
    /// A Common Expression Language expression, in
    /// plain text, to restrict what otherwise valid authentication credentials issued by the
    /// provider should not be accepted.
    /// The expression must output a boolean representing whether to allow the federation.
    /// The following keywords may be referenced in the expressions:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attributeCondition")]
    #[builder(default)]
    pub attribute_condition: Option<String>,
    /// Maps attributes from authentication credentials issued by an external identity provider
    /// to Google Cloud attributes, such as subject and segment.
    /// Each key must be a string specifying the Google Cloud IAM attribute to map to.
    /// The following keys are supported:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attributeMapping")]
    #[builder(default)]
    pub attribute_mapping: Option<HashMap<String, String>>,
    /// An Amazon Web Services identity provider. Not compatible with the property oidc or saml.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub aws: Option<WorkloadIdentityPoolProviderStatusAtProviderAws>,
    /// A description for the provider. Cannot exceed 256 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
    /// However, existing tokens still grant access.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub disabled: Option<bool>,
    /// A display name for the provider. Cannot exceed 32 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}/providers/{{workload_identity_pool_provider_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The resource name of the provider as
    /// projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}/providers/{workload_identity_pool_provider_id}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// An OpenId Connect 1.0 identity provider. Not compatible with the property aws or saml.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub oidc: Option<WorkloadIdentityPoolProviderStatusAtProviderOidc>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// An SAML 2.0 identity provider. Not compatible with the property oidc or aws.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub saml: Option<WorkloadIdentityPoolProviderStatusAtProviderSaml>,
    /// The state of the provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// The ID used for the pool, which is the final component of the pool resource name. This
    /// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
    /// gcp- is reserved for use by Google, and may not be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadIdentityPoolId")]
    #[builder(default)]
    pub workload_identity_pool_id: Option<String>,
}

/// An Amazon Web Services identity provider. Not compatible with the property oidc or saml.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderStatusAtProviderAws {
    /// The AWS account ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
}

/// An OpenId Connect 1.0 identity provider. Not compatible with the property aws or saml.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderStatusAtProviderOidc {
    /// Acceptable values for the aud field (audience) in the OIDC token. Token exchange
    /// requests are rejected if the token audience does not match one of the configured
    /// values. Each audience may be at most 256 characters. A maximum of 10 audiences may
    /// be configured.
    /// If this list is empty, the OIDC token audience must be equal to the full canonical
    /// resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix.
    /// For example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedAudiences")]
    #[builder(default)]
    pub allowed_audiences: Option<Vec<String>>,
    /// The OIDC issuer URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuerUri")]
    #[builder(default)]
    pub issuer_uri: Option<String>,
    /// OIDC JWKs in JSON String format. For details on definition of a
    /// JWK, see https:tools.ietf.org/html/rfc7517. If not set, then we
    /// use the jwks_uri from the discovery document fetched from the
    /// .well-known path for the issuer_uri. Currently, RSA and EC asymmetric
    /// keys are supported. The JWK must use following format and include only
    /// the following fields:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwksJson")]
    #[builder(default)]
    pub jwks_json: Option<String>,
}

/// An SAML 2.0 identity provider. Not compatible with the property oidc or aws.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkloadIdentityPoolProviderStatusAtProviderSaml {
    /// SAML Identity provider configuration metadata xml doc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idpMetadataXml")]
    #[builder(default)]
    pub idp_metadata_xml: Option<String>,
}


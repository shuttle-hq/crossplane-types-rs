// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ConnectionProfileSpec defines the desired state of ConnectionProfile
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "datastream.gcp.upbound.io",
    version = "v1beta2",
    kind = "ConnectionProfile",
    plural = "connectionprofiles"
)]
#[kube(status = "ConnectionProfileStatus")]
pub struct ConnectionProfileSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<ConnectionProfileDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConnectionProfileForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<ConnectionProfileInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<ConnectionProfileProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<ConnectionProfilePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ConnectionProfileWriteConnectionSecretToRef>,
}

/// ConnectionProfileSpec defines the desired state of ConnectionProfile
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProvider {
    /// BigQuery warehouse profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bigqueryProfile"
    )]
    #[builder(default)]
    pub bigquery_profile: Option<ConnectionProfileForProviderBigqueryProfile>,
    /// Create the connection profile without validating it.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createWithoutValidation"
    )]
    #[builder(default)]
    pub create_without_validation: Option<bool>,
    /// Display name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Forward SSH tunnel connectivity.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forwardSshConnectivity"
    )]
    #[builder(default)]
    pub forward_ssh_connectivity: Option<ConnectionProfileForProviderForwardSshConnectivity>,
    /// Cloud Storage bucket profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gcsProfile"
    )]
    #[builder(default)]
    pub gcs_profile: Option<ConnectionProfileForProviderGcsProfile>,
    /// Labels.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The name of the location this connection profile is located in.
    pub location: String,
    /// MySQL database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mysqlProfile"
    )]
    #[builder(default)]
    pub mysql_profile: Option<ConnectionProfileForProviderMysqlProfile>,
    /// Oracle database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "oracleProfile"
    )]
    #[builder(default)]
    pub oracle_profile: Option<ConnectionProfileForProviderOracleProfile>,
    /// PostgreSQL database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postgresqlProfile"
    )]
    #[builder(default)]
    pub postgresql_profile: Option<ConnectionProfileForProviderPostgresqlProfile>,
    /// Private connectivity.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnectivity"
    )]
    #[builder(default)]
    pub private_connectivity: Option<ConnectionProfileForProviderPrivateConnectivity>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// SQL Server database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sqlServerProfile"
    )]
    #[builder(default)]
    pub sql_server_profile: Option<ConnectionProfileForProviderSqlServerProfile>,
}

/// BigQuery warehouse profile.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderBigqueryProfile {}

/// Forward SSH tunnel connectivity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderForwardSshConnectivity {
    /// Hostname for the SSH tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// SSH password.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordSecretRef"
    )]
    #[builder(default)]
    pub password_secret_ref:
        Option<ConnectionProfileForProviderForwardSshConnectivityPasswordSecretRef>,
    /// Port for the SSH tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// SSH private key.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateKeySecretRef"
    )]
    #[builder(default)]
    pub private_key_secret_ref:
        Option<ConnectionProfileForProviderForwardSshConnectivityPrivateKeySecretRef>,
    /// Username for the SSH tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// SSH password.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderForwardSshConnectivityPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SSH private key.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderForwardSshConnectivityPrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Cloud Storage bucket profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderGcsProfile {
    /// The Cloud Storage bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The root path inside the Cloud Storage bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootPath")]
    #[builder(default)]
    pub root_path: Option<String>,
}

/// MySQL database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderMysqlProfile {
    /// Hostname for the MySQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Password for the MySQL connection.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordSecretRef"
    )]
    #[builder(default)]
    pub password_secret_ref: Option<ConnectionProfileForProviderMysqlProfilePasswordSecretRef>,
    /// Port for the MySQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// SSL configuration for the MySQL connection.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    #[builder(default)]
    pub ssl_config: Option<ConnectionProfileForProviderMysqlProfileSslConfig>,
    /// Username for the MySQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Password for the MySQL connection.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderMysqlProfilePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SSL configuration for the MySQL connection.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderMysqlProfileSslConfig {
    /// PEM-encoded certificate of the CA that signed the source database
    /// server's certificate.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "caCertificateSecretRef"
    )]
    #[builder(default)]
    pub ca_certificate_secret_ref:
        Option<ConnectionProfileForProviderMysqlProfileSslConfigCaCertificateSecretRef>,
    /// PEM-encoded certificate that will be used by the replica to
    /// authenticate against the source database server. If this field
    /// is used then the 'clientKey' and the 'caCertificate' fields are
    /// mandatory.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientCertificateSecretRef"
    )]
    #[builder(default)]
    pub client_certificate_secret_ref:
        Option<ConnectionProfileForProviderMysqlProfileSslConfigClientCertificateSecretRef>,
    /// PEM-encoded private key associated with the Client Certificate.
    /// If this field is used then the 'client_certificate' and the
    /// 'ca_certificate' fields are mandatory.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientKeySecretRef"
    )]
    #[builder(default)]
    pub client_key_secret_ref:
        Option<ConnectionProfileForProviderMysqlProfileSslConfigClientKeySecretRef>,
}

/// PEM-encoded certificate of the CA that signed the source database
/// server's certificate.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderMysqlProfileSslConfigCaCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PEM-encoded certificate that will be used by the replica to
/// authenticate against the source database server. If this field
/// is used then the 'clientKey' and the 'caCertificate' fields are
/// mandatory.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderMysqlProfileSslConfigClientCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PEM-encoded private key associated with the Client Certificate.
/// If this field is used then the 'client_certificate' and the
/// 'ca_certificate' fields are mandatory.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderMysqlProfileSslConfigClientKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Oracle database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderOracleProfile {
    /// Connection string attributes
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionAttributes"
    )]
    #[builder(default)]
    pub connection_attributes: Option<HashMap<String, String>>,
    /// Database for the Oracle connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseService"
    )]
    #[builder(default)]
    pub database_service: Option<String>,
    /// Hostname for the Oracle connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Password for the Oracle connection.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordSecretRef"
    )]
    #[builder(default)]
    pub password_secret_ref: Option<ConnectionProfileForProviderOracleProfilePasswordSecretRef>,
    /// Port for the Oracle connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the Oracle connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Password for the Oracle connection.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderOracleProfilePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PostgreSQL database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfile {
    /// Database for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub database: Option<String>,
    /// Reference to a Database in sql to populate database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseRef"
    )]
    #[builder(default)]
    pub database_ref: Option<ConnectionProfileForProviderPostgresqlProfileDatabaseRef>,
    /// Selector for a Database in sql to populate database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseSelector"
    )]
    #[builder(default)]
    pub database_selector: Option<ConnectionProfileForProviderPostgresqlProfileDatabaseSelector>,
    /// Hostname for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Reference to a DatabaseInstance in sql to populate hostname.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameRef"
    )]
    #[builder(default)]
    pub hostname_ref: Option<ConnectionProfileForProviderPostgresqlProfileHostnameRef>,
    /// Selector for a DatabaseInstance in sql to populate hostname.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameSelector"
    )]
    #[builder(default)]
    pub hostname_selector: Option<ConnectionProfileForProviderPostgresqlProfileHostnameSelector>,
    /// Password for the PostgreSQL connection.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordSecretRef"
    )]
    #[builder(default)]
    pub password_secret_ref: Option<ConnectionProfileForProviderPostgresqlProfilePasswordSecretRef>,
    /// Port for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
    /// Reference to a User in sql to populate username.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usernameRef"
    )]
    #[builder(default)]
    pub username_ref: Option<ConnectionProfileForProviderPostgresqlProfileUsernameRef>,
    /// Selector for a User in sql to populate username.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usernameSelector"
    )]
    #[builder(default)]
    pub username_selector: Option<ConnectionProfileForProviderPostgresqlProfileUsernameSelector>,
}

/// Reference to a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileDatabaseRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderPostgresqlProfileDatabaseRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileDatabaseRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderPostgresqlProfileDatabaseRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderPostgresqlProfileDatabaseRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileDatabaseRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileDatabaseRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileDatabaseSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderPostgresqlProfileDatabaseSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileDatabaseSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderPostgresqlProfileDatabaseSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderPostgresqlProfileDatabaseSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileDatabaseSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileDatabaseSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a DatabaseInstance in sql to populate hostname.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileHostnameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderPostgresqlProfileHostnameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileHostnameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderPostgresqlProfileHostnameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderPostgresqlProfileHostnameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileHostnameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileHostnameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DatabaseInstance in sql to populate hostname.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileHostnameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderPostgresqlProfileHostnameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileHostnameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderPostgresqlProfileHostnameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderPostgresqlProfileHostnameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileHostnameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileHostnameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Password for the PostgreSQL connection.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfilePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileUsernameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderPostgresqlProfileUsernameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileUsernameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderPostgresqlProfileUsernameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderPostgresqlProfileUsernameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileUsernameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileUsernameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileUsernameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderPostgresqlProfileUsernameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPostgresqlProfileUsernameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderPostgresqlProfileUsernameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderPostgresqlProfileUsernameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileUsernameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPostgresqlProfileUsernameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Private connectivity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPrivateConnectivity {
    /// A reference to a private connection resource. Format: projects/{project}/locations/{location}/privateConnections/{name}
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnection"
    )]
    #[builder(default)]
    pub private_connection: Option<String>,
    /// Reference to a PrivateConnection in datastream to populate privateConnection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnectionRef"
    )]
    #[builder(default)]
    pub private_connection_ref:
        Option<ConnectionProfileForProviderPrivateConnectivityPrivateConnectionRef>,
    /// Selector for a PrivateConnection in datastream to populate privateConnection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnectionSelector"
    )]
    #[builder(default)]
    pub private_connection_selector:
        Option<ConnectionProfileForProviderPrivateConnectivityPrivateConnectionSelector>,
}

/// Reference to a PrivateConnection in datastream to populate privateConnection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPrivateConnectivityPrivateConnectionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderPrivateConnectivityPrivateConnectionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPrivateConnectivityPrivateConnectionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderPrivateConnectivityPrivateConnectionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<ConnectionProfileForProviderPrivateConnectivityPrivateConnectionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPrivateConnectivityPrivateConnectionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPrivateConnectivityPrivateConnectionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a PrivateConnection in datastream to populate privateConnection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPrivateConnectivityPrivateConnectionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<ConnectionProfileForProviderPrivateConnectivityPrivateConnectionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderPrivateConnectivityPrivateConnectionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<
        ConnectionProfileForProviderPrivateConnectivityPrivateConnectionSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<
        ConnectionProfileForProviderPrivateConnectivityPrivateConnectionSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPrivateConnectivityPrivateConnectionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderPrivateConnectivityPrivateConnectionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// SQL Server database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfile {
    /// Database for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub database: Option<String>,
    /// Reference to a Database in sql to populate database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseRef"
    )]
    #[builder(default)]
    pub database_ref: Option<ConnectionProfileForProviderSqlServerProfileDatabaseRef>,
    /// Selector for a Database in sql to populate database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseSelector"
    )]
    #[builder(default)]
    pub database_selector: Option<ConnectionProfileForProviderSqlServerProfileDatabaseSelector>,
    /// Hostname for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Reference to a DatabaseInstance in sql to populate hostname.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameRef"
    )]
    #[builder(default)]
    pub hostname_ref: Option<ConnectionProfileForProviderSqlServerProfileHostnameRef>,
    /// Selector for a DatabaseInstance in sql to populate hostname.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameSelector"
    )]
    #[builder(default)]
    pub hostname_selector: Option<ConnectionProfileForProviderSqlServerProfileHostnameSelector>,
    /// Password for the SQL Server connection.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordSecretRef"
    )]
    #[builder(default)]
    pub password_secret_ref: Option<ConnectionProfileForProviderSqlServerProfilePasswordSecretRef>,
    /// Port for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
    /// Reference to a User in sql to populate username.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usernameRef"
    )]
    #[builder(default)]
    pub username_ref: Option<ConnectionProfileForProviderSqlServerProfileUsernameRef>,
    /// Selector for a User in sql to populate username.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usernameSelector"
    )]
    #[builder(default)]
    pub username_selector: Option<ConnectionProfileForProviderSqlServerProfileUsernameSelector>,
}

/// Reference to a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileDatabaseRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderSqlServerProfileDatabaseRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileDatabaseRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ConnectionProfileForProviderSqlServerProfileDatabaseRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderSqlServerProfileDatabaseRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileDatabaseRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileDatabaseRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileDatabaseSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderSqlServerProfileDatabaseSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileDatabaseSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderSqlServerProfileDatabaseSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderSqlServerProfileDatabaseSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileDatabaseSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileDatabaseSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a DatabaseInstance in sql to populate hostname.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileHostnameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderSqlServerProfileHostnameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileHostnameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ConnectionProfileForProviderSqlServerProfileHostnameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderSqlServerProfileHostnameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileHostnameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileHostnameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DatabaseInstance in sql to populate hostname.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileHostnameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderSqlServerProfileHostnameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileHostnameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderSqlServerProfileHostnameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderSqlServerProfileHostnameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileHostnameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileHostnameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Password for the SQL Server connection.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfilePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileUsernameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderSqlServerProfileUsernameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileUsernameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ConnectionProfileForProviderSqlServerProfileUsernameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderSqlServerProfileUsernameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileUsernameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileUsernameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileUsernameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileForProviderSqlServerProfileUsernameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileForProviderSqlServerProfileUsernameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileForProviderSqlServerProfileUsernameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileForProviderSqlServerProfileUsernameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileUsernameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileForProviderSqlServerProfileUsernameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProvider {
    /// BigQuery warehouse profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bigqueryProfile"
    )]
    #[builder(default)]
    pub bigquery_profile: Option<ConnectionProfileInitProviderBigqueryProfile>,
    /// Create the connection profile without validating it.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createWithoutValidation"
    )]
    #[builder(default)]
    pub create_without_validation: Option<bool>,
    /// Display name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Forward SSH tunnel connectivity.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forwardSshConnectivity"
    )]
    #[builder(default)]
    pub forward_ssh_connectivity: Option<ConnectionProfileInitProviderForwardSshConnectivity>,
    /// Cloud Storage bucket profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gcsProfile"
    )]
    #[builder(default)]
    pub gcs_profile: Option<ConnectionProfileInitProviderGcsProfile>,
    /// Labels.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// MySQL database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mysqlProfile"
    )]
    #[builder(default)]
    pub mysql_profile: Option<ConnectionProfileInitProviderMysqlProfile>,
    /// Oracle database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "oracleProfile"
    )]
    #[builder(default)]
    pub oracle_profile: Option<ConnectionProfileInitProviderOracleProfile>,
    /// PostgreSQL database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postgresqlProfile"
    )]
    #[builder(default)]
    pub postgresql_profile: Option<ConnectionProfileInitProviderPostgresqlProfile>,
    /// Private connectivity.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnectivity"
    )]
    #[builder(default)]
    pub private_connectivity: Option<ConnectionProfileInitProviderPrivateConnectivity>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// SQL Server database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sqlServerProfile"
    )]
    #[builder(default)]
    pub sql_server_profile: Option<ConnectionProfileInitProviderSqlServerProfile>,
}

/// BigQuery warehouse profile.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderBigqueryProfile {}

/// Forward SSH tunnel connectivity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderForwardSshConnectivity {
    /// Hostname for the SSH tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// SSH password.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordSecretRef"
    )]
    #[builder(default)]
    pub password_secret_ref:
        Option<ConnectionProfileInitProviderForwardSshConnectivityPasswordSecretRef>,
    /// Port for the SSH tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// SSH private key.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateKeySecretRef"
    )]
    #[builder(default)]
    pub private_key_secret_ref:
        Option<ConnectionProfileInitProviderForwardSshConnectivityPrivateKeySecretRef>,
    /// Username for the SSH tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// SSH password.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderForwardSshConnectivityPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SSH private key.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderForwardSshConnectivityPrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Cloud Storage bucket profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderGcsProfile {
    /// The Cloud Storage bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The root path inside the Cloud Storage bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootPath")]
    #[builder(default)]
    pub root_path: Option<String>,
}

/// MySQL database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderMysqlProfile {
    /// Hostname for the MySQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Password for the MySQL connection.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(rename = "passwordSecretRef")]
    pub password_secret_ref: ConnectionProfileInitProviderMysqlProfilePasswordSecretRef,
    /// Port for the MySQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// SSL configuration for the MySQL connection.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    #[builder(default)]
    pub ssl_config: Option<ConnectionProfileInitProviderMysqlProfileSslConfig>,
    /// Username for the MySQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Password for the MySQL connection.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderMysqlProfilePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SSL configuration for the MySQL connection.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderMysqlProfileSslConfig {
    /// PEM-encoded certificate of the CA that signed the source database
    /// server's certificate.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "caCertificateSecretRef"
    )]
    #[builder(default)]
    pub ca_certificate_secret_ref:
        Option<ConnectionProfileInitProviderMysqlProfileSslConfigCaCertificateSecretRef>,
    /// PEM-encoded certificate that will be used by the replica to
    /// authenticate against the source database server. If this field
    /// is used then the 'clientKey' and the 'caCertificate' fields are
    /// mandatory.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientCertificateSecretRef"
    )]
    #[builder(default)]
    pub client_certificate_secret_ref:
        Option<ConnectionProfileInitProviderMysqlProfileSslConfigClientCertificateSecretRef>,
    /// PEM-encoded private key associated with the Client Certificate.
    /// If this field is used then the 'client_certificate' and the
    /// 'ca_certificate' fields are mandatory.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientKeySecretRef"
    )]
    #[builder(default)]
    pub client_key_secret_ref:
        Option<ConnectionProfileInitProviderMysqlProfileSslConfigClientKeySecretRef>,
}

/// PEM-encoded certificate of the CA that signed the source database
/// server's certificate.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderMysqlProfileSslConfigCaCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PEM-encoded certificate that will be used by the replica to
/// authenticate against the source database server. If this field
/// is used then the 'clientKey' and the 'caCertificate' fields are
/// mandatory.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderMysqlProfileSslConfigClientCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PEM-encoded private key associated with the Client Certificate.
/// If this field is used then the 'client_certificate' and the
/// 'ca_certificate' fields are mandatory.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderMysqlProfileSslConfigClientKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Oracle database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderOracleProfile {
    /// Connection string attributes
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionAttributes"
    )]
    #[builder(default)]
    pub connection_attributes: Option<HashMap<String, String>>,
    /// Database for the Oracle connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseService"
    )]
    #[builder(default)]
    pub database_service: Option<String>,
    /// Hostname for the Oracle connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Password for the Oracle connection.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(rename = "passwordSecretRef")]
    pub password_secret_ref: ConnectionProfileInitProviderOracleProfilePasswordSecretRef,
    /// Port for the Oracle connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the Oracle connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Password for the Oracle connection.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderOracleProfilePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PostgreSQL database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfile {
    /// Database for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub database: Option<String>,
    /// Reference to a Database in sql to populate database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseRef"
    )]
    #[builder(default)]
    pub database_ref: Option<ConnectionProfileInitProviderPostgresqlProfileDatabaseRef>,
    /// Selector for a Database in sql to populate database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseSelector"
    )]
    #[builder(default)]
    pub database_selector: Option<ConnectionProfileInitProviderPostgresqlProfileDatabaseSelector>,
    /// Hostname for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Reference to a DatabaseInstance in sql to populate hostname.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameRef"
    )]
    #[builder(default)]
    pub hostname_ref: Option<ConnectionProfileInitProviderPostgresqlProfileHostnameRef>,
    /// Selector for a DatabaseInstance in sql to populate hostname.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameSelector"
    )]
    #[builder(default)]
    pub hostname_selector: Option<ConnectionProfileInitProviderPostgresqlProfileHostnameSelector>,
    /// Password for the PostgreSQL connection.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(rename = "passwordSecretRef")]
    pub password_secret_ref: ConnectionProfileInitProviderPostgresqlProfilePasswordSecretRef,
    /// Port for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
    /// Reference to a User in sql to populate username.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usernameRef"
    )]
    #[builder(default)]
    pub username_ref: Option<ConnectionProfileInitProviderPostgresqlProfileUsernameRef>,
    /// Selector for a User in sql to populate username.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usernameSelector"
    )]
    #[builder(default)]
    pub username_selector: Option<ConnectionProfileInitProviderPostgresqlProfileUsernameSelector>,
}

/// Reference to a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileDatabaseRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderPostgresqlProfileDatabaseRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileDatabaseRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderPostgresqlProfileDatabaseRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileInitProviderPostgresqlProfileDatabaseRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileDatabaseRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileDatabaseRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileDatabaseSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderPostgresqlProfileDatabaseSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileDatabaseSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderPostgresqlProfileDatabaseSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<ConnectionProfileInitProviderPostgresqlProfileDatabaseSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileDatabaseSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileDatabaseSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a DatabaseInstance in sql to populate hostname.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileHostnameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderPostgresqlProfileHostnameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileHostnameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderPostgresqlProfileHostnameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileInitProviderPostgresqlProfileHostnameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileHostnameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileHostnameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DatabaseInstance in sql to populate hostname.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileHostnameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderPostgresqlProfileHostnameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileHostnameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderPostgresqlProfileHostnameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<ConnectionProfileInitProviderPostgresqlProfileHostnameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileHostnameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileHostnameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Password for the PostgreSQL connection.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfilePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileUsernameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderPostgresqlProfileUsernameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileUsernameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderPostgresqlProfileUsernameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileInitProviderPostgresqlProfileUsernameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileUsernameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileUsernameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileUsernameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderPostgresqlProfileUsernameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPostgresqlProfileUsernameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderPostgresqlProfileUsernameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<ConnectionProfileInitProviderPostgresqlProfileUsernameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileUsernameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPostgresqlProfileUsernameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Private connectivity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPrivateConnectivity {
    /// A reference to a private connection resource. Format: projects/{project}/locations/{location}/privateConnections/{name}
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnection"
    )]
    #[builder(default)]
    pub private_connection: Option<String>,
    /// Reference to a PrivateConnection in datastream to populate privateConnection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnectionRef"
    )]
    #[builder(default)]
    pub private_connection_ref:
        Option<ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionRef>,
    /// Selector for a PrivateConnection in datastream to populate privateConnection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnectionSelector"
    )]
    #[builder(default)]
    pub private_connection_selector:
        Option<ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionSelector>,
}

/// Reference to a PrivateConnection in datastream to populate privateConnection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<
        ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a PrivateConnection in datastream to populate privateConnection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<
        ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<
        ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderPrivateConnectivityPrivateConnectionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// SQL Server database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfile {
    /// Database for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub database: Option<String>,
    /// Reference to a Database in sql to populate database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseRef"
    )]
    #[builder(default)]
    pub database_ref: Option<ConnectionProfileInitProviderSqlServerProfileDatabaseRef>,
    /// Selector for a Database in sql to populate database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseSelector"
    )]
    #[builder(default)]
    pub database_selector: Option<ConnectionProfileInitProviderSqlServerProfileDatabaseSelector>,
    /// Hostname for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Reference to a DatabaseInstance in sql to populate hostname.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameRef"
    )]
    #[builder(default)]
    pub hostname_ref: Option<ConnectionProfileInitProviderSqlServerProfileHostnameRef>,
    /// Selector for a DatabaseInstance in sql to populate hostname.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameSelector"
    )]
    #[builder(default)]
    pub hostname_selector: Option<ConnectionProfileInitProviderSqlServerProfileHostnameSelector>,
    /// Password for the SQL Server connection.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(rename = "passwordSecretRef")]
    pub password_secret_ref: ConnectionProfileInitProviderSqlServerProfilePasswordSecretRef,
    /// Port for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
    /// Reference to a User in sql to populate username.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usernameRef"
    )]
    #[builder(default)]
    pub username_ref: Option<ConnectionProfileInitProviderSqlServerProfileUsernameRef>,
    /// Selector for a User in sql to populate username.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usernameSelector"
    )]
    #[builder(default)]
    pub username_selector: Option<ConnectionProfileInitProviderSqlServerProfileUsernameSelector>,
}

/// Reference to a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileDatabaseRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderSqlServerProfileDatabaseRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileDatabaseRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderSqlServerProfileDatabaseRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileInitProviderSqlServerProfileDatabaseRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileDatabaseRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileDatabaseRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileDatabaseSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderSqlServerProfileDatabaseSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileDatabaseSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderSqlServerProfileDatabaseSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileInitProviderSqlServerProfileDatabaseSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileDatabaseSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileDatabaseSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a DatabaseInstance in sql to populate hostname.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileHostnameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderSqlServerProfileHostnameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileHostnameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderSqlServerProfileHostnameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileInitProviderSqlServerProfileHostnameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileHostnameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileHostnameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DatabaseInstance in sql to populate hostname.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileHostnameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderSqlServerProfileHostnameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileHostnameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderSqlServerProfileHostnameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileInitProviderSqlServerProfileHostnameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileHostnameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileHostnameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Password for the SQL Server connection.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfilePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileUsernameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderSqlServerProfileUsernameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileUsernameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderSqlServerProfileUsernameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileInitProviderSqlServerProfileUsernameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileUsernameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileUsernameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileUsernameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileInitProviderSqlServerProfileUsernameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileInitProviderSqlServerProfileUsernameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<ConnectionProfileInitProviderSqlServerProfileUsernameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileInitProviderSqlServerProfileUsernameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileUsernameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileInitProviderSqlServerProfileUsernameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfileProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ConnectionProfileProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfileProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfileProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfilePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ConnectionProfilePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ConnectionProfilePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfilePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ConnectionProfilePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfilePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ConnectionProfilePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ConnectionProfilePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfilePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProfilePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfilePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConnectionProfileStatus defines the observed state of ConnectionProfile.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<ConnectionProfileStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProvider {
    /// BigQuery warehouse profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bigqueryProfile"
    )]
    #[builder(default)]
    pub bigquery_profile: Option<ConnectionProfileStatusAtProviderBigqueryProfile>,
    /// Create the connection profile without validating it.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createWithoutValidation"
    )]
    #[builder(default)]
    pub create_without_validation: Option<bool>,
    /// Display name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default)]
    pub display_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "effectiveLabels"
    )]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Forward SSH tunnel connectivity.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forwardSshConnectivity"
    )]
    #[builder(default)]
    pub forward_ssh_connectivity: Option<ConnectionProfileStatusAtProviderForwardSshConnectivity>,
    /// Cloud Storage bucket profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gcsProfile"
    )]
    #[builder(default)]
    pub gcs_profile: Option<ConnectionProfileStatusAtProviderGcsProfile>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Labels.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The name of the location this connection profile is located in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// MySQL database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mysqlProfile"
    )]
    #[builder(default)]
    pub mysql_profile: Option<ConnectionProfileStatusAtProviderMysqlProfile>,
    /// The resource's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Oracle database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "oracleProfile"
    )]
    #[builder(default)]
    pub oracle_profile: Option<ConnectionProfileStatusAtProviderOracleProfile>,
    /// PostgreSQL database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postgresqlProfile"
    )]
    #[builder(default)]
    pub postgresql_profile: Option<ConnectionProfileStatusAtProviderPostgresqlProfile>,
    /// Private connectivity.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnectivity"
    )]
    #[builder(default)]
    pub private_connectivity: Option<ConnectionProfileStatusAtProviderPrivateConnectivity>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// SQL Server database profile.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sqlServerProfile"
    )]
    #[builder(default)]
    pub sql_server_profile: Option<ConnectionProfileStatusAtProviderSqlServerProfile>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terraformLabels"
    )]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
}

/// BigQuery warehouse profile.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProviderBigqueryProfile {}

/// Forward SSH tunnel connectivity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProviderForwardSshConnectivity {
    /// Hostname for the SSH tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Port for the SSH tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the SSH tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Cloud Storage bucket profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProviderGcsProfile {
    /// The Cloud Storage bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The root path inside the Cloud Storage bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootPath")]
    #[builder(default)]
    pub root_path: Option<String>,
}

/// MySQL database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProviderMysqlProfile {
    /// Hostname for the MySQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Port for the MySQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// SSL configuration for the MySQL connection.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    #[builder(default)]
    pub ssl_config: Option<ConnectionProfileStatusAtProviderMysqlProfileSslConfig>,
    /// Username for the MySQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// SSL configuration for the MySQL connection.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProviderMysqlProfileSslConfig {
    /// (Output)
    /// Indicates whether the clientKey field is set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "caCertificateSet"
    )]
    #[builder(default)]
    pub ca_certificate_set: Option<bool>,
    /// (Output)
    /// Indicates whether the clientCertificate field is set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientCertificateSet"
    )]
    #[builder(default)]
    pub client_certificate_set: Option<bool>,
    /// (Output)
    /// Indicates whether the clientKey field is set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientKeySet"
    )]
    #[builder(default)]
    pub client_key_set: Option<bool>,
}

/// Oracle database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProviderOracleProfile {
    /// Connection string attributes
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionAttributes"
    )]
    #[builder(default)]
    pub connection_attributes: Option<HashMap<String, String>>,
    /// Database for the Oracle connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseService"
    )]
    #[builder(default)]
    pub database_service: Option<String>,
    /// Hostname for the Oracle connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Port for the Oracle connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the Oracle connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// PostgreSQL database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProviderPostgresqlProfile {
    /// Database for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub database: Option<String>,
    /// Hostname for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Port for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the PostgreSQL connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Private connectivity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProviderPrivateConnectivity {
    /// A reference to a private connection resource. Format: projects/{project}/locations/{location}/privateConnections/{name}
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateConnection"
    )]
    #[builder(default)]
    pub private_connection: Option<String>,
}

/// SQL Server database profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ConnectionProfileStatusAtProviderSqlServerProfile {
    /// Database for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub database: Option<String>,
    /// Hostname for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub hostname: Option<String>,
    /// Port for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// Username for the SQL Server connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

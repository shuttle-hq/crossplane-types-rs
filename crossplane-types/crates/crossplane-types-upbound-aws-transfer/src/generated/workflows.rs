// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// WorkflowSpec defines the desired state of Workflow
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "transfer.aws.upbound.io", version = "v1beta2", kind = "Workflow", plural = "workflows")]
#[kube(status = "WorkflowStatus")]
pub struct WorkflowSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<WorkflowDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: WorkflowForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<WorkflowInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<WorkflowProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<WorkflowPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<WorkflowWriteConnectionSecretToRef>,
}

/// WorkflowSpec defines the desired state of Workflow
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProvider {
    /// A textual description for the workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onExceptionSteps")]
    #[builder(default)]
    pub on_exception_steps: Option<Vec<WorkflowForProviderOnExceptionSteps>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub steps: Option<Vec<WorkflowForProviderSteps>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionSteps {
    /// Details for a step that performs a file copy. See Copy Step Details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyStepDetails")]
    #[builder(default)]
    pub copy_step_details: Option<WorkflowForProviderOnExceptionStepsCopyStepDetails>,
    /// Details for a step that invokes a lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customStepDetails")]
    #[builder(default)]
    pub custom_step_details: Option<WorkflowForProviderOnExceptionStepsCustomStepDetails>,
    /// Details for a step that decrypts the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decryptStepDetails")]
    #[builder(default)]
    pub decrypt_step_details: Option<WorkflowForProviderOnExceptionStepsDecryptStepDetails>,
    /// Details for a step that deletes the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteStepDetails")]
    #[builder(default)]
    pub delete_step_details: Option<WorkflowForProviderOnExceptionStepsDeleteStepDetails>,
    /// Details for a step that creates one or more tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagStepDetails")]
    #[builder(default)]
    pub tag_step_details: Option<WorkflowForProviderOnExceptionStepsTagStepDetails>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Details for a step that performs a file copy. See Copy Step Details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsCopyStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowForProviderOnExceptionStepsCopyStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsCopyStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowForProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowForProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that invokes a lambda function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsCustomStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// The ARN for the lambda function that is being called.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
    /// Timeout, in seconds, for the step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// Details for a step that decrypts the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsDecryptStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowForProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowForProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowForProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that deletes the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsDeleteStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Details for a step that creates one or more tags.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsTagStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<Vec<WorkflowForProviderOnExceptionStepsTagStepDetailsTags>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderOnExceptionStepsTagStepDetailsTags {
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The value that corresponds to the key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderSteps {
    /// Details for a step that performs a file copy. See Copy Step Details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyStepDetails")]
    #[builder(default)]
    pub copy_step_details: Option<WorkflowForProviderStepsCopyStepDetails>,
    /// Details for a step that invokes a lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customStepDetails")]
    #[builder(default)]
    pub custom_step_details: Option<WorkflowForProviderStepsCustomStepDetails>,
    /// Details for a step that decrypts the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decryptStepDetails")]
    #[builder(default)]
    pub decrypt_step_details: Option<WorkflowForProviderStepsDecryptStepDetails>,
    /// Details for a step that deletes the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteStepDetails")]
    #[builder(default)]
    pub delete_step_details: Option<WorkflowForProviderStepsDeleteStepDetails>,
    /// Details for a step that creates one or more tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagStepDetails")]
    #[builder(default)]
    pub tag_step_details: Option<WorkflowForProviderStepsTagStepDetails>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Details for a step that performs a file copy. See Copy Step Details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsCopyStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowForProviderStepsCopyStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsCopyStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowForProviderStepsCopyStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowForProviderStepsCopyStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsCopyStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsCopyStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that invokes a lambda function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsCustomStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// The ARN for the lambda function that is being called.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
    /// Reference to a Function in lambda to populate target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRef")]
    #[builder(default)]
    pub target_ref: Option<WorkflowForProviderStepsCustomStepDetailsTargetRef>,
    /// Selector for a Function in lambda to populate target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetSelector")]
    #[builder(default)]
    pub target_selector: Option<WorkflowForProviderStepsCustomStepDetailsTargetSelector>,
    /// Timeout, in seconds, for the step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// Reference to a Function in lambda to populate target.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsCustomStepDetailsTargetRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkflowForProviderStepsCustomStepDetailsTargetRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsCustomStepDetailsTargetRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkflowForProviderStepsCustomStepDetailsTargetRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkflowForProviderStepsCustomStepDetailsTargetRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowForProviderStepsCustomStepDetailsTargetRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowForProviderStepsCustomStepDetailsTargetRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate target.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsCustomStepDetailsTargetSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkflowForProviderStepsCustomStepDetailsTargetSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsCustomStepDetailsTargetSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkflowForProviderStepsCustomStepDetailsTargetSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkflowForProviderStepsCustomStepDetailsTargetSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowForProviderStepsCustomStepDetailsTargetSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowForProviderStepsCustomStepDetailsTargetSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Details for a step that decrypts the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsDecryptStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowForProviderStepsDecryptStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsDecryptStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowForProviderStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowForProviderStepsDecryptStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsDecryptStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that deletes the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsDeleteStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Details for a step that creates one or more tags.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsTagStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<Vec<WorkflowForProviderStepsTagStepDetailsTags>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowForProviderStepsTagStepDetailsTags {
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The value that corresponds to the key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProvider {
    /// A textual description for the workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onExceptionSteps")]
    #[builder(default)]
    pub on_exception_steps: Option<Vec<WorkflowInitProviderOnExceptionSteps>>,
    /// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub steps: Option<Vec<WorkflowInitProviderSteps>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionSteps {
    /// Details for a step that performs a file copy. See Copy Step Details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyStepDetails")]
    #[builder(default)]
    pub copy_step_details: Option<WorkflowInitProviderOnExceptionStepsCopyStepDetails>,
    /// Details for a step that invokes a lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customStepDetails")]
    #[builder(default)]
    pub custom_step_details: Option<WorkflowInitProviderOnExceptionStepsCustomStepDetails>,
    /// Details for a step that decrypts the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decryptStepDetails")]
    #[builder(default)]
    pub decrypt_step_details: Option<WorkflowInitProviderOnExceptionStepsDecryptStepDetails>,
    /// Details for a step that deletes the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteStepDetails")]
    #[builder(default)]
    pub delete_step_details: Option<WorkflowInitProviderOnExceptionStepsDeleteStepDetails>,
    /// Details for a step that creates one or more tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagStepDetails")]
    #[builder(default)]
    pub tag_step_details: Option<WorkflowInitProviderOnExceptionStepsTagStepDetails>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Details for a step that performs a file copy. See Copy Step Details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsCopyStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowInitProviderOnExceptionStepsCopyStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsCopyStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowInitProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowInitProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that invokes a lambda function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsCustomStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// The ARN for the lambda function that is being called.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
    /// Timeout, in seconds, for the step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// Details for a step that decrypts the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsDecryptStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowInitProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowInitProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowInitProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that deletes the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsDeleteStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Details for a step that creates one or more tags.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsTagStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<Vec<WorkflowInitProviderOnExceptionStepsTagStepDetailsTags>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderOnExceptionStepsTagStepDetailsTags {
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The value that corresponds to the key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderSteps {
    /// Details for a step that performs a file copy. See Copy Step Details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyStepDetails")]
    #[builder(default)]
    pub copy_step_details: Option<WorkflowInitProviderStepsCopyStepDetails>,
    /// Details for a step that invokes a lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customStepDetails")]
    #[builder(default)]
    pub custom_step_details: Option<WorkflowInitProviderStepsCustomStepDetails>,
    /// Details for a step that decrypts the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decryptStepDetails")]
    #[builder(default)]
    pub decrypt_step_details: Option<WorkflowInitProviderStepsDecryptStepDetails>,
    /// Details for a step that deletes the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteStepDetails")]
    #[builder(default)]
    pub delete_step_details: Option<WorkflowInitProviderStepsDeleteStepDetails>,
    /// Details for a step that creates one or more tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagStepDetails")]
    #[builder(default)]
    pub tag_step_details: Option<WorkflowInitProviderStepsTagStepDetails>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Details for a step that performs a file copy. See Copy Step Details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsCopyStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowInitProviderStepsCopyStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsCopyStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowInitProviderStepsCopyStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowInitProviderStepsCopyStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsCopyStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsCopyStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that invokes a lambda function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsCustomStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// The ARN for the lambda function that is being called.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
    /// Reference to a Function in lambda to populate target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRef")]
    #[builder(default)]
    pub target_ref: Option<WorkflowInitProviderStepsCustomStepDetailsTargetRef>,
    /// Selector for a Function in lambda to populate target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetSelector")]
    #[builder(default)]
    pub target_selector: Option<WorkflowInitProviderStepsCustomStepDetailsTargetSelector>,
    /// Timeout, in seconds, for the step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// Reference to a Function in lambda to populate target.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsCustomStepDetailsTargetRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkflowInitProviderStepsCustomStepDetailsTargetRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsCustomStepDetailsTargetRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkflowInitProviderStepsCustomStepDetailsTargetRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkflowInitProviderStepsCustomStepDetailsTargetRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowInitProviderStepsCustomStepDetailsTargetRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowInitProviderStepsCustomStepDetailsTargetRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate target.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsCustomStepDetailsTargetSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkflowInitProviderStepsCustomStepDetailsTargetSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsCustomStepDetailsTargetSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkflowInitProviderStepsCustomStepDetailsTargetSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkflowInitProviderStepsCustomStepDetailsTargetSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowInitProviderStepsCustomStepDetailsTargetSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowInitProviderStepsCustomStepDetailsTargetSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Details for a step that decrypts the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsDecryptStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowInitProviderStepsDecryptStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsDecryptStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowInitProviderStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowInitProviderStepsDecryptStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsDecryptStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that deletes the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsDeleteStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Details for a step that creates one or more tags.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsTagStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<Vec<WorkflowInitProviderStepsTagStepDetailsTags>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowInitProviderStepsTagStepDetailsTags {
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The value that corresponds to the key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkflowProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkflowProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkflowProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<WorkflowPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<WorkflowPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkflowPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkflowPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkflowPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkflowPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// WorkflowStatus defines the observed state of Workflow.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<WorkflowStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProvider {
    /// The Workflow ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// A textual description for the workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The Workflow id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onExceptionSteps")]
    #[builder(default)]
    pub on_exception_steps: Option<Vec<WorkflowStatusAtProviderOnExceptionSteps>>,
    /// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub steps: Option<Vec<WorkflowStatusAtProviderSteps>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionSteps {
    /// Details for a step that performs a file copy. See Copy Step Details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyStepDetails")]
    #[builder(default)]
    pub copy_step_details: Option<WorkflowStatusAtProviderOnExceptionStepsCopyStepDetails>,
    /// Details for a step that invokes a lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customStepDetails")]
    #[builder(default)]
    pub custom_step_details: Option<WorkflowStatusAtProviderOnExceptionStepsCustomStepDetails>,
    /// Details for a step that decrypts the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decryptStepDetails")]
    #[builder(default)]
    pub decrypt_step_details: Option<WorkflowStatusAtProviderOnExceptionStepsDecryptStepDetails>,
    /// Details for a step that deletes the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteStepDetails")]
    #[builder(default)]
    pub delete_step_details: Option<WorkflowStatusAtProviderOnExceptionStepsDeleteStepDetails>,
    /// Details for a step that creates one or more tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagStepDetails")]
    #[builder(default)]
    pub tag_step_details: Option<WorkflowStatusAtProviderOnExceptionStepsTagStepDetails>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Details for a step that performs a file copy. See Copy Step Details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsCopyStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowStatusAtProviderOnExceptionStepsCopyStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsCopyStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowStatusAtProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowStatusAtProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsCopyStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that invokes a lambda function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsCustomStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// The ARN for the lambda function that is being called.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
    /// Timeout, in seconds, for the step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// Details for a step that decrypts the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsDecryptStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowStatusAtProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowStatusAtProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowStatusAtProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsDecryptStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that deletes the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsDeleteStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Details for a step that creates one or more tags.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsTagStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<Vec<WorkflowStatusAtProviderOnExceptionStepsTagStepDetailsTags>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderOnExceptionStepsTagStepDetailsTags {
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The value that corresponds to the key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderSteps {
    /// Details for a step that performs a file copy. See Copy Step Details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyStepDetails")]
    #[builder(default)]
    pub copy_step_details: Option<WorkflowStatusAtProviderStepsCopyStepDetails>,
    /// Details for a step that invokes a lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customStepDetails")]
    #[builder(default)]
    pub custom_step_details: Option<WorkflowStatusAtProviderStepsCustomStepDetails>,
    /// Details for a step that decrypts the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decryptStepDetails")]
    #[builder(default)]
    pub decrypt_step_details: Option<WorkflowStatusAtProviderStepsDecryptStepDetails>,
    /// Details for a step that deletes the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteStepDetails")]
    #[builder(default)]
    pub delete_step_details: Option<WorkflowStatusAtProviderStepsDeleteStepDetails>,
    /// Details for a step that creates one or more tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagStepDetails")]
    #[builder(default)]
    pub tag_step_details: Option<WorkflowStatusAtProviderStepsTagStepDetails>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Details for a step that performs a file copy. See Copy Step Details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsCopyStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowStatusAtProviderStepsCopyStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsCopyStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowStatusAtProviderStepsCopyStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowStatusAtProviderStepsCopyStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsCopyStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsCopyStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that invokes a lambda function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsCustomStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// The ARN for the lambda function that is being called.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
    /// Timeout, in seconds, for the step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// Details for a step that decrypts the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsDecryptStepDetails {
    /// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationFileLocation")]
    #[builder(default)]
    pub destination_file_location: Option<WorkflowStatusAtProviderStepsDecryptStepDetailsDestinationFileLocation>,
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overwriteExisting")]
    #[builder(default)]
    pub overwrite_existing: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsDecryptStepDetailsDestinationFileLocation {
    /// Specifies the details for the EFS file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileLocation")]
    #[builder(default)]
    pub efs_file_location: Option<WorkflowStatusAtProviderStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation>,
    /// Specifies the details for the S3 file being copied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3FileLocation")]
    #[builder(default)]
    pub s3_file_location: Option<WorkflowStatusAtProviderStepsDecryptStepDetailsDestinationFileLocationS3FileLocation>,
}

/// Specifies the details for the EFS file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsDecryptStepDetailsDestinationFileLocationEfsFileLocation {
    /// The ID of the file system, assigned by Amazon EFS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The pathname for the folder being used by a workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Specifies the details for the S3 file being copied.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsDecryptStepDetailsDestinationFileLocationS3FileLocation {
    /// Specifies the S3 bucket for the customer input file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Details for a step that deletes the file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsDeleteStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
}

/// Details for a step that creates one or more tags.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsTagStepDetails {
    /// The name of the step, used as an identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceFileLocation")]
    #[builder(default)]
    pub source_file_location: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<Vec<WorkflowStatusAtProviderStepsTagStepDetailsTags>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkflowStatusAtProviderStepsTagStepDetailsTags {
    /// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The value that corresponds to the key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}


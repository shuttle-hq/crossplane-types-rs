// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TableSpec defines the desired state of Table
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "timestreamwrite.aws.upbound.io", version = "v1beta2", kind = "Table", plural = "tables")]
#[kube(status = "TableStatus")]
pub struct TableSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<TableDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TableForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<TableInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<TableProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<TablePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<TableWriteConnectionSecretToRef>,
}

/// TableSpec defines the desired state of Table
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProvider {
    /// â€“  The name of the Timestream database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    #[builder(default)]
    pub database_name: Option<String>,
    /// Reference to a Database in timestreamwrite to populate databaseName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseNameRef")]
    #[builder(default)]
    pub database_name_ref: Option<TableForProviderDatabaseNameRef>,
    /// Selector for a Database in timestreamwrite to populate databaseName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseNameSelector")]
    #[builder(default)]
    pub database_name_selector: Option<TableForProviderDatabaseNameSelector>,
    /// Contains properties to set on the table when enabling magnetic store writes. See Magnetic Store Write Properties below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "magneticStoreWriteProperties")]
    #[builder(default)]
    pub magnetic_store_write_properties: Option<TableForProviderMagneticStoreWriteProperties>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The retention duration for the memory store and magnetic store. See Retention Properties below for more details. If not provided, magnetic_store_retention_period_in_days default to 73000 and memory_store_retention_period_in_hours defaults to 6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionProperties")]
    #[builder(default)]
    pub retention_properties: Option<TableForProviderRetentionProperties>,
    /// The schema of the table. See Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schema: Option<TableForProviderSchema>,
    /// The name of the Timestream table.
    #[serde(rename = "tableName")]
    pub table_name: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a Database in timestreamwrite to populate databaseName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderDatabaseNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TableForProviderDatabaseNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderDatabaseNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TableForProviderDatabaseNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TableForProviderDatabaseNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableForProviderDatabaseNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableForProviderDatabaseNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Database in timestreamwrite to populate databaseName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderDatabaseNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TableForProviderDatabaseNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderDatabaseNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TableForProviderDatabaseNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TableForProviderDatabaseNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableForProviderDatabaseNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableForProviderDatabaseNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Contains properties to set on the table when enabling magnetic store writes. See Magnetic Store Write Properties below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderMagneticStoreWriteProperties {
    /// A flag to enable magnetic store writes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableMagneticStoreWrites")]
    #[builder(default)]
    pub enable_magnetic_store_writes: Option<bool>,
    /// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "magneticStoreRejectedDataLocation")]
    #[builder(default)]
    pub magnetic_store_rejected_data_location: Option<TableForProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation>,
}

/// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation {
    /// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    #[builder(default)]
    pub s3_configuration: Option<TableForProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration>,
}

/// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration {
    /// Bucket name of the customer S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    #[builder(default)]
    pub bucket_name: Option<String>,
    /// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are SSE_KMS and SSE_S3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionOption")]
    #[builder(default)]
    pub encryption_option: Option<String>,
    /// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Object key prefix for the customer S3 location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectKeyPrefix")]
    #[builder(default)]
    pub object_key_prefix: Option<String>,
}

/// The retention duration for the memory store and magnetic store. See Retention Properties below for more details. If not provided, magnetic_store_retention_period_in_days default to 73000 and memory_store_retention_period_in_hours defaults to 6.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderRetentionProperties {
    /// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "magneticStoreRetentionPeriodInDays")]
    #[builder(default)]
    pub magnetic_store_retention_period_in_days: Option<f64>,
    /// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryStoreRetentionPeriodInHours")]
    #[builder(default)]
    pub memory_store_retention_period_in_hours: Option<f64>,
}

/// The schema of the table. See Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderSchema {
    /// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compositePartitionKey")]
    #[builder(default)]
    pub composite_partition_key: Option<TableForProviderSchemaCompositePartitionKey>,
}

/// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableForProviderSchemaCompositePartitionKey {
    /// The level of enforcement for the specification of a dimension key in ingested records. Valid values: REQUIRED, OPTIONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcementInRecord")]
    #[builder(default)]
    pub enforcement_in_record: Option<String>,
    /// The name of the attribute used for a dimension key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The type of the partition key. Valid values: DIMENSION, MEASURE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableInitProvider {
    /// Contains properties to set on the table when enabling magnetic store writes. See Magnetic Store Write Properties below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "magneticStoreWriteProperties")]
    #[builder(default)]
    pub magnetic_store_write_properties: Option<TableInitProviderMagneticStoreWriteProperties>,
    /// The retention duration for the memory store and magnetic store. See Retention Properties below for more details. If not provided, magnetic_store_retention_period_in_days default to 73000 and memory_store_retention_period_in_hours defaults to 6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionProperties")]
    #[builder(default)]
    pub retention_properties: Option<TableInitProviderRetentionProperties>,
    /// The schema of the table. See Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schema: Option<TableInitProviderSchema>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Contains properties to set on the table when enabling magnetic store writes. See Magnetic Store Write Properties below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableInitProviderMagneticStoreWriteProperties {
    /// A flag to enable magnetic store writes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableMagneticStoreWrites")]
    #[builder(default)]
    pub enable_magnetic_store_writes: Option<bool>,
    /// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "magneticStoreRejectedDataLocation")]
    #[builder(default)]
    pub magnetic_store_rejected_data_location: Option<TableInitProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation>,
}

/// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableInitProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation {
    /// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    #[builder(default)]
    pub s3_configuration: Option<TableInitProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration>,
}

/// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableInitProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration {
    /// Bucket name of the customer S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    #[builder(default)]
    pub bucket_name: Option<String>,
    /// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are SSE_KMS and SSE_S3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionOption")]
    #[builder(default)]
    pub encryption_option: Option<String>,
    /// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Object key prefix for the customer S3 location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectKeyPrefix")]
    #[builder(default)]
    pub object_key_prefix: Option<String>,
}

/// The retention duration for the memory store and magnetic store. See Retention Properties below for more details. If not provided, magnetic_store_retention_period_in_days default to 73000 and memory_store_retention_period_in_hours defaults to 6.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableInitProviderRetentionProperties {
    /// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "magneticStoreRetentionPeriodInDays")]
    #[builder(default)]
    pub magnetic_store_retention_period_in_days: Option<f64>,
    /// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryStoreRetentionPeriodInHours")]
    #[builder(default)]
    pub memory_store_retention_period_in_hours: Option<f64>,
}

/// The schema of the table. See Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableInitProviderSchema {
    /// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compositePartitionKey")]
    #[builder(default)]
    pub composite_partition_key: Option<TableInitProviderSchemaCompositePartitionKey>,
}

/// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableInitProviderSchemaCompositePartitionKey {
    /// The level of enforcement for the specification of a dimension key in ingested records. Valid values: REQUIRED, OPTIONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcementInRecord")]
    #[builder(default)]
    pub enforcement_in_record: Option<String>,
    /// The name of the attribute used for a dimension key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The type of the partition key. Valid values: DIMENSION, MEASURE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TableProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TableProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TableProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TablePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<TablePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<TablePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TablePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TablePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TablePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TablePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TablePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TablePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TablePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TablePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TableStatus defines the observed state of Table.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<TableStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableStatusAtProvider {
    /// The ARN that uniquely identifies this table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// â€“  The name of the Timestream database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    #[builder(default)]
    pub database_name: Option<String>,
    /// The table_name and database_name separated by a colon (:).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Contains properties to set on the table when enabling magnetic store writes. See Magnetic Store Write Properties below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "magneticStoreWriteProperties")]
    #[builder(default)]
    pub magnetic_store_write_properties: Option<TableStatusAtProviderMagneticStoreWriteProperties>,
    /// The retention duration for the memory store and magnetic store. See Retention Properties below for more details. If not provided, magnetic_store_retention_period_in_days default to 73000 and memory_store_retention_period_in_hours defaults to 6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionProperties")]
    #[builder(default)]
    pub retention_properties: Option<TableStatusAtProviderRetentionProperties>,
    /// The schema of the table. See Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schema: Option<TableStatusAtProviderSchema>,
    /// The name of the Timestream table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    #[builder(default)]
    pub table_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

/// Contains properties to set on the table when enabling magnetic store writes. See Magnetic Store Write Properties below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableStatusAtProviderMagneticStoreWriteProperties {
    /// A flag to enable magnetic store writes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableMagneticStoreWrites")]
    #[builder(default)]
    pub enable_magnetic_store_writes: Option<bool>,
    /// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "magneticStoreRejectedDataLocation")]
    #[builder(default)]
    pub magnetic_store_rejected_data_location: Option<TableStatusAtProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation>,
}

/// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableStatusAtProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation {
    /// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    #[builder(default)]
    pub s3_configuration: Option<TableStatusAtProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration>,
}

/// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableStatusAtProviderMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration {
    /// Bucket name of the customer S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    #[builder(default)]
    pub bucket_name: Option<String>,
    /// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are SSE_KMS and SSE_S3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionOption")]
    #[builder(default)]
    pub encryption_option: Option<String>,
    /// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Object key prefix for the customer S3 location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectKeyPrefix")]
    #[builder(default)]
    pub object_key_prefix: Option<String>,
}

/// The retention duration for the memory store and magnetic store. See Retention Properties below for more details. If not provided, magnetic_store_retention_period_in_days default to 73000 and memory_store_retention_period_in_hours defaults to 6.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableStatusAtProviderRetentionProperties {
    /// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "magneticStoreRetentionPeriodInDays")]
    #[builder(default)]
    pub magnetic_store_retention_period_in_days: Option<f64>,
    /// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryStoreRetentionPeriodInHours")]
    #[builder(default)]
    pub memory_store_retention_period_in_hours: Option<f64>,
}

/// The schema of the table. See Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableStatusAtProviderSchema {
    /// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compositePartitionKey")]
    #[builder(default)]
    pub composite_partition_key: Option<TableStatusAtProviderSchemaCompositePartitionKey>,
}

/// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TableStatusAtProviderSchemaCompositePartitionKey {
    /// The level of enforcement for the specification of a dimension key in ingested records. Valid values: REQUIRED, OPTIONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcementInRecord")]
    #[builder(default)]
    pub enforcement_in_record: Option<String>,
    /// The name of the attribute used for a dimension key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The type of the partition key. Valid values: DIMENSION, MEASURE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// StackSetSpec defines the desired state of StackSet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "cloudformation.aws.upbound.io", version = "v1beta2", kind = "StackSet", plural = "stacksets")]
#[kube(status = "StackSetStatus")]
pub struct StackSetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<StackSetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: StackSetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<StackSetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<StackSetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<StackSetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<StackSetWriteConnectionSecretToRef>,
}

/// StackSetSpec defines the desired state of StackSet
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetForProvider {
    /// Amazon Resource Number (ARN) of the IAM Role in the administrator account. This must be defined when using the SELF_MANAGED permission model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "administrationRoleArn")]
    #[builder(default)]
    pub administration_role_arn: Option<String>,
    /// Reference to a Role in iam to populate administrationRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "administrationRoleArnRef")]
    #[builder(default)]
    pub administration_role_arn_ref: Option<StackSetForProviderAdministrationRoleArnRef>,
    /// Selector for a Role in iam to populate administrationRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "administrationRoleArnSelector")]
    #[builder(default)]
    pub administration_role_arn_selector: Option<StackSetForProviderAdministrationRoleArnSelector>,
    /// Configuration block containing the auto-deployment model for your StackSet. This can only be defined when using the SERVICE_MANAGED permission model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoDeployment")]
    #[builder(default)]
    pub auto_deployment: Option<StackSetForProviderAutoDeployment>,
    /// Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: SELF (default), DELEGATED_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callAs")]
    #[builder(default)]
    pub call_as: Option<String>,
    /// A list of capabilities. Valid values: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub capabilities: Option<Vec<String>>,
    /// Description of the StackSet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Name of the IAM Role in all target accounts for StackSet operations. Defaults to AWSCloudFormationStackSetExecutionRole when using the SELF_MANAGED permission model. This should not be defined when using the SERVICE_MANAGED permission model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleName")]
    #[builder(default)]
    pub execution_role_name: Option<String>,
    /// Configuration block to allow StackSets to perform non-conflicting operations concurrently and queues conflicting operations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedExecution")]
    #[builder(default)]
    pub managed_execution: Option<StackSetForProviderManagedExecution>,
    /// Preferences for how AWS CloudFormation performs a stack set update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationPreferences")]
    #[builder(default)]
    pub operation_preferences: Option<StackSetForProviderOperationPreferences>,
    /// Key-value map of input parameters for the StackSet template. All template parameters, including those with a Default, must be configured or ignored with lifecycle configuration block ignore_changes argument. All NoEcho template parameters must be ignored with the lifecycle configuration block ignore_changes argument.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<HashMap<String, String>>,
    /// Describes how the IAM roles required for your StackSet are created. Valid values: SELF_MANAGED (default), SERVICE_MANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permissionModel")]
    #[builder(default)]
    pub permission_model: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// String containing the CloudFormation template body. Maximum size: 51,200 bytes. Conflicts with template_url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateBody")]
    #[builder(default)]
    pub template_body: Option<String>,
    /// String containing the location of a file containing the CloudFormation template body. The URL must point to a template that is located in an Amazon S3 bucket. Maximum location file size: 460,800 bytes. Conflicts with template_body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateUrl")]
    #[builder(default)]
    pub template_url: Option<String>,
}

/// Reference to a Role in iam to populate administrationRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetForProviderAdministrationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackSetForProviderAdministrationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetForProviderAdministrationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackSetForProviderAdministrationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackSetForProviderAdministrationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetForProviderAdministrationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetForProviderAdministrationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate administrationRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetForProviderAdministrationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackSetForProviderAdministrationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetForProviderAdministrationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackSetForProviderAdministrationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackSetForProviderAdministrationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetForProviderAdministrationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetForProviderAdministrationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block containing the auto-deployment model for your StackSet. This can only be defined when using the SERVICE_MANAGED permission model.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetForProviderAutoDeployment {
    /// Whether or not auto-deployment is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Whether or not to retain stacks when the account is removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainStacksOnAccountRemoval")]
    #[builder(default)]
    pub retain_stacks_on_account_removal: Option<bool>,
}

/// Configuration block to allow StackSets to perform non-conflicting operations concurrently and queues conflicting operations.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetForProviderManagedExecution {
    /// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub active: Option<bool>,
}

/// Preferences for how AWS CloudFormation performs a stack set update.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetForProviderOperationPreferences {
    /// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureToleranceCount")]
    #[builder(default)]
    pub failure_tolerance_count: Option<f64>,
    /// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureTolerancePercentage")]
    #[builder(default)]
    pub failure_tolerance_percentage: Option<f64>,
    /// The maximum number of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentCount")]
    #[builder(default)]
    pub max_concurrent_count: Option<f64>,
    /// The maximum percentage of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentPercentage")]
    #[builder(default)]
    pub max_concurrent_percentage: Option<f64>,
    /// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionConcurrencyType")]
    #[builder(default)]
    pub region_concurrency_type: Option<String>,
    /// The order of the Regions in where you want to perform the stack operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionOrder")]
    #[builder(default)]
    pub region_order: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetInitProvider {
    /// Amazon Resource Number (ARN) of the IAM Role in the administrator account. This must be defined when using the SELF_MANAGED permission model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "administrationRoleArn")]
    #[builder(default)]
    pub administration_role_arn: Option<String>,
    /// Reference to a Role in iam to populate administrationRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "administrationRoleArnRef")]
    #[builder(default)]
    pub administration_role_arn_ref: Option<StackSetInitProviderAdministrationRoleArnRef>,
    /// Selector for a Role in iam to populate administrationRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "administrationRoleArnSelector")]
    #[builder(default)]
    pub administration_role_arn_selector: Option<StackSetInitProviderAdministrationRoleArnSelector>,
    /// Configuration block containing the auto-deployment model for your StackSet. This can only be defined when using the SERVICE_MANAGED permission model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoDeployment")]
    #[builder(default)]
    pub auto_deployment: Option<StackSetInitProviderAutoDeployment>,
    /// Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: SELF (default), DELEGATED_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callAs")]
    #[builder(default)]
    pub call_as: Option<String>,
    /// A list of capabilities. Valid values: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub capabilities: Option<Vec<String>>,
    /// Description of the StackSet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Name of the IAM Role in all target accounts for StackSet operations. Defaults to AWSCloudFormationStackSetExecutionRole when using the SELF_MANAGED permission model. This should not be defined when using the SERVICE_MANAGED permission model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleName")]
    #[builder(default)]
    pub execution_role_name: Option<String>,
    /// Configuration block to allow StackSets to perform non-conflicting operations concurrently and queues conflicting operations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedExecution")]
    #[builder(default)]
    pub managed_execution: Option<StackSetInitProviderManagedExecution>,
    /// Preferences for how AWS CloudFormation performs a stack set update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationPreferences")]
    #[builder(default)]
    pub operation_preferences: Option<StackSetInitProviderOperationPreferences>,
    /// Key-value map of input parameters for the StackSet template. All template parameters, including those with a Default, must be configured or ignored with lifecycle configuration block ignore_changes argument. All NoEcho template parameters must be ignored with the lifecycle configuration block ignore_changes argument.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<HashMap<String, String>>,
    /// Describes how the IAM roles required for your StackSet are created. Valid values: SELF_MANAGED (default), SERVICE_MANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permissionModel")]
    #[builder(default)]
    pub permission_model: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// String containing the CloudFormation template body. Maximum size: 51,200 bytes. Conflicts with template_url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateBody")]
    #[builder(default)]
    pub template_body: Option<String>,
    /// String containing the location of a file containing the CloudFormation template body. The URL must point to a template that is located in an Amazon S3 bucket. Maximum location file size: 460,800 bytes. Conflicts with template_body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateUrl")]
    #[builder(default)]
    pub template_url: Option<String>,
}

/// Reference to a Role in iam to populate administrationRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetInitProviderAdministrationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackSetInitProviderAdministrationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetInitProviderAdministrationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackSetInitProviderAdministrationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackSetInitProviderAdministrationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInitProviderAdministrationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInitProviderAdministrationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate administrationRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetInitProviderAdministrationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackSetInitProviderAdministrationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetInitProviderAdministrationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackSetInitProviderAdministrationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackSetInitProviderAdministrationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInitProviderAdministrationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInitProviderAdministrationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block containing the auto-deployment model for your StackSet. This can only be defined when using the SERVICE_MANAGED permission model.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetInitProviderAutoDeployment {
    /// Whether or not auto-deployment is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Whether or not to retain stacks when the account is removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainStacksOnAccountRemoval")]
    #[builder(default)]
    pub retain_stacks_on_account_removal: Option<bool>,
}

/// Configuration block to allow StackSets to perform non-conflicting operations concurrently and queues conflicting operations.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetInitProviderManagedExecution {
    /// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub active: Option<bool>,
}

/// Preferences for how AWS CloudFormation performs a stack set update.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetInitProviderOperationPreferences {
    /// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureToleranceCount")]
    #[builder(default)]
    pub failure_tolerance_count: Option<f64>,
    /// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureTolerancePercentage")]
    #[builder(default)]
    pub failure_tolerance_percentage: Option<f64>,
    /// The maximum number of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentCount")]
    #[builder(default)]
    pub max_concurrent_count: Option<f64>,
    /// The maximum percentage of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentPercentage")]
    #[builder(default)]
    pub max_concurrent_percentage: Option<f64>,
    /// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionConcurrencyType")]
    #[builder(default)]
    pub region_concurrency_type: Option<String>,
    /// The order of the Regions in where you want to perform the stack operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionOrder")]
    #[builder(default)]
    pub region_order: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackSetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackSetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackSetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<StackSetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<StackSetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackSetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackSetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackSetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// StackSetStatus defines the observed state of StackSet.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<StackSetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetStatusAtProvider {
    /// Amazon Resource Number (ARN) of the IAM Role in the administrator account. This must be defined when using the SELF_MANAGED permission model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "administrationRoleArn")]
    #[builder(default)]
    pub administration_role_arn: Option<String>,
    /// Amazon Resource Name (ARN) of the StackSet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Configuration block containing the auto-deployment model for your StackSet. This can only be defined when using the SERVICE_MANAGED permission model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoDeployment")]
    #[builder(default)]
    pub auto_deployment: Option<StackSetStatusAtProviderAutoDeployment>,
    /// Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: SELF (default), DELEGATED_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callAs")]
    #[builder(default)]
    pub call_as: Option<String>,
    /// A list of capabilities. Valid values: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub capabilities: Option<Vec<String>>,
    /// Description of the StackSet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Name of the IAM Role in all target accounts for StackSet operations. Defaults to AWSCloudFormationStackSetExecutionRole when using the SELF_MANAGED permission model. This should not be defined when using the SERVICE_MANAGED permission model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleName")]
    #[builder(default)]
    pub execution_role_name: Option<String>,
    /// Name of the StackSet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Configuration block to allow StackSets to perform non-conflicting operations concurrently and queues conflicting operations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedExecution")]
    #[builder(default)]
    pub managed_execution: Option<StackSetStatusAtProviderManagedExecution>,
    /// Preferences for how AWS CloudFormation performs a stack set update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationPreferences")]
    #[builder(default)]
    pub operation_preferences: Option<StackSetStatusAtProviderOperationPreferences>,
    /// Key-value map of input parameters for the StackSet template. All template parameters, including those with a Default, must be configured or ignored with lifecycle configuration block ignore_changes argument. All NoEcho template parameters must be ignored with the lifecycle configuration block ignore_changes argument.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<HashMap<String, String>>,
    /// Describes how the IAM roles required for your StackSet are created. Valid values: SELF_MANAGED (default), SERVICE_MANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permissionModel")]
    #[builder(default)]
    pub permission_model: Option<String>,
    /// Unique identifier of the StackSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackSetId")]
    #[builder(default)]
    pub stack_set_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// String containing the CloudFormation template body. Maximum size: 51,200 bytes. Conflicts with template_url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateBody")]
    #[builder(default)]
    pub template_body: Option<String>,
    /// String containing the location of a file containing the CloudFormation template body. The URL must point to a template that is located in an Amazon S3 bucket. Maximum location file size: 460,800 bytes. Conflicts with template_body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateUrl")]
    #[builder(default)]
    pub template_url: Option<String>,
}

/// Configuration block containing the auto-deployment model for your StackSet. This can only be defined when using the SERVICE_MANAGED permission model.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetStatusAtProviderAutoDeployment {
    /// Whether or not auto-deployment is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Whether or not to retain stacks when the account is removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainStacksOnAccountRemoval")]
    #[builder(default)]
    pub retain_stacks_on_account_removal: Option<bool>,
}

/// Configuration block to allow StackSets to perform non-conflicting operations concurrently and queues conflicting operations.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetStatusAtProviderManagedExecution {
    /// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub active: Option<bool>,
}

/// Preferences for how AWS CloudFormation performs a stack set update.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackSetStatusAtProviderOperationPreferences {
    /// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureToleranceCount")]
    #[builder(default)]
    pub failure_tolerance_count: Option<f64>,
    /// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureTolerancePercentage")]
    #[builder(default)]
    pub failure_tolerance_percentage: Option<f64>,
    /// The maximum number of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentCount")]
    #[builder(default)]
    pub max_concurrent_count: Option<f64>,
    /// The maximum percentage of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentPercentage")]
    #[builder(default)]
    pub max_concurrent_percentage: Option<f64>,
    /// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionConcurrencyType")]
    #[builder(default)]
    pub region_concurrency_type: Option<String>,
    /// The order of the Regions in where you want to perform the stack operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionOrder")]
    #[builder(default)]
    pub region_order: Option<Vec<String>>,
}


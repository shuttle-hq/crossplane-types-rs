// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TransitVirtualInterfaceSpec defines the desired state of TransitVirtualInterface
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "directconnect.aws.upbound.io", version = "v1beta1", kind = "TransitVirtualInterface", plural = "transitvirtualinterfaces")]
#[kube(status = "TransitVirtualInterfaceStatus")]
pub struct TransitVirtualInterfaceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<TransitVirtualInterfaceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TransitVirtualInterfaceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<TransitVirtualInterfaceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<TransitVirtualInterfaceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<TransitVirtualInterfacePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<TransitVirtualInterfaceWriteConnectionSecretToRef>,
}

/// TransitVirtualInterfaceSpec defines the desired state of TransitVirtualInterface
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceForProvider {
    /// The address family for the BGP peer. ipv4  or ipv6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressFamily")]
    #[builder(default)]
    pub address_family: Option<String>,
    /// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonAddress")]
    #[builder(default)]
    pub amazon_address: Option<String>,
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bgpAsn")]
    #[builder(default)]
    pub bgp_asn: Option<f64>,
    /// The authentication key for BGP configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bgpAuthKey")]
    #[builder(default)]
    pub bgp_auth_key: Option<String>,
    /// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionId")]
    #[builder(default)]
    pub connection_id: Option<String>,
    /// Reference to a Connection in directconnect to populate connectionId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionIdRef")]
    #[builder(default)]
    pub connection_id_ref: Option<TransitVirtualInterfaceForProviderConnectionIdRef>,
    /// Selector for a Connection in directconnect to populate connectionId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionIdSelector")]
    #[builder(default)]
    pub connection_id_selector: Option<TransitVirtualInterfaceForProviderConnectionIdSelector>,
    /// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerAddress")]
    #[builder(default)]
    pub customer_address: Option<String>,
    /// The ID of the Direct Connect gateway to which to connect the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayId")]
    #[builder(default)]
    pub dx_gateway_id: Option<String>,
    /// Reference to a Gateway in directconnect to populate dxGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayIdRef")]
    #[builder(default)]
    pub dx_gateway_id_ref: Option<TransitVirtualInterfaceForProviderDxGatewayIdRef>,
    /// Selector for a Gateway in directconnect to populate dxGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayIdSelector")]
    #[builder(default)]
    pub dx_gateway_id_selector: Option<TransitVirtualInterfaceForProviderDxGatewayIdSelector>,
    /// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
    /// The MTU of a virtual transit interface can be either 1500 or 8500 (jumbo frames). Default is 1500.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mtu: Option<f64>,
    /// The name for the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Indicates whether to enable or disable SiteLink.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sitelinkEnabled")]
    #[builder(default)]
    pub sitelink_enabled: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The VLAN ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub vlan: Option<f64>,
}

/// Reference to a Connection in directconnect to populate connectionId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceForProviderConnectionIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfaceForProviderConnectionIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceForProviderConnectionIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfaceForProviderConnectionIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfaceForProviderConnectionIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceForProviderConnectionIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceForProviderConnectionIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Connection in directconnect to populate connectionId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceForProviderConnectionIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfaceForProviderConnectionIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceForProviderConnectionIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfaceForProviderConnectionIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfaceForProviderConnectionIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceForProviderConnectionIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceForProviderConnectionIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Gateway in directconnect to populate dxGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceForProviderDxGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfaceForProviderDxGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceForProviderDxGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfaceForProviderDxGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfaceForProviderDxGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceForProviderDxGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceForProviderDxGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Gateway in directconnect to populate dxGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceForProviderDxGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfaceForProviderDxGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceForProviderDxGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfaceForProviderDxGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfaceForProviderDxGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceForProviderDxGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceForProviderDxGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceInitProvider {
    /// The address family for the BGP peer. ipv4  or ipv6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressFamily")]
    #[builder(default)]
    pub address_family: Option<String>,
    /// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonAddress")]
    #[builder(default)]
    pub amazon_address: Option<String>,
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bgpAsn")]
    #[builder(default)]
    pub bgp_asn: Option<f64>,
    /// The authentication key for BGP configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bgpAuthKey")]
    #[builder(default)]
    pub bgp_auth_key: Option<String>,
    /// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionId")]
    #[builder(default)]
    pub connection_id: Option<String>,
    /// Reference to a Connection in directconnect to populate connectionId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionIdRef")]
    #[builder(default)]
    pub connection_id_ref: Option<TransitVirtualInterfaceInitProviderConnectionIdRef>,
    /// Selector for a Connection in directconnect to populate connectionId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionIdSelector")]
    #[builder(default)]
    pub connection_id_selector: Option<TransitVirtualInterfaceInitProviderConnectionIdSelector>,
    /// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerAddress")]
    #[builder(default)]
    pub customer_address: Option<String>,
    /// The ID of the Direct Connect gateway to which to connect the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayId")]
    #[builder(default)]
    pub dx_gateway_id: Option<String>,
    /// Reference to a Gateway in directconnect to populate dxGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayIdRef")]
    #[builder(default)]
    pub dx_gateway_id_ref: Option<TransitVirtualInterfaceInitProviderDxGatewayIdRef>,
    /// Selector for a Gateway in directconnect to populate dxGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayIdSelector")]
    #[builder(default)]
    pub dx_gateway_id_selector: Option<TransitVirtualInterfaceInitProviderDxGatewayIdSelector>,
    /// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
    /// The MTU of a virtual transit interface can be either 1500 or 8500 (jumbo frames). Default is 1500.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mtu: Option<f64>,
    /// The name for the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Indicates whether to enable or disable SiteLink.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sitelinkEnabled")]
    #[builder(default)]
    pub sitelink_enabled: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The VLAN ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub vlan: Option<f64>,
}

/// Reference to a Connection in directconnect to populate connectionId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceInitProviderConnectionIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfaceInitProviderConnectionIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceInitProviderConnectionIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfaceInitProviderConnectionIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfaceInitProviderConnectionIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceInitProviderConnectionIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceInitProviderConnectionIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Connection in directconnect to populate connectionId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceInitProviderConnectionIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfaceInitProviderConnectionIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceInitProviderConnectionIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfaceInitProviderConnectionIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfaceInitProviderConnectionIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceInitProviderConnectionIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceInitProviderConnectionIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Gateway in directconnect to populate dxGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceInitProviderDxGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfaceInitProviderDxGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceInitProviderDxGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfaceInitProviderDxGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfaceInitProviderDxGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceInitProviderDxGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceInitProviderDxGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Gateway in directconnect to populate dxGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceInitProviderDxGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfaceInitProviderDxGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceInitProviderDxGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfaceInitProviderDxGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfaceInitProviderDxGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceInitProviderDxGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceInitProviderDxGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfaceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfaceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfaceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfaceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfacePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<TransitVirtualInterfacePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<TransitVirtualInterfacePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfacePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TransitVirtualInterfacePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfacePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TransitVirtualInterfacePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TransitVirtualInterfacePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfacePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitVirtualInterfacePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfacePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TransitVirtualInterfaceStatus defines the observed state of TransitVirtualInterface.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<TransitVirtualInterfaceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TransitVirtualInterfaceStatusAtProvider {
    /// The address family for the BGP peer. ipv4  or ipv6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressFamily")]
    #[builder(default)]
    pub address_family: Option<String>,
    /// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonAddress")]
    #[builder(default)]
    pub amazon_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonSideAsn")]
    #[builder(default)]
    pub amazon_side_asn: Option<String>,
    /// The ARN of the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// The Direct Connect endpoint on which the virtual interface terminates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsDevice")]
    #[builder(default)]
    pub aws_device: Option<String>,
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bgpAsn")]
    #[builder(default)]
    pub bgp_asn: Option<f64>,
    /// The authentication key for BGP configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bgpAuthKey")]
    #[builder(default)]
    pub bgp_auth_key: Option<String>,
    /// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionId")]
    #[builder(default)]
    pub connection_id: Option<String>,
    /// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerAddress")]
    #[builder(default)]
    pub customer_address: Option<String>,
    /// The ID of the Direct Connect gateway to which to connect the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayId")]
    #[builder(default)]
    pub dx_gateway_id: Option<String>,
    /// The ID of the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Indicates whether jumbo frames (8500 MTU) are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jumboFrameCapable")]
    #[builder(default)]
    pub jumbo_frame_capable: Option<bool>,
    /// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
    /// The MTU of a virtual transit interface can be either 1500 or 8500 (jumbo frames). Default is 1500.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mtu: Option<f64>,
    /// The name for the virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Indicates whether to enable or disable SiteLink.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sitelinkEnabled")]
    #[builder(default)]
    pub sitelink_enabled: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// The VLAN ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub vlan: Option<f64>,
}


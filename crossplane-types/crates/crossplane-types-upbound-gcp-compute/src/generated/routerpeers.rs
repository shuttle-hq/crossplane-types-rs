// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RouterPeerSpec defines the desired state of RouterPeer
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "RouterPeer", plural = "routerpeers")]
#[kube(status = "RouterPeerStatus")]
pub struct RouterPeerSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<RouterPeerDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RouterPeerForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<RouterPeerInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<RouterPeerProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<RouterPeerPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<RouterPeerWriteConnectionSecretToRef>,
}

/// RouterPeerSpec defines the desired state of RouterPeer
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProvider {
    /// User-specified flag to indicate which mode to use for advertisement.
    /// Valid values of this enum field are: DEFAULT, CUSTOM
    /// Default value is DEFAULT.
    /// Possible values are: DEFAULT, CUSTOM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertiseMode")]
    #[builder(default)]
    pub advertise_mode: Option<String>,
    /// User-specified list of prefix groups to advertise in custom
    /// mode, which currently supports the following option:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertisedGroups")]
    #[builder(default)]
    pub advertised_groups: Option<Vec<String>>,
    /// User-specified list of individual IP ranges to advertise in
    /// custom mode. This field can only be populated if advertiseMode
    /// is CUSTOM and is advertised to all peers of the router. These IP
    /// ranges will be advertised in addition to any specified groups.
    /// Leave this field blank to advertise no custom IP ranges.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertisedIpRanges")]
    #[builder(default)]
    pub advertised_ip_ranges: Option<Vec<RouterPeerForProviderAdvertisedIpRanges>>,
    /// The priority of routes advertised to this BGP peer.
    /// Where there is more than one matching route of maximum
    /// length, the routes with the lowest priority value win.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertisedRoutePriority")]
    #[builder(default)]
    pub advertised_route_priority: Option<f64>,
    /// BFD configuration for the BGP peering.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bfd: Option<RouterPeerForProviderBfd>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customLearnedIpRanges")]
    #[builder(default)]
    pub custom_learned_ip_ranges: Option<Vec<RouterPeerForProviderCustomLearnedIpRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customLearnedRoutePriority")]
    #[builder(default)]
    pub custom_learned_route_priority: Option<f64>,
    /// The status of the BGP peer connection. If set to false, any active session
    /// with the peer is terminated and all associated routing information is removed.
    /// If set to true, the peer connection can be established with routing information.
    /// The default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// Enable IPv4 traffic over BGP Peer. It is enabled by default if the peerIpAddress is version 4.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIpv4")]
    #[builder(default)]
    pub enable_ipv4: Option<bool>,
    /// Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIpv6")]
    #[builder(default)]
    pub enable_ipv6: Option<bool>,
    /// Name of the interface the BGP peer is associated with.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interface: Option<String>,
    /// Reference to a RouterInterface in compute to populate interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interfaceRef")]
    #[builder(default)]
    pub interface_ref: Option<RouterPeerForProviderInterfaceRef>,
    /// Selector for a RouterInterface in compute to populate interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interfaceSelector")]
    #[builder(default)]
    pub interface_selector: Option<RouterPeerForProviderInterfaceSelector>,
    /// IP address of the interface inside Google Cloud Platform.
    /// Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    #[builder(default)]
    pub ip_address: Option<String>,
    /// IPv4 address of the interface inside Google Cloud Platform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4NexthopAddress")]
    #[builder(default)]
    pub ipv4_nexthop_address: Option<String>,
    /// IPv6 address of the interface inside Google Cloud Platform.
    /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
    /// If you do not specify the next hop addresses, Google Cloud automatically
    /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6NexthopAddress")]
    #[builder(default)]
    pub ipv6_nexthop_address: Option<String>,
    /// Configuration for MD5 authentication on the BGP session.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "md5AuthenticationKey")]
    #[builder(default)]
    pub md5_authentication_key: Option<RouterPeerForProviderMd5AuthenticationKey>,
    /// Peer BGP Autonomous System Number (ASN).
    /// Each BGP interface may use a different value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerAsn")]
    #[builder(default)]
    pub peer_asn: Option<f64>,
    /// IP address of the BGP interface outside Google Cloud Platform.
    /// Only IPv4 is supported. Required if ip_address is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpAddress")]
    #[builder(default)]
    pub peer_ip_address: Option<String>,
    /// Reference to a Address in compute to populate peerIpAddress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpAddressRef")]
    #[builder(default)]
    pub peer_ip_address_ref: Option<RouterPeerForProviderPeerIpAddressRef>,
    /// Selector for a Address in compute to populate peerIpAddress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpAddressSelector")]
    #[builder(default)]
    pub peer_ip_address_selector: Option<RouterPeerForProviderPeerIpAddressSelector>,
    /// IPv4 address of the BGP interface outside Google Cloud Platform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpv4NexthopAddress")]
    #[builder(default)]
    pub peer_ipv4_nexthop_address: Option<String>,
    /// IPv6 address of the BGP interface outside Google Cloud Platform.
    /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
    /// If you do not specify the next hop addresses, Google Cloud automatically
    /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpv6NexthopAddress")]
    #[builder(default)]
    pub peer_ipv6_nexthop_address: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Region where the router and BgpPeer reside.
    /// If it is not provided, the provider region is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// Reference to a Router in compute to populate region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionRef")]
    #[builder(default)]
    pub region_ref: Option<RouterPeerForProviderRegionRef>,
    /// Selector for a Router in compute to populate region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionSelector")]
    #[builder(default)]
    pub region_selector: Option<RouterPeerForProviderRegionSelector>,
    /// The name of the Cloud Router in which this BgpPeer will be configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub router: Option<String>,
    /// The URI of the VM instance that is used as third-party router appliances
    /// such as Next Gen Firewalls, Virtual Routers, or Router Appliances.
    /// The VM instance must be located in zones contained in the same region as
    /// this Cloud Router. The VM instance is the peer side of the BGP session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerApplianceInstance")]
    #[builder(default)]
    pub router_appliance_instance: Option<String>,
    /// Reference to a Instance in compute to populate routerApplianceInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerApplianceInstanceRef")]
    #[builder(default)]
    pub router_appliance_instance_ref: Option<RouterPeerForProviderRouterApplianceInstanceRef>,
    /// Selector for a Instance in compute to populate routerApplianceInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerApplianceInstanceSelector")]
    #[builder(default)]
    pub router_appliance_instance_selector: Option<RouterPeerForProviderRouterApplianceInstanceSelector>,
    /// Reference to a Router in compute to populate router.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerRef")]
    #[builder(default)]
    pub router_ref: Option<RouterPeerForProviderRouterRef>,
    /// Selector for a Router in compute to populate router.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerSelector")]
    #[builder(default)]
    pub router_selector: Option<RouterPeerForProviderRouterSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderAdvertisedIpRanges {
    /// User-specified description for the IP range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The IP range to advertise. The value must be a
    /// CIDR-formatted string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub range: Option<String>,
}

/// BFD configuration for the BGP peering.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderBfd {
    /// The minimum interval, in milliseconds, between BFD control packets
    /// received from the peer router. The actual value is negotiated
    /// between the two routers and is equal to the greater of this value
    /// and the transmit interval of the other router. If set, this value
    /// must be between 1000 and 30000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReceiveInterval")]
    #[builder(default)]
    pub min_receive_interval: Option<f64>,
    /// The minimum interval, in milliseconds, between BFD control packets
    /// transmitted to the peer router. The actual value is negotiated
    /// between the two routers and is equal to the greater of this value
    /// and the corresponding receive interval of the other router. If set,
    /// this value must be between 1000 and 30000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTransmitInterval")]
    #[builder(default)]
    pub min_transmit_interval: Option<f64>,
    /// The number of consecutive BFD packets that must be missed before
    /// BFD declares that a peer is unavailable. If set, the value must
    /// be a value between 5 and 16.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub multiplier: Option<f64>,
    /// The BFD session initialization mode for this BGP peer.
    /// If set to ACTIVE, the Cloud Router will initiate the BFD session
    /// for this BGP peer. If set to PASSIVE, the Cloud Router will wait
    /// for the peer router to initiate the BFD session for this BGP peer.
    /// If set to DISABLED, BFD is disabled for this BGP peer.
    /// Possible values are: ACTIVE, DISABLED, PASSIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionInitializationMode")]
    #[builder(default)]
    pub session_initialization_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderCustomLearnedIpRanges {
    /// The IP range to advertise. The value must be a
    /// CIDR-formatted string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub range: Option<String>,
}

/// Reference to a RouterInterface in compute to populate interface.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderInterfaceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderInterfaceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderInterfaceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderInterfaceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderInterfaceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderInterfaceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderInterfaceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RouterInterface in compute to populate interface.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderInterfaceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderInterfaceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderInterfaceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderInterfaceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderInterfaceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderInterfaceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderInterfaceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration for MD5 authentication on the BGP session.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderMd5AuthenticationKey {
    /// The MD5 authentication key for this BGP peer. Maximum length is 80 characters. Can only contain printable ASCII characters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecretRef")]
    #[builder(default)]
    pub key_secret_ref: Option<RouterPeerForProviderMd5AuthenticationKeyKeySecretRef>,
    /// Name used to identify the key. Must be unique within a router. Must comply with RFC1035.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// The MD5 authentication key for this BGP peer. Maximum length is 80 characters. Can only contain printable ASCII characters
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderMd5AuthenticationKeyKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Address in compute to populate peerIpAddress.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderPeerIpAddressRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderPeerIpAddressRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderPeerIpAddressRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderPeerIpAddressRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderPeerIpAddressRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderPeerIpAddressRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderPeerIpAddressRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Address in compute to populate peerIpAddress.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderPeerIpAddressSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderPeerIpAddressSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderPeerIpAddressSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderPeerIpAddressSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderPeerIpAddressSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderPeerIpAddressSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderPeerIpAddressSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Router in compute to populate region.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRegionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderRegionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRegionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderRegionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderRegionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRegionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRegionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Router in compute to populate region.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRegionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderRegionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRegionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderRegionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderRegionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRegionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRegionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Instance in compute to populate routerApplianceInstance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRouterApplianceInstanceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderRouterApplianceInstanceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRouterApplianceInstanceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderRouterApplianceInstanceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderRouterApplianceInstanceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRouterApplianceInstanceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRouterApplianceInstanceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in compute to populate routerApplianceInstance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRouterApplianceInstanceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderRouterApplianceInstanceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRouterApplianceInstanceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderRouterApplianceInstanceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderRouterApplianceInstanceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRouterApplianceInstanceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRouterApplianceInstanceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Router in compute to populate router.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRouterRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderRouterRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRouterRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderRouterRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderRouterRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRouterRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRouterRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Router in compute to populate router.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRouterSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerForProviderRouterSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerForProviderRouterSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerForProviderRouterSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerForProviderRouterSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRouterSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerForProviderRouterSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProvider {
    /// User-specified flag to indicate which mode to use for advertisement.
    /// Valid values of this enum field are: DEFAULT, CUSTOM
    /// Default value is DEFAULT.
    /// Possible values are: DEFAULT, CUSTOM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertiseMode")]
    #[builder(default)]
    pub advertise_mode: Option<String>,
    /// User-specified list of prefix groups to advertise in custom
    /// mode, which currently supports the following option:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertisedGroups")]
    #[builder(default)]
    pub advertised_groups: Option<Vec<String>>,
    /// User-specified list of individual IP ranges to advertise in
    /// custom mode. This field can only be populated if advertiseMode
    /// is CUSTOM and is advertised to all peers of the router. These IP
    /// ranges will be advertised in addition to any specified groups.
    /// Leave this field blank to advertise no custom IP ranges.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertisedIpRanges")]
    #[builder(default)]
    pub advertised_ip_ranges: Option<Vec<RouterPeerInitProviderAdvertisedIpRanges>>,
    /// The priority of routes advertised to this BGP peer.
    /// Where there is more than one matching route of maximum
    /// length, the routes with the lowest priority value win.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertisedRoutePriority")]
    #[builder(default)]
    pub advertised_route_priority: Option<f64>,
    /// BFD configuration for the BGP peering.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bfd: Option<RouterPeerInitProviderBfd>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customLearnedIpRanges")]
    #[builder(default)]
    pub custom_learned_ip_ranges: Option<Vec<RouterPeerInitProviderCustomLearnedIpRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customLearnedRoutePriority")]
    #[builder(default)]
    pub custom_learned_route_priority: Option<f64>,
    /// The status of the BGP peer connection. If set to false, any active session
    /// with the peer is terminated and all associated routing information is removed.
    /// If set to true, the peer connection can be established with routing information.
    /// The default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// Enable IPv4 traffic over BGP Peer. It is enabled by default if the peerIpAddress is version 4.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIpv4")]
    #[builder(default)]
    pub enable_ipv4: Option<bool>,
    /// Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIpv6")]
    #[builder(default)]
    pub enable_ipv6: Option<bool>,
    /// Name of the interface the BGP peer is associated with.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interface: Option<String>,
    /// Reference to a RouterInterface in compute to populate interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interfaceRef")]
    #[builder(default)]
    pub interface_ref: Option<RouterPeerInitProviderInterfaceRef>,
    /// Selector for a RouterInterface in compute to populate interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interfaceSelector")]
    #[builder(default)]
    pub interface_selector: Option<RouterPeerInitProviderInterfaceSelector>,
    /// IP address of the interface inside Google Cloud Platform.
    /// Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    #[builder(default)]
    pub ip_address: Option<String>,
    /// IPv4 address of the interface inside Google Cloud Platform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4NexthopAddress")]
    #[builder(default)]
    pub ipv4_nexthop_address: Option<String>,
    /// IPv6 address of the interface inside Google Cloud Platform.
    /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
    /// If you do not specify the next hop addresses, Google Cloud automatically
    /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6NexthopAddress")]
    #[builder(default)]
    pub ipv6_nexthop_address: Option<String>,
    /// Configuration for MD5 authentication on the BGP session.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "md5AuthenticationKey")]
    #[builder(default)]
    pub md5_authentication_key: Option<RouterPeerInitProviderMd5AuthenticationKey>,
    /// Peer BGP Autonomous System Number (ASN).
    /// Each BGP interface may use a different value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerAsn")]
    #[builder(default)]
    pub peer_asn: Option<f64>,
    /// IP address of the BGP interface outside Google Cloud Platform.
    /// Only IPv4 is supported. Required if ip_address is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpAddress")]
    #[builder(default)]
    pub peer_ip_address: Option<String>,
    /// Reference to a Address in compute to populate peerIpAddress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpAddressRef")]
    #[builder(default)]
    pub peer_ip_address_ref: Option<RouterPeerInitProviderPeerIpAddressRef>,
    /// Selector for a Address in compute to populate peerIpAddress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpAddressSelector")]
    #[builder(default)]
    pub peer_ip_address_selector: Option<RouterPeerInitProviderPeerIpAddressSelector>,
    /// IPv4 address of the BGP interface outside Google Cloud Platform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpv4NexthopAddress")]
    #[builder(default)]
    pub peer_ipv4_nexthop_address: Option<String>,
    /// IPv6 address of the BGP interface outside Google Cloud Platform.
    /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
    /// If you do not specify the next hop addresses, Google Cloud automatically
    /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpv6NexthopAddress")]
    #[builder(default)]
    pub peer_ipv6_nexthop_address: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Region where the router and BgpPeer reside.
    /// If it is not provided, the provider region is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// Reference to a Router in compute to populate region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionRef")]
    #[builder(default)]
    pub region_ref: Option<RouterPeerInitProviderRegionRef>,
    /// Selector for a Router in compute to populate region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionSelector")]
    #[builder(default)]
    pub region_selector: Option<RouterPeerInitProviderRegionSelector>,
    /// The URI of the VM instance that is used as third-party router appliances
    /// such as Next Gen Firewalls, Virtual Routers, or Router Appliances.
    /// The VM instance must be located in zones contained in the same region as
    /// this Cloud Router. The VM instance is the peer side of the BGP session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerApplianceInstance")]
    #[builder(default)]
    pub router_appliance_instance: Option<String>,
    /// Reference to a Instance in compute to populate routerApplianceInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerApplianceInstanceRef")]
    #[builder(default)]
    pub router_appliance_instance_ref: Option<RouterPeerInitProviderRouterApplianceInstanceRef>,
    /// Selector for a Instance in compute to populate routerApplianceInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerApplianceInstanceSelector")]
    #[builder(default)]
    pub router_appliance_instance_selector: Option<RouterPeerInitProviderRouterApplianceInstanceSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderAdvertisedIpRanges {
    /// User-specified description for the IP range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The IP range to advertise. The value must be a
    /// CIDR-formatted string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub range: Option<String>,
}

/// BFD configuration for the BGP peering.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderBfd {
    /// The minimum interval, in milliseconds, between BFD control packets
    /// received from the peer router. The actual value is negotiated
    /// between the two routers and is equal to the greater of this value
    /// and the transmit interval of the other router. If set, this value
    /// must be between 1000 and 30000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReceiveInterval")]
    #[builder(default)]
    pub min_receive_interval: Option<f64>,
    /// The minimum interval, in milliseconds, between BFD control packets
    /// transmitted to the peer router. The actual value is negotiated
    /// between the two routers and is equal to the greater of this value
    /// and the corresponding receive interval of the other router. If set,
    /// this value must be between 1000 and 30000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTransmitInterval")]
    #[builder(default)]
    pub min_transmit_interval: Option<f64>,
    /// The number of consecutive BFD packets that must be missed before
    /// BFD declares that a peer is unavailable. If set, the value must
    /// be a value between 5 and 16.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub multiplier: Option<f64>,
    /// The BFD session initialization mode for this BGP peer.
    /// If set to ACTIVE, the Cloud Router will initiate the BFD session
    /// for this BGP peer. If set to PASSIVE, the Cloud Router will wait
    /// for the peer router to initiate the BFD session for this BGP peer.
    /// If set to DISABLED, BFD is disabled for this BGP peer.
    /// Possible values are: ACTIVE, DISABLED, PASSIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionInitializationMode")]
    #[builder(default)]
    pub session_initialization_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderCustomLearnedIpRanges {
    /// The IP range to advertise. The value must be a
    /// CIDR-formatted string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub range: Option<String>,
}

/// Reference to a RouterInterface in compute to populate interface.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderInterfaceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerInitProviderInterfaceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderInterfaceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerInitProviderInterfaceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerInitProviderInterfaceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderInterfaceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderInterfaceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RouterInterface in compute to populate interface.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderInterfaceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerInitProviderInterfaceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderInterfaceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerInitProviderInterfaceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerInitProviderInterfaceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderInterfaceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderInterfaceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration for MD5 authentication on the BGP session.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderMd5AuthenticationKey {
    /// The MD5 authentication key for this BGP peer. Maximum length is 80 characters. Can only contain printable ASCII characters
    #[serde(rename = "keySecretRef")]
    pub key_secret_ref: RouterPeerInitProviderMd5AuthenticationKeyKeySecretRef,
    /// Name used to identify the key. Must be unique within a router. Must comply with RFC1035.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// The MD5 authentication key for this BGP peer. Maximum length is 80 characters. Can only contain printable ASCII characters
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderMd5AuthenticationKeyKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Address in compute to populate peerIpAddress.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderPeerIpAddressRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerInitProviderPeerIpAddressRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderPeerIpAddressRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerInitProviderPeerIpAddressRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerInitProviderPeerIpAddressRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderPeerIpAddressRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderPeerIpAddressRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Address in compute to populate peerIpAddress.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderPeerIpAddressSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerInitProviderPeerIpAddressSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderPeerIpAddressSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerInitProviderPeerIpAddressSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerInitProviderPeerIpAddressSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderPeerIpAddressSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderPeerIpAddressSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Router in compute to populate region.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderRegionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerInitProviderRegionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderRegionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerInitProviderRegionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerInitProviderRegionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderRegionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderRegionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Router in compute to populate region.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderRegionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerInitProviderRegionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderRegionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerInitProviderRegionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerInitProviderRegionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderRegionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderRegionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Instance in compute to populate routerApplianceInstance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderRouterApplianceInstanceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerInitProviderRouterApplianceInstanceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderRouterApplianceInstanceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerInitProviderRouterApplianceInstanceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerInitProviderRouterApplianceInstanceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderRouterApplianceInstanceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderRouterApplianceInstanceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in compute to populate routerApplianceInstance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderRouterApplianceInstanceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerInitProviderRouterApplianceInstanceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerInitProviderRouterApplianceInstanceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerInitProviderRouterApplianceInstanceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerInitProviderRouterApplianceInstanceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderRouterApplianceInstanceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerInitProviderRouterApplianceInstanceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<RouterPeerPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<RouterPeerPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterPeerPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterPeerPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterPeerPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterPeerPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RouterPeerStatus defines the observed state of RouterPeer.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<RouterPeerStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerStatusAtProvider {
    /// User-specified flag to indicate which mode to use for advertisement.
    /// Valid values of this enum field are: DEFAULT, CUSTOM
    /// Default value is DEFAULT.
    /// Possible values are: DEFAULT, CUSTOM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertiseMode")]
    #[builder(default)]
    pub advertise_mode: Option<String>,
    /// User-specified list of prefix groups to advertise in custom
    /// mode, which currently supports the following option:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertisedGroups")]
    #[builder(default)]
    pub advertised_groups: Option<Vec<String>>,
    /// User-specified list of individual IP ranges to advertise in
    /// custom mode. This field can only be populated if advertiseMode
    /// is CUSTOM and is advertised to all peers of the router. These IP
    /// ranges will be advertised in addition to any specified groups.
    /// Leave this field blank to advertise no custom IP ranges.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertisedIpRanges")]
    #[builder(default)]
    pub advertised_ip_ranges: Option<Vec<RouterPeerStatusAtProviderAdvertisedIpRanges>>,
    /// The priority of routes advertised to this BGP peer.
    /// Where there is more than one matching route of maximum
    /// length, the routes with the lowest priority value win.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertisedRoutePriority")]
    #[builder(default)]
    pub advertised_route_priority: Option<f64>,
    /// BFD configuration for the BGP peering.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bfd: Option<RouterPeerStatusAtProviderBfd>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customLearnedIpRanges")]
    #[builder(default)]
    pub custom_learned_ip_ranges: Option<Vec<RouterPeerStatusAtProviderCustomLearnedIpRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customLearnedRoutePriority")]
    #[builder(default)]
    pub custom_learned_route_priority: Option<f64>,
    /// The status of the BGP peer connection. If set to false, any active session
    /// with the peer is terminated and all associated routing information is removed.
    /// If set to true, the peer connection can be established with routing information.
    /// The default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// Enable IPv4 traffic over BGP Peer. It is enabled by default if the peerIpAddress is version 4.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIpv4")]
    #[builder(default)]
    pub enable_ipv4: Option<bool>,
    /// Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIpv6")]
    #[builder(default)]
    pub enable_ipv6: Option<bool>,
    /// an identifier for the resource with format projects/{{project}}/regions/{{region}}/routers/{{router}}/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Name of the interface the BGP peer is associated with.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interface: Option<String>,
    /// IP address of the interface inside Google Cloud Platform.
    /// Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    #[builder(default)]
    pub ip_address: Option<String>,
    /// IPv4 address of the interface inside Google Cloud Platform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4NexthopAddress")]
    #[builder(default)]
    pub ipv4_nexthop_address: Option<String>,
    /// IPv6 address of the interface inside Google Cloud Platform.
    /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
    /// If you do not specify the next hop addresses, Google Cloud automatically
    /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6NexthopAddress")]
    #[builder(default)]
    pub ipv6_nexthop_address: Option<String>,
    /// The resource that configures and manages this BGP peer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementType")]
    #[builder(default)]
    pub management_type: Option<String>,
    /// Configuration for MD5 authentication on the BGP session.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "md5AuthenticationKey")]
    #[builder(default)]
    pub md5_authentication_key: Option<RouterPeerStatusAtProviderMd5AuthenticationKey>,
    /// Peer BGP Autonomous System Number (ASN).
    /// Each BGP interface may use a different value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerAsn")]
    #[builder(default)]
    pub peer_asn: Option<f64>,
    /// IP address of the BGP interface outside Google Cloud Platform.
    /// Only IPv4 is supported. Required if ip_address is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpAddress")]
    #[builder(default)]
    pub peer_ip_address: Option<String>,
    /// IPv4 address of the BGP interface outside Google Cloud Platform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpv4NexthopAddress")]
    #[builder(default)]
    pub peer_ipv4_nexthop_address: Option<String>,
    /// IPv6 address of the BGP interface outside Google Cloud Platform.
    /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
    /// If you do not specify the next hop addresses, Google Cloud automatically
    /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIpv6NexthopAddress")]
    #[builder(default)]
    pub peer_ipv6_nexthop_address: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Region where the router and BgpPeer reside.
    /// If it is not provided, the provider region is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// The name of the Cloud Router in which this BgpPeer will be configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub router: Option<String>,
    /// The URI of the VM instance that is used as third-party router appliances
    /// such as Next Gen Firewalls, Virtual Routers, or Router Appliances.
    /// The VM instance must be located in zones contained in the same region as
    /// this Cloud Router. The VM instance is the peer side of the BGP session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerApplianceInstance")]
    #[builder(default)]
    pub router_appliance_instance: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerStatusAtProviderAdvertisedIpRanges {
    /// User-specified description for the IP range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The IP range to advertise. The value must be a
    /// CIDR-formatted string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub range: Option<String>,
}

/// BFD configuration for the BGP peering.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerStatusAtProviderBfd {
    /// The minimum interval, in milliseconds, between BFD control packets
    /// received from the peer router. The actual value is negotiated
    /// between the two routers and is equal to the greater of this value
    /// and the transmit interval of the other router. If set, this value
    /// must be between 1000 and 30000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReceiveInterval")]
    #[builder(default)]
    pub min_receive_interval: Option<f64>,
    /// The minimum interval, in milliseconds, between BFD control packets
    /// transmitted to the peer router. The actual value is negotiated
    /// between the two routers and is equal to the greater of this value
    /// and the corresponding receive interval of the other router. If set,
    /// this value must be between 1000 and 30000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTransmitInterval")]
    #[builder(default)]
    pub min_transmit_interval: Option<f64>,
    /// The number of consecutive BFD packets that must be missed before
    /// BFD declares that a peer is unavailable. If set, the value must
    /// be a value between 5 and 16.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub multiplier: Option<f64>,
    /// The BFD session initialization mode for this BGP peer.
    /// If set to ACTIVE, the Cloud Router will initiate the BFD session
    /// for this BGP peer. If set to PASSIVE, the Cloud Router will wait
    /// for the peer router to initiate the BFD session for this BGP peer.
    /// If set to DISABLED, BFD is disabled for this BGP peer.
    /// Possible values are: ACTIVE, DISABLED, PASSIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionInitializationMode")]
    #[builder(default)]
    pub session_initialization_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerStatusAtProviderCustomLearnedIpRanges {
    /// The IP range to advertise. The value must be a
    /// CIDR-formatted string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub range: Option<String>,
}

/// Configuration for MD5 authentication on the BGP session.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterPeerStatusAtProviderMd5AuthenticationKey {
    /// Name used to identify the key. Must be unique within a router. Must comply with RFC1035.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}


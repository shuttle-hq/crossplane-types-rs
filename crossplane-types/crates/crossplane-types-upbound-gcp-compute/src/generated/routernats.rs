// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RouterNATSpec defines the desired state of RouterNAT
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "RouterNAT", plural = "routernats")]
#[kube(status = "RouterNATStatus")]
pub struct RouterNATSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<RouterNATDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RouterNATForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<RouterNATInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<RouterNATProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<RouterNATPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<RouterNATWriteConnectionSecretToRef>,
}

/// RouterNATSpec defines the desired state of RouterNAT
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProvider {
    /// The network tier to use when automatically reserving NAT IP addresses.
    /// Must be one of: PREMIUM, STANDARD. If not specified, then the current
    /// project-level default tier is used.
    /// Possible values are: PREMIUM, STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoNetworkTier")]
    #[builder(default)]
    pub auto_network_tier: Option<String>,
    /// A list of URLs of the IP resources to be drained. These IPs must be
    /// valid static external IPs that have been assigned to the NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainNatIps")]
    #[builder(default)]
    pub drain_nat_ips: Option<Vec<String>>,
    /// Enable Dynamic Port Allocation.
    /// If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
    /// If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
    /// If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
    /// If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
    /// Mutually exclusive with enableEndpointIndependentMapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDynamicPortAllocation")]
    #[builder(default)]
    pub enable_dynamic_port_allocation: Option<bool>,
    /// Enable endpoint independent mapping.
    /// For more information see the official documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableEndpointIndependentMapping")]
    #[builder(default)]
    pub enable_endpoint_independent_mapping: Option<bool>,
    /// Specifies the endpoint Types supported by the NAT Gateway.
    /// Supported values include:
    /// ENDPOINT_TYPE_VM, ENDPOINT_TYPE_SWG,
    /// ENDPOINT_TYPE_MANAGED_PROXY_LB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointTypes")]
    #[builder(default)]
    pub endpoint_types: Option<Vec<String>>,
    /// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpIdleTimeoutSec")]
    #[builder(default)]
    pub icmp_idle_timeout_sec: Option<f64>,
    /// Configuration for logging on NAT
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<RouterNATForProviderLogConfig>,
    /// Maximum number of ports allocated to a VM from this NAT.
    /// This field can only be set when enableDynamicPortAllocation is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPortsPerVm")]
    #[builder(default)]
    pub max_ports_per_vm: Option<f64>,
    /// Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port allocation if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minPortsPerVm")]
    #[builder(default)]
    pub min_ports_per_vm: Option<f64>,
    /// How external IPs should be allocated for this NAT. Valid values are
    /// AUTO_ONLY for only allowing NAT IPs allocated by Google Cloud
    /// Platform, or MANUAL_ONLY for only user-allocated NAT IP addresses.
    /// Possible values are: MANUAL_ONLY, AUTO_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIpAllocateOption")]
    #[builder(default)]
    pub nat_ip_allocate_option: Option<String>,
    /// Self-links of NAT IPs. Only valid if natIpAllocateOption
    /// is set to MANUAL_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIps")]
    #[builder(default)]
    pub nat_ips: Option<Vec<String>>,
    /// References to Address in compute to populate natIps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIpsRefs")]
    #[builder(default)]
    pub nat_ips_refs: Option<Vec<RouterNATForProviderNatIpsRefs>>,
    /// Selector for a list of Address in compute to populate natIps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIpsSelector")]
    #[builder(default)]
    pub nat_ips_selector: Option<RouterNATForProviderNatIpsSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Region where the router and NAT reside.
    pub region: String,
    /// The name of the Cloud Router in which this NAT will be configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub router: Option<String>,
    /// Reference to a Router in compute to populate router.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerRef")]
    #[builder(default)]
    pub router_ref: Option<RouterNATForProviderRouterRef>,
    /// Selector for a Router in compute to populate router.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerSelector")]
    #[builder(default)]
    pub router_selector: Option<RouterNATForProviderRouterSelector>,
    /// A list of rules associated with this NAT.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub rules: Option<Vec<RouterNATForProviderRules>>,
    /// How NAT should be configured per Subnetwork.
    /// If ALL_SUBNETWORKS_ALL_IP_RANGES, all of the
    /// IP ranges in every Subnetwork are allowed to Nat.
    /// If ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, all of the primary IP
    /// ranges in every Subnetwork are allowed to Nat.
    /// LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat
    /// (specified in the field subnetwork below). Note that if this field
    /// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
    /// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
    /// other RouterNat section in any Router for this network in this region.
    /// Possible values are: ALL_SUBNETWORKS_ALL_IP_RANGES, ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, LIST_OF_SUBNETWORKS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSubnetworkIpRangesToNat")]
    #[builder(default)]
    pub source_subnetwork_ip_ranges_to_nat: Option<String>,
    /// One or more subnetwork NAT configurations. Only used if
    /// source_subnetwork_ip_ranges_to_nat is set to LIST_OF_SUBNETWORKS
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subnetwork: Option<Vec<RouterNATForProviderSubnetwork>>,
    /// Timeout (in seconds) for TCP established connections.
    /// Defaults to 1200s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpEstablishedIdleTimeoutSec")]
    #[builder(default)]
    pub tcp_established_idle_timeout_sec: Option<f64>,
    /// Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
    /// Defaults to 120s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpTimeWaitTimeoutSec")]
    #[builder(default)]
    pub tcp_time_wait_timeout_sec: Option<f64>,
    /// Timeout (in seconds) for TCP transitory connections.
    /// Defaults to 30s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpTransitoryIdleTimeoutSec")]
    #[builder(default)]
    pub tcp_transitory_idle_timeout_sec: Option<f64>,
    /// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpIdleTimeoutSec")]
    #[builder(default)]
    pub udp_idle_timeout_sec: Option<f64>,
}

/// Configuration for logging on NAT
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderLogConfig {
    /// Indicates whether or not to export logs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// Specifies the desired filtering of logs on this NAT.
    /// Possible values are: ERRORS_ONLY, TRANSLATIONS_ONLY, ALL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub filter: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderNatIpsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATForProviderNatIpsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderNatIpsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATForProviderNatIpsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATForProviderNatIpsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderNatIpsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderNatIpsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Address in compute to populate natIps.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderNatIpsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATForProviderNatIpsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderNatIpsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATForProviderNatIpsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATForProviderNatIpsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderNatIpsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderNatIpsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Router in compute to populate router.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRouterRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATForProviderRouterRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRouterRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATForProviderRouterRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATForProviderRouterRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderRouterRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderRouterRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Router in compute to populate router.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRouterSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATForProviderRouterSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRouterSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATForProviderRouterSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATForProviderRouterSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderRouterSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderRouterSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRules {
    /// The action to be enforced for traffic that matches this rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<RouterNATForProviderRulesAction>,
    /// An optional description of this rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// CEL expression that specifies the match condition that egress traffic from a VM is evaluated against.
    /// If it evaluates to true, the corresponding action is enforced.
    /// The following examples are valid match expressions for public NAT:
    /// "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')"
    /// "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'"
    /// The following example is a valid match expression for private NAT:
    /// "nexthop.hub == 'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1'"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    #[builder(default)]
    pub r#match: Option<String>,
    /// An integer uniquely identifying a rule in the list.
    /// The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNumber")]
    #[builder(default)]
    pub rule_number: Option<f64>,
}

/// The action to be enforced for traffic that matches this rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRulesAction {
    /// A list of URLs of the IP resources used for this NAT rule.
    /// These IP addresses must be valid static external IP addresses assigned to the project.
    /// This field is used for public NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatActiveIps")]
    #[builder(default)]
    pub source_nat_active_ips: Option<Vec<String>>,
    /// References to Address in compute to populate sourceNatActiveIps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatActiveIpsRefs")]
    #[builder(default)]
    pub source_nat_active_ips_refs: Option<Vec<RouterNATForProviderRulesActionSourceNatActiveIpsRefs>>,
    /// Selector for a list of Address in compute to populate sourceNatActiveIps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatActiveIpsSelector")]
    #[builder(default)]
    pub source_nat_active_ips_selector: Option<RouterNATForProviderRulesActionSourceNatActiveIpsSelector>,
    /// A list of URLs of the IP resources to be drained.
    /// These IPs must be valid static external IPs that have been assigned to the NAT.
    /// These IPs should be used for updating/patching a NAT rule only.
    /// This field is used for public NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatDrainIps")]
    #[builder(default)]
    pub source_nat_drain_ips: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRulesActionSourceNatActiveIpsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATForProviderRulesActionSourceNatActiveIpsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRulesActionSourceNatActiveIpsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATForProviderRulesActionSourceNatActiveIpsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATForProviderRulesActionSourceNatActiveIpsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderRulesActionSourceNatActiveIpsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderRulesActionSourceNatActiveIpsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Address in compute to populate sourceNatActiveIps.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRulesActionSourceNatActiveIpsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATForProviderRulesActionSourceNatActiveIpsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderRulesActionSourceNatActiveIpsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATForProviderRulesActionSourceNatActiveIpsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATForProviderRulesActionSourceNatActiveIpsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderRulesActionSourceNatActiveIpsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderRulesActionSourceNatActiveIpsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderSubnetwork {
    /// Self-link of subnetwork to NAT
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Reference to a Subnetwork in compute to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default)]
    pub name_ref: Option<RouterNATForProviderSubnetworkNameRef>,
    /// Selector for a Subnetwork in compute to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSelector")]
    #[builder(default)]
    pub name_selector: Option<RouterNATForProviderSubnetworkNameSelector>,
    /// List of the secondary ranges of the subnetwork that are allowed
    /// to use NAT. This can be populated only if
    /// LIST_OF_SECONDARY_IP_RANGES is one of the values in
    /// sourceIpRangesToNat
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryIpRangeNames")]
    #[builder(default)]
    pub secondary_ip_range_names: Option<Vec<String>>,
    /// List of options for which source IPs in the subnetwork
    /// should have NAT enabled. Supported values include:
    /// ALL_IP_RANGES, LIST_OF_SECONDARY_IP_RANGES,
    /// PRIMARY_IP_RANGE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIpRangesToNat")]
    #[builder(default)]
    pub source_ip_ranges_to_nat: Option<Vec<String>>,
}

/// Reference to a Subnetwork in compute to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderSubnetworkNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATForProviderSubnetworkNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderSubnetworkNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATForProviderSubnetworkNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATForProviderSubnetworkNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderSubnetworkNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderSubnetworkNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnetwork in compute to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderSubnetworkNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATForProviderSubnetworkNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATForProviderSubnetworkNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATForProviderSubnetworkNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATForProviderSubnetworkNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderSubnetworkNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATForProviderSubnetworkNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProvider {
    /// The network tier to use when automatically reserving NAT IP addresses.
    /// Must be one of: PREMIUM, STANDARD. If not specified, then the current
    /// project-level default tier is used.
    /// Possible values are: PREMIUM, STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoNetworkTier")]
    #[builder(default)]
    pub auto_network_tier: Option<String>,
    /// A list of URLs of the IP resources to be drained. These IPs must be
    /// valid static external IPs that have been assigned to the NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainNatIps")]
    #[builder(default)]
    pub drain_nat_ips: Option<Vec<String>>,
    /// Enable Dynamic Port Allocation.
    /// If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
    /// If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
    /// If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
    /// If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
    /// Mutually exclusive with enableEndpointIndependentMapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDynamicPortAllocation")]
    #[builder(default)]
    pub enable_dynamic_port_allocation: Option<bool>,
    /// Enable endpoint independent mapping.
    /// For more information see the official documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableEndpointIndependentMapping")]
    #[builder(default)]
    pub enable_endpoint_independent_mapping: Option<bool>,
    /// Specifies the endpoint Types supported by the NAT Gateway.
    /// Supported values include:
    /// ENDPOINT_TYPE_VM, ENDPOINT_TYPE_SWG,
    /// ENDPOINT_TYPE_MANAGED_PROXY_LB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointTypes")]
    #[builder(default)]
    pub endpoint_types: Option<Vec<String>>,
    /// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpIdleTimeoutSec")]
    #[builder(default)]
    pub icmp_idle_timeout_sec: Option<f64>,
    /// Configuration for logging on NAT
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<RouterNATInitProviderLogConfig>,
    /// Maximum number of ports allocated to a VM from this NAT.
    /// This field can only be set when enableDynamicPortAllocation is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPortsPerVm")]
    #[builder(default)]
    pub max_ports_per_vm: Option<f64>,
    /// Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port allocation if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minPortsPerVm")]
    #[builder(default)]
    pub min_ports_per_vm: Option<f64>,
    /// How external IPs should be allocated for this NAT. Valid values are
    /// AUTO_ONLY for only allowing NAT IPs allocated by Google Cloud
    /// Platform, or MANUAL_ONLY for only user-allocated NAT IP addresses.
    /// Possible values are: MANUAL_ONLY, AUTO_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIpAllocateOption")]
    #[builder(default)]
    pub nat_ip_allocate_option: Option<String>,
    /// Self-links of NAT IPs. Only valid if natIpAllocateOption
    /// is set to MANUAL_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIps")]
    #[builder(default)]
    pub nat_ips: Option<Vec<String>>,
    /// References to Address in compute to populate natIps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIpsRefs")]
    #[builder(default)]
    pub nat_ips_refs: Option<Vec<RouterNATInitProviderNatIpsRefs>>,
    /// Selector for a list of Address in compute to populate natIps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIpsSelector")]
    #[builder(default)]
    pub nat_ips_selector: Option<RouterNATInitProviderNatIpsSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// A list of rules associated with this NAT.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub rules: Option<Vec<RouterNATInitProviderRules>>,
    /// How NAT should be configured per Subnetwork.
    /// If ALL_SUBNETWORKS_ALL_IP_RANGES, all of the
    /// IP ranges in every Subnetwork are allowed to Nat.
    /// If ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, all of the primary IP
    /// ranges in every Subnetwork are allowed to Nat.
    /// LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat
    /// (specified in the field subnetwork below). Note that if this field
    /// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
    /// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
    /// other RouterNat section in any Router for this network in this region.
    /// Possible values are: ALL_SUBNETWORKS_ALL_IP_RANGES, ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, LIST_OF_SUBNETWORKS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSubnetworkIpRangesToNat")]
    #[builder(default)]
    pub source_subnetwork_ip_ranges_to_nat: Option<String>,
    /// One or more subnetwork NAT configurations. Only used if
    /// source_subnetwork_ip_ranges_to_nat is set to LIST_OF_SUBNETWORKS
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subnetwork: Option<Vec<RouterNATInitProviderSubnetwork>>,
    /// Timeout (in seconds) for TCP established connections.
    /// Defaults to 1200s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpEstablishedIdleTimeoutSec")]
    #[builder(default)]
    pub tcp_established_idle_timeout_sec: Option<f64>,
    /// Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
    /// Defaults to 120s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpTimeWaitTimeoutSec")]
    #[builder(default)]
    pub tcp_time_wait_timeout_sec: Option<f64>,
    /// Timeout (in seconds) for TCP transitory connections.
    /// Defaults to 30s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpTransitoryIdleTimeoutSec")]
    #[builder(default)]
    pub tcp_transitory_idle_timeout_sec: Option<f64>,
    /// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpIdleTimeoutSec")]
    #[builder(default)]
    pub udp_idle_timeout_sec: Option<f64>,
}

/// Configuration for logging on NAT
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderLogConfig {
    /// Indicates whether or not to export logs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// Specifies the desired filtering of logs on this NAT.
    /// Possible values are: ERRORS_ONLY, TRANSLATIONS_ONLY, ALL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub filter: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderNatIpsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATInitProviderNatIpsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderNatIpsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATInitProviderNatIpsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATInitProviderNatIpsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderNatIpsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderNatIpsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Address in compute to populate natIps.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderNatIpsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATInitProviderNatIpsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderNatIpsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATInitProviderNatIpsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATInitProviderNatIpsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderNatIpsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderNatIpsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderRules {
    /// The action to be enforced for traffic that matches this rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<RouterNATInitProviderRulesAction>,
    /// An optional description of this rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// CEL expression that specifies the match condition that egress traffic from a VM is evaluated against.
    /// If it evaluates to true, the corresponding action is enforced.
    /// The following examples are valid match expressions for public NAT:
    /// "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')"
    /// "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'"
    /// The following example is a valid match expression for private NAT:
    /// "nexthop.hub == 'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1'"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    #[builder(default)]
    pub r#match: Option<String>,
    /// An integer uniquely identifying a rule in the list.
    /// The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNumber")]
    #[builder(default)]
    pub rule_number: Option<f64>,
}

/// The action to be enforced for traffic that matches this rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderRulesAction {
    /// A list of URLs of the IP resources used for this NAT rule.
    /// These IP addresses must be valid static external IP addresses assigned to the project.
    /// This field is used for public NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatActiveIps")]
    #[builder(default)]
    pub source_nat_active_ips: Option<Vec<String>>,
    /// References to Address in compute to populate sourceNatActiveIps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatActiveIpsRefs")]
    #[builder(default)]
    pub source_nat_active_ips_refs: Option<Vec<RouterNATInitProviderRulesActionSourceNatActiveIpsRefs>>,
    /// Selector for a list of Address in compute to populate sourceNatActiveIps.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatActiveIpsSelector")]
    #[builder(default)]
    pub source_nat_active_ips_selector: Option<RouterNATInitProviderRulesActionSourceNatActiveIpsSelector>,
    /// A list of URLs of the IP resources to be drained.
    /// These IPs must be valid static external IPs that have been assigned to the NAT.
    /// These IPs should be used for updating/patching a NAT rule only.
    /// This field is used for public NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatDrainIps")]
    #[builder(default)]
    pub source_nat_drain_ips: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderRulesActionSourceNatActiveIpsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATInitProviderRulesActionSourceNatActiveIpsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderRulesActionSourceNatActiveIpsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATInitProviderRulesActionSourceNatActiveIpsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATInitProviderRulesActionSourceNatActiveIpsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderRulesActionSourceNatActiveIpsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderRulesActionSourceNatActiveIpsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Address in compute to populate sourceNatActiveIps.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderRulesActionSourceNatActiveIpsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATInitProviderRulesActionSourceNatActiveIpsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderRulesActionSourceNatActiveIpsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATInitProviderRulesActionSourceNatActiveIpsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATInitProviderRulesActionSourceNatActiveIpsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderRulesActionSourceNatActiveIpsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderRulesActionSourceNatActiveIpsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderSubnetwork {
    /// Self-link of subnetwork to NAT
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Reference to a Subnetwork in compute to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default)]
    pub name_ref: Option<RouterNATInitProviderSubnetworkNameRef>,
    /// Selector for a Subnetwork in compute to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSelector")]
    #[builder(default)]
    pub name_selector: Option<RouterNATInitProviderSubnetworkNameSelector>,
    /// List of the secondary ranges of the subnetwork that are allowed
    /// to use NAT. This can be populated only if
    /// LIST_OF_SECONDARY_IP_RANGES is one of the values in
    /// sourceIpRangesToNat
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryIpRangeNames")]
    #[builder(default)]
    pub secondary_ip_range_names: Option<Vec<String>>,
    /// List of options for which source IPs in the subnetwork
    /// should have NAT enabled. Supported values include:
    /// ALL_IP_RANGES, LIST_OF_SECONDARY_IP_RANGES,
    /// PRIMARY_IP_RANGE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIpRangesToNat")]
    #[builder(default)]
    pub source_ip_ranges_to_nat: Option<Vec<String>>,
}

/// Reference to a Subnetwork in compute to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderSubnetworkNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATInitProviderSubnetworkNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderSubnetworkNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATInitProviderSubnetworkNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATInitProviderSubnetworkNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderSubnetworkNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderSubnetworkNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnetwork in compute to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderSubnetworkNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATInitProviderSubnetworkNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATInitProviderSubnetworkNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATInitProviderSubnetworkNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATInitProviderSubnetworkNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderSubnetworkNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATInitProviderSubnetworkNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<RouterNATPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<RouterNATPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RouterNATPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RouterNATPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RouterNATPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RouterNATPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RouterNATStatus defines the observed state of RouterNAT.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<RouterNATStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATStatusAtProvider {
    /// The network tier to use when automatically reserving NAT IP addresses.
    /// Must be one of: PREMIUM, STANDARD. If not specified, then the current
    /// project-level default tier is used.
    /// Possible values are: PREMIUM, STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoNetworkTier")]
    #[builder(default)]
    pub auto_network_tier: Option<String>,
    /// A list of URLs of the IP resources to be drained. These IPs must be
    /// valid static external IPs that have been assigned to the NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainNatIps")]
    #[builder(default)]
    pub drain_nat_ips: Option<Vec<String>>,
    /// Enable Dynamic Port Allocation.
    /// If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
    /// If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
    /// If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
    /// If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
    /// Mutually exclusive with enableEndpointIndependentMapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDynamicPortAllocation")]
    #[builder(default)]
    pub enable_dynamic_port_allocation: Option<bool>,
    /// Enable endpoint independent mapping.
    /// For more information see the official documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableEndpointIndependentMapping")]
    #[builder(default)]
    pub enable_endpoint_independent_mapping: Option<bool>,
    /// Specifies the endpoint Types supported by the NAT Gateway.
    /// Supported values include:
    /// ENDPOINT_TYPE_VM, ENDPOINT_TYPE_SWG,
    /// ENDPOINT_TYPE_MANAGED_PROXY_LB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointTypes")]
    #[builder(default)]
    pub endpoint_types: Option<Vec<String>>,
    /// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpIdleTimeoutSec")]
    #[builder(default)]
    pub icmp_idle_timeout_sec: Option<f64>,
    /// an identifier for the resource with format {{project}}/{{region}}/{{router}}/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Configuration for logging on NAT
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<RouterNATStatusAtProviderLogConfig>,
    /// Maximum number of ports allocated to a VM from this NAT.
    /// This field can only be set when enableDynamicPortAllocation is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPortsPerVm")]
    #[builder(default)]
    pub max_ports_per_vm: Option<f64>,
    /// Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port allocation if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minPortsPerVm")]
    #[builder(default)]
    pub min_ports_per_vm: Option<f64>,
    /// How external IPs should be allocated for this NAT. Valid values are
    /// AUTO_ONLY for only allowing NAT IPs allocated by Google Cloud
    /// Platform, or MANUAL_ONLY for only user-allocated NAT IP addresses.
    /// Possible values are: MANUAL_ONLY, AUTO_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIpAllocateOption")]
    #[builder(default)]
    pub nat_ip_allocate_option: Option<String>,
    /// Self-links of NAT IPs. Only valid if natIpAllocateOption
    /// is set to MANUAL_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natIps")]
    #[builder(default)]
    pub nat_ips: Option<Vec<String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Region where the router and NAT reside.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// The name of the Cloud Router in which this NAT will be configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub router: Option<String>,
    /// A list of rules associated with this NAT.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub rules: Option<Vec<RouterNATStatusAtProviderRules>>,
    /// How NAT should be configured per Subnetwork.
    /// If ALL_SUBNETWORKS_ALL_IP_RANGES, all of the
    /// IP ranges in every Subnetwork are allowed to Nat.
    /// If ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, all of the primary IP
    /// ranges in every Subnetwork are allowed to Nat.
    /// LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat
    /// (specified in the field subnetwork below). Note that if this field
    /// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
    /// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
    /// other RouterNat section in any Router for this network in this region.
    /// Possible values are: ALL_SUBNETWORKS_ALL_IP_RANGES, ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, LIST_OF_SUBNETWORKS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSubnetworkIpRangesToNat")]
    #[builder(default)]
    pub source_subnetwork_ip_ranges_to_nat: Option<String>,
    /// One or more subnetwork NAT configurations. Only used if
    /// source_subnetwork_ip_ranges_to_nat is set to LIST_OF_SUBNETWORKS
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subnetwork: Option<Vec<RouterNATStatusAtProviderSubnetwork>>,
    /// Timeout (in seconds) for TCP established connections.
    /// Defaults to 1200s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpEstablishedIdleTimeoutSec")]
    #[builder(default)]
    pub tcp_established_idle_timeout_sec: Option<f64>,
    /// Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
    /// Defaults to 120s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpTimeWaitTimeoutSec")]
    #[builder(default)]
    pub tcp_time_wait_timeout_sec: Option<f64>,
    /// Timeout (in seconds) for TCP transitory connections.
    /// Defaults to 30s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpTransitoryIdleTimeoutSec")]
    #[builder(default)]
    pub tcp_transitory_idle_timeout_sec: Option<f64>,
    /// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpIdleTimeoutSec")]
    #[builder(default)]
    pub udp_idle_timeout_sec: Option<f64>,
}

/// Configuration for logging on NAT
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATStatusAtProviderLogConfig {
    /// Indicates whether or not to export logs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// Specifies the desired filtering of logs on this NAT.
    /// Possible values are: ERRORS_ONLY, TRANSLATIONS_ONLY, ALL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub filter: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATStatusAtProviderRules {
    /// The action to be enforced for traffic that matches this rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<RouterNATStatusAtProviderRulesAction>,
    /// An optional description of this rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// CEL expression that specifies the match condition that egress traffic from a VM is evaluated against.
    /// If it evaluates to true, the corresponding action is enforced.
    /// The following examples are valid match expressions for public NAT:
    /// "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')"
    /// "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'"
    /// The following example is a valid match expression for private NAT:
    /// "nexthop.hub == 'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1'"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    #[builder(default)]
    pub r#match: Option<String>,
    /// An integer uniquely identifying a rule in the list.
    /// The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNumber")]
    #[builder(default)]
    pub rule_number: Option<f64>,
}

/// The action to be enforced for traffic that matches this rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATStatusAtProviderRulesAction {
    /// A list of URLs of the IP resources used for this NAT rule.
    /// These IP addresses must be valid static external IP addresses assigned to the project.
    /// This field is used for public NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatActiveIps")]
    #[builder(default)]
    pub source_nat_active_ips: Option<Vec<String>>,
    /// A list of URLs of the IP resources to be drained.
    /// These IPs must be valid static external IPs that have been assigned to the NAT.
    /// These IPs should be used for updating/patching a NAT rule only.
    /// This field is used for public NAT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceNatDrainIps")]
    #[builder(default)]
    pub source_nat_drain_ips: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RouterNATStatusAtProviderSubnetwork {
    /// Self-link of subnetwork to NAT
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// List of the secondary ranges of the subnetwork that are allowed
    /// to use NAT. This can be populated only if
    /// LIST_OF_SECONDARY_IP_RANGES is one of the values in
    /// sourceIpRangesToNat
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryIpRangeNames")]
    #[builder(default)]
    pub secondary_ip_range_names: Option<Vec<String>>,
    /// List of options for which source IPs in the subnetwork
    /// should have NAT enabled. Supported values include:
    /// ALL_IP_RANGES, LIST_OF_SECONDARY_IP_RANGES,
    /// PRIMARY_IP_RANGE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIpRangesToNat")]
    #[builder(default)]
    pub source_ip_ranges_to_nat: Option<Vec<String>>,
}


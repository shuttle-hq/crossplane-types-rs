// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FirewallPolicyRuleSpec defines the desired state of FirewallPolicyRule
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "FirewallPolicyRule", plural = "firewallpolicyrules")]
#[kube(status = "FirewallPolicyRuleStatus")]
pub struct FirewallPolicyRuleSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<FirewallPolicyRuleDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FirewallPolicyRuleForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<FirewallPolicyRuleInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<FirewallPolicyRuleProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<FirewallPolicyRulePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<FirewallPolicyRuleWriteConnectionSecretToRef>,
}

/// FirewallPolicyRuleSpec defines the desired state of FirewallPolicyRule
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProvider {
    /// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "goto_next" and "apply_security_profile_group".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// An optional description for this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The direction in which this rule applies. Possible values: INGRESS, EGRESS
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub direction: Option<String>,
    /// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub disabled: Option<bool>,
    /// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableLogging")]
    #[builder(default)]
    pub enable_logging: Option<bool>,
    /// The firewall policy of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicy")]
    #[builder(default)]
    pub firewall_policy: Option<String>,
    /// Reference to a FirewallPolicy in compute to populate firewallPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicyRef")]
    #[builder(default)]
    pub firewall_policy_ref: Option<FirewallPolicyRuleForProviderFirewallPolicyRef>,
    /// Selector for a FirewallPolicy in compute to populate firewallPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicySelector")]
    #[builder(default)]
    pub firewall_policy_selector: Option<FirewallPolicyRuleForProviderFirewallPolicySelector>,
    /// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    #[builder(default)]
    pub r#match: Option<FirewallPolicyRuleForProviderMatch>,
    /// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// A fully-qualified URL of a SecurityProfileGroup resource. Example: https://networksecurity.googleapis.com/v1/organizations/{organizationId}/locations/global/securityProfileGroups/my-security-profile-group. It must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityProfileGroup")]
    #[builder(default)]
    pub security_profile_group: Option<String>,
    /// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetResources")]
    #[builder(default)]
    pub target_resources: Option<Vec<String>>,
    /// A list of service accounts indicating the sets of instances that are applied with this rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetServiceAccounts")]
    #[builder(default)]
    pub target_service_accounts: Option<Vec<String>>,
    /// Boolean flag indicating if the traffic should be TLS decrypted. It can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInspect")]
    #[builder(default)]
    pub tls_inspect: Option<bool>,
}

/// Reference to a FirewallPolicy in compute to populate firewallPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderFirewallPolicyRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRuleForProviderFirewallPolicyRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderFirewallPolicyRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRuleForProviderFirewallPolicyRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRuleForProviderFirewallPolicyRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleForProviderFirewallPolicyRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleForProviderFirewallPolicyRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a FirewallPolicy in compute to populate firewallPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderFirewallPolicySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRuleForProviderFirewallPolicySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderFirewallPolicySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRuleForProviderFirewallPolicySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRuleForProviderFirewallPolicySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleForProviderFirewallPolicySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleForProviderFirewallPolicySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderMatch {
    /// Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10. Destination address groups is only supported in Egress rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destAddressGroups")]
    #[builder(default)]
    pub dest_address_groups: Option<Vec<String>>,
    /// References to AddressGroup in networksecurity to populate destAddressGroups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destAddressGroupsRefs")]
    #[builder(default)]
    pub dest_address_groups_refs: Option<Vec<FirewallPolicyRuleForProviderMatchDestAddressGroupsRefs>>,
    /// Selector for a list of AddressGroup in networksecurity to populate destAddressGroups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destAddressGroupsSelector")]
    #[builder(default)]
    pub dest_address_groups_selector: Option<FirewallPolicyRuleForProviderMatchDestAddressGroupsSelector>,
    /// Domain names that will be used to match against the resolved domain name of destination of traffic. Can only be specified if DIRECTION is egress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destFqdns")]
    #[builder(default)]
    pub dest_fqdns: Option<Vec<String>>,
    /// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destIpRanges")]
    #[builder(default)]
    pub dest_ip_ranges: Option<Vec<String>>,
    /// The Unicode country codes whose IP addresses will be used to match against the source of traffic. Can only be specified if DIRECTION is egress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destRegionCodes")]
    #[builder(default)]
    pub dest_region_codes: Option<Vec<String>>,
    /// Name of the Google Cloud Threat Intelligence list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destThreatIntelligences")]
    #[builder(default)]
    pub dest_threat_intelligences: Option<Vec<String>>,
    /// Pairs of IP protocols and ports that the rule should match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layer4Configs")]
    #[builder(default)]
    pub layer4_configs: Option<Vec<FirewallPolicyRuleForProviderMatchLayer4Configs>>,
    /// Address groups which should be matched against the traffic source. Maximum number of source address groups is 10. Source address groups is only supported in Ingress rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcAddressGroups")]
    #[builder(default)]
    pub src_address_groups: Option<Vec<String>>,
    /// Domain names that will be used to match against the resolved domain name of source of traffic. Can only be specified if DIRECTION is ingress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcFqdns")]
    #[builder(default)]
    pub src_fqdns: Option<Vec<String>>,
    /// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcIpRanges")]
    #[builder(default)]
    pub src_ip_ranges: Option<Vec<String>>,
    /// The Unicode country codes whose IP addresses will be used to match against the source of traffic. Can only be specified if DIRECTION is ingress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcRegionCodes")]
    #[builder(default)]
    pub src_region_codes: Option<Vec<String>>,
    /// Name of the Google Cloud Threat Intelligence list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcThreatIntelligences")]
    #[builder(default)]
    pub src_threat_intelligences: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderMatchDestAddressGroupsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRuleForProviderMatchDestAddressGroupsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderMatchDestAddressGroupsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRuleForProviderMatchDestAddressGroupsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRuleForProviderMatchDestAddressGroupsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleForProviderMatchDestAddressGroupsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleForProviderMatchDestAddressGroupsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of AddressGroup in networksecurity to populate destAddressGroups.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderMatchDestAddressGroupsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRuleForProviderMatchDestAddressGroupsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderMatchDestAddressGroupsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRuleForProviderMatchDestAddressGroupsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRuleForProviderMatchDestAddressGroupsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleForProviderMatchDestAddressGroupsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleForProviderMatchDestAddressGroupsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleForProviderMatchLayer4Configs {
    /// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    #[builder(default)]
    pub ip_protocol: Option<String>,
    /// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ports: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProvider {
    /// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "goto_next" and "apply_security_profile_group".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// An optional description for this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The direction in which this rule applies. Possible values: INGRESS, EGRESS
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub direction: Option<String>,
    /// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub disabled: Option<bool>,
    /// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableLogging")]
    #[builder(default)]
    pub enable_logging: Option<bool>,
    /// The firewall policy of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicy")]
    #[builder(default)]
    pub firewall_policy: Option<String>,
    /// Reference to a FirewallPolicy in compute to populate firewallPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicyRef")]
    #[builder(default)]
    pub firewall_policy_ref: Option<FirewallPolicyRuleInitProviderFirewallPolicyRef>,
    /// Selector for a FirewallPolicy in compute to populate firewallPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicySelector")]
    #[builder(default)]
    pub firewall_policy_selector: Option<FirewallPolicyRuleInitProviderFirewallPolicySelector>,
    /// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    #[builder(default)]
    pub r#match: Option<FirewallPolicyRuleInitProviderMatch>,
    /// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// A fully-qualified URL of a SecurityProfileGroup resource. Example: https://networksecurity.googleapis.com/v1/organizations/{organizationId}/locations/global/securityProfileGroups/my-security-profile-group. It must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityProfileGroup")]
    #[builder(default)]
    pub security_profile_group: Option<String>,
    /// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetResources")]
    #[builder(default)]
    pub target_resources: Option<Vec<String>>,
    /// A list of service accounts indicating the sets of instances that are applied with this rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetServiceAccounts")]
    #[builder(default)]
    pub target_service_accounts: Option<Vec<String>>,
    /// Boolean flag indicating if the traffic should be TLS decrypted. It can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInspect")]
    #[builder(default)]
    pub tls_inspect: Option<bool>,
}

/// Reference to a FirewallPolicy in compute to populate firewallPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderFirewallPolicyRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRuleInitProviderFirewallPolicyRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderFirewallPolicyRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRuleInitProviderFirewallPolicyRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRuleInitProviderFirewallPolicyRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleInitProviderFirewallPolicyRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleInitProviderFirewallPolicyRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a FirewallPolicy in compute to populate firewallPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderFirewallPolicySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRuleInitProviderFirewallPolicySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderFirewallPolicySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRuleInitProviderFirewallPolicySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRuleInitProviderFirewallPolicySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleInitProviderFirewallPolicySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleInitProviderFirewallPolicySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderMatch {
    /// Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10. Destination address groups is only supported in Egress rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destAddressGroups")]
    #[builder(default)]
    pub dest_address_groups: Option<Vec<String>>,
    /// References to AddressGroup in networksecurity to populate destAddressGroups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destAddressGroupsRefs")]
    #[builder(default)]
    pub dest_address_groups_refs: Option<Vec<FirewallPolicyRuleInitProviderMatchDestAddressGroupsRefs>>,
    /// Selector for a list of AddressGroup in networksecurity to populate destAddressGroups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destAddressGroupsSelector")]
    #[builder(default)]
    pub dest_address_groups_selector: Option<FirewallPolicyRuleInitProviderMatchDestAddressGroupsSelector>,
    /// Domain names that will be used to match against the resolved domain name of destination of traffic. Can only be specified if DIRECTION is egress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destFqdns")]
    #[builder(default)]
    pub dest_fqdns: Option<Vec<String>>,
    /// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destIpRanges")]
    #[builder(default)]
    pub dest_ip_ranges: Option<Vec<String>>,
    /// The Unicode country codes whose IP addresses will be used to match against the source of traffic. Can only be specified if DIRECTION is egress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destRegionCodes")]
    #[builder(default)]
    pub dest_region_codes: Option<Vec<String>>,
    /// Name of the Google Cloud Threat Intelligence list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destThreatIntelligences")]
    #[builder(default)]
    pub dest_threat_intelligences: Option<Vec<String>>,
    /// Pairs of IP protocols and ports that the rule should match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layer4Configs")]
    #[builder(default)]
    pub layer4_configs: Option<Vec<FirewallPolicyRuleInitProviderMatchLayer4Configs>>,
    /// Address groups which should be matched against the traffic source. Maximum number of source address groups is 10. Source address groups is only supported in Ingress rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcAddressGroups")]
    #[builder(default)]
    pub src_address_groups: Option<Vec<String>>,
    /// Domain names that will be used to match against the resolved domain name of source of traffic. Can only be specified if DIRECTION is ingress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcFqdns")]
    #[builder(default)]
    pub src_fqdns: Option<Vec<String>>,
    /// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcIpRanges")]
    #[builder(default)]
    pub src_ip_ranges: Option<Vec<String>>,
    /// The Unicode country codes whose IP addresses will be used to match against the source of traffic. Can only be specified if DIRECTION is ingress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcRegionCodes")]
    #[builder(default)]
    pub src_region_codes: Option<Vec<String>>,
    /// Name of the Google Cloud Threat Intelligence list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcThreatIntelligences")]
    #[builder(default)]
    pub src_threat_intelligences: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderMatchDestAddressGroupsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRuleInitProviderMatchDestAddressGroupsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderMatchDestAddressGroupsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRuleInitProviderMatchDestAddressGroupsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRuleInitProviderMatchDestAddressGroupsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleInitProviderMatchDestAddressGroupsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleInitProviderMatchDestAddressGroupsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of AddressGroup in networksecurity to populate destAddressGroups.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderMatchDestAddressGroupsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRuleInitProviderMatchDestAddressGroupsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderMatchDestAddressGroupsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRuleInitProviderMatchDestAddressGroupsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRuleInitProviderMatchDestAddressGroupsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleInitProviderMatchDestAddressGroupsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleInitProviderMatchDestAddressGroupsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleInitProviderMatchLayer4Configs {
    /// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    #[builder(default)]
    pub ip_protocol: Option<String>,
    /// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ports: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRuleProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRuleProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRuleProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRuleProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRulePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<FirewallPolicyRulePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<FirewallPolicyRulePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRulePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FirewallPolicyRulePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRulePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FirewallPolicyRulePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FirewallPolicyRulePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRulePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyRulePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRulePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FirewallPolicyRuleStatus defines the observed state of FirewallPolicyRule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<FirewallPolicyRuleStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleStatusAtProvider {
    /// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "goto_next" and "apply_security_profile_group".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// An optional description for this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The direction in which this rule applies. Possible values: INGRESS, EGRESS
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub direction: Option<String>,
    /// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub disabled: Option<bool>,
    /// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableLogging")]
    #[builder(default)]
    pub enable_logging: Option<bool>,
    /// The firewall policy of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicy")]
    #[builder(default)]
    pub firewall_policy: Option<String>,
    /// an identifier for the resource with format locations/global/firewallPolicies/{{firewall_policy}}/rules/{{priority}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub kind: Option<String>,
    /// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    #[builder(default)]
    pub r#match: Option<FirewallPolicyRuleStatusAtProviderMatch>,
    /// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub priority: Option<f64>,
    /// Calculation of the complexity of a single firewall policy rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleTupleCount")]
    #[builder(default)]
    pub rule_tuple_count: Option<f64>,
    /// A fully-qualified URL of a SecurityProfileGroup resource. Example: https://networksecurity.googleapis.com/v1/organizations/{organizationId}/locations/global/securityProfileGroups/my-security-profile-group. It must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityProfileGroup")]
    #[builder(default)]
    pub security_profile_group: Option<String>,
    /// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetResources")]
    #[builder(default)]
    pub target_resources: Option<Vec<String>>,
    /// A list of service accounts indicating the sets of instances that are applied with this rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetServiceAccounts")]
    #[builder(default)]
    pub target_service_accounts: Option<Vec<String>>,
    /// Boolean flag indicating if the traffic should be TLS decrypted. It can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInspect")]
    #[builder(default)]
    pub tls_inspect: Option<bool>,
}

/// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleStatusAtProviderMatch {
    /// Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10. Destination address groups is only supported in Egress rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destAddressGroups")]
    #[builder(default)]
    pub dest_address_groups: Option<Vec<String>>,
    /// Domain names that will be used to match against the resolved domain name of destination of traffic. Can only be specified if DIRECTION is egress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destFqdns")]
    #[builder(default)]
    pub dest_fqdns: Option<Vec<String>>,
    /// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destIpRanges")]
    #[builder(default)]
    pub dest_ip_ranges: Option<Vec<String>>,
    /// The Unicode country codes whose IP addresses will be used to match against the source of traffic. Can only be specified if DIRECTION is egress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destRegionCodes")]
    #[builder(default)]
    pub dest_region_codes: Option<Vec<String>>,
    /// Name of the Google Cloud Threat Intelligence list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destThreatIntelligences")]
    #[builder(default)]
    pub dest_threat_intelligences: Option<Vec<String>>,
    /// Pairs of IP protocols and ports that the rule should match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layer4Configs")]
    #[builder(default)]
    pub layer4_configs: Option<Vec<FirewallPolicyRuleStatusAtProviderMatchLayer4Configs>>,
    /// Address groups which should be matched against the traffic source. Maximum number of source address groups is 10. Source address groups is only supported in Ingress rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcAddressGroups")]
    #[builder(default)]
    pub src_address_groups: Option<Vec<String>>,
    /// Domain names that will be used to match against the resolved domain name of source of traffic. Can only be specified if DIRECTION is ingress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcFqdns")]
    #[builder(default)]
    pub src_fqdns: Option<Vec<String>>,
    /// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcIpRanges")]
    #[builder(default)]
    pub src_ip_ranges: Option<Vec<String>>,
    /// The Unicode country codes whose IP addresses will be used to match against the source of traffic. Can only be specified if DIRECTION is ingress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcRegionCodes")]
    #[builder(default)]
    pub src_region_codes: Option<Vec<String>>,
    /// Name of the Google Cloud Threat Intelligence list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcThreatIntelligences")]
    #[builder(default)]
    pub src_threat_intelligences: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FirewallPolicyRuleStatusAtProviderMatchLayer4Configs {
    /// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocol")]
    #[builder(default)]
    pub ip_protocol: Option<String>,
    /// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ports: Option<Vec<String>>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RegionBackendServiceSpec defines the desired state of RegionBackendService
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "RegionBackendService", plural = "regionbackendservices")]
#[kube(status = "RegionBackendServiceStatus")]
pub struct RegionBackendServiceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<RegionBackendServiceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RegionBackendServiceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<RegionBackendServiceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<RegionBackendServiceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<RegionBackendServicePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<RegionBackendServiceWriteConnectionSecretToRef>,
}

/// RegionBackendServiceSpec defines the desired state of RegionBackendService
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProvider {
    /// Lifetime of cookies in seconds if session_affinity is
    /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
    /// only until the end of the browser session (or equivalent). The
    /// maximum allowed value for TTL is one day.
    /// When the load balancing scheme is INTERNAL, this field is not used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "affinityCookieTtlSec")]
    #[builder(default)]
    pub affinity_cookie_ttl_sec: Option<f64>,
    /// The set of backends that serve this RegionBackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub backend: Option<Vec<RegionBackendServiceForProviderBackend>>,
    /// Cloud CDN configuration for this BackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdnPolicy")]
    #[builder(default)]
    pub cdn_policy: Option<RegionBackendServiceForProviderCdnPolicy>,
    /// Settings controlling the volume of connections to a backend service. This field
    /// is applicable only when the load_balancing_scheme is set to INTERNAL_MANAGED
    /// and the protocol is set to HTTP, HTTPS, or HTTP2.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    #[builder(default)]
    pub circuit_breakers: Option<RegionBackendServiceForProviderCircuitBreakers>,
    /// Time for which instance will be drained (not accept new
    /// connections, but still work to finish started).
    /// From version 6.0.0 ConnectionDrainingTimeoutSec default value will be 300 to match default GCP value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDrainingTimeoutSec")]
    #[builder(default)]
    pub connection_draining_timeout_sec: Option<f64>,
    /// Consistent Hash-based load balancing can be used to provide soft session
    /// affinity based on HTTP headers, cookies or other properties. This load balancing
    /// policy is applicable only for HTTP connections. The affinity to a particular
    /// destination host will be lost when one or more hosts are added/removed from the
    /// destination service. This field specifies parameters that control consistent
    /// hashing.
    /// This field only applies when all of the following are true -
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consistentHash")]
    #[builder(default)]
    pub consistent_hash: Option<RegionBackendServiceForProviderConsistentHash>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// If true, enable Cloud CDN for this RegionBackendService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCdn")]
    #[builder(default)]
    pub enable_cdn: Option<bool>,
    /// Policy for failovers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverPolicy")]
    #[builder(default)]
    pub failover_policy: Option<RegionBackendServiceForProviderFailoverPolicy>,
    /// The set of URLs to HealthCheck resources for health checking
    /// this RegionBackendService. Currently at most one health
    /// check can be specified.
    /// A health check must be specified unless the backend service uses an internet
    /// or serverless NEG as a backend.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    #[builder(default)]
    pub health_checks: Option<Vec<String>>,
    /// References to RegionHealthCheck in compute to populate healthChecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecksRefs")]
    #[builder(default)]
    pub health_checks_refs: Option<Vec<RegionBackendServiceForProviderHealthChecksRefs>>,
    /// Selector for a list of RegionHealthCheck in compute to populate healthChecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecksSelector")]
    #[builder(default)]
    pub health_checks_selector: Option<RegionBackendServiceForProviderHealthChecksSelector>,
    /// Settings for enabling Cloud Identity Aware Proxy
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iap: Option<RegionBackendServiceForProviderIap>,
    /// is set to INTERNAL_MANAGED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingScheme")]
    #[builder(default)]
    pub load_balancing_scheme: Option<String>,
    /// is set to MAGLEV or RING_HASH
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbPolicy")]
    #[builder(default)]
    pub locality_lb_policy: Option<String>,
    /// This field denotes the logging options for the load balancer traffic served by this backend service.
    /// If logging is enabled, logs will be exported to Stackdriver.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<RegionBackendServiceForProviderLogConfig>,
    /// The URL of the network to which this backend service belongs.
    /// This field can only be specified when the load balancing scheme is set to INTERNAL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
    /// This field is applicable only when the load_balancing_scheme is set
    /// to INTERNAL_MANAGED and the protocol is set to HTTP, HTTPS, or HTTP2.
    /// From version 6.0.
    /// Default values are enforce by GCP without providing them.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlierDetection")]
    #[builder(default)]
    pub outlier_detection: Option<RegionBackendServiceForProviderOutlierDetection>,
    /// A named port on a backend instance group representing the port for
    /// communication to the backend VMs in that group. Required when the
    /// loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
    /// and the backends are instance groups. The named port must be defined on each
    /// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
    /// default of "http" if not given.
    /// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    #[builder(default)]
    pub port_name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// is set to HTTP, HTTPS, or HTTP2
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
    /// The Region in which the created backend service should reside.
    /// If it is not provided, the provider region is used.
    pub region: String,
    /// Type of session affinity to use. The default is NONE. Session affinity is
    /// not applicable if the protocol is UDP.
    /// Possible values are: NONE, CLIENT_IP, CLIENT_IP_PORT_PROTO, CLIENT_IP_PROTO, GENERATED_COOKIE, HEADER_FIELD, HTTP_COOKIE, CLIENT_IP_NO_DESTINATION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    #[builder(default)]
    pub session_affinity: Option<String>,
    /// The backend service timeout has a different meaning depending on the type of load balancer.
    /// For more information see, Backend service settings.
    /// The default is 30 seconds.
    /// The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSec")]
    #[builder(default)]
    pub timeout_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderBackend {
    /// Specifies the balancing mode for this backend.
    /// See the Backend Services Overview
    /// for an explanation of load balancing modes.
    /// From version 6.0.0 default value will be UTILIZATION to match default GCP value.
    /// Default value is CONNECTION.
    /// Possible values are: UTILIZATION, RATE, CONNECTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "balancingMode")]
    #[builder(default)]
    pub balancing_mode: Option<String>,
    /// A multiplier applied to the group's maximum servicing capacity
    /// (based on UTILIZATION, RATE or CONNECTION).
    /// ~>NOTE: This field cannot be set for
    /// INTERNAL region backend services (default loadBalancingScheme),
    /// but is required for non-INTERNAL backend service. The total
    /// capacity_scaler for all backends must be non-zero.
    /// A setting of 0 means the group is completely drained, offering
    /// 0% of its available Capacity. Valid range is [0.0,1.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityScaler")]
    #[builder(default)]
    pub capacity_scaler: Option<f64>,
    /// An optional description of this resource.
    /// Provide this property when you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// This field designates whether this is a failover backend. More
    /// than one failover backend can be configured for a given RegionBackendService.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub failover: Option<bool>,
    /// The fully-qualified URL of an Instance Group or Network Endpoint
    /// Group resource. In case of instance group this defines the list
    /// of instances that serve traffic. Member virtual machine
    /// instances from each instance group must live in the same zone as
    /// the instance group itself. No two backends in a backend service
    /// are allowed to use same Instance Group resource.
    /// For Network Endpoint Groups this defines list of endpoints. All
    /// endpoints of Network Endpoint Group must be hosted on instances
    /// located in the same zone as the Network Endpoint Group.
    /// Backend services cannot mix Instance Group and
    /// Network Endpoint Group backends.
    /// When the load_balancing_scheme is INTERNAL, only instance groups
    /// are supported.
    /// Note that you must specify an Instance Group or Network Endpoint
    /// Group resource using the fully-qualified URL, rather than a
    /// partial URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub group: Option<String>,
    /// Reference to a RegionInstanceGroupManager in compute to populate group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupRef")]
    #[builder(default)]
    pub group_ref: Option<RegionBackendServiceForProviderBackendGroupRef>,
    /// Selector for a RegionInstanceGroupManager in compute to populate group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupSelector")]
    #[builder(default)]
    pub group_selector: Option<RegionBackendServiceForProviderBackendGroupSelector>,
    /// The max number of simultaneous connections for the group. Can
    /// be used with either CONNECTION or UTILIZATION balancing modes.
    /// Cannot be set for INTERNAL backend services.
    /// For CONNECTION mode, either maxConnections or one
    /// of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
    /// as appropriate for group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    #[builder(default)]
    pub max_connections: Option<f64>,
    /// The max number of simultaneous connections that a single backend
    /// network endpoint can handle. Cannot be set
    /// for INTERNAL backend services.
    /// This is used to calculate the capacity of the group. Can be
    /// used in either CONNECTION or UTILIZATION balancing modes. For
    /// CONNECTION mode, either maxConnections or
    /// maxConnectionsPerEndpoint must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerEndpoint")]
    #[builder(default)]
    pub max_connections_per_endpoint: Option<f64>,
    /// The max number of simultaneous connections that a single
    /// backend instance can handle. Cannot be set for INTERNAL backend
    /// services.
    /// This is used to calculate the capacity of the group.
    /// Can be used in either CONNECTION or UTILIZATION balancing modes.
    /// For CONNECTION mode, either maxConnections or
    /// maxConnectionsPerInstance must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerInstance")]
    #[builder(default)]
    pub max_connections_per_instance: Option<f64>,
    /// The max requests per second (RPS) of the group. Cannot be set
    /// for INTERNAL backend services.
    /// Can be used with either RATE or UTILIZATION balancing modes,
    /// but required if RATE mode. Either maxRate or one
    /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    /// group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRate")]
    #[builder(default)]
    pub max_rate: Option<f64>,
    /// The max requests per second (RPS) that a single backend network
    /// endpoint can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerEndpoint must be set. Cannot be set
    /// for INTERNAL backend services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerEndpoint")]
    #[builder(default)]
    pub max_rate_per_endpoint: Option<f64>,
    /// The max requests per second (RPS) that a single backend
    /// instance can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerInstance must be set. Cannot be set
    /// for INTERNAL backend services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerInstance")]
    #[builder(default)]
    pub max_rate_per_instance: Option<f64>,
    /// Used when balancingMode is UTILIZATION. This ratio defines the
    /// CPU utilization target for the group. Valid range is [0.0, 1.0].
    /// Cannot be set for INTERNAL backend services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUtilization")]
    #[builder(default)]
    pub max_utilization: Option<f64>,
}

/// Reference to a RegionInstanceGroupManager in compute to populate group.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderBackendGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServiceForProviderBackendGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderBackendGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServiceForProviderBackendGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServiceForProviderBackendGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceForProviderBackendGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceForProviderBackendGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RegionInstanceGroupManager in compute to populate group.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderBackendGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServiceForProviderBackendGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderBackendGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServiceForProviderBackendGroupSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServiceForProviderBackendGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceForProviderBackendGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceForProviderBackendGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Cloud CDN configuration for this BackendService.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderCdnPolicy {
    /// The CacheKeyPolicy for this CdnPolicy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheKeyPolicy")]
    #[builder(default)]
    pub cache_key_policy: Option<RegionBackendServiceForProviderCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend.
    /// The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
    /// Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheMode")]
    #[builder(default)]
    pub cache_mode: Option<String>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTtl")]
    #[builder(default)]
    pub client_ttl: Option<f64>,
    /// Specifies the default TTL for cached content served by this origin for responses
    /// that do not have an existing valid TTL (max-age or s-max-age).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTtl")]
    #[builder(default)]
    pub default_ttl: Option<f64>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    #[builder(default)]
    pub max_ttl: Option<f64>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCaching")]
    #[builder(default)]
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
    /// Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCachingPolicy")]
    #[builder(default)]
    pub negative_caching_policy: Option<Vec<RegionBackendServiceForProviderCdnPolicyNegativeCachingPolicy>>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serveWhileStale")]
    #[builder(default)]
    pub serve_while_stale: Option<f64>,
    /// Maximum number of seconds the response to a signed URL request
    /// will be considered fresh, defaults to 1hr (3600s). After this
    /// time period, the response will be revalidated before
    /// being served.
    /// When serving responses to signed URL requests, Cloud CDN will
    /// internally behave as though all responses from this backend had a
    /// "Cache-Control: public, max-age=[TTL]" header, regardless of any
    /// existing Cache-Control header. The actual headers served in
    /// responses will not be altered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signedUrlCacheMaxAgeSec")]
    #[builder(default)]
    pub signed_url_cache_max_age_sec: Option<f64>,
}

/// The CacheKeyPolicy for this CdnPolicy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderCdnPolicyCacheKeyPolicy {
    /// If true requests to different hosts will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHost")]
    #[builder(default)]
    pub include_host: Option<bool>,
    /// Names of cookies to include in cache keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNamedCookies")]
    #[builder(default)]
    pub include_named_cookies: Option<Vec<String>>,
    /// If true, http and https requests will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeProtocol")]
    #[builder(default)]
    pub include_protocol: Option<bool>,
    /// If true, include query string parameters in the cache key
    /// according to query_string_whitelist and
    /// query_string_blacklist. If neither is set, the entire query
    /// string will be included.
    /// If false, the query string will be excluded from the cache
    /// key entirely.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeQueryString")]
    #[builder(default)]
    pub include_query_string: Option<bool>,
    /// Names of query string parameters to exclude in cache keys.
    /// All other parameters will be included. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringBlacklist")]
    #[builder(default)]
    pub query_string_blacklist: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys.
    /// All other parameters will be excluded. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringWhitelist")]
    #[builder(default)]
    pub query_string_whitelist: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
    /// can be specified as values, and you cannot specify a status code more than once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub code: Option<f64>,
}

/// Settings controlling the volume of connections to a backend service. This field
/// is applicable only when the load_balancing_scheme is set to INTERNAL_MANAGED
/// and the protocol is set to HTTP, HTTPS, or HTTP2.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderCircuitBreakers {
    /// The maximum number of connections to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    #[builder(default)]
    pub max_connections: Option<f64>,
    /// The maximum number of pending requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    #[builder(default)]
    pub max_pending_requests: Option<f64>,
    /// The maximum number of parallel requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    #[builder(default)]
    pub max_requests: Option<f64>,
    /// Maximum requests for a single backend connection. This parameter
    /// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
    /// not specified, there is no limit. Setting this parameter to 1
    /// will effectively disable keep alive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    #[builder(default)]
    pub max_requests_per_connection: Option<f64>,
    /// The maximum number of parallel retries to the backend cluster.
    /// Defaults to 3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    #[builder(default)]
    pub max_retries: Option<f64>,
}

/// Consistent Hash-based load balancing can be used to provide soft session
/// affinity based on HTTP headers, cookies or other properties. This load balancing
/// policy is applicable only for HTTP connections. The affinity to a particular
/// destination host will be lost when one or more hosts are added/removed from the
/// destination service. This field specifies parameters that control consistent
/// hashing.
/// This field only applies when all of the following are true -
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderConsistentHash {
    /// Hash is based on HTTP Cookie. This field describes a HTTP cookie
    /// that will be used as the hash key for the consistent hash load
    /// balancer. If the cookie is not present, it will be generated.
    /// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpCookie")]
    #[builder(default)]
    pub http_cookie: Option<RegionBackendServiceForProviderConsistentHashHttpCookie>,
    /// The hash based on the value of the specified header field.
    /// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaderName")]
    #[builder(default)]
    pub http_header_name: Option<String>,
    /// The minimum number of virtual nodes to use for the hash ring.
    /// Larger ring sizes result in more granular load
    /// distributions. If the number of hosts in the load balancing pool
    /// is larger than the ring size, each host will be assigned a single
    /// virtual node.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumRingSize")]
    #[builder(default)]
    pub minimum_ring_size: Option<f64>,
}

/// Hash is based on HTTP Cookie. This field describes a HTTP cookie
/// that will be used as the hash key for the consistent hash load
/// balancer. If the cookie is not present, it will be generated.
/// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderConsistentHashHttpCookie {
    /// Name of the resource. Provided by the client when the resource is
    /// created. The name must be 1-63 characters long, and comply with
    /// RFC1035. Specifically, the name must be 1-63 characters long and match
    /// the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the
    /// first character must be a lowercase letter, and all following
    /// characters must be a dash, lowercase letter, or digit, except the last
    /// character, which cannot be a dash.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Path to set for the cookie.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ttl: Option<RegionBackendServiceForProviderConsistentHashHttpCookieTtl>,
}

/// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
/// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderConsistentHashHttpCookieTtl {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// Policy for failovers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderFailoverPolicy {
    /// On failover or failback, this field indicates whether connection drain
    /// will be honored. Setting this to true has the following effect: connections
    /// to the old active pool are not drained. Connections to the new active pool
    /// use the timeout of 10 min (currently fixed). Setting to false has the
    /// following effect: both old and new connections will have a drain timeout
    /// of 10 min.
    /// This can be set to true only if the protocol is TCP.
    /// The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableConnectionDrainOnFailover")]
    #[builder(default)]
    pub disable_connection_drain_on_failover: Option<bool>,
    /// This option is used only when no healthy VMs are detected in the primary
    /// and backup instance groups. When set to true, traffic is dropped. When
    /// set to false, new connections are sent across all VMs in the primary group.
    /// The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dropTrafficIfUnhealthy")]
    #[builder(default)]
    pub drop_traffic_if_unhealthy: Option<bool>,
    /// The value of the field must be in [0, 1]. If the ratio of the healthy
    /// VMs in the primary backend is at or below this number, traffic arriving
    /// at the load-balanced IP will be directed to the failover backend.
    /// In case where 'failoverRatio' is not set or all the VMs in the backup
    /// backend are unhealthy, the traffic will be directed back to the primary
    /// backend in the "force" mode, where traffic will be spread to the healthy
    /// VMs with the best effort, or to all VMs when no VM is healthy.
    /// This field is only used with l4 load balancing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverRatio")]
    #[builder(default)]
    pub failover_ratio: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderHealthChecksRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServiceForProviderHealthChecksRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderHealthChecksRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServiceForProviderHealthChecksRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServiceForProviderHealthChecksRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceForProviderHealthChecksRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceForProviderHealthChecksRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of RegionHealthCheck in compute to populate healthChecks.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderHealthChecksSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServiceForProviderHealthChecksSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderHealthChecksSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServiceForProviderHealthChecksSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServiceForProviderHealthChecksSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceForProviderHealthChecksSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceForProviderHealthChecksSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings for enabling Cloud Identity Aware Proxy
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderIap {
    /// OAuth2 Client ID for IAP
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientId")]
    #[builder(default)]
    pub oauth2_client_id: Option<String>,
    /// OAuth2 Client Secret for IAP
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientSecretSecretRef")]
    #[builder(default)]
    pub oauth2_client_secret_secret_ref: Option<RegionBackendServiceForProviderIapOauth2ClientSecretSecretRef>,
}

/// OAuth2 Client Secret for IAP
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderIapOauth2ClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// This field denotes the logging options for the load balancer traffic served by this backend service.
/// If logging is enabled, logs will be exported to Stackdriver.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderLogConfig {
    /// Whether to enable logging for the load balancer traffic served by this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// This field can only be specified if logging is enabled for this backend service. The value of
    /// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
    /// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
    /// The default value is 1.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    #[builder(default)]
    pub sample_rate: Option<f64>,
}

/// Settings controlling eviction of unhealthy hosts from the load balancing pool.
/// This field is applicable only when the load_balancing_scheme is set
/// to INTERNAL_MANAGED and the protocol is set to HTTP, HTTPS, or HTTP2.
/// From version 6.0.
/// Default values are enforce by GCP without providing them.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderOutlierDetection {
    /// The base time that a host is ejected for. The real time is equal to the base
    /// time multiplied by the number of times the host has been ejected. Defaults to
    /// 30000ms or 30s.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseEjectionTime")]
    #[builder(default)]
    pub base_ejection_time: Option<RegionBackendServiceForProviderOutlierDetectionBaseEjectionTime>,
    /// Number of errors before a host is ejected from the connection pool. When the
    /// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
    /// Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveErrors")]
    #[builder(default)]
    pub consecutive_errors: Option<f64>,
    /// The number of consecutive gateway failures (502, 503, 504 status or connection
    /// errors that are mapped to one of those status codes) before a consecutive
    /// gateway failure ejection occurs. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveGatewayFailure")]
    #[builder(default)]
    pub consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive 5xx. This setting can be used to disable
    /// ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveErrors")]
    #[builder(default)]
    pub enforcing_consecutive_errors: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive gateway failures. This setting can be
    /// used to disable ejection or to ramp it up slowly. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveGatewayFailure")]
    #[builder(default)]
    pub enforcing_consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through success rate statistics. This setting can be used to
    /// disable ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingSuccessRate")]
    #[builder(default)]
    pub enforcing_success_rate: Option<f64>,
    /// Time interval between ejection sweep analysis. This can result in both new
    /// ejections as well as hosts being returned to service. Defaults to 10 seconds.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<RegionBackendServiceForProviderOutlierDetectionInterval>,
    /// Maximum percentage of hosts in the load balancing pool for the backend service
    /// that can be ejected. Defaults to 10%.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxEjectionPercent")]
    #[builder(default)]
    pub max_ejection_percent: Option<f64>,
    /// The number of hosts in a cluster that must have enough request volume to detect
    /// success rate outliers. If the number of hosts is less than this setting, outlier
    /// detection via success rate statistics is not performed for any host in the
    /// cluster. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateMinimumHosts")]
    #[builder(default)]
    pub success_rate_minimum_hosts: Option<f64>,
    /// The minimum number of total requests that must be collected in one interval (as
    /// defined by the interval duration above) to include this host in success rate
    /// based outlier detection. If the volume is lower than this setting, outlier
    /// detection via success rate statistics is not performed for that host. Defaults
    /// to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateRequestVolume")]
    #[builder(default)]
    pub success_rate_request_volume: Option<f64>,
    /// This factor is used to determine the ejection threshold for success rate outlier
    /// ejection. The ejection threshold is the difference between the mean success
    /// rate, and the product of this factor and the standard deviation of the mean
    /// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
    /// by a thousand to get a double. That is, if the desired factor is 1.9, the
    /// runtime value should be 1900. Defaults to 1900.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateStdevFactor")]
    #[builder(default)]
    pub success_rate_stdev_factor: Option<f64>,
}

/// The base time that a host is ejected for. The real time is equal to the base
/// time multiplied by the number of times the host has been ejected. Defaults to
/// 30000ms or 30s.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderOutlierDetectionBaseEjectionTime {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// Time interval between ejection sweep analysis. This can result in both new
/// ejections as well as hosts being returned to service. Defaults to 10 seconds.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceForProviderOutlierDetectionInterval {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProvider {
    /// Lifetime of cookies in seconds if session_affinity is
    /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
    /// only until the end of the browser session (or equivalent). The
    /// maximum allowed value for TTL is one day.
    /// When the load balancing scheme is INTERNAL, this field is not used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "affinityCookieTtlSec")]
    #[builder(default)]
    pub affinity_cookie_ttl_sec: Option<f64>,
    /// The set of backends that serve this RegionBackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub backend: Option<Vec<RegionBackendServiceInitProviderBackend>>,
    /// Cloud CDN configuration for this BackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdnPolicy")]
    #[builder(default)]
    pub cdn_policy: Option<RegionBackendServiceInitProviderCdnPolicy>,
    /// Settings controlling the volume of connections to a backend service. This field
    /// is applicable only when the load_balancing_scheme is set to INTERNAL_MANAGED
    /// and the protocol is set to HTTP, HTTPS, or HTTP2.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    #[builder(default)]
    pub circuit_breakers: Option<RegionBackendServiceInitProviderCircuitBreakers>,
    /// Time for which instance will be drained (not accept new
    /// connections, but still work to finish started).
    /// From version 6.0.0 ConnectionDrainingTimeoutSec default value will be 300 to match default GCP value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDrainingTimeoutSec")]
    #[builder(default)]
    pub connection_draining_timeout_sec: Option<f64>,
    /// Consistent Hash-based load balancing can be used to provide soft session
    /// affinity based on HTTP headers, cookies or other properties. This load balancing
    /// policy is applicable only for HTTP connections. The affinity to a particular
    /// destination host will be lost when one or more hosts are added/removed from the
    /// destination service. This field specifies parameters that control consistent
    /// hashing.
    /// This field only applies when all of the following are true -
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consistentHash")]
    #[builder(default)]
    pub consistent_hash: Option<RegionBackendServiceInitProviderConsistentHash>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// If true, enable Cloud CDN for this RegionBackendService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCdn")]
    #[builder(default)]
    pub enable_cdn: Option<bool>,
    /// Policy for failovers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverPolicy")]
    #[builder(default)]
    pub failover_policy: Option<RegionBackendServiceInitProviderFailoverPolicy>,
    /// The set of URLs to HealthCheck resources for health checking
    /// this RegionBackendService. Currently at most one health
    /// check can be specified.
    /// A health check must be specified unless the backend service uses an internet
    /// or serverless NEG as a backend.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    #[builder(default)]
    pub health_checks: Option<Vec<String>>,
    /// References to RegionHealthCheck in compute to populate healthChecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecksRefs")]
    #[builder(default)]
    pub health_checks_refs: Option<Vec<RegionBackendServiceInitProviderHealthChecksRefs>>,
    /// Selector for a list of RegionHealthCheck in compute to populate healthChecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecksSelector")]
    #[builder(default)]
    pub health_checks_selector: Option<RegionBackendServiceInitProviderHealthChecksSelector>,
    /// Settings for enabling Cloud Identity Aware Proxy
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iap: Option<RegionBackendServiceInitProviderIap>,
    /// is set to INTERNAL_MANAGED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingScheme")]
    #[builder(default)]
    pub load_balancing_scheme: Option<String>,
    /// is set to MAGLEV or RING_HASH
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbPolicy")]
    #[builder(default)]
    pub locality_lb_policy: Option<String>,
    /// This field denotes the logging options for the load balancer traffic served by this backend service.
    /// If logging is enabled, logs will be exported to Stackdriver.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<RegionBackendServiceInitProviderLogConfig>,
    /// The URL of the network to which this backend service belongs.
    /// This field can only be specified when the load balancing scheme is set to INTERNAL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
    /// This field is applicable only when the load_balancing_scheme is set
    /// to INTERNAL_MANAGED and the protocol is set to HTTP, HTTPS, or HTTP2.
    /// From version 6.0.
    /// Default values are enforce by GCP without providing them.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlierDetection")]
    #[builder(default)]
    pub outlier_detection: Option<RegionBackendServiceInitProviderOutlierDetection>,
    /// A named port on a backend instance group representing the port for
    /// communication to the backend VMs in that group. Required when the
    /// loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
    /// and the backends are instance groups. The named port must be defined on each
    /// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
    /// default of "http" if not given.
    /// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    #[builder(default)]
    pub port_name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// is set to HTTP, HTTPS, or HTTP2
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
    /// Type of session affinity to use. The default is NONE. Session affinity is
    /// not applicable if the protocol is UDP.
    /// Possible values are: NONE, CLIENT_IP, CLIENT_IP_PORT_PROTO, CLIENT_IP_PROTO, GENERATED_COOKIE, HEADER_FIELD, HTTP_COOKIE, CLIENT_IP_NO_DESTINATION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    #[builder(default)]
    pub session_affinity: Option<String>,
    /// The backend service timeout has a different meaning depending on the type of load balancer.
    /// For more information see, Backend service settings.
    /// The default is 30 seconds.
    /// The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSec")]
    #[builder(default)]
    pub timeout_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderBackend {
    /// Specifies the balancing mode for this backend.
    /// See the Backend Services Overview
    /// for an explanation of load balancing modes.
    /// From version 6.0.0 default value will be UTILIZATION to match default GCP value.
    /// Default value is CONNECTION.
    /// Possible values are: UTILIZATION, RATE, CONNECTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "balancingMode")]
    #[builder(default)]
    pub balancing_mode: Option<String>,
    /// A multiplier applied to the group's maximum servicing capacity
    /// (based on UTILIZATION, RATE or CONNECTION).
    /// ~>NOTE: This field cannot be set for
    /// INTERNAL region backend services (default loadBalancingScheme),
    /// but is required for non-INTERNAL backend service. The total
    /// capacity_scaler for all backends must be non-zero.
    /// A setting of 0 means the group is completely drained, offering
    /// 0% of its available Capacity. Valid range is [0.0,1.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityScaler")]
    #[builder(default)]
    pub capacity_scaler: Option<f64>,
    /// An optional description of this resource.
    /// Provide this property when you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// This field designates whether this is a failover backend. More
    /// than one failover backend can be configured for a given RegionBackendService.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub failover: Option<bool>,
    /// The fully-qualified URL of an Instance Group or Network Endpoint
    /// Group resource. In case of instance group this defines the list
    /// of instances that serve traffic. Member virtual machine
    /// instances from each instance group must live in the same zone as
    /// the instance group itself. No two backends in a backend service
    /// are allowed to use same Instance Group resource.
    /// For Network Endpoint Groups this defines list of endpoints. All
    /// endpoints of Network Endpoint Group must be hosted on instances
    /// located in the same zone as the Network Endpoint Group.
    /// Backend services cannot mix Instance Group and
    /// Network Endpoint Group backends.
    /// When the load_balancing_scheme is INTERNAL, only instance groups
    /// are supported.
    /// Note that you must specify an Instance Group or Network Endpoint
    /// Group resource using the fully-qualified URL, rather than a
    /// partial URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub group: Option<String>,
    /// Reference to a RegionInstanceGroupManager in compute to populate group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupRef")]
    #[builder(default)]
    pub group_ref: Option<RegionBackendServiceInitProviderBackendGroupRef>,
    /// Selector for a RegionInstanceGroupManager in compute to populate group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupSelector")]
    #[builder(default)]
    pub group_selector: Option<RegionBackendServiceInitProviderBackendGroupSelector>,
    /// The max number of simultaneous connections for the group. Can
    /// be used with either CONNECTION or UTILIZATION balancing modes.
    /// Cannot be set for INTERNAL backend services.
    /// For CONNECTION mode, either maxConnections or one
    /// of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
    /// as appropriate for group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    #[builder(default)]
    pub max_connections: Option<f64>,
    /// The max number of simultaneous connections that a single backend
    /// network endpoint can handle. Cannot be set
    /// for INTERNAL backend services.
    /// This is used to calculate the capacity of the group. Can be
    /// used in either CONNECTION or UTILIZATION balancing modes. For
    /// CONNECTION mode, either maxConnections or
    /// maxConnectionsPerEndpoint must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerEndpoint")]
    #[builder(default)]
    pub max_connections_per_endpoint: Option<f64>,
    /// The max number of simultaneous connections that a single
    /// backend instance can handle. Cannot be set for INTERNAL backend
    /// services.
    /// This is used to calculate the capacity of the group.
    /// Can be used in either CONNECTION or UTILIZATION balancing modes.
    /// For CONNECTION mode, either maxConnections or
    /// maxConnectionsPerInstance must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerInstance")]
    #[builder(default)]
    pub max_connections_per_instance: Option<f64>,
    /// The max requests per second (RPS) of the group. Cannot be set
    /// for INTERNAL backend services.
    /// Can be used with either RATE or UTILIZATION balancing modes,
    /// but required if RATE mode. Either maxRate or one
    /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    /// group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRate")]
    #[builder(default)]
    pub max_rate: Option<f64>,
    /// The max requests per second (RPS) that a single backend network
    /// endpoint can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerEndpoint must be set. Cannot be set
    /// for INTERNAL backend services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerEndpoint")]
    #[builder(default)]
    pub max_rate_per_endpoint: Option<f64>,
    /// The max requests per second (RPS) that a single backend
    /// instance can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerInstance must be set. Cannot be set
    /// for INTERNAL backend services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerInstance")]
    #[builder(default)]
    pub max_rate_per_instance: Option<f64>,
    /// Used when balancingMode is UTILIZATION. This ratio defines the
    /// CPU utilization target for the group. Valid range is [0.0, 1.0].
    /// Cannot be set for INTERNAL backend services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUtilization")]
    #[builder(default)]
    pub max_utilization: Option<f64>,
}

/// Reference to a RegionInstanceGroupManager in compute to populate group.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderBackendGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServiceInitProviderBackendGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderBackendGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServiceInitProviderBackendGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServiceInitProviderBackendGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceInitProviderBackendGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceInitProviderBackendGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RegionInstanceGroupManager in compute to populate group.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderBackendGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServiceInitProviderBackendGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderBackendGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServiceInitProviderBackendGroupSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServiceInitProviderBackendGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceInitProviderBackendGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceInitProviderBackendGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Cloud CDN configuration for this BackendService.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderCdnPolicy {
    /// The CacheKeyPolicy for this CdnPolicy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheKeyPolicy")]
    #[builder(default)]
    pub cache_key_policy: Option<RegionBackendServiceInitProviderCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend.
    /// The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
    /// Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheMode")]
    #[builder(default)]
    pub cache_mode: Option<String>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTtl")]
    #[builder(default)]
    pub client_ttl: Option<f64>,
    /// Specifies the default TTL for cached content served by this origin for responses
    /// that do not have an existing valid TTL (max-age or s-max-age).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTtl")]
    #[builder(default)]
    pub default_ttl: Option<f64>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    #[builder(default)]
    pub max_ttl: Option<f64>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCaching")]
    #[builder(default)]
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
    /// Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCachingPolicy")]
    #[builder(default)]
    pub negative_caching_policy: Option<Vec<RegionBackendServiceInitProviderCdnPolicyNegativeCachingPolicy>>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serveWhileStale")]
    #[builder(default)]
    pub serve_while_stale: Option<f64>,
    /// Maximum number of seconds the response to a signed URL request
    /// will be considered fresh, defaults to 1hr (3600s). After this
    /// time period, the response will be revalidated before
    /// being served.
    /// When serving responses to signed URL requests, Cloud CDN will
    /// internally behave as though all responses from this backend had a
    /// "Cache-Control: public, max-age=[TTL]" header, regardless of any
    /// existing Cache-Control header. The actual headers served in
    /// responses will not be altered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signedUrlCacheMaxAgeSec")]
    #[builder(default)]
    pub signed_url_cache_max_age_sec: Option<f64>,
}

/// The CacheKeyPolicy for this CdnPolicy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderCdnPolicyCacheKeyPolicy {
    /// If true requests to different hosts will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHost")]
    #[builder(default)]
    pub include_host: Option<bool>,
    /// Names of cookies to include in cache keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNamedCookies")]
    #[builder(default)]
    pub include_named_cookies: Option<Vec<String>>,
    /// If true, http and https requests will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeProtocol")]
    #[builder(default)]
    pub include_protocol: Option<bool>,
    /// If true, include query string parameters in the cache key
    /// according to query_string_whitelist and
    /// query_string_blacklist. If neither is set, the entire query
    /// string will be included.
    /// If false, the query string will be excluded from the cache
    /// key entirely.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeQueryString")]
    #[builder(default)]
    pub include_query_string: Option<bool>,
    /// Names of query string parameters to exclude in cache keys.
    /// All other parameters will be included. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringBlacklist")]
    #[builder(default)]
    pub query_string_blacklist: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys.
    /// All other parameters will be excluded. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringWhitelist")]
    #[builder(default)]
    pub query_string_whitelist: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
    /// can be specified as values, and you cannot specify a status code more than once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub code: Option<f64>,
}

/// Settings controlling the volume of connections to a backend service. This field
/// is applicable only when the load_balancing_scheme is set to INTERNAL_MANAGED
/// and the protocol is set to HTTP, HTTPS, or HTTP2.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderCircuitBreakers {
    /// The maximum number of connections to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    #[builder(default)]
    pub max_connections: Option<f64>,
    /// The maximum number of pending requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    #[builder(default)]
    pub max_pending_requests: Option<f64>,
    /// The maximum number of parallel requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    #[builder(default)]
    pub max_requests: Option<f64>,
    /// Maximum requests for a single backend connection. This parameter
    /// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
    /// not specified, there is no limit. Setting this parameter to 1
    /// will effectively disable keep alive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    #[builder(default)]
    pub max_requests_per_connection: Option<f64>,
    /// The maximum number of parallel retries to the backend cluster.
    /// Defaults to 3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    #[builder(default)]
    pub max_retries: Option<f64>,
}

/// Consistent Hash-based load balancing can be used to provide soft session
/// affinity based on HTTP headers, cookies or other properties. This load balancing
/// policy is applicable only for HTTP connections. The affinity to a particular
/// destination host will be lost when one or more hosts are added/removed from the
/// destination service. This field specifies parameters that control consistent
/// hashing.
/// This field only applies when all of the following are true -
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderConsistentHash {
    /// Hash is based on HTTP Cookie. This field describes a HTTP cookie
    /// that will be used as the hash key for the consistent hash load
    /// balancer. If the cookie is not present, it will be generated.
    /// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpCookie")]
    #[builder(default)]
    pub http_cookie: Option<RegionBackendServiceInitProviderConsistentHashHttpCookie>,
    /// The hash based on the value of the specified header field.
    /// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaderName")]
    #[builder(default)]
    pub http_header_name: Option<String>,
    /// The minimum number of virtual nodes to use for the hash ring.
    /// Larger ring sizes result in more granular load
    /// distributions. If the number of hosts in the load balancing pool
    /// is larger than the ring size, each host will be assigned a single
    /// virtual node.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumRingSize")]
    #[builder(default)]
    pub minimum_ring_size: Option<f64>,
}

/// Hash is based on HTTP Cookie. This field describes a HTTP cookie
/// that will be used as the hash key for the consistent hash load
/// balancer. If the cookie is not present, it will be generated.
/// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderConsistentHashHttpCookie {
    /// Name of the resource. Provided by the client when the resource is
    /// created. The name must be 1-63 characters long, and comply with
    /// RFC1035. Specifically, the name must be 1-63 characters long and match
    /// the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the
    /// first character must be a lowercase letter, and all following
    /// characters must be a dash, lowercase letter, or digit, except the last
    /// character, which cannot be a dash.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Path to set for the cookie.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ttl: Option<RegionBackendServiceInitProviderConsistentHashHttpCookieTtl>,
}

/// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
/// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderConsistentHashHttpCookieTtl {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// Policy for failovers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderFailoverPolicy {
    /// On failover or failback, this field indicates whether connection drain
    /// will be honored. Setting this to true has the following effect: connections
    /// to the old active pool are not drained. Connections to the new active pool
    /// use the timeout of 10 min (currently fixed). Setting to false has the
    /// following effect: both old and new connections will have a drain timeout
    /// of 10 min.
    /// This can be set to true only if the protocol is TCP.
    /// The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableConnectionDrainOnFailover")]
    #[builder(default)]
    pub disable_connection_drain_on_failover: Option<bool>,
    /// This option is used only when no healthy VMs are detected in the primary
    /// and backup instance groups. When set to true, traffic is dropped. When
    /// set to false, new connections are sent across all VMs in the primary group.
    /// The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dropTrafficIfUnhealthy")]
    #[builder(default)]
    pub drop_traffic_if_unhealthy: Option<bool>,
    /// The value of the field must be in [0, 1]. If the ratio of the healthy
    /// VMs in the primary backend is at or below this number, traffic arriving
    /// at the load-balanced IP will be directed to the failover backend.
    /// In case where 'failoverRatio' is not set or all the VMs in the backup
    /// backend are unhealthy, the traffic will be directed back to the primary
    /// backend in the "force" mode, where traffic will be spread to the healthy
    /// VMs with the best effort, or to all VMs when no VM is healthy.
    /// This field is only used with l4 load balancing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverRatio")]
    #[builder(default)]
    pub failover_ratio: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderHealthChecksRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServiceInitProviderHealthChecksRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderHealthChecksRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServiceInitProviderHealthChecksRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServiceInitProviderHealthChecksRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceInitProviderHealthChecksRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceInitProviderHealthChecksRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of RegionHealthCheck in compute to populate healthChecks.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderHealthChecksSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServiceInitProviderHealthChecksSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderHealthChecksSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServiceInitProviderHealthChecksSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServiceInitProviderHealthChecksSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceInitProviderHealthChecksSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceInitProviderHealthChecksSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings for enabling Cloud Identity Aware Proxy
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderIap {
    /// OAuth2 Client ID for IAP
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientId")]
    #[builder(default)]
    pub oauth2_client_id: Option<String>,
    /// OAuth2 Client Secret for IAP
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(rename = "oauth2ClientSecretSecretRef")]
    pub oauth2_client_secret_secret_ref: RegionBackendServiceInitProviderIapOauth2ClientSecretSecretRef,
}

/// OAuth2 Client Secret for IAP
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderIapOauth2ClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// This field denotes the logging options for the load balancer traffic served by this backend service.
/// If logging is enabled, logs will be exported to Stackdriver.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderLogConfig {
    /// Whether to enable logging for the load balancer traffic served by this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// This field can only be specified if logging is enabled for this backend service. The value of
    /// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
    /// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
    /// The default value is 1.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    #[builder(default)]
    pub sample_rate: Option<f64>,
}

/// Settings controlling eviction of unhealthy hosts from the load balancing pool.
/// This field is applicable only when the load_balancing_scheme is set
/// to INTERNAL_MANAGED and the protocol is set to HTTP, HTTPS, or HTTP2.
/// From version 6.0.
/// Default values are enforce by GCP without providing them.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderOutlierDetection {
    /// The base time that a host is ejected for. The real time is equal to the base
    /// time multiplied by the number of times the host has been ejected. Defaults to
    /// 30000ms or 30s.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseEjectionTime")]
    #[builder(default)]
    pub base_ejection_time: Option<RegionBackendServiceInitProviderOutlierDetectionBaseEjectionTime>,
    /// Number of errors before a host is ejected from the connection pool. When the
    /// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
    /// Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveErrors")]
    #[builder(default)]
    pub consecutive_errors: Option<f64>,
    /// The number of consecutive gateway failures (502, 503, 504 status or connection
    /// errors that are mapped to one of those status codes) before a consecutive
    /// gateway failure ejection occurs. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveGatewayFailure")]
    #[builder(default)]
    pub consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive 5xx. This setting can be used to disable
    /// ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveErrors")]
    #[builder(default)]
    pub enforcing_consecutive_errors: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive gateway failures. This setting can be
    /// used to disable ejection or to ramp it up slowly. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveGatewayFailure")]
    #[builder(default)]
    pub enforcing_consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through success rate statistics. This setting can be used to
    /// disable ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingSuccessRate")]
    #[builder(default)]
    pub enforcing_success_rate: Option<f64>,
    /// Time interval between ejection sweep analysis. This can result in both new
    /// ejections as well as hosts being returned to service. Defaults to 10 seconds.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<RegionBackendServiceInitProviderOutlierDetectionInterval>,
    /// Maximum percentage of hosts in the load balancing pool for the backend service
    /// that can be ejected. Defaults to 10%.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxEjectionPercent")]
    #[builder(default)]
    pub max_ejection_percent: Option<f64>,
    /// The number of hosts in a cluster that must have enough request volume to detect
    /// success rate outliers. If the number of hosts is less than this setting, outlier
    /// detection via success rate statistics is not performed for any host in the
    /// cluster. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateMinimumHosts")]
    #[builder(default)]
    pub success_rate_minimum_hosts: Option<f64>,
    /// The minimum number of total requests that must be collected in one interval (as
    /// defined by the interval duration above) to include this host in success rate
    /// based outlier detection. If the volume is lower than this setting, outlier
    /// detection via success rate statistics is not performed for that host. Defaults
    /// to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateRequestVolume")]
    #[builder(default)]
    pub success_rate_request_volume: Option<f64>,
    /// This factor is used to determine the ejection threshold for success rate outlier
    /// ejection. The ejection threshold is the difference between the mean success
    /// rate, and the product of this factor and the standard deviation of the mean
    /// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
    /// by a thousand to get a double. That is, if the desired factor is 1.9, the
    /// runtime value should be 1900. Defaults to 1900.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateStdevFactor")]
    #[builder(default)]
    pub success_rate_stdev_factor: Option<f64>,
}

/// The base time that a host is ejected for. The real time is equal to the base
/// time multiplied by the number of times the host has been ejected. Defaults to
/// 30000ms or 30s.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderOutlierDetectionBaseEjectionTime {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// Time interval between ejection sweep analysis. This can result in both new
/// ejections as well as hosts being returned to service. Defaults to 10 seconds.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceInitProviderOutlierDetectionInterval {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServiceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServiceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServiceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServiceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServicePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<RegionBackendServicePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<RegionBackendServicePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServicePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionBackendServicePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServicePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionBackendServicePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionBackendServicePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServicePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionBackendServicePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServicePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RegionBackendServiceStatus defines the observed state of RegionBackendService.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<RegionBackendServiceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProvider {
    /// Lifetime of cookies in seconds if session_affinity is
    /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
    /// only until the end of the browser session (or equivalent). The
    /// maximum allowed value for TTL is one day.
    /// When the load balancing scheme is INTERNAL, this field is not used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "affinityCookieTtlSec")]
    #[builder(default)]
    pub affinity_cookie_ttl_sec: Option<f64>,
    /// The set of backends that serve this RegionBackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub backend: Option<Vec<RegionBackendServiceStatusAtProviderBackend>>,
    /// Cloud CDN configuration for this BackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdnPolicy")]
    #[builder(default)]
    pub cdn_policy: Option<RegionBackendServiceStatusAtProviderCdnPolicy>,
    /// Settings controlling the volume of connections to a backend service. This field
    /// is applicable only when the load_balancing_scheme is set to INTERNAL_MANAGED
    /// and the protocol is set to HTTP, HTTPS, or HTTP2.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    #[builder(default)]
    pub circuit_breakers: Option<RegionBackendServiceStatusAtProviderCircuitBreakers>,
    /// Time for which instance will be drained (not accept new
    /// connections, but still work to finish started).
    /// From version 6.0.0 ConnectionDrainingTimeoutSec default value will be 300 to match default GCP value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDrainingTimeoutSec")]
    #[builder(default)]
    pub connection_draining_timeout_sec: Option<f64>,
    /// Consistent Hash-based load balancing can be used to provide soft session
    /// affinity based on HTTP headers, cookies or other properties. This load balancing
    /// policy is applicable only for HTTP connections. The affinity to a particular
    /// destination host will be lost when one or more hosts are added/removed from the
    /// destination service. This field specifies parameters that control consistent
    /// hashing.
    /// This field only applies when all of the following are true -
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consistentHash")]
    #[builder(default)]
    pub consistent_hash: Option<RegionBackendServiceStatusAtProviderConsistentHash>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    #[builder(default)]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// If true, enable Cloud CDN for this RegionBackendService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCdn")]
    #[builder(default)]
    pub enable_cdn: Option<bool>,
    /// Policy for failovers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverPolicy")]
    #[builder(default)]
    pub failover_policy: Option<RegionBackendServiceStatusAtProviderFailoverPolicy>,
    /// Fingerprint of this resource. A hash of the contents stored in this
    /// object. This field is used in optimistic locking.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub fingerprint: Option<String>,
    /// The unique identifier for the resource. This identifier is defined by the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatedId")]
    #[builder(default)]
    pub generated_id: Option<f64>,
    /// The set of URLs to HealthCheck resources for health checking
    /// this RegionBackendService. Currently at most one health
    /// check can be specified.
    /// A health check must be specified unless the backend service uses an internet
    /// or serverless NEG as a backend.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    #[builder(default)]
    pub health_checks: Option<Vec<String>>,
    /// Settings for enabling Cloud Identity Aware Proxy
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iap: Option<RegionBackendServiceStatusAtProviderIap>,
    /// an identifier for the resource with format projects/{{project}}/regions/{{region}}/backendServices/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// is set to INTERNAL_MANAGED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingScheme")]
    #[builder(default)]
    pub load_balancing_scheme: Option<String>,
    /// is set to MAGLEV or RING_HASH
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbPolicy")]
    #[builder(default)]
    pub locality_lb_policy: Option<String>,
    /// This field denotes the logging options for the load balancer traffic served by this backend service.
    /// If logging is enabled, logs will be exported to Stackdriver.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<RegionBackendServiceStatusAtProviderLogConfig>,
    /// The URL of the network to which this backend service belongs.
    /// This field can only be specified when the load balancing scheme is set to INTERNAL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
    /// This field is applicable only when the load_balancing_scheme is set
    /// to INTERNAL_MANAGED and the protocol is set to HTTP, HTTPS, or HTTP2.
    /// From version 6.0.
    /// Default values are enforce by GCP without providing them.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlierDetection")]
    #[builder(default)]
    pub outlier_detection: Option<RegionBackendServiceStatusAtProviderOutlierDetection>,
    /// A named port on a backend instance group representing the port for
    /// communication to the backend VMs in that group. Required when the
    /// loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
    /// and the backends are instance groups. The named port must be defined on each
    /// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
    /// default of "http" if not given.
    /// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    #[builder(default)]
    pub port_name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// is set to HTTP, HTTPS, or HTTP2
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
    /// The Region in which the created backend service should reside.
    /// If it is not provided, the provider region is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    #[builder(default)]
    pub self_link: Option<String>,
    /// Type of session affinity to use. The default is NONE. Session affinity is
    /// not applicable if the protocol is UDP.
    /// Possible values are: NONE, CLIENT_IP, CLIENT_IP_PORT_PROTO, CLIENT_IP_PROTO, GENERATED_COOKIE, HEADER_FIELD, HTTP_COOKIE, CLIENT_IP_NO_DESTINATION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    #[builder(default)]
    pub session_affinity: Option<String>,
    /// The backend service timeout has a different meaning depending on the type of load balancer.
    /// For more information see, Backend service settings.
    /// The default is 30 seconds.
    /// The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSec")]
    #[builder(default)]
    pub timeout_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderBackend {
    /// Specifies the balancing mode for this backend.
    /// See the Backend Services Overview
    /// for an explanation of load balancing modes.
    /// From version 6.0.0 default value will be UTILIZATION to match default GCP value.
    /// Default value is CONNECTION.
    /// Possible values are: UTILIZATION, RATE, CONNECTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "balancingMode")]
    #[builder(default)]
    pub balancing_mode: Option<String>,
    /// A multiplier applied to the group's maximum servicing capacity
    /// (based on UTILIZATION, RATE or CONNECTION).
    /// ~>NOTE: This field cannot be set for
    /// INTERNAL region backend services (default loadBalancingScheme),
    /// but is required for non-INTERNAL backend service. The total
    /// capacity_scaler for all backends must be non-zero.
    /// A setting of 0 means the group is completely drained, offering
    /// 0% of its available Capacity. Valid range is [0.0,1.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityScaler")]
    #[builder(default)]
    pub capacity_scaler: Option<f64>,
    /// An optional description of this resource.
    /// Provide this property when you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// This field designates whether this is a failover backend. More
    /// than one failover backend can be configured for a given RegionBackendService.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub failover: Option<bool>,
    /// The fully-qualified URL of an Instance Group or Network Endpoint
    /// Group resource. In case of instance group this defines the list
    /// of instances that serve traffic. Member virtual machine
    /// instances from each instance group must live in the same zone as
    /// the instance group itself. No two backends in a backend service
    /// are allowed to use same Instance Group resource.
    /// For Network Endpoint Groups this defines list of endpoints. All
    /// endpoints of Network Endpoint Group must be hosted on instances
    /// located in the same zone as the Network Endpoint Group.
    /// Backend services cannot mix Instance Group and
    /// Network Endpoint Group backends.
    /// When the load_balancing_scheme is INTERNAL, only instance groups
    /// are supported.
    /// Note that you must specify an Instance Group or Network Endpoint
    /// Group resource using the fully-qualified URL, rather than a
    /// partial URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub group: Option<String>,
    /// The max number of simultaneous connections for the group. Can
    /// be used with either CONNECTION or UTILIZATION balancing modes.
    /// Cannot be set for INTERNAL backend services.
    /// For CONNECTION mode, either maxConnections or one
    /// of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
    /// as appropriate for group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    #[builder(default)]
    pub max_connections: Option<f64>,
    /// The max number of simultaneous connections that a single backend
    /// network endpoint can handle. Cannot be set
    /// for INTERNAL backend services.
    /// This is used to calculate the capacity of the group. Can be
    /// used in either CONNECTION or UTILIZATION balancing modes. For
    /// CONNECTION mode, either maxConnections or
    /// maxConnectionsPerEndpoint must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerEndpoint")]
    #[builder(default)]
    pub max_connections_per_endpoint: Option<f64>,
    /// The max number of simultaneous connections that a single
    /// backend instance can handle. Cannot be set for INTERNAL backend
    /// services.
    /// This is used to calculate the capacity of the group.
    /// Can be used in either CONNECTION or UTILIZATION balancing modes.
    /// For CONNECTION mode, either maxConnections or
    /// maxConnectionsPerInstance must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerInstance")]
    #[builder(default)]
    pub max_connections_per_instance: Option<f64>,
    /// The max requests per second (RPS) of the group. Cannot be set
    /// for INTERNAL backend services.
    /// Can be used with either RATE or UTILIZATION balancing modes,
    /// but required if RATE mode. Either maxRate or one
    /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    /// group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRate")]
    #[builder(default)]
    pub max_rate: Option<f64>,
    /// The max requests per second (RPS) that a single backend network
    /// endpoint can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerEndpoint must be set. Cannot be set
    /// for INTERNAL backend services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerEndpoint")]
    #[builder(default)]
    pub max_rate_per_endpoint: Option<f64>,
    /// The max requests per second (RPS) that a single backend
    /// instance can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerInstance must be set. Cannot be set
    /// for INTERNAL backend services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerInstance")]
    #[builder(default)]
    pub max_rate_per_instance: Option<f64>,
    /// Used when balancingMode is UTILIZATION. This ratio defines the
    /// CPU utilization target for the group. Valid range is [0.0, 1.0].
    /// Cannot be set for INTERNAL backend services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUtilization")]
    #[builder(default)]
    pub max_utilization: Option<f64>,
}

/// Cloud CDN configuration for this BackendService.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderCdnPolicy {
    /// The CacheKeyPolicy for this CdnPolicy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheKeyPolicy")]
    #[builder(default)]
    pub cache_key_policy: Option<RegionBackendServiceStatusAtProviderCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend.
    /// The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
    /// Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheMode")]
    #[builder(default)]
    pub cache_mode: Option<String>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTtl")]
    #[builder(default)]
    pub client_ttl: Option<f64>,
    /// Specifies the default TTL for cached content served by this origin for responses
    /// that do not have an existing valid TTL (max-age or s-max-age).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTtl")]
    #[builder(default)]
    pub default_ttl: Option<f64>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    #[builder(default)]
    pub max_ttl: Option<f64>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCaching")]
    #[builder(default)]
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
    /// Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCachingPolicy")]
    #[builder(default)]
    pub negative_caching_policy: Option<Vec<RegionBackendServiceStatusAtProviderCdnPolicyNegativeCachingPolicy>>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serveWhileStale")]
    #[builder(default)]
    pub serve_while_stale: Option<f64>,
    /// Maximum number of seconds the response to a signed URL request
    /// will be considered fresh, defaults to 1hr (3600s). After this
    /// time period, the response will be revalidated before
    /// being served.
    /// When serving responses to signed URL requests, Cloud CDN will
    /// internally behave as though all responses from this backend had a
    /// "Cache-Control: public, max-age=[TTL]" header, regardless of any
    /// existing Cache-Control header. The actual headers served in
    /// responses will not be altered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signedUrlCacheMaxAgeSec")]
    #[builder(default)]
    pub signed_url_cache_max_age_sec: Option<f64>,
}

/// The CacheKeyPolicy for this CdnPolicy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderCdnPolicyCacheKeyPolicy {
    /// If true requests to different hosts will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHost")]
    #[builder(default)]
    pub include_host: Option<bool>,
    /// Names of cookies to include in cache keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNamedCookies")]
    #[builder(default)]
    pub include_named_cookies: Option<Vec<String>>,
    /// If true, http and https requests will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeProtocol")]
    #[builder(default)]
    pub include_protocol: Option<bool>,
    /// If true, include query string parameters in the cache key
    /// according to query_string_whitelist and
    /// query_string_blacklist. If neither is set, the entire query
    /// string will be included.
    /// If false, the query string will be excluded from the cache
    /// key entirely.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeQueryString")]
    #[builder(default)]
    pub include_query_string: Option<bool>,
    /// Names of query string parameters to exclude in cache keys.
    /// All other parameters will be included. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringBlacklist")]
    #[builder(default)]
    pub query_string_blacklist: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys.
    /// All other parameters will be excluded. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringWhitelist")]
    #[builder(default)]
    pub query_string_whitelist: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
    /// can be specified as values, and you cannot specify a status code more than once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub code: Option<f64>,
}

/// Settings controlling the volume of connections to a backend service. This field
/// is applicable only when the load_balancing_scheme is set to INTERNAL_MANAGED
/// and the protocol is set to HTTP, HTTPS, or HTTP2.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderCircuitBreakers {
    /// The maximum number of connections to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    #[builder(default)]
    pub max_connections: Option<f64>,
    /// The maximum number of pending requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    #[builder(default)]
    pub max_pending_requests: Option<f64>,
    /// The maximum number of parallel requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    #[builder(default)]
    pub max_requests: Option<f64>,
    /// Maximum requests for a single backend connection. This parameter
    /// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
    /// not specified, there is no limit. Setting this parameter to 1
    /// will effectively disable keep alive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    #[builder(default)]
    pub max_requests_per_connection: Option<f64>,
    /// The maximum number of parallel retries to the backend cluster.
    /// Defaults to 3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    #[builder(default)]
    pub max_retries: Option<f64>,
}

/// Consistent Hash-based load balancing can be used to provide soft session
/// affinity based on HTTP headers, cookies or other properties. This load balancing
/// policy is applicable only for HTTP connections. The affinity to a particular
/// destination host will be lost when one or more hosts are added/removed from the
/// destination service. This field specifies parameters that control consistent
/// hashing.
/// This field only applies when all of the following are true -
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderConsistentHash {
    /// Hash is based on HTTP Cookie. This field describes a HTTP cookie
    /// that will be used as the hash key for the consistent hash load
    /// balancer. If the cookie is not present, it will be generated.
    /// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpCookie")]
    #[builder(default)]
    pub http_cookie: Option<RegionBackendServiceStatusAtProviderConsistentHashHttpCookie>,
    /// The hash based on the value of the specified header field.
    /// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaderName")]
    #[builder(default)]
    pub http_header_name: Option<String>,
    /// The minimum number of virtual nodes to use for the hash ring.
    /// Larger ring sizes result in more granular load
    /// distributions. If the number of hosts in the load balancing pool
    /// is larger than the ring size, each host will be assigned a single
    /// virtual node.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumRingSize")]
    #[builder(default)]
    pub minimum_ring_size: Option<f64>,
}

/// Hash is based on HTTP Cookie. This field describes a HTTP cookie
/// that will be used as the hash key for the consistent hash load
/// balancer. If the cookie is not present, it will be generated.
/// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderConsistentHashHttpCookie {
    /// Name of the resource. Provided by the client when the resource is
    /// created. The name must be 1-63 characters long, and comply with
    /// RFC1035. Specifically, the name must be 1-63 characters long and match
    /// the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the
    /// first character must be a lowercase letter, and all following
    /// characters must be a dash, lowercase letter, or digit, except the last
    /// character, which cannot be a dash.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Path to set for the cookie.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ttl: Option<RegionBackendServiceStatusAtProviderConsistentHashHttpCookieTtl>,
}

/// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
/// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderConsistentHashHttpCookieTtl {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// Policy for failovers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderFailoverPolicy {
    /// On failover or failback, this field indicates whether connection drain
    /// will be honored. Setting this to true has the following effect: connections
    /// to the old active pool are not drained. Connections to the new active pool
    /// use the timeout of 10 min (currently fixed). Setting to false has the
    /// following effect: both old and new connections will have a drain timeout
    /// of 10 min.
    /// This can be set to true only if the protocol is TCP.
    /// The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableConnectionDrainOnFailover")]
    #[builder(default)]
    pub disable_connection_drain_on_failover: Option<bool>,
    /// This option is used only when no healthy VMs are detected in the primary
    /// and backup instance groups. When set to true, traffic is dropped. When
    /// set to false, new connections are sent across all VMs in the primary group.
    /// The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dropTrafficIfUnhealthy")]
    #[builder(default)]
    pub drop_traffic_if_unhealthy: Option<bool>,
    /// The value of the field must be in [0, 1]. If the ratio of the healthy
    /// VMs in the primary backend is at or below this number, traffic arriving
    /// at the load-balanced IP will be directed to the failover backend.
    /// In case where 'failoverRatio' is not set or all the VMs in the backup
    /// backend are unhealthy, the traffic will be directed back to the primary
    /// backend in the "force" mode, where traffic will be spread to the healthy
    /// VMs with the best effort, or to all VMs when no VM is healthy.
    /// This field is only used with l4 load balancing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverRatio")]
    #[builder(default)]
    pub failover_ratio: Option<f64>,
}

/// Settings for enabling Cloud Identity Aware Proxy
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderIap {
    /// OAuth2 Client ID for IAP
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientId")]
    #[builder(default)]
    pub oauth2_client_id: Option<String>,
}

/// This field denotes the logging options for the load balancer traffic served by this backend service.
/// If logging is enabled, logs will be exported to Stackdriver.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderLogConfig {
    /// Whether to enable logging for the load balancer traffic served by this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// This field can only be specified if logging is enabled for this backend service. The value of
    /// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
    /// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
    /// The default value is 1.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    #[builder(default)]
    pub sample_rate: Option<f64>,
}

/// Settings controlling eviction of unhealthy hosts from the load balancing pool.
/// This field is applicable only when the load_balancing_scheme is set
/// to INTERNAL_MANAGED and the protocol is set to HTTP, HTTPS, or HTTP2.
/// From version 6.0.
/// Default values are enforce by GCP without providing them.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderOutlierDetection {
    /// The base time that a host is ejected for. The real time is equal to the base
    /// time multiplied by the number of times the host has been ejected. Defaults to
    /// 30000ms or 30s.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseEjectionTime")]
    #[builder(default)]
    pub base_ejection_time: Option<RegionBackendServiceStatusAtProviderOutlierDetectionBaseEjectionTime>,
    /// Number of errors before a host is ejected from the connection pool. When the
    /// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
    /// Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveErrors")]
    #[builder(default)]
    pub consecutive_errors: Option<f64>,
    /// The number of consecutive gateway failures (502, 503, 504 status or connection
    /// errors that are mapped to one of those status codes) before a consecutive
    /// gateway failure ejection occurs. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveGatewayFailure")]
    #[builder(default)]
    pub consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive 5xx. This setting can be used to disable
    /// ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveErrors")]
    #[builder(default)]
    pub enforcing_consecutive_errors: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive gateway failures. This setting can be
    /// used to disable ejection or to ramp it up slowly. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveGatewayFailure")]
    #[builder(default)]
    pub enforcing_consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through success rate statistics. This setting can be used to
    /// disable ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingSuccessRate")]
    #[builder(default)]
    pub enforcing_success_rate: Option<f64>,
    /// Time interval between ejection sweep analysis. This can result in both new
    /// ejections as well as hosts being returned to service. Defaults to 10 seconds.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<RegionBackendServiceStatusAtProviderOutlierDetectionInterval>,
    /// Maximum percentage of hosts in the load balancing pool for the backend service
    /// that can be ejected. Defaults to 10%.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxEjectionPercent")]
    #[builder(default)]
    pub max_ejection_percent: Option<f64>,
    /// The number of hosts in a cluster that must have enough request volume to detect
    /// success rate outliers. If the number of hosts is less than this setting, outlier
    /// detection via success rate statistics is not performed for any host in the
    /// cluster. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateMinimumHosts")]
    #[builder(default)]
    pub success_rate_minimum_hosts: Option<f64>,
    /// The minimum number of total requests that must be collected in one interval (as
    /// defined by the interval duration above) to include this host in success rate
    /// based outlier detection. If the volume is lower than this setting, outlier
    /// detection via success rate statistics is not performed for that host. Defaults
    /// to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateRequestVolume")]
    #[builder(default)]
    pub success_rate_request_volume: Option<f64>,
    /// This factor is used to determine the ejection threshold for success rate outlier
    /// ejection. The ejection threshold is the difference between the mean success
    /// rate, and the product of this factor and the standard deviation of the mean
    /// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
    /// by a thousand to get a double. That is, if the desired factor is 1.9, the
    /// runtime value should be 1900. Defaults to 1900.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateStdevFactor")]
    #[builder(default)]
    pub success_rate_stdev_factor: Option<f64>,
}

/// The base time that a host is ejected for. The real time is equal to the base
/// time multiplied by the number of times the host has been ejected. Defaults to
/// 30000ms or 30s.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderOutlierDetectionBaseEjectionTime {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}

/// Time interval between ejection sweep analysis. This can result in both new
/// ejections as well as hosts being returned to service. Defaults to 10 seconds.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionBackendServiceStatusAtProviderOutlierDetectionInterval {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub seconds: Option<f64>,
}


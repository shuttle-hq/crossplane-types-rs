// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ImageSpec defines the desired state of Image
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "Image", plural = "images")]
#[kube(status = "ImageStatus")]
pub struct ImageSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<ImageDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ImageForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<ImageInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<ImageProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<ImagePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ImageWriteConnectionSecretToRef>,
}

/// ImageSpec defines the desired state of Image
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProvider {
    /// An optional description of this resource. Provide this property when
    /// you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Size of the image when restored onto a persistent disk (in GB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    #[builder(default)]
    pub disk_size_gb: Option<f64>,
    /// The name of the image family to which this image belongs. You can
    /// create disks by specifying an image family instead of a specific
    /// image name. The image family always returns its latest image that is
    /// not deprecated. The name of the image family must comply with
    /// RFC1035.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub family: Option<String>,
    /// A list of features to enable on the guest operating system.
    /// Applicable only for bootable images.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestOsFeatures")]
    #[builder(default)]
    pub guest_os_features: Option<Vec<ImageForProviderGuestOsFeatures>>,
    /// Encrypts the image using a customer-supplied encryption key.
    /// After you encrypt an image with a customer-supplied key, you must
    /// provide the same key if you use the image later (e.g. to create a
    /// disk from the image)
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageEncryptionKey")]
    #[builder(default)]
    pub image_encryption_key: Option<ImageForProviderImageEncryptionKey>,
    /// Labels to apply to this Image.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Any applicable license URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub licenses: Option<Vec<String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The parameters of the raw disk image.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawDisk")]
    #[builder(default)]
    pub raw_disk: Option<ImageForProviderRawDisk>,
    /// The source disk to create this image based on.
    /// You must provide either this property or the
    /// rawDisk.source property but not both to create an image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDisk")]
    #[builder(default)]
    pub source_disk: Option<String>,
    /// URL of the source image used to create this image. In order to create an image, you must provide the full or partial
    /// URL of one of the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceImage")]
    #[builder(default)]
    pub source_image: Option<String>,
    /// URL of the source snapshot used to create this image.
    /// In order to create an image, you must provide the full or partial URL of one of the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSnapshot")]
    #[builder(default)]
    pub source_snapshot: Option<String>,
    /// Cloud Storage bucket storage location of the image
    /// (regional or multi-regional).
    /// Reference link: https://cloud.google.com/compute/docs/reference/rest/v1/images
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLocations")]
    #[builder(default)]
    pub storage_locations: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderGuestOsFeatures {
    /// The type of supported feature. Read Enabling guest operating system features to see a list of available options.
    /// Possible values are: MULTI_IP_SUBNET, SECURE_BOOT, SEV_CAPABLE, UEFI_COMPATIBLE, VIRTIO_SCSI_MULTIQUEUE, WINDOWS, GVNIC, SEV_LIVE_MIGRATABLE, SEV_SNP_CAPABLE, SUSPEND_RESUME_COMPATIBLE, TDX_CAPABLE, SEV_LIVE_MIGRATABLE_V2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Encrypts the image using a customer-supplied encryption key.
/// After you encrypt an image with a customer-supplied key, you must
/// provide the same key if you use the image later (e.g. to create a
/// disk from the image)
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderImageEncryptionKey {
    /// The self link of the encryption key that is stored in Google Cloud
    /// KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    #[builder(default)]
    pub kms_key_self_link: Option<String>,
    /// The service account being used for the encryption request for the
    /// given KMS key. If absent, the Compute Engine default service
    /// account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    #[builder(default)]
    pub kms_key_service_account: Option<String>,
}

/// The parameters of the raw disk image.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderRawDisk {
    /// The format used to encode and transmit the block device, which
    /// should be TAR. This is just a container and transmission format
    /// and not a runtime format. Provided by the client when the disk
    /// image is created.
    /// Default value is TAR.
    /// Possible values are: TAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerType")]
    #[builder(default)]
    pub container_type: Option<String>,
    /// An optional SHA1 checksum of the disk image before unpackaging.
    /// This is provided by the client when the disk image is created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub sha1: Option<String>,
    /// The full Google Cloud Storage URL where disk storage is stored
    /// You must provide either this property or the sourceDisk property
    /// but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProvider {
    /// An optional description of this resource. Provide this property when
    /// you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Size of the image when restored onto a persistent disk (in GB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    #[builder(default)]
    pub disk_size_gb: Option<f64>,
    /// The name of the image family to which this image belongs. You can
    /// create disks by specifying an image family instead of a specific
    /// image name. The image family always returns its latest image that is
    /// not deprecated. The name of the image family must comply with
    /// RFC1035.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub family: Option<String>,
    /// A list of features to enable on the guest operating system.
    /// Applicable only for bootable images.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestOsFeatures")]
    #[builder(default)]
    pub guest_os_features: Option<Vec<ImageInitProviderGuestOsFeatures>>,
    /// Encrypts the image using a customer-supplied encryption key.
    /// After you encrypt an image with a customer-supplied key, you must
    /// provide the same key if you use the image later (e.g. to create a
    /// disk from the image)
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageEncryptionKey")]
    #[builder(default)]
    pub image_encryption_key: Option<ImageInitProviderImageEncryptionKey>,
    /// Labels to apply to this Image.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Any applicable license URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub licenses: Option<Vec<String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The parameters of the raw disk image.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawDisk")]
    #[builder(default)]
    pub raw_disk: Option<ImageInitProviderRawDisk>,
    /// The source disk to create this image based on.
    /// You must provide either this property or the
    /// rawDisk.source property but not both to create an image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDisk")]
    #[builder(default)]
    pub source_disk: Option<String>,
    /// URL of the source image used to create this image. In order to create an image, you must provide the full or partial
    /// URL of one of the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceImage")]
    #[builder(default)]
    pub source_image: Option<String>,
    /// URL of the source snapshot used to create this image.
    /// In order to create an image, you must provide the full or partial URL of one of the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSnapshot")]
    #[builder(default)]
    pub source_snapshot: Option<String>,
    /// Cloud Storage bucket storage location of the image
    /// (regional or multi-regional).
    /// Reference link: https://cloud.google.com/compute/docs/reference/rest/v1/images
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLocations")]
    #[builder(default)]
    pub storage_locations: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderGuestOsFeatures {
    /// The type of supported feature. Read Enabling guest operating system features to see a list of available options.
    /// Possible values are: MULTI_IP_SUBNET, SECURE_BOOT, SEV_CAPABLE, UEFI_COMPATIBLE, VIRTIO_SCSI_MULTIQUEUE, WINDOWS, GVNIC, SEV_LIVE_MIGRATABLE, SEV_SNP_CAPABLE, SUSPEND_RESUME_COMPATIBLE, TDX_CAPABLE, SEV_LIVE_MIGRATABLE_V2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Encrypts the image using a customer-supplied encryption key.
/// After you encrypt an image with a customer-supplied key, you must
/// provide the same key if you use the image later (e.g. to create a
/// disk from the image)
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderImageEncryptionKey {
    /// The self link of the encryption key that is stored in Google Cloud
    /// KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    #[builder(default)]
    pub kms_key_self_link: Option<String>,
    /// The service account being used for the encryption request for the
    /// given KMS key. If absent, the Compute Engine default service
    /// account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    #[builder(default)]
    pub kms_key_service_account: Option<String>,
}

/// The parameters of the raw disk image.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderRawDisk {
    /// The format used to encode and transmit the block device, which
    /// should be TAR. This is just a container and transmission format
    /// and not a runtime format. Provided by the client when the disk
    /// image is created.
    /// Default value is TAR.
    /// Possible values are: TAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerType")]
    #[builder(default)]
    pub container_type: Option<String>,
    /// An optional SHA1 checksum of the disk image before unpackaging.
    /// This is provided by the client when the disk image is created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub sha1: Option<String>,
    /// The full Google Cloud Storage URL where disk storage is stored
    /// You must provide either this property or the sourceDisk property
    /// but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImagePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ImagePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ImagePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImagePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImagePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImagePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImagePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImagePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImagePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ImageStatus defines the observed state of Image.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<ImageStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProvider {
    /// Size of the image tar.gz archive stored in Google Cloud Storage (in
    /// bytes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveSizeBytes")]
    #[builder(default)]
    pub archive_size_bytes: Option<f64>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    #[builder(default)]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when
    /// you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Size of the image when restored onto a persistent disk (in GB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    #[builder(default)]
    pub disk_size_gb: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// The name of the image family to which this image belongs. You can
    /// create disks by specifying an image family instead of a specific
    /// image name. The image family always returns its latest image that is
    /// not deprecated. The name of the image family must comply with
    /// RFC1035.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub family: Option<String>,
    /// A list of features to enable on the guest operating system.
    /// Applicable only for bootable images.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestOsFeatures")]
    #[builder(default)]
    pub guest_os_features: Option<Vec<ImageStatusAtProviderGuestOsFeatures>>,
    /// an identifier for the resource with format projects/{{project}}/global/images/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Encrypts the image using a customer-supplied encryption key.
    /// After you encrypt an image with a customer-supplied key, you must
    /// provide the same key if you use the image later (e.g. to create a
    /// disk from the image)
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageEncryptionKey")]
    #[builder(default)]
    pub image_encryption_key: Option<ImageStatusAtProviderImageEncryptionKey>,
    /// The fingerprint used for optimistic locking of this resource. Used
    /// internally during updates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelFingerprint")]
    #[builder(default)]
    pub label_fingerprint: Option<String>,
    /// Labels to apply to this Image.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Any applicable license URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub licenses: Option<Vec<String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The parameters of the raw disk image.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawDisk")]
    #[builder(default)]
    pub raw_disk: Option<ImageStatusAtProviderRawDisk>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    #[builder(default)]
    pub self_link: Option<String>,
    /// The source disk to create this image based on.
    /// You must provide either this property or the
    /// rawDisk.source property but not both to create an image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDisk")]
    #[builder(default)]
    pub source_disk: Option<String>,
    /// URL of the source image used to create this image. In order to create an image, you must provide the full or partial
    /// URL of one of the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceImage")]
    #[builder(default)]
    pub source_image: Option<String>,
    /// URL of the source snapshot used to create this image.
    /// In order to create an image, you must provide the full or partial URL of one of the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSnapshot")]
    #[builder(default)]
    pub source_snapshot: Option<String>,
    /// Cloud Storage bucket storage location of the image
    /// (regional or multi-regional).
    /// Reference link: https://cloud.google.com/compute/docs/reference/rest/v1/images
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLocations")]
    #[builder(default)]
    pub storage_locations: Option<Vec<String>>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderGuestOsFeatures {
    /// The type of supported feature. Read Enabling guest operating system features to see a list of available options.
    /// Possible values are: MULTI_IP_SUBNET, SECURE_BOOT, SEV_CAPABLE, UEFI_COMPATIBLE, VIRTIO_SCSI_MULTIQUEUE, WINDOWS, GVNIC, SEV_LIVE_MIGRATABLE, SEV_SNP_CAPABLE, SUSPEND_RESUME_COMPATIBLE, TDX_CAPABLE, SEV_LIVE_MIGRATABLE_V2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// Encrypts the image using a customer-supplied encryption key.
/// After you encrypt an image with a customer-supplied key, you must
/// provide the same key if you use the image later (e.g. to create a
/// disk from the image)
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderImageEncryptionKey {
    /// The self link of the encryption key that is stored in Google Cloud
    /// KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    #[builder(default)]
    pub kms_key_self_link: Option<String>,
    /// The service account being used for the encryption request for the
    /// given KMS key. If absent, the Compute Engine default service
    /// account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    #[builder(default)]
    pub kms_key_service_account: Option<String>,
}

/// The parameters of the raw disk image.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderRawDisk {
    /// The format used to encode and transmit the block device, which
    /// should be TAR. This is just a container and transmission format
    /// and not a runtime format. Provided by the client when the disk
    /// image is created.
    /// Default value is TAR.
    /// Possible values are: TAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerType")]
    #[builder(default)]
    pub container_type: Option<String>,
    /// An optional SHA1 checksum of the disk image before unpackaging.
    /// This is provided by the client when the disk image is created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub sha1: Option<String>,
    /// The full Google Cloud Storage URL where disk storage is stored
    /// You must provide either this property or the sourceDisk property
    /// but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
}


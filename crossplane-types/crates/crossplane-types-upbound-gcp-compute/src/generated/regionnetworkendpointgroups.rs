// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RegionNetworkEndpointGroupSpec defines the desired state of RegionNetworkEndpointGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "RegionNetworkEndpointGroup", plural = "regionnetworkendpointgroups")]
#[kube(status = "RegionNetworkEndpointGroupStatus")]
pub struct RegionNetworkEndpointGroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<RegionNetworkEndpointGroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RegionNetworkEndpointGroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<RegionNetworkEndpointGroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<RegionNetworkEndpointGroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<RegionNetworkEndpointGroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<RegionNetworkEndpointGroupWriteConnectionSecretToRef>,
}

/// RegionNetworkEndpointGroupSpec defines the desired state of RegionNetworkEndpointGroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProvider {
    /// This field is only used for SERVERLESS NEGs.
    /// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngine")]
    #[builder(default)]
    pub app_engine: Option<RegionNetworkEndpointGroupForProviderAppEngine>,
    /// This field is only used for SERVERLESS NEGs.
    /// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudFunction")]
    #[builder(default)]
    pub cloud_function: Option<RegionNetworkEndpointGroupForProviderCloudFunction>,
    /// This field is only used for SERVERLESS NEGs.
    /// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudRun")]
    #[builder(default)]
    pub cloud_run: Option<RegionNetworkEndpointGroupForProviderCloudRun>,
    /// An optional description of this resource. Provide this property when
    /// you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// This field is only used for PSC and INTERNET NEGs.
    /// The URL of the network to which all network endpoints in the NEG belong. Uses
    /// "default" project network if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// Type of network endpoints in this network endpoint group. Defaults to SERVERLESS.
    /// Default value is SERVERLESS.
    /// Possible values are: SERVERLESS, PRIVATE_SERVICE_CONNECT, INTERNET_IP_PORT, INTERNET_FQDN_PORT, GCE_VM_IP_PORTMAP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkEndpointType")]
    #[builder(default)]
    pub network_endpoint_type: Option<String>,
    /// Reference to a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkRef")]
    #[builder(default)]
    pub network_ref: Option<RegionNetworkEndpointGroupForProviderNetworkRef>,
    /// Selector for a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSelector")]
    #[builder(default)]
    pub network_selector: Option<RegionNetworkEndpointGroupForProviderNetworkSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// This field is only used for PSC and INTERNET NEGs.
    /// The target service url used to set up private service connection to
    /// a Google API or a PSC Producer Service Attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscTargetService")]
    #[builder(default)]
    pub psc_target_service: Option<String>,
    /// Reference to a ServiceAttachment in compute to populate pscTargetService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscTargetServiceRef")]
    #[builder(default)]
    pub psc_target_service_ref: Option<RegionNetworkEndpointGroupForProviderPscTargetServiceRef>,
    /// Selector for a ServiceAttachment in compute to populate pscTargetService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscTargetServiceSelector")]
    #[builder(default)]
    pub psc_target_service_selector: Option<RegionNetworkEndpointGroupForProviderPscTargetServiceSelector>,
    /// A reference to the region where the regional NEGs reside.
    pub region: String,
    /// This field is only used for PSC NEGs.
    /// Optional URL of the subnetwork to which all network endpoints in the NEG belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subnetwork: Option<String>,
    /// Reference to a Subnetwork in compute to populate subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetworkRef")]
    #[builder(default)]
    pub subnetwork_ref: Option<RegionNetworkEndpointGroupForProviderSubnetworkRef>,
    /// Selector for a Subnetwork in compute to populate subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetworkSelector")]
    #[builder(default)]
    pub subnetwork_selector: Option<RegionNetworkEndpointGroupForProviderSubnetworkSelector>,
}

/// This field is only used for SERVERLESS NEGs.
/// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderAppEngine {
    /// Optional serving service.
    /// The service name must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "default", "my-service".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// A template to parse service and version fields from a request URL.
    /// URL mask allows for routing to multiple App Engine services without
    /// having to create multiple Network Endpoint Groups and backend services.
    /// For example, the request URLs "foo1-dot-appname.appspot.com/v1" and
    /// "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with
    /// URL mask "-dot-appname.appspot.com/". The URL mask will parse
    /// them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMask")]
    #[builder(default)]
    pub url_mask: Option<String>,
    /// Optional serving version.
    /// The version must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "v1", "v2".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// This field is only used for SERVERLESS NEGs.
/// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudFunction {
    /// A user-defined name of the Cloud Function.
    /// The function name is case-sensitive and must be 1-63 characters long.
    /// Example value: "func1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub function: Option<String>,
    /// Reference to a Function in cloudfunctions to populate function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionRef")]
    #[builder(default)]
    pub function_ref: Option<RegionNetworkEndpointGroupForProviderCloudFunctionFunctionRef>,
    /// Selector for a Function in cloudfunctions to populate function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionSelector")]
    #[builder(default)]
    pub function_selector: Option<RegionNetworkEndpointGroupForProviderCloudFunctionFunctionSelector>,
    /// A template to parse function field from a request URL. URL mask allows
    /// for routing to multiple Cloud Functions without having to create
    /// multiple Network Endpoint Groups and backend services.
    /// For example, request URLs "mydomain.com/function1" and "mydomain.com/function2"
    /// can be backed by the same Serverless NEG with URL mask "/". The URL mask
    /// will parse them to { function = "function1" } and { function = "function2" } respectively.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMask")]
    #[builder(default)]
    pub url_mask: Option<String>,
}

/// Reference to a Function in cloudfunctions to populate function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudFunctionFunctionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderCloudFunctionFunctionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudFunctionFunctionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderCloudFunctionFunctionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderCloudFunctionFunctionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderCloudFunctionFunctionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderCloudFunctionFunctionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in cloudfunctions to populate function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudFunctionFunctionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderCloudFunctionFunctionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudFunctionFunctionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderCloudFunctionFunctionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderCloudFunctionFunctionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderCloudFunctionFunctionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderCloudFunctionFunctionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// This field is only used for SERVERLESS NEGs.
/// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudRun {
    /// Cloud Run service is the main resource of Cloud Run.
    /// The service must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "run-service".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// Reference to a Service in cloudrun to populate service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRef")]
    #[builder(default)]
    pub service_ref: Option<RegionNetworkEndpointGroupForProviderCloudRunServiceRef>,
    /// Selector for a Service in cloudrun to populate service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSelector")]
    #[builder(default)]
    pub service_selector: Option<RegionNetworkEndpointGroupForProviderCloudRunServiceSelector>,
    /// Cloud Run tag represents the "named-revision" to provide
    /// additional fine-grained traffic routing information.
    /// The tag must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "revision-0010".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
    /// A template to parse service and tag fields from a request URL.
    /// URL mask allows for routing to multiple Run services without having
    /// to create multiple network endpoint groups and backend services.
    /// For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2"
    /// an be backed by the same Serverless Network Endpoint Group (NEG) with
    /// URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" }
    /// and { service="bar2", tag="foo2" } respectively.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMask")]
    #[builder(default)]
    pub url_mask: Option<String>,
}

/// Reference to a Service in cloudrun to populate service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudRunServiceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderCloudRunServiceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudRunServiceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderCloudRunServiceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderCloudRunServiceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderCloudRunServiceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderCloudRunServiceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Service in cloudrun to populate service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudRunServiceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderCloudRunServiceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderCloudRunServiceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderCloudRunServiceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderCloudRunServiceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderCloudRunServiceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderCloudRunServiceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ServiceAttachment in compute to populate pscTargetService.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderPscTargetServiceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderPscTargetServiceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderPscTargetServiceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderPscTargetServiceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderPscTargetServiceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderPscTargetServiceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderPscTargetServiceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ServiceAttachment in compute to populate pscTargetService.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderPscTargetServiceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderPscTargetServiceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderPscTargetServiceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderPscTargetServiceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderPscTargetServiceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderPscTargetServiceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderPscTargetServiceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnetwork in compute to populate subnetwork.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderSubnetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderSubnetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderSubnetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderSubnetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderSubnetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderSubnetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderSubnetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnetwork in compute to populate subnetwork.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderSubnetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupForProviderSubnetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupForProviderSubnetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupForProviderSubnetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupForProviderSubnetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderSubnetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupForProviderSubnetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProvider {
    /// This field is only used for SERVERLESS NEGs.
    /// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngine")]
    #[builder(default)]
    pub app_engine: Option<RegionNetworkEndpointGroupInitProviderAppEngine>,
    /// This field is only used for SERVERLESS NEGs.
    /// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudFunction")]
    #[builder(default)]
    pub cloud_function: Option<RegionNetworkEndpointGroupInitProviderCloudFunction>,
    /// This field is only used for SERVERLESS NEGs.
    /// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudRun")]
    #[builder(default)]
    pub cloud_run: Option<RegionNetworkEndpointGroupInitProviderCloudRun>,
    /// An optional description of this resource. Provide this property when
    /// you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// This field is only used for PSC and INTERNET NEGs.
    /// The URL of the network to which all network endpoints in the NEG belong. Uses
    /// "default" project network if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// Type of network endpoints in this network endpoint group. Defaults to SERVERLESS.
    /// Default value is SERVERLESS.
    /// Possible values are: SERVERLESS, PRIVATE_SERVICE_CONNECT, INTERNET_IP_PORT, INTERNET_FQDN_PORT, GCE_VM_IP_PORTMAP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkEndpointType")]
    #[builder(default)]
    pub network_endpoint_type: Option<String>,
    /// Reference to a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkRef")]
    #[builder(default)]
    pub network_ref: Option<RegionNetworkEndpointGroupInitProviderNetworkRef>,
    /// Selector for a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSelector")]
    #[builder(default)]
    pub network_selector: Option<RegionNetworkEndpointGroupInitProviderNetworkSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// This field is only used for PSC and INTERNET NEGs.
    /// The target service url used to set up private service connection to
    /// a Google API or a PSC Producer Service Attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscTargetService")]
    #[builder(default)]
    pub psc_target_service: Option<String>,
    /// Reference to a ServiceAttachment in compute to populate pscTargetService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscTargetServiceRef")]
    #[builder(default)]
    pub psc_target_service_ref: Option<RegionNetworkEndpointGroupInitProviderPscTargetServiceRef>,
    /// Selector for a ServiceAttachment in compute to populate pscTargetService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscTargetServiceSelector")]
    #[builder(default)]
    pub psc_target_service_selector: Option<RegionNetworkEndpointGroupInitProviderPscTargetServiceSelector>,
    /// This field is only used for PSC NEGs.
    /// Optional URL of the subnetwork to which all network endpoints in the NEG belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subnetwork: Option<String>,
    /// Reference to a Subnetwork in compute to populate subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetworkRef")]
    #[builder(default)]
    pub subnetwork_ref: Option<RegionNetworkEndpointGroupInitProviderSubnetworkRef>,
    /// Selector for a Subnetwork in compute to populate subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetworkSelector")]
    #[builder(default)]
    pub subnetwork_selector: Option<RegionNetworkEndpointGroupInitProviderSubnetworkSelector>,
}

/// This field is only used for SERVERLESS NEGs.
/// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderAppEngine {
    /// Optional serving service.
    /// The service name must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "default", "my-service".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// A template to parse service and version fields from a request URL.
    /// URL mask allows for routing to multiple App Engine services without
    /// having to create multiple Network Endpoint Groups and backend services.
    /// For example, the request URLs "foo1-dot-appname.appspot.com/v1" and
    /// "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with
    /// URL mask "-dot-appname.appspot.com/". The URL mask will parse
    /// them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMask")]
    #[builder(default)]
    pub url_mask: Option<String>,
    /// Optional serving version.
    /// The version must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "v1", "v2".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// This field is only used for SERVERLESS NEGs.
/// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudFunction {
    /// A user-defined name of the Cloud Function.
    /// The function name is case-sensitive and must be 1-63 characters long.
    /// Example value: "func1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub function: Option<String>,
    /// Reference to a Function in cloudfunctions to populate function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionRef")]
    #[builder(default)]
    pub function_ref: Option<RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionRef>,
    /// Selector for a Function in cloudfunctions to populate function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionSelector")]
    #[builder(default)]
    pub function_selector: Option<RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionSelector>,
    /// A template to parse function field from a request URL. URL mask allows
    /// for routing to multiple Cloud Functions without having to create
    /// multiple Network Endpoint Groups and backend services.
    /// For example, request URLs "mydomain.com/function1" and "mydomain.com/function2"
    /// can be backed by the same Serverless NEG with URL mask "/". The URL mask
    /// will parse them to { function = "function1" } and { function = "function2" } respectively.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMask")]
    #[builder(default)]
    pub url_mask: Option<String>,
}

/// Reference to a Function in cloudfunctions to populate function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in cloudfunctions to populate function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderCloudFunctionFunctionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// This field is only used for SERVERLESS NEGs.
/// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudRun {
    /// Cloud Run service is the main resource of Cloud Run.
    /// The service must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "run-service".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// Reference to a Service in cloudrun to populate service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRef")]
    #[builder(default)]
    pub service_ref: Option<RegionNetworkEndpointGroupInitProviderCloudRunServiceRef>,
    /// Selector for a Service in cloudrun to populate service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSelector")]
    #[builder(default)]
    pub service_selector: Option<RegionNetworkEndpointGroupInitProviderCloudRunServiceSelector>,
    /// Cloud Run tag represents the "named-revision" to provide
    /// additional fine-grained traffic routing information.
    /// The tag must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "revision-0010".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
    /// A template to parse service and tag fields from a request URL.
    /// URL mask allows for routing to multiple Run services without having
    /// to create multiple network endpoint groups and backend services.
    /// For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2"
    /// an be backed by the same Serverless Network Endpoint Group (NEG) with
    /// URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" }
    /// and { service="bar2", tag="foo2" } respectively.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMask")]
    #[builder(default)]
    pub url_mask: Option<String>,
}

/// Reference to a Service in cloudrun to populate service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudRunServiceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderCloudRunServiceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudRunServiceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderCloudRunServiceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderCloudRunServiceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderCloudRunServiceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderCloudRunServiceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Service in cloudrun to populate service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudRunServiceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderCloudRunServiceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderCloudRunServiceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderCloudRunServiceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderCloudRunServiceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderCloudRunServiceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderCloudRunServiceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ServiceAttachment in compute to populate pscTargetService.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderPscTargetServiceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderPscTargetServiceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderPscTargetServiceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderPscTargetServiceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderPscTargetServiceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderPscTargetServiceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderPscTargetServiceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ServiceAttachment in compute to populate pscTargetService.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderPscTargetServiceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderPscTargetServiceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderPscTargetServiceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderPscTargetServiceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderPscTargetServiceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderPscTargetServiceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderPscTargetServiceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnetwork in compute to populate subnetwork.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderSubnetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderSubnetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderSubnetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderSubnetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderSubnetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderSubnetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderSubnetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnetwork in compute to populate subnetwork.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderSubnetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupInitProviderSubnetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupInitProviderSubnetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupInitProviderSubnetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupInitProviderSubnetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderSubnetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupInitProviderSubnetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<RegionNetworkEndpointGroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<RegionNetworkEndpointGroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RegionNetworkEndpointGroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RegionNetworkEndpointGroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RegionNetworkEndpointGroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegionNetworkEndpointGroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RegionNetworkEndpointGroupStatus defines the observed state of RegionNetworkEndpointGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<RegionNetworkEndpointGroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupStatusAtProvider {
    /// This field is only used for SERVERLESS NEGs.
    /// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngine")]
    #[builder(default)]
    pub app_engine: Option<RegionNetworkEndpointGroupStatusAtProviderAppEngine>,
    /// This field is only used for SERVERLESS NEGs.
    /// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudFunction")]
    #[builder(default)]
    pub cloud_function: Option<RegionNetworkEndpointGroupStatusAtProviderCloudFunction>,
    /// This field is only used for SERVERLESS NEGs.
    /// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudRun")]
    #[builder(default)]
    pub cloud_run: Option<RegionNetworkEndpointGroupStatusAtProviderCloudRun>,
    /// An optional description of this resource. Provide this property when
    /// you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/regions/{{region}}/networkEndpointGroups/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// This field is only used for PSC and INTERNET NEGs.
    /// The URL of the network to which all network endpoints in the NEG belong. Uses
    /// "default" project network if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// Type of network endpoints in this network endpoint group. Defaults to SERVERLESS.
    /// Default value is SERVERLESS.
    /// Possible values are: SERVERLESS, PRIVATE_SERVICE_CONNECT, INTERNET_IP_PORT, INTERNET_FQDN_PORT, GCE_VM_IP_PORTMAP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkEndpointType")]
    #[builder(default)]
    pub network_endpoint_type: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// This field is only used for PSC and INTERNET NEGs.
    /// The target service url used to set up private service connection to
    /// a Google API or a PSC Producer Service Attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscTargetService")]
    #[builder(default)]
    pub psc_target_service: Option<String>,
    /// A reference to the region where the regional NEGs reside.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    #[builder(default)]
    pub self_link: Option<String>,
    /// This field is only used for PSC NEGs.
    /// Optional URL of the subnetwork to which all network endpoints in the NEG belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subnetwork: Option<String>,
}

/// This field is only used for SERVERLESS NEGs.
/// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupStatusAtProviderAppEngine {
    /// Optional serving service.
    /// The service name must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "default", "my-service".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// A template to parse service and version fields from a request URL.
    /// URL mask allows for routing to multiple App Engine services without
    /// having to create multiple Network Endpoint Groups and backend services.
    /// For example, the request URLs "foo1-dot-appname.appspot.com/v1" and
    /// "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with
    /// URL mask "-dot-appname.appspot.com/". The URL mask will parse
    /// them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMask")]
    #[builder(default)]
    pub url_mask: Option<String>,
    /// Optional serving version.
    /// The version must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "v1", "v2".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// This field is only used for SERVERLESS NEGs.
/// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupStatusAtProviderCloudFunction {
    /// A user-defined name of the Cloud Function.
    /// The function name is case-sensitive and must be 1-63 characters long.
    /// Example value: "func1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub function: Option<String>,
    /// A template to parse function field from a request URL. URL mask allows
    /// for routing to multiple Cloud Functions without having to create
    /// multiple Network Endpoint Groups and backend services.
    /// For example, request URLs "mydomain.com/function1" and "mydomain.com/function2"
    /// can be backed by the same Serverless NEG with URL mask "/". The URL mask
    /// will parse them to { function = "function1" } and { function = "function2" } respectively.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMask")]
    #[builder(default)]
    pub url_mask: Option<String>,
}

/// This field is only used for SERVERLESS NEGs.
/// Only one of cloud_run, app_engine, cloud_function or serverless_deployment may be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RegionNetworkEndpointGroupStatusAtProviderCloudRun {
    /// Cloud Run service is the main resource of Cloud Run.
    /// The service must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "run-service".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// Cloud Run tag represents the "named-revision" to provide
    /// additional fine-grained traffic routing information.
    /// The tag must be 1-63 characters long, and comply with RFC1035.
    /// Example value: "revision-0010".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
    /// A template to parse service and tag fields from a request URL.
    /// URL mask allows for routing to multiple Run services without having
    /// to create multiple network endpoint groups and backend services.
    /// For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2"
    /// an be backed by the same Serverless Network Endpoint Group (NEG) with
    /// URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" }
    /// and { service="bar2", tag="foo2" } respectively.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMask")]
    #[builder(default)]
    pub url_mask: Option<String>,
}


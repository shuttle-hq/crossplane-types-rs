// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// SubnetworkSpec defines the desired state of Subnetwork
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "Subnetwork", plural = "subnetworks")]
#[kube(status = "SubnetworkStatus")]
pub struct SubnetworkSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<SubnetworkDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: SubnetworkForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<SubnetworkInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<SubnetworkProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<SubnetworkPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<SubnetworkWriteConnectionSecretToRef>,
}

/// SubnetworkSpec defines the desired state of Subnetwork
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkForProvider {
    /// An optional description of this resource. Provide this property when
    /// you create the resource. This field can be set only at resource
    /// creation time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The range of external IPv6 addresses that are owned by this subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIpv6Prefix")]
    #[builder(default)]
    pub external_ipv6_prefix: Option<String>,
    /// The range of internal addresses that are owned by this subnetwork.
    /// Provide this property when you create the subnetwork. For example,
    /// 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
    /// non-overlapping within a network. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipCidrRange")]
    #[builder(default)]
    pub ip_cidr_range: Option<String>,
    /// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation
    /// or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
    /// cannot enable direct path.
    /// Possible values are: EXTERNAL, INTERNAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6AccessType")]
    #[builder(default)]
    pub ipv6_access_type: Option<String>,
    /// This field denotes the VPC flow logging options for this subnetwork. If
    /// logging is enabled, logs are exported to Cloud Logging. Flow logging
    /// isn't supported if the subnet purpose field is set to subnetwork is
    /// REGIONAL_MANAGED_PROXY or GLOBAL_MANAGED_PROXY.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<SubnetworkForProviderLogConfig>,
    /// The network this subnet belongs to.
    /// Only networks that are in the distributed mode can have subnetworks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// Reference to a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkRef")]
    #[builder(default)]
    pub network_ref: Option<SubnetworkForProviderNetworkRef>,
    /// Selector for a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSelector")]
    #[builder(default)]
    pub network_selector: Option<SubnetworkForProviderNetworkSelector>,
    /// When enabled, VMs in this subnetwork without external IP addresses can
    /// access Google APIs and services by using Private Google Access.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIpGoogleAccess")]
    #[builder(default)]
    pub private_ip_google_access: Option<bool>,
    /// The private IPv6 google access type for the VMs in this subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIpv6GoogleAccess")]
    #[builder(default)]
    pub private_ipv6_google_access: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The purpose of the resource. This field can be either PRIVATE_RFC_1918, REGIONAL_MANAGED_PROXY, GLOBAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT or PRIVATE_NAT(Beta).
    /// A subnet with purpose set to REGIONAL_MANAGED_PROXY is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
    /// A subnetwork in a given region with purpose set to GLOBAL_MANAGED_PROXY is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
    /// A subnetwork with purpose set to PRIVATE_SERVICE_CONNECT reserves the subnet for hosting a Private Service Connect published service.
    /// A subnetwork with purpose set to PRIVATE_NAT is used as source range for Private NAT gateways.
    /// Note that REGIONAL_MANAGED_PROXY is the preferred setting for all regional Envoy load balancers.
    /// If unspecified, the purpose defaults to PRIVATE_RFC_1918.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub purpose: Option<String>,
    /// The GCP region for this subnetwork.
    pub region: String,
    /// The role of subnetwork.
    /// Currently, this field is only used when purpose is REGIONAL_MANAGED_PROXY.
    /// The value can be set to ACTIVE or BACKUP.
    /// An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region.
    /// A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining.
    /// Possible values are: ACTIVE, BACKUP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub role: Option<String>,
    /// An array of configurations for secondary IP ranges for VM instances
    /// contained in this subnetwork. The primary IP of such VM must belong
    /// to the primary ipCidrRange of the subnetwork. The alias IPs may belong
    /// to either primary or secondary ranges.
    /// Note: This field uses attr-as-block mode to avoid
    /// breaking users during the 0.12 upgrade. To explicitly send a list of zero objects,
    /// set send_secondary_ip_range_if_empty = true
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryIpRange")]
    #[builder(default)]
    pub secondary_ip_range: Option<Vec<SubnetworkForProviderSecondaryIpRange>>,
    /// Controls the removal behavior of secondary_ip_range.
    /// When false, removing secondary_ip_range from config will not produce a diff as
    /// the provider will default to the API's value.
    /// When true, the provider will treat removing secondary_ip_range as sending an
    /// empty list of secondary IP ranges to the API.
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendSecondaryIpRangeIfEmpty")]
    #[builder(default)]
    pub send_secondary_ip_range_if_empty: Option<bool>,
    /// The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
    /// If not specified IPV4_ONLY will be used.
    /// Possible values are: IPV4_ONLY, IPV4_IPV6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackType")]
    #[builder(default)]
    pub stack_type: Option<String>,
}

/// This field denotes the VPC flow logging options for this subnetwork. If
/// logging is enabled, logs are exported to Cloud Logging. Flow logging
/// isn't supported if the subnet purpose field is set to subnetwork is
/// REGIONAL_MANAGED_PROXY or GLOBAL_MANAGED_PROXY.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkForProviderLogConfig {
    /// Can only be specified if VPC flow logging for this subnetwork is enabled.
    /// Toggles the aggregation interval for collecting flow logs. Increasing the
    /// interval time will reduce the amount of generated flow logs for long
    /// lasting connections. Default is an interval of 5 seconds per connection.
    /// Default value is INTERVAL_5_SEC.
    /// Possible values are: INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN, INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aggregationInterval")]
    #[builder(default)]
    pub aggregation_interval: Option<String>,
    /// Export filter used to define which VPC flow logs should be logged, as as CEL expression. See
    /// https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.
    /// The default value is 'true', which evaluates to include everything.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterExpr")]
    #[builder(default)]
    pub filter_expr: Option<String>,
    /// Can only be specified if VPC flow logging for this subnetwork is enabled.
    /// The value of the field must be in [0, 1]. Set the sampling rate of VPC
    /// flow logs within the subnetwork where 1.0 means all collected logs are
    /// reported and 0.0 means no logs are reported. Default is 0.5 which means
    /// half of all collected logs are reported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flowSampling")]
    #[builder(default)]
    pub flow_sampling: Option<f64>,
    /// Can only be specified if VPC flow logging for this subnetwork is enabled.
    /// Configures whether metadata fields should be added to the reported VPC
    /// flow logs.
    /// Default value is INCLUDE_ALL_METADATA.
    /// Possible values are: EXCLUDE_ALL_METADATA, INCLUDE_ALL_METADATA, CUSTOM_METADATA.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<String>,
    /// List of metadata fields that should be added to reported logs.
    /// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" is set to CUSTOM_METADATA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataFields")]
    #[builder(default)]
    pub metadata_fields: Option<Vec<String>>,
}

/// Reference to a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkForProviderNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SubnetworkForProviderNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkForProviderNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SubnetworkForProviderNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SubnetworkForProviderNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkForProviderNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkForProviderNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkForProviderNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SubnetworkForProviderNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkForProviderNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SubnetworkForProviderNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SubnetworkForProviderNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkForProviderNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkForProviderNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkForProviderSecondaryIpRange {
    /// The range of IP addresses belonging to this subnetwork secondary
    /// range. Provide this property when you create the subnetwork.
    /// Ranges must be unique and non-overlapping with all primary and
    /// secondary IP ranges within a network. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipCidrRange")]
    #[builder(default)]
    pub ip_cidr_range: Option<String>,
    /// The name associated with this subnetwork secondary range, used
    /// when adding an alias IP range to a VM instance. The name must
    /// be 1-63 characters long, and comply with RFC1035. The name
    /// must be unique within the subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeName")]
    #[builder(default)]
    pub range_name: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkInitProvider {
    /// An optional description of this resource. Provide this property when
    /// you create the resource. This field can be set only at resource
    /// creation time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The range of external IPv6 addresses that are owned by this subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIpv6Prefix")]
    #[builder(default)]
    pub external_ipv6_prefix: Option<String>,
    /// The range of internal addresses that are owned by this subnetwork.
    /// Provide this property when you create the subnetwork. For example,
    /// 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
    /// non-overlapping within a network. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipCidrRange")]
    #[builder(default)]
    pub ip_cidr_range: Option<String>,
    /// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation
    /// or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
    /// cannot enable direct path.
    /// Possible values are: EXTERNAL, INTERNAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6AccessType")]
    #[builder(default)]
    pub ipv6_access_type: Option<String>,
    /// This field denotes the VPC flow logging options for this subnetwork. If
    /// logging is enabled, logs are exported to Cloud Logging. Flow logging
    /// isn't supported if the subnet purpose field is set to subnetwork is
    /// REGIONAL_MANAGED_PROXY or GLOBAL_MANAGED_PROXY.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<SubnetworkInitProviderLogConfig>,
    /// The network this subnet belongs to.
    /// Only networks that are in the distributed mode can have subnetworks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// Reference to a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkRef")]
    #[builder(default)]
    pub network_ref: Option<SubnetworkInitProviderNetworkRef>,
    /// Selector for a Network in compute to populate network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSelector")]
    #[builder(default)]
    pub network_selector: Option<SubnetworkInitProviderNetworkSelector>,
    /// When enabled, VMs in this subnetwork without external IP addresses can
    /// access Google APIs and services by using Private Google Access.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIpGoogleAccess")]
    #[builder(default)]
    pub private_ip_google_access: Option<bool>,
    /// The private IPv6 google access type for the VMs in this subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIpv6GoogleAccess")]
    #[builder(default)]
    pub private_ipv6_google_access: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The purpose of the resource. This field can be either PRIVATE_RFC_1918, REGIONAL_MANAGED_PROXY, GLOBAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT or PRIVATE_NAT(Beta).
    /// A subnet with purpose set to REGIONAL_MANAGED_PROXY is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
    /// A subnetwork in a given region with purpose set to GLOBAL_MANAGED_PROXY is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
    /// A subnetwork with purpose set to PRIVATE_SERVICE_CONNECT reserves the subnet for hosting a Private Service Connect published service.
    /// A subnetwork with purpose set to PRIVATE_NAT is used as source range for Private NAT gateways.
    /// Note that REGIONAL_MANAGED_PROXY is the preferred setting for all regional Envoy load balancers.
    /// If unspecified, the purpose defaults to PRIVATE_RFC_1918.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub purpose: Option<String>,
    /// The role of subnetwork.
    /// Currently, this field is only used when purpose is REGIONAL_MANAGED_PROXY.
    /// The value can be set to ACTIVE or BACKUP.
    /// An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region.
    /// A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining.
    /// Possible values are: ACTIVE, BACKUP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub role: Option<String>,
    /// An array of configurations for secondary IP ranges for VM instances
    /// contained in this subnetwork. The primary IP of such VM must belong
    /// to the primary ipCidrRange of the subnetwork. The alias IPs may belong
    /// to either primary or secondary ranges.
    /// Note: This field uses attr-as-block mode to avoid
    /// breaking users during the 0.12 upgrade. To explicitly send a list of zero objects,
    /// set send_secondary_ip_range_if_empty = true
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryIpRange")]
    #[builder(default)]
    pub secondary_ip_range: Option<Vec<SubnetworkInitProviderSecondaryIpRange>>,
    /// Controls the removal behavior of secondary_ip_range.
    /// When false, removing secondary_ip_range from config will not produce a diff as
    /// the provider will default to the API's value.
    /// When true, the provider will treat removing secondary_ip_range as sending an
    /// empty list of secondary IP ranges to the API.
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendSecondaryIpRangeIfEmpty")]
    #[builder(default)]
    pub send_secondary_ip_range_if_empty: Option<bool>,
    /// The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
    /// If not specified IPV4_ONLY will be used.
    /// Possible values are: IPV4_ONLY, IPV4_IPV6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackType")]
    #[builder(default)]
    pub stack_type: Option<String>,
}

/// This field denotes the VPC flow logging options for this subnetwork. If
/// logging is enabled, logs are exported to Cloud Logging. Flow logging
/// isn't supported if the subnet purpose field is set to subnetwork is
/// REGIONAL_MANAGED_PROXY or GLOBAL_MANAGED_PROXY.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkInitProviderLogConfig {
    /// Can only be specified if VPC flow logging for this subnetwork is enabled.
    /// Toggles the aggregation interval for collecting flow logs. Increasing the
    /// interval time will reduce the amount of generated flow logs for long
    /// lasting connections. Default is an interval of 5 seconds per connection.
    /// Default value is INTERVAL_5_SEC.
    /// Possible values are: INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN, INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aggregationInterval")]
    #[builder(default)]
    pub aggregation_interval: Option<String>,
    /// Export filter used to define which VPC flow logs should be logged, as as CEL expression. See
    /// https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.
    /// The default value is 'true', which evaluates to include everything.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterExpr")]
    #[builder(default)]
    pub filter_expr: Option<String>,
    /// Can only be specified if VPC flow logging for this subnetwork is enabled.
    /// The value of the field must be in [0, 1]. Set the sampling rate of VPC
    /// flow logs within the subnetwork where 1.0 means all collected logs are
    /// reported and 0.0 means no logs are reported. Default is 0.5 which means
    /// half of all collected logs are reported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flowSampling")]
    #[builder(default)]
    pub flow_sampling: Option<f64>,
    /// Can only be specified if VPC flow logging for this subnetwork is enabled.
    /// Configures whether metadata fields should be added to the reported VPC
    /// flow logs.
    /// Default value is INCLUDE_ALL_METADATA.
    /// Possible values are: EXCLUDE_ALL_METADATA, INCLUDE_ALL_METADATA, CUSTOM_METADATA.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<String>,
    /// List of metadata fields that should be added to reported logs.
    /// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" is set to CUSTOM_METADATA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataFields")]
    #[builder(default)]
    pub metadata_fields: Option<Vec<String>>,
}

/// Reference to a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkInitProviderNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SubnetworkInitProviderNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkInitProviderNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SubnetworkInitProviderNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SubnetworkInitProviderNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkInitProviderNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkInitProviderNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate network.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkInitProviderNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SubnetworkInitProviderNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkInitProviderNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SubnetworkInitProviderNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SubnetworkInitProviderNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkInitProviderNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkInitProviderNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkInitProviderSecondaryIpRange {
    /// The range of IP addresses belonging to this subnetwork secondary
    /// range. Provide this property when you create the subnetwork.
    /// Ranges must be unique and non-overlapping with all primary and
    /// secondary IP ranges within a network. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipCidrRange")]
    #[builder(default)]
    pub ip_cidr_range: Option<String>,
    /// The name associated with this subnetwork secondary range, used
    /// when adding an alias IP range to a VM instance. The name must
    /// be 1-63 characters long, and comply with RFC1035. The name
    /// must be unique within the subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeName")]
    #[builder(default)]
    pub range_name: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SubnetworkProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SubnetworkProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SubnetworkProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<SubnetworkPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<SubnetworkPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<SubnetworkPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<SubnetworkPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<SubnetworkPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetworkPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SubnetworkStatus defines the observed state of Subnetwork.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<SubnetworkStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkStatusAtProvider {
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    #[builder(default)]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when
    /// you create the resource. This field can be set only at resource
    /// creation time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The range of external IPv6 addresses that are owned by this subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIpv6Prefix")]
    #[builder(default)]
    pub external_ipv6_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub fingerprint: Option<String>,
    /// The gateway address for default routes to reach destination addresses
    /// outside this subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayAddress")]
    #[builder(default)]
    pub gateway_address: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The internal IPv6 address range that is assigned to this subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalIpv6Prefix")]
    #[builder(default)]
    pub internal_ipv6_prefix: Option<String>,
    /// The range of internal addresses that are owned by this subnetwork.
    /// Provide this property when you create the subnetwork. For example,
    /// 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
    /// non-overlapping within a network. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipCidrRange")]
    #[builder(default)]
    pub ip_cidr_range: Option<String>,
    /// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation
    /// or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
    /// cannot enable direct path.
    /// Possible values are: EXTERNAL, INTERNAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6AccessType")]
    #[builder(default)]
    pub ipv6_access_type: Option<String>,
    /// The range of internal IPv6 addresses that are owned by this subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrRange")]
    #[builder(default)]
    pub ipv6_cidr_range: Option<String>,
    /// This field denotes the VPC flow logging options for this subnetwork. If
    /// logging is enabled, logs are exported to Cloud Logging. Flow logging
    /// isn't supported if the subnet purpose field is set to subnetwork is
    /// REGIONAL_MANAGED_PROXY or GLOBAL_MANAGED_PROXY.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    #[builder(default)]
    pub log_config: Option<SubnetworkStatusAtProviderLogConfig>,
    /// The network this subnet belongs to.
    /// Only networks that are in the distributed mode can have subnetworks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// When enabled, VMs in this subnetwork without external IP addresses can
    /// access Google APIs and services by using Private Google Access.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIpGoogleAccess")]
    #[builder(default)]
    pub private_ip_google_access: Option<bool>,
    /// The private IPv6 google access type for the VMs in this subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIpv6GoogleAccess")]
    #[builder(default)]
    pub private_ipv6_google_access: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The purpose of the resource. This field can be either PRIVATE_RFC_1918, REGIONAL_MANAGED_PROXY, GLOBAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT or PRIVATE_NAT(Beta).
    /// A subnet with purpose set to REGIONAL_MANAGED_PROXY is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
    /// A subnetwork in a given region with purpose set to GLOBAL_MANAGED_PROXY is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
    /// A subnetwork with purpose set to PRIVATE_SERVICE_CONNECT reserves the subnet for hosting a Private Service Connect published service.
    /// A subnetwork with purpose set to PRIVATE_NAT is used as source range for Private NAT gateways.
    /// Note that REGIONAL_MANAGED_PROXY is the preferred setting for all regional Envoy load balancers.
    /// If unspecified, the purpose defaults to PRIVATE_RFC_1918.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub purpose: Option<String>,
    /// The GCP region for this subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// The role of subnetwork.
    /// Currently, this field is only used when purpose is REGIONAL_MANAGED_PROXY.
    /// The value can be set to ACTIVE or BACKUP.
    /// An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region.
    /// A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining.
    /// Possible values are: ACTIVE, BACKUP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub role: Option<String>,
    /// An array of configurations for secondary IP ranges for VM instances
    /// contained in this subnetwork. The primary IP of such VM must belong
    /// to the primary ipCidrRange of the subnetwork. The alias IPs may belong
    /// to either primary or secondary ranges.
    /// Note: This field uses attr-as-block mode to avoid
    /// breaking users during the 0.12 upgrade. To explicitly send a list of zero objects,
    /// set send_secondary_ip_range_if_empty = true
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryIpRange")]
    #[builder(default)]
    pub secondary_ip_range: Option<Vec<SubnetworkStatusAtProviderSecondaryIpRange>>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    #[builder(default)]
    pub self_link: Option<String>,
    /// Controls the removal behavior of secondary_ip_range.
    /// When false, removing secondary_ip_range from config will not produce a diff as
    /// the provider will default to the API's value.
    /// When true, the provider will treat removing secondary_ip_range as sending an
    /// empty list of secondary IP ranges to the API.
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendSecondaryIpRangeIfEmpty")]
    #[builder(default)]
    pub send_secondary_ip_range_if_empty: Option<bool>,
    /// The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
    /// If not specified IPV4_ONLY will be used.
    /// Possible values are: IPV4_ONLY, IPV4_IPV6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackType")]
    #[builder(default)]
    pub stack_type: Option<String>,
}

/// This field denotes the VPC flow logging options for this subnetwork. If
/// logging is enabled, logs are exported to Cloud Logging. Flow logging
/// isn't supported if the subnet purpose field is set to subnetwork is
/// REGIONAL_MANAGED_PROXY or GLOBAL_MANAGED_PROXY.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkStatusAtProviderLogConfig {
    /// Can only be specified if VPC flow logging for this subnetwork is enabled.
    /// Toggles the aggregation interval for collecting flow logs. Increasing the
    /// interval time will reduce the amount of generated flow logs for long
    /// lasting connections. Default is an interval of 5 seconds per connection.
    /// Default value is INTERVAL_5_SEC.
    /// Possible values are: INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN, INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aggregationInterval")]
    #[builder(default)]
    pub aggregation_interval: Option<String>,
    /// Export filter used to define which VPC flow logs should be logged, as as CEL expression. See
    /// https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.
    /// The default value is 'true', which evaluates to include everything.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterExpr")]
    #[builder(default)]
    pub filter_expr: Option<String>,
    /// Can only be specified if VPC flow logging for this subnetwork is enabled.
    /// The value of the field must be in [0, 1]. Set the sampling rate of VPC
    /// flow logs within the subnetwork where 1.0 means all collected logs are
    /// reported and 0.0 means no logs are reported. Default is 0.5 which means
    /// half of all collected logs are reported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flowSampling")]
    #[builder(default)]
    pub flow_sampling: Option<f64>,
    /// Can only be specified if VPC flow logging for this subnetwork is enabled.
    /// Configures whether metadata fields should be added to the reported VPC
    /// flow logs.
    /// Default value is INCLUDE_ALL_METADATA.
    /// Possible values are: EXCLUDE_ALL_METADATA, INCLUDE_ALL_METADATA, CUSTOM_METADATA.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<String>,
    /// List of metadata fields that should be added to reported logs.
    /// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" is set to CUSTOM_METADATA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataFields")]
    #[builder(default)]
    pub metadata_fields: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct SubnetworkStatusAtProviderSecondaryIpRange {
    /// The range of IP addresses belonging to this subnetwork secondary
    /// range. Provide this property when you create the subnetwork.
    /// Ranges must be unique and non-overlapping with all primary and
    /// secondary IP ranges within a network. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipCidrRange")]
    #[builder(default)]
    pub ip_cidr_range: Option<String>,
    /// The name associated with this subnetwork secondary range, used
    /// when adding an alias IP range to a VM instance. The name must
    /// be 1-63 characters long, and comply with RFC1035. The name
    /// must be unique within the subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeName")]
    #[builder(default)]
    pub range_name: Option<String>,
}


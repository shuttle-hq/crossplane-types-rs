// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ClassificationJobSpec defines the desired state of ClassificationJob
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "macie2.aws.upbound.io",
    version = "v1beta2",
    kind = "ClassificationJob",
    plural = "classificationjobs"
)]
#[kube(status = "ClassificationJobStatus")]
pub struct ClassificationJobSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<ClassificationJobDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ClassificationJobForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<ClassificationJobInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<ClassificationJobProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<ClassificationJobPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ClassificationJobWriteConnectionSecretToRef>,
}

/// ClassificationJobSpec defines the desired state of ClassificationJob
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassificationJobDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProvider {
    /// The custom data identifiers to use for data analysis and classification.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customDataIdentifierIds"
    )]
    #[builder(default)]
    pub custom_data_identifier_ids: Option<Vec<String>>,
    /// A custom description of the job. The description can contain as many as 200 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialRun"
    )]
    #[builder(default)]
    pub initial_run: Option<bool>,
    /// The status for the job. Valid values are: CANCELLED, RUNNING and USER_PAUSED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobStatus")]
    #[builder(default)]
    pub job_status: Option<String>,
    /// The schedule for running the job. Valid values are: ONE_TIME - Run the job only once. If you specify this value, don't specify a value for the schedule_frequency property. SCHEDULED - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the schedule_frequency property to define the recurrence pattern for the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobType")]
    #[builder(default)]
    pub job_type: Option<String>,
    /// A custom name for the job. The name can contain as many as 500 characters. Conflicts with name_prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3JobDefinition"
    )]
    #[builder(default)]
    pub s3_job_definition: Option<ClassificationJobForProviderS3JobDefinition>,
    /// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "samplingPercentage"
    )]
    #[builder(default)]
    pub sampling_percentage: Option<f64>,
    /// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the job_type property to ONE_TIME. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduleFrequency"
    )]
    #[builder(default)]
    pub schedule_frequency: Option<ClassificationJobForProviderScheduleFrequency>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinition {
    /// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with bucket_definitions. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketCriteria"
    )]
    #[builder(default)]
    pub bucket_criteria: Option<ClassificationJobForProviderS3JobDefinitionBucketCriteria>,
    /// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. Conflicts with bucket_criteria. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketDefinitions"
    )]
    #[builder(default)]
    pub bucket_definitions:
        Option<Vec<ClassificationJobForProviderS3JobDefinitionBucketDefinitions>>,
    /// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub scoping: Option<ClassificationJobForProviderS3JobDefinitionScoping>,
}

/// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with bucket_definitions. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteria {
    /// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub excludes: Option<ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludes>,
    /// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub includes: Option<ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludes>,
}

/// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleCriterion"
    )]
    #[builder(default)]
    pub simple_criterion:
        Option<ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion>,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagCriterion"
    )]
    #[builder(default)]
    pub tag_criterion:
        Option<ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterion>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<Vec<ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValues
{
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleCriterion"
    )]
    #[builder(default)]
    pub simple_criterion:
        Option<ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion>,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagCriterion"
    )]
    #[builder(default)]
    pub tag_criterion:
        Option<ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterion>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<Vec<ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValues
{
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionBucketDefinitions {
    /// The unique identifier for the AWS account that owns the buckets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// An array that lists the names of the buckets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub buckets: Option<Vec<String>>,
}

/// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScoping {
    /// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub excludes: Option<ClassificationJobForProviderS3JobDefinitionScopingExcludes>,
    /// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub includes: Option<ClassificationJobForProviderS3JobDefinitionScopingIncludes>,
}

/// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingExcludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobForProviderS3JobDefinitionScopingExcludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingExcludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleScopeTerm"
    )]
    #[builder(default)]
    pub simple_scope_term:
        Option<ClassificationJobForProviderS3JobDefinitionScopingExcludesAndSimpleScopeTerm>,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagScopeTerm"
    )]
    #[builder(default)]
    pub tag_scope_term:
        Option<ClassificationJobForProviderS3JobDefinitionScopingExcludesAndTagScopeTerm>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingExcludesAndSimpleScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingExcludesAndTagScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<
        Vec<ClassificationJobForProviderS3JobDefinitionScopingExcludesAndTagScopeTermTagValues>,
    >,
    /// The type of object to apply the condition to. The only valid value is S3_OBJECT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingExcludesAndTagScopeTermTagValues {
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingIncludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobForProviderS3JobDefinitionScopingIncludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingIncludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleScopeTerm"
    )]
    #[builder(default)]
    pub simple_scope_term:
        Option<ClassificationJobForProviderS3JobDefinitionScopingIncludesAndSimpleScopeTerm>,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagScopeTerm"
    )]
    #[builder(default)]
    pub tag_scope_term:
        Option<ClassificationJobForProviderS3JobDefinitionScopingIncludesAndTagScopeTerm>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingIncludesAndSimpleScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingIncludesAndTagScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<
        Vec<ClassificationJobForProviderS3JobDefinitionScopingIncludesAndTagScopeTermTagValues>,
    >,
    /// The type of object to apply the condition to. The only valid value is S3_OBJECT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderS3JobDefinitionScopingIncludesAndTagScopeTermTagValues {
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the job_type property to ONE_TIME. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobForProviderScheduleFrequency {
    /// Specifies a daily recurrence pattern for running the job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dailySchedule"
    )]
    #[builder(default)]
    pub daily_schedule: Option<bool>,
    /// Specifies a monthly recurrence pattern for running the job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monthlySchedule"
    )]
    #[builder(default)]
    pub monthly_schedule: Option<f64>,
    /// Specifies a weekly recurrence pattern for running the job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "weeklySchedule"
    )]
    #[builder(default)]
    pub weekly_schedule: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProvider {
    /// The custom data identifiers to use for data analysis and classification.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customDataIdentifierIds"
    )]
    #[builder(default)]
    pub custom_data_identifier_ids: Option<Vec<String>>,
    /// A custom description of the job. The description can contain as many as 200 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialRun"
    )]
    #[builder(default)]
    pub initial_run: Option<bool>,
    /// The status for the job. Valid values are: CANCELLED, RUNNING and USER_PAUSED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobStatus")]
    #[builder(default)]
    pub job_status: Option<String>,
    /// The schedule for running the job. Valid values are: ONE_TIME - Run the job only once. If you specify this value, don't specify a value for the schedule_frequency property. SCHEDULED - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the schedule_frequency property to define the recurrence pattern for the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobType")]
    #[builder(default)]
    pub job_type: Option<String>,
    /// A custom name for the job. The name can contain as many as 500 characters. Conflicts with name_prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3JobDefinition"
    )]
    #[builder(default)]
    pub s3_job_definition: Option<ClassificationJobInitProviderS3JobDefinition>,
    /// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "samplingPercentage"
    )]
    #[builder(default)]
    pub sampling_percentage: Option<f64>,
    /// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the job_type property to ONE_TIME. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduleFrequency"
    )]
    #[builder(default)]
    pub schedule_frequency: Option<ClassificationJobInitProviderScheduleFrequency>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinition {
    /// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with bucket_definitions. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketCriteria"
    )]
    #[builder(default)]
    pub bucket_criteria: Option<ClassificationJobInitProviderS3JobDefinitionBucketCriteria>,
    /// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. Conflicts with bucket_criteria. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketDefinitions"
    )]
    #[builder(default)]
    pub bucket_definitions:
        Option<Vec<ClassificationJobInitProviderS3JobDefinitionBucketDefinitions>>,
    /// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub scoping: Option<ClassificationJobInitProviderS3JobDefinitionScoping>,
}

/// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with bucket_definitions. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteria {
    /// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub excludes: Option<ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludes>,
    /// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub includes: Option<ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludes>,
}

/// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleCriterion"
    )]
    #[builder(default)]
    pub simple_criterion: Option<
        ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion,
    >,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagCriterion"
    )]
    #[builder(default)]
    pub tag_criterion:
        Option<ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterion>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<Vec<ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValues
{
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleCriterion"
    )]
    #[builder(default)]
    pub simple_criterion: Option<
        ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion,
    >,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagCriterion"
    )]
    #[builder(default)]
    pub tag_criterion:
        Option<ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterion>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<Vec<ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValues
{
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionBucketDefinitions {
    /// The unique identifier for the AWS account that owns the buckets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// An array that lists the names of the buckets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub buckets: Option<Vec<String>>,
}

/// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScoping {
    /// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub excludes: Option<ClassificationJobInitProviderS3JobDefinitionScopingExcludes>,
    /// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub includes: Option<ClassificationJobInitProviderS3JobDefinitionScopingIncludes>,
}

/// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingExcludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobInitProviderS3JobDefinitionScopingExcludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingExcludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleScopeTerm"
    )]
    #[builder(default)]
    pub simple_scope_term:
        Option<ClassificationJobInitProviderS3JobDefinitionScopingExcludesAndSimpleScopeTerm>,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagScopeTerm"
    )]
    #[builder(default)]
    pub tag_scope_term:
        Option<ClassificationJobInitProviderS3JobDefinitionScopingExcludesAndTagScopeTerm>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingExcludesAndSimpleScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingExcludesAndTagScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<
        Vec<ClassificationJobInitProviderS3JobDefinitionScopingExcludesAndTagScopeTermTagValues>,
    >,
    /// The type of object to apply the condition to. The only valid value is S3_OBJECT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingExcludesAndTagScopeTermTagValues {
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingIncludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobInitProviderS3JobDefinitionScopingIncludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingIncludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleScopeTerm"
    )]
    #[builder(default)]
    pub simple_scope_term:
        Option<ClassificationJobInitProviderS3JobDefinitionScopingIncludesAndSimpleScopeTerm>,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagScopeTerm"
    )]
    #[builder(default)]
    pub tag_scope_term:
        Option<ClassificationJobInitProviderS3JobDefinitionScopingIncludesAndTagScopeTerm>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingIncludesAndSimpleScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingIncludesAndTagScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<
        Vec<ClassificationJobInitProviderS3JobDefinitionScopingIncludesAndTagScopeTermTagValues>,
    >,
    /// The type of object to apply the condition to. The only valid value is S3_OBJECT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderS3JobDefinitionScopingIncludesAndTagScopeTermTagValues {
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the job_type property to ONE_TIME. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobInitProviderScheduleFrequency {
    /// Specifies a daily recurrence pattern for running the job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dailySchedule"
    )]
    #[builder(default)]
    pub daily_schedule: Option<bool>,
    /// Specifies a monthly recurrence pattern for running the job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monthlySchedule"
    )]
    #[builder(default)]
    pub monthly_schedule: Option<f64>,
    /// Specifies a weekly recurrence pattern for running the job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "weeklySchedule"
    )]
    #[builder(default)]
    pub weekly_schedule: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClassificationJobProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClassificationJobProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClassificationJobProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassificationJobProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassificationJobProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ClassificationJobPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ClassificationJobPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClassificationJobPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClassificationJobPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClassificationJobPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassificationJobPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassificationJobPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ClassificationJobStatus defines the observed state of ClassificationJob.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<ClassificationJobStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProvider {
    /// The date and time, in UTC and extended RFC 3339 format, when the job was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    #[builder(default)]
    pub created_at: Option<String>,
    /// The custom data identifiers to use for data analysis and classification.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customDataIdentifierIds"
    )]
    #[builder(default)]
    pub custom_data_identifier_ids: Option<Vec<String>>,
    /// A custom description of the job. The description can contain as many as 200 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The unique identifier (ID) of the macie classification job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialRun"
    )]
    #[builder(default)]
    pub initial_run: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobArn")]
    #[builder(default)]
    pub job_arn: Option<String>,
    /// The unique identifier (ID) of the macie classification job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobId")]
    #[builder(default)]
    pub job_id: Option<String>,
    /// The status for the job. Valid values are: CANCELLED, RUNNING and USER_PAUSED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobStatus")]
    #[builder(default)]
    pub job_status: Option<String>,
    /// The schedule for running the job. Valid values are: ONE_TIME - Run the job only once. If you specify this value, don't specify a value for the schedule_frequency property. SCHEDULED - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the schedule_frequency property to define the recurrence pattern for the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobType")]
    #[builder(default)]
    pub job_type: Option<String>,
    /// A custom name for the job. The name can contain as many as 500 characters. Conflicts with name_prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3JobDefinition"
    )]
    #[builder(default)]
    pub s3_job_definition: Option<ClassificationJobStatusAtProviderS3JobDefinition>,
    /// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "samplingPercentage"
    )]
    #[builder(default)]
    pub sampling_percentage: Option<f64>,
    /// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the job_type property to ONE_TIME. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduleFrequency"
    )]
    #[builder(default)]
    pub schedule_frequency: Option<ClassificationJobStatusAtProviderScheduleFrequency>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be canceled if it isn't resumed. This value is present only if the value for job-status is USER_PAUSED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userPausedDetails"
    )]
    #[builder(default)]
    pub user_paused_details: Option<Vec<ClassificationJobStatusAtProviderUserPausedDetails>>,
}

/// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinition {
    /// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with bucket_definitions. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketCriteria"
    )]
    #[builder(default)]
    pub bucket_criteria: Option<ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteria>,
    /// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. Conflicts with bucket_criteria. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketDefinitions"
    )]
    #[builder(default)]
    pub bucket_definitions:
        Option<Vec<ClassificationJobStatusAtProviderS3JobDefinitionBucketDefinitions>>,
    /// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub scoping: Option<ClassificationJobStatusAtProviderS3JobDefinitionScoping>,
}

/// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with bucket_definitions. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteria {
    /// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub excludes: Option<ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludes>,
    /// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub includes: Option<ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludes>,
}

/// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleCriterion"
    )]
    #[builder(default)]
    pub simple_criterion: Option<
        ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion,
    >,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagCriterion"
    )]
    #[builder(default)]
    pub tag_criterion: Option<
        ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterion,
    >,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion
{
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<Vec<ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValues
{
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleCriterion"
    )]
    #[builder(default)]
    pub simple_criterion: Option<
        ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion,
    >,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagCriterion"
    )]
    #[builder(default)]
    pub tag_criterion: Option<
        ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterion,
    >,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion
{
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterion {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<Vec<ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValues
{
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionBucketDefinitions {
    /// The unique identifier for the AWS account that owns the buckets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// An array that lists the names of the buckets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub buckets: Option<Vec<String>>,
}

/// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScoping {
    /// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub excludes: Option<ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludes>,
    /// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub includes: Option<ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludes>,
}

/// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleScopeTerm"
    )]
    #[builder(default)]
    pub simple_scope_term:
        Option<ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludesAndSimpleScopeTerm>,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagScopeTerm"
    )]
    #[builder(default)]
    pub tag_scope_term:
        Option<ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludesAndTagScopeTerm>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludesAndSimpleScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludesAndTagScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<
        Vec<
            ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludesAndTagScopeTermTagValues,
        >,
    >,
    /// The type of object to apply the condition to. The only valid value is S3_OBJECT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingExcludesAndTagScopeTermTagValues {
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludes {
    /// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub and: Option<Vec<ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludesAnd>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludesAnd {
    /// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simpleScopeTerm"
    )]
    #[builder(default)]
    pub simple_scope_term:
        Option<ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludesAndSimpleScopeTerm>,
    /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagScopeTerm"
    )]
    #[builder(default)]
    pub tag_scope_term:
        Option<ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludesAndTagScopeTerm>,
}

/// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludesAndSimpleScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// An array that lists the values to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub values: Option<Vec<String>>,
}

/// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludesAndTagScopeTerm {
    /// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparator: Option<String>,
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag keys or tag key and value pairs to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValues")]
    #[builder(default)]
    pub tag_values: Option<
        Vec<
            ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludesAndTagScopeTermTagValues,
        >,
    >,
    /// The type of object to apply the condition to. The only valid value is S3_OBJECT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderS3JobDefinitionScopingIncludesAndTagScopeTermTagValues {
    /// The object property to use in the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the job_type property to ONE_TIME. (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderScheduleFrequency {
    /// Specifies a daily recurrence pattern for running the job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dailySchedule"
    )]
    #[builder(default)]
    pub daily_schedule: Option<bool>,
    /// Specifies a monthly recurrence pattern for running the job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monthlySchedule"
    )]
    #[builder(default)]
    pub monthly_schedule: Option<f64>,
    /// Specifies a weekly recurrence pattern for running the job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "weeklySchedule"
    )]
    #[builder(default)]
    pub weekly_schedule: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassificationJobStatusAtProviderUserPausedDetails {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobExpiresAt"
    )]
    #[builder(default)]
    pub job_expires_at: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobImminentExpirationHealthEventArn"
    )]
    #[builder(default)]
    pub job_imminent_expiration_health_event_arn: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobPausedAt"
    )]
    #[builder(default)]
    pub job_paused_at: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// CertificateAuthoritySpec defines the desired state of CertificateAuthority
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "privateca.gcp.upbound.io",
    version = "v1beta2",
    kind = "CertificateAuthority",
    plural = "certificateauthorities"
)]
#[kube(status = "CertificateAuthorityStatus")]
pub struct CertificateAuthoritySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<CertificateAuthorityDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CertificateAuthorityForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<CertificateAuthorityInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<CertificateAuthorityProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<CertificateAuthorityPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<CertificateAuthorityWriteConnectionSecretToRef>,
}

/// CertificateAuthoritySpec defines the desired state of CertificateAuthority
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProvider {
    /// The config used to create a self-signed X.509 certificate or CSR.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub config: Option<CertificateAuthorityForProviderConfig>,
    /// When the field is set to false, deleting the CertificateAuthority is allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionProtection"
    )]
    #[builder(default)]
    pub deletion_protection: Option<bool>,
    /// Desired state of the CertificateAuthority. Set this field to STAGED to create a STAGED root CA.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredState"
    )]
    #[builder(default)]
    pub desired_state: Option<String>,
    /// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
    /// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
    /// (such as gs://) or suffixes (such as .googleapis.com). For example, to use a bucket named
    /// my-bucket, you would simply specify my-bucket. If not specified, a managed bucket will be
    /// created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcsBucket")]
    #[builder(default)]
    pub gcs_bucket: Option<String>,
    /// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
    /// Use with care. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreActiveCertificatesOnDeletion"
    )]
    #[builder(default)]
    pub ignore_active_certificates_on_deletion: Option<bool>,
    /// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
    /// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
    /// certificate. Otherwise, it is used to sign a CSR.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySpec")]
    #[builder(default)]
    pub key_spec: Option<CertificateAuthorityForProviderKeySpec>,
    /// Labels with user-defined metadata.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
    /// "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
    /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
    /// fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifetime: Option<String>,
    /// Location of the CertificateAuthority. A full list of valid locations can be found by
    /// running gcloud privateca locations list.
    pub location: String,
    /// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with a third party issuer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemCaCertificate"
    )]
    #[builder(default)]
    pub pem_ca_certificate: Option<String>,
    /// The name of the CaPool this Certificate Authority belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pool: Option<String>,
    /// Reference to a CAPool in privateca to populate pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolRef")]
    #[builder(default)]
    pub pool_ref: Option<CertificateAuthorityForProviderPoolRef>,
    /// Selector for a CAPool in privateca to populate pool.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "poolSelector"
    )]
    #[builder(default)]
    pub pool_selector: Option<CertificateAuthorityForProviderPoolSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// If this flag is set, the Certificate Authority will be deleted as soon as
    /// possible without a 30-day grace period where undeletion would have been
    /// allowed. If you proceed, there will be no way to recover this CA.
    /// Use with care. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipGracePeriod"
    )]
    #[builder(default)]
    pub skip_grace_period: Option<bool>,
    /// If this is a subordinate CertificateAuthority, this field will be set
    /// with the subordinate configuration, which describes its issuers.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subordinateConfig"
    )]
    #[builder(default)]
    pub subordinate_config: Option<CertificateAuthorityForProviderSubordinateConfig>,
    /// The Type of this CertificateAuthority.
    /// ~> Note: For SUBORDINATE Certificate Authorities, they need to
    /// be activated before they can issue certificates.
    /// Default value is SELF_SIGNED.
    /// Possible values are: SELF_SIGNED, SUBORDINATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// The config used to create a self-signed X.509 certificate or CSR.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfig {
    /// Specifies some of the values in a certificate that are related to the subject.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectConfig"
    )]
    #[builder(default)]
    pub subject_config: Option<CertificateAuthorityForProviderConfigSubjectConfig>,
    /// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectKeyId"
    )]
    #[builder(default)]
    pub subject_key_id: Option<CertificateAuthorityForProviderConfigSubjectKeyId>,
    /// Describes how some of the technical X.509 fields in a certificate should be populated.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "x509Config"
    )]
    #[builder(default)]
    pub x509_config: Option<CertificateAuthorityForProviderConfigX509Config>,
}

/// Specifies some of the values in a certificate that are related to the subject.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigSubjectConfig {
    /// Contains distinguished name fields such as the location and organization.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subject: Option<CertificateAuthorityForProviderConfigSubjectConfigSubject>,
    /// The subject alternative name fields.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAltName"
    )]
    #[builder(default)]
    pub subject_alt_name: Option<CertificateAuthorityForProviderConfigSubjectConfigSubjectAltName>,
}

/// Contains distinguished name fields such as the location and organization.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigSubjectConfigSubject {
    /// The common name of the distinguished name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default)]
    pub common_name: Option<String>,
    /// The country code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "countryCode"
    )]
    #[builder(default)]
    pub country_code: Option<String>,
    /// The locality or city of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locality: Option<String>,
    /// The organization of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub organization: Option<String>,
    /// The organizational unit of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default)]
    pub organizational_unit: Option<String>,
    /// The postal code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default)]
    pub postal_code: Option<String>,
    /// The province, territory, or regional state of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub province: Option<String>,
    /// The street address of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default)]
    pub street_address: Option<String>,
}

/// The subject alternative name fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigSubjectConfigSubjectAltName {
    /// Contains only valid, fully-qualified host names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsNames")]
    #[builder(default)]
    pub dns_names: Option<Vec<String>>,
    /// Contains only valid RFC 2822 E-mail addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailAddresses"
    )]
    #[builder(default)]
    pub email_addresses: Option<Vec<String>>,
    /// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddresses"
    )]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
    /// Contains only valid RFC 3986 URIs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uris: Option<Vec<String>>,
}

/// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigSubjectKeyId {
    /// The value of the KeyId in lowercase hexidecimal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

/// Describes how some of the technical X.509 fields in a certificate should be populated.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509Config {
    /// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalExtensions"
    )]
    #[builder(default)]
    pub additional_extensions:
        Option<Vec<CertificateAuthorityForProviderConfigX509ConfigAdditionalExtensions>>,
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aiaOcspServers"
    )]
    #[builder(default)]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    #[builder(default)]
    pub ca_options: Option<CertificateAuthorityForProviderConfigX509ConfigCaOptions>,
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    #[builder(default)]
    pub key_usage: Option<CertificateAuthorityForProviderConfigX509ConfigKeyUsage>,
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameConstraints"
    )]
    #[builder(default)]
    pub name_constraints: Option<CertificateAuthorityForProviderConfigX509ConfigNameConstraints>,
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    #[builder(default)]
    pub policy_ids: Option<Vec<CertificateAuthorityForProviderConfigX509ConfigPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509ConfigAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    #[builder(default)]
    pub object_id:
        Option<CertificateAuthorityForProviderConfigX509ConfigAdditionalExtensionsObjectId>,
    /// The value of this X.509 extension. A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509ConfigAdditionalExtensionsObjectId {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509ConfigCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    #[builder(default)]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. Setting the value to 0
    /// requires setting zero_max_issuer_path_length = true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIssuerPathLength"
    )]
    #[builder(default)]
    pub max_issuer_path_length: Option<f64>,
    /// When true, the "CA" in Basic Constraints extension will be set to false.
    /// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonCa")]
    #[builder(default)]
    pub non_ca: Option<bool>,
    /// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
    /// If both max_issuer_path_length and zero_max_issuer_path_length are unset,
    /// the max path length will be omitted from the CA certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zeroMaxIssuerPathLength"
    )]
    #[builder(default)]
    pub zero_max_issuer_path_length: Option<bool>,
}

/// Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509ConfigKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "baseKeyUsage"
    )]
    #[builder(default)]
    pub base_key_usage: Option<CertificateAuthorityForProviderConfigX509ConfigKeyUsageBaseKeyUsage>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "extendedKeyUsage"
    )]
    #[builder(default)]
    pub extended_key_usage:
        Option<CertificateAuthorityForProviderConfigX509ConfigKeyUsageExtendedKeyUsage>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unknownExtendedKeyUsages"
    )]
    #[builder(default)]
    pub unknown_extended_key_usages: Option<
        Vec<CertificateAuthorityForProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages>,
    >,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509ConfigKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    #[builder(default)]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentCommitment"
    )]
    #[builder(default)]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    #[builder(default)]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataEncipherment"
    )]
    #[builder(default)]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "decipherOnly"
    )]
    #[builder(default)]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "digitalSignature"
    )]
    #[builder(default)]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encipherOnly"
    )]
    #[builder(default)]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAgreement"
    )]
    #[builder(default)]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyEncipherment"
    )]
    #[builder(default)]
    pub key_encipherment: Option<bool>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509ConfigKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientAuth"
    )]
    #[builder(default)]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeSigning"
    )]
    #[builder(default)]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailProtection"
    )]
    #[builder(default)]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspSigning"
    )]
    #[builder(default)]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverAuth"
    )]
    #[builder(default)]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeStamping"
    )]
    #[builder(default)]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes the X.509 name constraints extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509ConfigNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedDnsNames"
    )]
    #[builder(default)]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedEmailAddresses"
    )]
    #[builder(default)]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedIpRanges"
    )]
    #[builder(default)]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedUris"
    )]
    #[builder(default)]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedDnsNames"
    )]
    #[builder(default)]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedEmailAddresses"
    )]
    #[builder(default)]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedIpRanges"
    )]
    #[builder(default)]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedUris"
    )]
    #[builder(default)]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderConfigX509ConfigPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
/// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
/// certificate. Otherwise, it is used to sign a CSR.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderKeySpec {
    /// The algorithm to use for creating a managed Cloud KMS key for a for a simplified
    /// experience. All managed keys will be have their ProtectionLevel as HSM.
    /// Possible values are: SIGN_HASH_ALGORITHM_UNSPECIFIED, RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256, RSA_PKCS1_2048_SHA256, RSA_PKCS1_3072_SHA256, RSA_PKCS1_4096_SHA256, EC_P256_SHA256, EC_P384_SHA384.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub algorithm: Option<String>,
    /// The resource name for an existing Cloud KMS CryptoKeyVersion in the format
    /// projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudKmsKeyVersion"
    )]
    #[builder(default)]
    pub cloud_kms_key_version: Option<String>,
}

/// Reference to a CAPool in privateca to populate pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderPoolRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateAuthorityForProviderPoolRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderPoolRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateAuthorityForProviderPoolRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateAuthorityForProviderPoolRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityForProviderPoolRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityForProviderPoolRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CAPool in privateca to populate pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderPoolSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateAuthorityForProviderPoolSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderPoolSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateAuthorityForProviderPoolSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateAuthorityForProviderPoolSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityForProviderPoolSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityForProviderPoolSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// If this is a subordinate CertificateAuthority, this field will be set
/// with the subordinate configuration, which describes its issuers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderSubordinateConfig {
    /// This can refer to a CertificateAuthority that was used to create a
    /// subordinate CertificateAuthority. This field is used for information
    /// and usability purposes only. The resource name is in the format
    /// projects/*/locations/*/caPools/*/certificateAuthorities/*.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthority"
    )]
    #[builder(default)]
    pub certificate_authority: Option<String>,
    /// Reference to a CertificateAuthority in privateca to populate certificateAuthority.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityRef"
    )]
    #[builder(default)]
    pub certificate_authority_ref:
        Option<CertificateAuthorityForProviderSubordinateConfigCertificateAuthorityRef>,
    /// Selector for a CertificateAuthority in privateca to populate certificateAuthority.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthoritySelector"
    )]
    #[builder(default)]
    pub certificate_authority_selector:
        Option<CertificateAuthorityForProviderSubordinateConfigCertificateAuthoritySelector>,
    /// Contains the PEM certificate chain for the issuers of this CertificateAuthority,
    /// but not pem certificate for this CA itself.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemIssuerChain"
    )]
    #[builder(default)]
    pub pem_issuer_chain: Option<CertificateAuthorityForProviderSubordinateConfigPemIssuerChain>,
}

/// Reference to a CertificateAuthority in privateca to populate certificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderSubordinateConfigCertificateAuthorityRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<CertificateAuthorityForProviderSubordinateConfigCertificateAuthorityRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderSubordinateConfigCertificateAuthorityRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<
        CertificateAuthorityForProviderSubordinateConfigCertificateAuthorityRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<
        CertificateAuthorityForProviderSubordinateConfigCertificateAuthorityRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityForProviderSubordinateConfigCertificateAuthorityRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityForProviderSubordinateConfigCertificateAuthorityRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateAuthority in privateca to populate certificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderSubordinateConfigCertificateAuthoritySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<CertificateAuthorityForProviderSubordinateConfigCertificateAuthoritySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderSubordinateConfigCertificateAuthoritySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateAuthorityForProviderSubordinateConfigCertificateAuthoritySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateAuthorityForProviderSubordinateConfigCertificateAuthoritySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityForProviderSubordinateConfigCertificateAuthoritySelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityForProviderSubordinateConfigCertificateAuthoritySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Contains the PEM certificate chain for the issuers of this CertificateAuthority,
/// but not pem certificate for this CA itself.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityForProviderSubordinateConfigPemIssuerChain {
    /// Expected to be in leaf-to-root order according to RFC 5246.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemCertificates"
    )]
    #[builder(default)]
    pub pem_certificates: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProvider {
    /// The config used to create a self-signed X.509 certificate or CSR.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub config: Option<CertificateAuthorityInitProviderConfig>,
    /// When the field is set to false, deleting the CertificateAuthority is allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionProtection"
    )]
    #[builder(default)]
    pub deletion_protection: Option<bool>,
    /// Desired state of the CertificateAuthority. Set this field to STAGED to create a STAGED root CA.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredState"
    )]
    #[builder(default)]
    pub desired_state: Option<String>,
    /// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
    /// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
    /// (such as gs://) or suffixes (such as .googleapis.com). For example, to use a bucket named
    /// my-bucket, you would simply specify my-bucket. If not specified, a managed bucket will be
    /// created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcsBucket")]
    #[builder(default)]
    pub gcs_bucket: Option<String>,
    /// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
    /// Use with care. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreActiveCertificatesOnDeletion"
    )]
    #[builder(default)]
    pub ignore_active_certificates_on_deletion: Option<bool>,
    /// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
    /// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
    /// certificate. Otherwise, it is used to sign a CSR.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySpec")]
    #[builder(default)]
    pub key_spec: Option<CertificateAuthorityInitProviderKeySpec>,
    /// Labels with user-defined metadata.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
    /// "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
    /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
    /// fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifetime: Option<String>,
    /// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with a third party issuer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemCaCertificate"
    )]
    #[builder(default)]
    pub pem_ca_certificate: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// If this flag is set, the Certificate Authority will be deleted as soon as
    /// possible without a 30-day grace period where undeletion would have been
    /// allowed. If you proceed, there will be no way to recover this CA.
    /// Use with care. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipGracePeriod"
    )]
    #[builder(default)]
    pub skip_grace_period: Option<bool>,
    /// If this is a subordinate CertificateAuthority, this field will be set
    /// with the subordinate configuration, which describes its issuers.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subordinateConfig"
    )]
    #[builder(default)]
    pub subordinate_config: Option<CertificateAuthorityInitProviderSubordinateConfig>,
    /// The Type of this CertificateAuthority.
    /// ~> Note: For SUBORDINATE Certificate Authorities, they need to
    /// be activated before they can issue certificates.
    /// Default value is SELF_SIGNED.
    /// Possible values are: SELF_SIGNED, SUBORDINATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// The config used to create a self-signed X.509 certificate or CSR.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfig {
    /// Specifies some of the values in a certificate that are related to the subject.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectConfig"
    )]
    #[builder(default)]
    pub subject_config: Option<CertificateAuthorityInitProviderConfigSubjectConfig>,
    /// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectKeyId"
    )]
    #[builder(default)]
    pub subject_key_id: Option<CertificateAuthorityInitProviderConfigSubjectKeyId>,
    /// Describes how some of the technical X.509 fields in a certificate should be populated.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "x509Config"
    )]
    #[builder(default)]
    pub x509_config: Option<CertificateAuthorityInitProviderConfigX509Config>,
}

/// Specifies some of the values in a certificate that are related to the subject.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigSubjectConfig {
    /// Contains distinguished name fields such as the location and organization.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subject: Option<CertificateAuthorityInitProviderConfigSubjectConfigSubject>,
    /// The subject alternative name fields.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAltName"
    )]
    #[builder(default)]
    pub subject_alt_name: Option<CertificateAuthorityInitProviderConfigSubjectConfigSubjectAltName>,
}

/// Contains distinguished name fields such as the location and organization.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigSubjectConfigSubject {
    /// The common name of the distinguished name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default)]
    pub common_name: Option<String>,
    /// The country code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "countryCode"
    )]
    #[builder(default)]
    pub country_code: Option<String>,
    /// The locality or city of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locality: Option<String>,
    /// The organization of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub organization: Option<String>,
    /// The organizational unit of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default)]
    pub organizational_unit: Option<String>,
    /// The postal code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default)]
    pub postal_code: Option<String>,
    /// The province, territory, or regional state of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub province: Option<String>,
    /// The street address of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default)]
    pub street_address: Option<String>,
}

/// The subject alternative name fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigSubjectConfigSubjectAltName {
    /// Contains only valid, fully-qualified host names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsNames")]
    #[builder(default)]
    pub dns_names: Option<Vec<String>>,
    /// Contains only valid RFC 2822 E-mail addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailAddresses"
    )]
    #[builder(default)]
    pub email_addresses: Option<Vec<String>>,
    /// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddresses"
    )]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
    /// Contains only valid RFC 3986 URIs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uris: Option<Vec<String>>,
}

/// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigSubjectKeyId {
    /// The value of the KeyId in lowercase hexidecimal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

/// Describes how some of the technical X.509 fields in a certificate should be populated.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509Config {
    /// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalExtensions"
    )]
    #[builder(default)]
    pub additional_extensions:
        Option<Vec<CertificateAuthorityInitProviderConfigX509ConfigAdditionalExtensions>>,
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aiaOcspServers"
    )]
    #[builder(default)]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    #[builder(default)]
    pub ca_options: Option<CertificateAuthorityInitProviderConfigX509ConfigCaOptions>,
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    #[builder(default)]
    pub key_usage: Option<CertificateAuthorityInitProviderConfigX509ConfigKeyUsage>,
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameConstraints"
    )]
    #[builder(default)]
    pub name_constraints: Option<CertificateAuthorityInitProviderConfigX509ConfigNameConstraints>,
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    #[builder(default)]
    pub policy_ids: Option<Vec<CertificateAuthorityInitProviderConfigX509ConfigPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509ConfigAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    #[builder(default)]
    pub object_id:
        Option<CertificateAuthorityInitProviderConfigX509ConfigAdditionalExtensionsObjectId>,
    /// The value of this X.509 extension. A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509ConfigAdditionalExtensionsObjectId {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509ConfigCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    #[builder(default)]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. Setting the value to 0
    /// requires setting zero_max_issuer_path_length = true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIssuerPathLength"
    )]
    #[builder(default)]
    pub max_issuer_path_length: Option<f64>,
    /// When true, the "CA" in Basic Constraints extension will be set to false.
    /// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonCa")]
    #[builder(default)]
    pub non_ca: Option<bool>,
    /// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
    /// If both max_issuer_path_length and zero_max_issuer_path_length are unset,
    /// the max path length will be omitted from the CA certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zeroMaxIssuerPathLength"
    )]
    #[builder(default)]
    pub zero_max_issuer_path_length: Option<bool>,
}

/// Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509ConfigKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "baseKeyUsage"
    )]
    #[builder(default)]
    pub base_key_usage:
        Option<CertificateAuthorityInitProviderConfigX509ConfigKeyUsageBaseKeyUsage>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "extendedKeyUsage"
    )]
    #[builder(default)]
    pub extended_key_usage:
        Option<CertificateAuthorityInitProviderConfigX509ConfigKeyUsageExtendedKeyUsage>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unknownExtendedKeyUsages"
    )]
    #[builder(default)]
    pub unknown_extended_key_usages: Option<
        Vec<CertificateAuthorityInitProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages>,
    >,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509ConfigKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    #[builder(default)]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentCommitment"
    )]
    #[builder(default)]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    #[builder(default)]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataEncipherment"
    )]
    #[builder(default)]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "decipherOnly"
    )]
    #[builder(default)]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "digitalSignature"
    )]
    #[builder(default)]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encipherOnly"
    )]
    #[builder(default)]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAgreement"
    )]
    #[builder(default)]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyEncipherment"
    )]
    #[builder(default)]
    pub key_encipherment: Option<bool>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509ConfigKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientAuth"
    )]
    #[builder(default)]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeSigning"
    )]
    #[builder(default)]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailProtection"
    )]
    #[builder(default)]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspSigning"
    )]
    #[builder(default)]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverAuth"
    )]
    #[builder(default)]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeStamping"
    )]
    #[builder(default)]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes the X.509 name constraints extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509ConfigNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedDnsNames"
    )]
    #[builder(default)]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedEmailAddresses"
    )]
    #[builder(default)]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedIpRanges"
    )]
    #[builder(default)]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedUris"
    )]
    #[builder(default)]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedDnsNames"
    )]
    #[builder(default)]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedEmailAddresses"
    )]
    #[builder(default)]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedIpRanges"
    )]
    #[builder(default)]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedUris"
    )]
    #[builder(default)]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderConfigX509ConfigPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
/// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
/// certificate. Otherwise, it is used to sign a CSR.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderKeySpec {
    /// The algorithm to use for creating a managed Cloud KMS key for a for a simplified
    /// experience. All managed keys will be have their ProtectionLevel as HSM.
    /// Possible values are: SIGN_HASH_ALGORITHM_UNSPECIFIED, RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256, RSA_PKCS1_2048_SHA256, RSA_PKCS1_3072_SHA256, RSA_PKCS1_4096_SHA256, EC_P256_SHA256, EC_P384_SHA384.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub algorithm: Option<String>,
    /// The resource name for an existing Cloud KMS CryptoKeyVersion in the format
    /// projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudKmsKeyVersion"
    )]
    #[builder(default)]
    pub cloud_kms_key_version: Option<String>,
}

/// If this is a subordinate CertificateAuthority, this field will be set
/// with the subordinate configuration, which describes its issuers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderSubordinateConfig {
    /// This can refer to a CertificateAuthority that was used to create a
    /// subordinate CertificateAuthority. This field is used for information
    /// and usability purposes only. The resource name is in the format
    /// projects/*/locations/*/caPools/*/certificateAuthorities/*.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthority"
    )]
    #[builder(default)]
    pub certificate_authority: Option<String>,
    /// Reference to a CertificateAuthority in privateca to populate certificateAuthority.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityRef"
    )]
    #[builder(default)]
    pub certificate_authority_ref:
        Option<CertificateAuthorityInitProviderSubordinateConfigCertificateAuthorityRef>,
    /// Selector for a CertificateAuthority in privateca to populate certificateAuthority.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthoritySelector"
    )]
    #[builder(default)]
    pub certificate_authority_selector:
        Option<CertificateAuthorityInitProviderSubordinateConfigCertificateAuthoritySelector>,
    /// Contains the PEM certificate chain for the issuers of this CertificateAuthority,
    /// but not pem certificate for this CA itself.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemIssuerChain"
    )]
    #[builder(default)]
    pub pem_issuer_chain: Option<CertificateAuthorityInitProviderSubordinateConfigPemIssuerChain>,
}

/// Reference to a CertificateAuthority in privateca to populate certificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderSubordinateConfigCertificateAuthorityRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<CertificateAuthorityInitProviderSubordinateConfigCertificateAuthorityRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderSubordinateConfigCertificateAuthorityRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<
        CertificateAuthorityInitProviderSubordinateConfigCertificateAuthorityRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<
        CertificateAuthorityInitProviderSubordinateConfigCertificateAuthorityRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityInitProviderSubordinateConfigCertificateAuthorityRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityInitProviderSubordinateConfigCertificateAuthorityRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateAuthority in privateca to populate certificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderSubordinateConfigCertificateAuthoritySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<CertificateAuthorityInitProviderSubordinateConfigCertificateAuthoritySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderSubordinateConfigCertificateAuthoritySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateAuthorityInitProviderSubordinateConfigCertificateAuthoritySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateAuthorityInitProviderSubordinateConfigCertificateAuthoritySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityInitProviderSubordinateConfigCertificateAuthoritySelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityInitProviderSubordinateConfigCertificateAuthoritySelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Contains the PEM certificate chain for the issuers of this CertificateAuthority,
/// but not pem certificate for this CA itself.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityInitProviderSubordinateConfigPemIssuerChain {
    /// Expected to be in leaf-to-root order according to RFC 5246.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemCertificates"
    )]
    #[builder(default)]
    pub pem_certificates: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateAuthorityProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateAuthorityProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateAuthorityProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<CertificateAuthorityPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<CertificateAuthorityPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateAuthorityPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateAuthorityPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateAuthorityPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CertificateAuthorityStatus defines the observed state of CertificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<CertificateAuthorityStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProvider {
    /// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessUrls"
    )]
    #[builder(default)]
    pub access_urls: Option<Vec<CertificateAuthorityStatusAtProviderAccessUrls>>,
    /// The config used to create a self-signed X.509 certificate or CSR.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub config: Option<CertificateAuthorityStatusAtProviderConfig>,
    /// The time at which this CertificateAuthority was created.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
    /// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createTime"
    )]
    #[builder(default)]
    pub create_time: Option<String>,
    /// When the field is set to false, deleting the CertificateAuthority is allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionProtection"
    )]
    #[builder(default)]
    pub deletion_protection: Option<bool>,
    /// Desired state of the CertificateAuthority. Set this field to STAGED to create a STAGED root CA.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredState"
    )]
    #[builder(default)]
    pub desired_state: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "effectiveLabels"
    )]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
    /// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
    /// (such as gs://) or suffixes (such as .googleapis.com). For example, to use a bucket named
    /// my-bucket, you would simply specify my-bucket. If not specified, a managed bucket will be
    /// created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcsBucket")]
    #[builder(default)]
    pub gcs_bucket: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificateAuthorities/{{certificate_authority_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
    /// Use with care. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreActiveCertificatesOnDeletion"
    )]
    #[builder(default)]
    pub ignore_active_certificates_on_deletion: Option<bool>,
    /// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
    /// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
    /// certificate. Otherwise, it is used to sign a CSR.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySpec")]
    #[builder(default)]
    pub key_spec: Option<CertificateAuthorityStatusAtProviderKeySpec>,
    /// Labels with user-defined metadata.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
    /// "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
    /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
    /// fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifetime: Option<String>,
    /// Location of the CertificateAuthority. A full list of valid locations can be found by
    /// running gcloud privateca locations list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// The resource name for this CertificateAuthority in the format
    /// projects//locations//certificateAuthorities/*.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with a third party issuer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemCaCertificate"
    )]
    #[builder(default)]
    pub pem_ca_certificate: Option<String>,
    /// This CertificateAuthority's certificate chain, including the current
    /// CertificateAuthority's certificate. Ordered such that the root issuer is the final
    /// element (consistent with RFC 5246). For a self-signed CA, this will only list the current
    /// CertificateAuthority's certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemCaCertificates"
    )]
    #[builder(default)]
    pub pem_ca_certificates: Option<Vec<String>>,
    /// The name of the CaPool this Certificate Authority belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pool: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// If this flag is set, the Certificate Authority will be deleted as soon as
    /// possible without a 30-day grace period where undeletion would have been
    /// allowed. If you proceed, there will be no way to recover this CA.
    /// Use with care. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipGracePeriod"
    )]
    #[builder(default)]
    pub skip_grace_period: Option<bool>,
    /// The State for this CertificateAuthority.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// If this is a subordinate CertificateAuthority, this field will be set
    /// with the subordinate configuration, which describes its issuers.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subordinateConfig"
    )]
    #[builder(default)]
    pub subordinate_config: Option<CertificateAuthorityStatusAtProviderSubordinateConfig>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terraformLabels"
    )]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// The Type of this CertificateAuthority.
    /// ~> Note: For SUBORDINATE Certificate Authorities, they need to
    /// be activated before they can issue certificates.
    /// Default value is SELF_SIGNED.
    /// Possible values are: SELF_SIGNED, SUBORDINATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The time at which this CertificateAuthority was updated.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
    /// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "updateTime"
    )]
    #[builder(default)]
    pub update_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderAccessUrls {
    /// (Output)
    /// The URL where this CertificateAuthority's CA certificate is published. This will only be
    /// set for CAs that have been activated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "caCertificateAccessUrl"
    )]
    #[builder(default)]
    pub ca_certificate_access_url: Option<String>,
    /// (Output)
    /// The URL where this CertificateAuthority's CRLs are published. This will only be set for
    /// CAs that have been activated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "crlAccessUrls"
    )]
    #[builder(default)]
    pub crl_access_urls: Option<Vec<String>>,
}

/// The config used to create a self-signed X.509 certificate or CSR.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfig {
    /// Specifies some of the values in a certificate that are related to the subject.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectConfig"
    )]
    #[builder(default)]
    pub subject_config: Option<CertificateAuthorityStatusAtProviderConfigSubjectConfig>,
    /// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectKeyId"
    )]
    #[builder(default)]
    pub subject_key_id: Option<CertificateAuthorityStatusAtProviderConfigSubjectKeyId>,
    /// Describes how some of the technical X.509 fields in a certificate should be populated.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "x509Config"
    )]
    #[builder(default)]
    pub x509_config: Option<CertificateAuthorityStatusAtProviderConfigX509Config>,
}

/// Specifies some of the values in a certificate that are related to the subject.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigSubjectConfig {
    /// Contains distinguished name fields such as the location and organization.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subject: Option<CertificateAuthorityStatusAtProviderConfigSubjectConfigSubject>,
    /// The subject alternative name fields.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAltName"
    )]
    #[builder(default)]
    pub subject_alt_name:
        Option<CertificateAuthorityStatusAtProviderConfigSubjectConfigSubjectAltName>,
}

/// Contains distinguished name fields such as the location and organization.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigSubjectConfigSubject {
    /// The common name of the distinguished name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default)]
    pub common_name: Option<String>,
    /// The country code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "countryCode"
    )]
    #[builder(default)]
    pub country_code: Option<String>,
    /// The locality or city of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locality: Option<String>,
    /// The organization of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub organization: Option<String>,
    /// The organizational unit of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default)]
    pub organizational_unit: Option<String>,
    /// The postal code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default)]
    pub postal_code: Option<String>,
    /// The province, territory, or regional state of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub province: Option<String>,
    /// The street address of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default)]
    pub street_address: Option<String>,
}

/// The subject alternative name fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigSubjectConfigSubjectAltName {
    /// Contains only valid, fully-qualified host names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsNames")]
    #[builder(default)]
    pub dns_names: Option<Vec<String>>,
    /// Contains only valid RFC 2822 E-mail addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailAddresses"
    )]
    #[builder(default)]
    pub email_addresses: Option<Vec<String>>,
    /// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddresses"
    )]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
    /// Contains only valid RFC 3986 URIs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uris: Option<Vec<String>>,
}

/// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigSubjectKeyId {
    /// The value of the KeyId in lowercase hexidecimal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

/// Describes how some of the technical X.509 fields in a certificate should be populated.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509Config {
    /// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalExtensions"
    )]
    #[builder(default)]
    pub additional_extensions:
        Option<Vec<CertificateAuthorityStatusAtProviderConfigX509ConfigAdditionalExtensions>>,
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aiaOcspServers"
    )]
    #[builder(default)]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    #[builder(default)]
    pub ca_options: Option<CertificateAuthorityStatusAtProviderConfigX509ConfigCaOptions>,
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    #[builder(default)]
    pub key_usage: Option<CertificateAuthorityStatusAtProviderConfigX509ConfigKeyUsage>,
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameConstraints"
    )]
    #[builder(default)]
    pub name_constraints:
        Option<CertificateAuthorityStatusAtProviderConfigX509ConfigNameConstraints>,
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    #[builder(default)]
    pub policy_ids: Option<Vec<CertificateAuthorityStatusAtProviderConfigX509ConfigPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509ConfigAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    #[builder(default)]
    pub object_id:
        Option<CertificateAuthorityStatusAtProviderConfigX509ConfigAdditionalExtensionsObjectId>,
    /// The value of this X.509 extension. A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509ConfigAdditionalExtensionsObjectId {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509ConfigCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    #[builder(default)]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. Setting the value to 0
    /// requires setting zero_max_issuer_path_length = true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIssuerPathLength"
    )]
    #[builder(default)]
    pub max_issuer_path_length: Option<f64>,
    /// When true, the "CA" in Basic Constraints extension will be set to false.
    /// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonCa")]
    #[builder(default)]
    pub non_ca: Option<bool>,
    /// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
    /// If both max_issuer_path_length and zero_max_issuer_path_length are unset,
    /// the max path length will be omitted from the CA certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zeroMaxIssuerPathLength"
    )]
    #[builder(default)]
    pub zero_max_issuer_path_length: Option<bool>,
}

/// Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509ConfigKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "baseKeyUsage"
    )]
    #[builder(default)]
    pub base_key_usage:
        Option<CertificateAuthorityStatusAtProviderConfigX509ConfigKeyUsageBaseKeyUsage>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "extendedKeyUsage"
    )]
    #[builder(default)]
    pub extended_key_usage:
        Option<CertificateAuthorityStatusAtProviderConfigX509ConfigKeyUsageExtendedKeyUsage>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unknownExtendedKeyUsages"
    )]
    #[builder(default)]
    pub unknown_extended_key_usages: Option<
        Vec<CertificateAuthorityStatusAtProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages>,
    >,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509ConfigKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    #[builder(default)]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentCommitment"
    )]
    #[builder(default)]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    #[builder(default)]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataEncipherment"
    )]
    #[builder(default)]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "decipherOnly"
    )]
    #[builder(default)]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "digitalSignature"
    )]
    #[builder(default)]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encipherOnly"
    )]
    #[builder(default)]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAgreement"
    )]
    #[builder(default)]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyEncipherment"
    )]
    #[builder(default)]
    pub key_encipherment: Option<bool>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509ConfigKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientAuth"
    )]
    #[builder(default)]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeSigning"
    )]
    #[builder(default)]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailProtection"
    )]
    #[builder(default)]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspSigning"
    )]
    #[builder(default)]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverAuth"
    )]
    #[builder(default)]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeStamping"
    )]
    #[builder(default)]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes the X.509 name constraints extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509ConfigNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedDnsNames"
    )]
    #[builder(default)]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedEmailAddresses"
    )]
    #[builder(default)]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedIpRanges"
    )]
    #[builder(default)]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedUris"
    )]
    #[builder(default)]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedDnsNames"
    )]
    #[builder(default)]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedEmailAddresses"
    )]
    #[builder(default)]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedIpRanges"
    )]
    #[builder(default)]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedUris"
    )]
    #[builder(default)]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderConfigX509ConfigPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
/// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
/// certificate. Otherwise, it is used to sign a CSR.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderKeySpec {
    /// The algorithm to use for creating a managed Cloud KMS key for a for a simplified
    /// experience. All managed keys will be have their ProtectionLevel as HSM.
    /// Possible values are: SIGN_HASH_ALGORITHM_UNSPECIFIED, RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256, RSA_PKCS1_2048_SHA256, RSA_PKCS1_3072_SHA256, RSA_PKCS1_4096_SHA256, EC_P256_SHA256, EC_P384_SHA384.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub algorithm: Option<String>,
    /// The resource name for an existing Cloud KMS CryptoKeyVersion in the format
    /// projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudKmsKeyVersion"
    )]
    #[builder(default)]
    pub cloud_kms_key_version: Option<String>,
}

/// If this is a subordinate CertificateAuthority, this field will be set
/// with the subordinate configuration, which describes its issuers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderSubordinateConfig {
    /// This can refer to a CertificateAuthority that was used to create a
    /// subordinate CertificateAuthority. This field is used for information
    /// and usability purposes only. The resource name is in the format
    /// projects/*/locations/*/caPools/*/certificateAuthorities/*.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthority"
    )]
    #[builder(default)]
    pub certificate_authority: Option<String>,
    /// Contains the PEM certificate chain for the issuers of this CertificateAuthority,
    /// but not pem certificate for this CA itself.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemIssuerChain"
    )]
    #[builder(default)]
    pub pem_issuer_chain:
        Option<CertificateAuthorityStatusAtProviderSubordinateConfigPemIssuerChain>,
}

/// Contains the PEM certificate chain for the issuers of this CertificateAuthority,
/// but not pem certificate for this CA itself.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateAuthorityStatusAtProviderSubordinateConfigPemIssuerChain {
    /// Expected to be in leaf-to-root order according to RFC 5246.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemCertificates"
    )]
    #[builder(default)]
    pub pem_certificates: Option<Vec<String>>,
}

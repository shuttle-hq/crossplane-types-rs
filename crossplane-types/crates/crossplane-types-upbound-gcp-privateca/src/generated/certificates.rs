// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// CertificateSpec defines the desired state of Certificate
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "privateca.gcp.upbound.io",
    version = "v1beta2",
    kind = "Certificate",
    plural = "certificates"
)]
#[kube(status = "CertificateStatus")]
pub struct CertificateSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<CertificateDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CertificateForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<CertificateInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<CertificateProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<CertificatePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<CertificateWriteConnectionSecretToRef>,
}

/// CertificateSpec defines the desired state of Certificate
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProvider {
    /// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from
    /// a Certificate Authority with resource name projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca,
    /// argument pool should be set to projects/my-project/locations/us-central1/caPools/my-pool, argument certificate_authority
    /// should be set to my-ca.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthority"
    )]
    #[builder(default)]
    pub certificate_authority: Option<String>,
    /// Reference to a CertificateAuthority in privateca to populate certificateAuthority.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityRef"
    )]
    #[builder(default)]
    pub certificate_authority_ref: Option<CertificateForProviderCertificateAuthorityRef>,
    /// Selector for a CertificateAuthority in privateca to populate certificateAuthority.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthoritySelector"
    )]
    #[builder(default)]
    pub certificate_authority_selector: Option<CertificateForProviderCertificateAuthoritySelector>,
    /// The resource name for a CertificateTemplate used to issue this certificate,
    /// in the format projects/*/locations/*/certificateTemplates/*. If this is specified,
    /// the caller must have the necessary permission to use this template. If this is
    /// omitted, no template will be used. This template must be in the same location
    /// as the Certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTemplate"
    )]
    #[builder(default)]
    pub certificate_template: Option<String>,
    /// Reference to a CertificateTemplate in privateca to populate certificateTemplate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTemplateRef"
    )]
    #[builder(default)]
    pub certificate_template_ref: Option<CertificateForProviderCertificateTemplateRef>,
    /// Selector for a CertificateTemplate in privateca to populate certificateTemplate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTemplateSelector"
    )]
    #[builder(default)]
    pub certificate_template_selector: Option<CertificateForProviderCertificateTemplateSelector>,
    /// The config used to create a self-signed X.509 certificate or CSR.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub config: Option<CertificateForProviderConfig>,
    /// Labels with user-defined metadata to apply to this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
    /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
    /// fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifetime: Option<String>,
    /// Location of the Certificate. A full list of valid locations can be found by
    /// running gcloud privateca locations list.
    pub location: String,
    /// Immutable. A pem-encoded X.509 certificate signing request (CSR).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCsr")]
    #[builder(default)]
    pub pem_csr: Option<String>,
    /// The name of the CaPool this Certificate belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pool: Option<String>,
    /// Reference to a CAPool in privateca to populate pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolRef")]
    #[builder(default)]
    pub pool_ref: Option<CertificateForProviderPoolRef>,
    /// Selector for a CAPool in privateca to populate pool.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "poolSelector"
    )]
    #[builder(default)]
    pub pool_selector: Option<CertificateForProviderPoolSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Reference to a CertificateAuthority in privateca to populate certificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateAuthorityRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateForProviderCertificateAuthorityRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateAuthorityRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateForProviderCertificateAuthorityRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateForProviderCertificateAuthorityRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateAuthorityRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateAuthorityRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateAuthority in privateca to populate certificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateAuthoritySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateForProviderCertificateAuthoritySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateAuthoritySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateForProviderCertificateAuthoritySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateForProviderCertificateAuthoritySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateAuthoritySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateAuthoritySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a CertificateTemplate in privateca to populate certificateTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateTemplateRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateForProviderCertificateTemplateRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateTemplateRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateForProviderCertificateTemplateRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateForProviderCertificateTemplateRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateTemplateRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateTemplateRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateTemplate in privateca to populate certificateTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateTemplateSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateForProviderCertificateTemplateSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateTemplateSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateForProviderCertificateTemplateSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateForProviderCertificateTemplateSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateTemplateSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateTemplateSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The config used to create a self-signed X.509 certificate or CSR.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfig {
    /// A PublicKey describes a public key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicKey")]
    #[builder(default)]
    pub public_key: Option<CertificateForProviderConfigPublicKey>,
    /// Specifies some of the values in a certificate that are related to the subject.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectConfig"
    )]
    #[builder(default)]
    pub subject_config: Option<CertificateForProviderConfigSubjectConfig>,
    /// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectKeyId"
    )]
    #[builder(default)]
    pub subject_key_id: Option<CertificateForProviderConfigSubjectKeyId>,
    /// Describes how some of the technical X.509 fields in a certificate should be populated.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "x509Config"
    )]
    #[builder(default)]
    pub x509_config: Option<CertificateForProviderConfigX509Config>,
}

/// A PublicKey describes a public key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigPublicKey {
    /// The format of the public key. Currently, only PEM format is supported.
    /// Possible values are: KEY_TYPE_UNSPECIFIED, PEM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 SubjectPublicKeyInfo structure containing an algorithm identifier and a key. A base64-encoded string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keySecretRef"
    )]
    #[builder(default)]
    pub key_secret_ref: Option<CertificateForProviderConfigPublicKeyKeySecretRef>,
}

/// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 SubjectPublicKeyInfo structure containing an algorithm identifier and a key. A base64-encoded string.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigPublicKeyKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Specifies some of the values in a certificate that are related to the subject.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigSubjectConfig {
    /// (Output)
    /// Contains distinguished name fields such as the location and organization.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subject: Option<CertificateForProviderConfigSubjectConfigSubject>,
    /// (Output)
    /// The subject alternative name fields.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAltName"
    )]
    #[builder(default)]
    pub subject_alt_name: Option<CertificateForProviderConfigSubjectConfigSubjectAltName>,
}

/// (Output)
/// Contains distinguished name fields such as the location and organization.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigSubjectConfigSubject {
    /// The common name of the distinguished name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default)]
    pub common_name: Option<String>,
    /// The country code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "countryCode"
    )]
    #[builder(default)]
    pub country_code: Option<String>,
    /// The locality or city of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locality: Option<String>,
    /// The organization of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub organization: Option<String>,
    /// The organizational unit of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default)]
    pub organizational_unit: Option<String>,
    /// The postal code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default)]
    pub postal_code: Option<String>,
    /// The province, territory, or regional state of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub province: Option<String>,
    /// The street address of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default)]
    pub street_address: Option<String>,
}

/// (Output)
/// The subject alternative name fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigSubjectConfigSubjectAltName {
    /// Contains only valid, fully-qualified host names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsNames")]
    #[builder(default)]
    pub dns_names: Option<Vec<String>>,
    /// Contains only valid RFC 2822 E-mail addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailAddresses"
    )]
    #[builder(default)]
    pub email_addresses: Option<Vec<String>>,
    /// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddresses"
    )]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
    /// Contains only valid RFC 3986 URIs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uris: Option<Vec<String>>,
}

/// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigSubjectKeyId {
    /// The value of the KeyId in lowercase hexidecimal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

/// Describes how some of the technical X.509 fields in a certificate should be populated.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509Config {
    /// (Output)
    /// Describes custom X.509 extensions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalExtensions"
    )]
    #[builder(default)]
    pub additional_extensions:
        Option<Vec<CertificateForProviderConfigX509ConfigAdditionalExtensions>>,
    /// (Output)
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aiaOcspServers"
    )]
    #[builder(default)]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// (Output)
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    #[builder(default)]
    pub ca_options: Option<CertificateForProviderConfigX509ConfigCaOptions>,
    /// (Output)
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    #[builder(default)]
    pub key_usage: Option<CertificateForProviderConfigX509ConfigKeyUsage>,
    /// (Output)
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameConstraints"
    )]
    #[builder(default)]
    pub name_constraints: Option<CertificateForProviderConfigX509ConfigNameConstraints>,
    /// (Output)
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    #[builder(default)]
    pub policy_ids: Option<Vec<CertificateForProviderConfigX509ConfigPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509ConfigAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    #[builder(default)]
    pub object_id: Option<CertificateForProviderConfigX509ConfigAdditionalExtensionsObjectId>,
    /// (Output)
    /// The value of this X.509 extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509ConfigAdditionalExtensionsObjectId {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// (Output)
/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509ConfigCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    #[builder(default)]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIssuerPathLength"
    )]
    #[builder(default)]
    pub max_issuer_path_length: Option<f64>,
    /// When true, the "CA" in Basic Constraints extension will be set to false.
    /// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonCa")]
    #[builder(default)]
    pub non_ca: Option<bool>,
    /// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
    /// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
    /// the max path length will be omitted from the CA certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zeroMaxIssuerPathLength"
    )]
    #[builder(default)]
    pub zero_max_issuer_path_length: Option<bool>,
}

/// (Output)
/// Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509ConfigKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "baseKeyUsage"
    )]
    #[builder(default)]
    pub base_key_usage: Option<CertificateForProviderConfigX509ConfigKeyUsageBaseKeyUsage>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "extendedKeyUsage"
    )]
    #[builder(default)]
    pub extended_key_usage: Option<CertificateForProviderConfigX509ConfigKeyUsageExtendedKeyUsage>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unknownExtendedKeyUsages"
    )]
    #[builder(default)]
    pub unknown_extended_key_usages:
        Option<Vec<CertificateForProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages>>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509ConfigKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    #[builder(default)]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentCommitment"
    )]
    #[builder(default)]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    #[builder(default)]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataEncipherment"
    )]
    #[builder(default)]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "decipherOnly"
    )]
    #[builder(default)]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "digitalSignature"
    )]
    #[builder(default)]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encipherOnly"
    )]
    #[builder(default)]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAgreement"
    )]
    #[builder(default)]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyEncipherment"
    )]
    #[builder(default)]
    pub key_encipherment: Option<bool>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509ConfigKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientAuth"
    )]
    #[builder(default)]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeSigning"
    )]
    #[builder(default)]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailProtection"
    )]
    #[builder(default)]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspSigning"
    )]
    #[builder(default)]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverAuth"
    )]
    #[builder(default)]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeStamping"
    )]
    #[builder(default)]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// (Output)
/// Describes the X.509 name constraints extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509ConfigNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedDnsNames"
    )]
    #[builder(default)]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedEmailAddresses"
    )]
    #[builder(default)]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedIpRanges"
    )]
    #[builder(default)]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedUris"
    )]
    #[builder(default)]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedDnsNames"
    )]
    #[builder(default)]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedEmailAddresses"
    )]
    #[builder(default)]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedIpRanges"
    )]
    #[builder(default)]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedUris"
    )]
    #[builder(default)]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderConfigX509ConfigPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// Reference to a CAPool in privateca to populate pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderPoolRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateForProviderPoolRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderPoolRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateForProviderPoolRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateForProviderPoolRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderPoolRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderPoolRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CAPool in privateca to populate pool.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderPoolSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateForProviderPoolSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderPoolSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateForProviderPoolSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateForProviderPoolSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderPoolSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderPoolSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProvider {
    /// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from
    /// a Certificate Authority with resource name projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca,
    /// argument pool should be set to projects/my-project/locations/us-central1/caPools/my-pool, argument certificate_authority
    /// should be set to my-ca.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthority"
    )]
    #[builder(default)]
    pub certificate_authority: Option<String>,
    /// Reference to a CertificateAuthority in privateca to populate certificateAuthority.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityRef"
    )]
    #[builder(default)]
    pub certificate_authority_ref: Option<CertificateInitProviderCertificateAuthorityRef>,
    /// Selector for a CertificateAuthority in privateca to populate certificateAuthority.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthoritySelector"
    )]
    #[builder(default)]
    pub certificate_authority_selector: Option<CertificateInitProviderCertificateAuthoritySelector>,
    /// The resource name for a CertificateTemplate used to issue this certificate,
    /// in the format projects/*/locations/*/certificateTemplates/*. If this is specified,
    /// the caller must have the necessary permission to use this template. If this is
    /// omitted, no template will be used. This template must be in the same location
    /// as the Certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTemplate"
    )]
    #[builder(default)]
    pub certificate_template: Option<String>,
    /// Reference to a CertificateTemplate in privateca to populate certificateTemplate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTemplateRef"
    )]
    #[builder(default)]
    pub certificate_template_ref: Option<CertificateInitProviderCertificateTemplateRef>,
    /// Selector for a CertificateTemplate in privateca to populate certificateTemplate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTemplateSelector"
    )]
    #[builder(default)]
    pub certificate_template_selector: Option<CertificateInitProviderCertificateTemplateSelector>,
    /// The config used to create a self-signed X.509 certificate or CSR.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub config: Option<CertificateInitProviderConfig>,
    /// Labels with user-defined metadata to apply to this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
    /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
    /// fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifetime: Option<String>,
    /// Immutable. A pem-encoded X.509 certificate signing request (CSR).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCsr")]
    #[builder(default)]
    pub pem_csr: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// Reference to a CertificateAuthority in privateca to populate certificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateAuthorityRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateInitProviderCertificateAuthorityRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateAuthorityRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateInitProviderCertificateAuthorityRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateInitProviderCertificateAuthorityRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateAuthorityRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateAuthorityRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateAuthority in privateca to populate certificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateAuthoritySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateInitProviderCertificateAuthoritySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateAuthoritySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateInitProviderCertificateAuthoritySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateInitProviderCertificateAuthoritySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateAuthoritySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateAuthoritySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a CertificateTemplate in privateca to populate certificateTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateTemplateRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateInitProviderCertificateTemplateRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateTemplateRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateInitProviderCertificateTemplateRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateInitProviderCertificateTemplateRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateTemplateRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateTemplateRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateTemplate in privateca to populate certificateTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateTemplateSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateInitProviderCertificateTemplateSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateTemplateSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateInitProviderCertificateTemplateSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateInitProviderCertificateTemplateSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateTemplateSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateTemplateSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The config used to create a self-signed X.509 certificate or CSR.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfig {
    /// A PublicKey describes a public key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicKey")]
    #[builder(default)]
    pub public_key: Option<CertificateInitProviderConfigPublicKey>,
    /// Specifies some of the values in a certificate that are related to the subject.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectConfig"
    )]
    #[builder(default)]
    pub subject_config: Option<CertificateInitProviderConfigSubjectConfig>,
    /// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectKeyId"
    )]
    #[builder(default)]
    pub subject_key_id: Option<CertificateInitProviderConfigSubjectKeyId>,
    /// Describes how some of the technical X.509 fields in a certificate should be populated.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "x509Config"
    )]
    #[builder(default)]
    pub x509_config: Option<CertificateInitProviderConfigX509Config>,
}

/// A PublicKey describes a public key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigPublicKey {
    /// The format of the public key. Currently, only PEM format is supported.
    /// Possible values are: KEY_TYPE_UNSPECIFIED, PEM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 SubjectPublicKeyInfo structure containing an algorithm identifier and a key. A base64-encoded string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keySecretRef"
    )]
    #[builder(default)]
    pub key_secret_ref: Option<CertificateInitProviderConfigPublicKeyKeySecretRef>,
}

/// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 SubjectPublicKeyInfo structure containing an algorithm identifier and a key. A base64-encoded string.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigPublicKeyKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Specifies some of the values in a certificate that are related to the subject.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigSubjectConfig {
    /// (Output)
    /// Contains distinguished name fields such as the location and organization.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subject: Option<CertificateInitProviderConfigSubjectConfigSubject>,
    /// (Output)
    /// The subject alternative name fields.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAltName"
    )]
    #[builder(default)]
    pub subject_alt_name: Option<CertificateInitProviderConfigSubjectConfigSubjectAltName>,
}

/// (Output)
/// Contains distinguished name fields such as the location and organization.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigSubjectConfigSubject {
    /// The common name of the distinguished name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default)]
    pub common_name: Option<String>,
    /// The country code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "countryCode"
    )]
    #[builder(default)]
    pub country_code: Option<String>,
    /// The locality or city of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locality: Option<String>,
    /// The organization of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub organization: Option<String>,
    /// The organizational unit of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default)]
    pub organizational_unit: Option<String>,
    /// The postal code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default)]
    pub postal_code: Option<String>,
    /// The province, territory, or regional state of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub province: Option<String>,
    /// The street address of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default)]
    pub street_address: Option<String>,
}

/// (Output)
/// The subject alternative name fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigSubjectConfigSubjectAltName {
    /// Contains only valid, fully-qualified host names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsNames")]
    #[builder(default)]
    pub dns_names: Option<Vec<String>>,
    /// Contains only valid RFC 2822 E-mail addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailAddresses"
    )]
    #[builder(default)]
    pub email_addresses: Option<Vec<String>>,
    /// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddresses"
    )]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
    /// Contains only valid RFC 3986 URIs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uris: Option<Vec<String>>,
}

/// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigSubjectKeyId {
    /// The value of the KeyId in lowercase hexidecimal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

/// Describes how some of the technical X.509 fields in a certificate should be populated.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509Config {
    /// (Output)
    /// Describes custom X.509 extensions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalExtensions"
    )]
    #[builder(default)]
    pub additional_extensions:
        Option<Vec<CertificateInitProviderConfigX509ConfigAdditionalExtensions>>,
    /// (Output)
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aiaOcspServers"
    )]
    #[builder(default)]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// (Output)
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    #[builder(default)]
    pub ca_options: Option<CertificateInitProviderConfigX509ConfigCaOptions>,
    /// (Output)
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    #[builder(default)]
    pub key_usage: Option<CertificateInitProviderConfigX509ConfigKeyUsage>,
    /// (Output)
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameConstraints"
    )]
    #[builder(default)]
    pub name_constraints: Option<CertificateInitProviderConfigX509ConfigNameConstraints>,
    /// (Output)
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    #[builder(default)]
    pub policy_ids: Option<Vec<CertificateInitProviderConfigX509ConfigPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509ConfigAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    #[builder(default)]
    pub object_id: Option<CertificateInitProviderConfigX509ConfigAdditionalExtensionsObjectId>,
    /// (Output)
    /// The value of this X.509 extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509ConfigAdditionalExtensionsObjectId {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// (Output)
/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509ConfigCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    #[builder(default)]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIssuerPathLength"
    )]
    #[builder(default)]
    pub max_issuer_path_length: Option<f64>,
    /// When true, the "CA" in Basic Constraints extension will be set to false.
    /// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonCa")]
    #[builder(default)]
    pub non_ca: Option<bool>,
    /// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
    /// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
    /// the max path length will be omitted from the CA certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zeroMaxIssuerPathLength"
    )]
    #[builder(default)]
    pub zero_max_issuer_path_length: Option<bool>,
}

/// (Output)
/// Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509ConfigKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "baseKeyUsage"
    )]
    #[builder(default)]
    pub base_key_usage: Option<CertificateInitProviderConfigX509ConfigKeyUsageBaseKeyUsage>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "extendedKeyUsage"
    )]
    #[builder(default)]
    pub extended_key_usage: Option<CertificateInitProviderConfigX509ConfigKeyUsageExtendedKeyUsage>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unknownExtendedKeyUsages"
    )]
    #[builder(default)]
    pub unknown_extended_key_usages:
        Option<Vec<CertificateInitProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages>>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509ConfigKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    #[builder(default)]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentCommitment"
    )]
    #[builder(default)]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    #[builder(default)]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataEncipherment"
    )]
    #[builder(default)]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "decipherOnly"
    )]
    #[builder(default)]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "digitalSignature"
    )]
    #[builder(default)]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encipherOnly"
    )]
    #[builder(default)]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAgreement"
    )]
    #[builder(default)]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyEncipherment"
    )]
    #[builder(default)]
    pub key_encipherment: Option<bool>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509ConfigKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientAuth"
    )]
    #[builder(default)]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeSigning"
    )]
    #[builder(default)]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailProtection"
    )]
    #[builder(default)]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspSigning"
    )]
    #[builder(default)]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverAuth"
    )]
    #[builder(default)]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeStamping"
    )]
    #[builder(default)]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// (Output)
/// Describes the X.509 name constraints extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509ConfigNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedDnsNames"
    )]
    #[builder(default)]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedEmailAddresses"
    )]
    #[builder(default)]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedIpRanges"
    )]
    #[builder(default)]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedUris"
    )]
    #[builder(default)]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedDnsNames"
    )]
    #[builder(default)]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedEmailAddresses"
    )]
    #[builder(default)]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedIpRanges"
    )]
    #[builder(default)]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedUris"
    )]
    #[builder(default)]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderConfigX509ConfigPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificatePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<CertificatePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<CertificatePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificatePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificatePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificatePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificatePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificatePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificatePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificatePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificatePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CertificateStatus defines the observed state of Certificate.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<CertificateStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProvider {
    /// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from
    /// a Certificate Authority with resource name projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca,
    /// argument pool should be set to projects/my-project/locations/us-central1/caPools/my-pool, argument certificate_authority
    /// should be set to my-ca.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthority"
    )]
    #[builder(default)]
    pub certificate_authority: Option<String>,
    /// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateDescription"
    )]
    #[builder(default)]
    pub certificate_description: Option<Vec<CertificateStatusAtProviderCertificateDescription>>,
    /// The resource name for a CertificateTemplate used to issue this certificate,
    /// in the format projects/*/locations/*/certificateTemplates/*. If this is specified,
    /// the caller must have the necessary permission to use this template. If this is
    /// omitted, no template will be used. This template must be in the same location
    /// as the Certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTemplate"
    )]
    #[builder(default)]
    pub certificate_template: Option<String>,
    /// The config used to create a self-signed X.509 certificate or CSR.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub config: Option<CertificateStatusAtProviderConfig>,
    /// The time that this resource was created on the server.
    /// This is in RFC3339 text format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createTime"
    )]
    #[builder(default)]
    pub create_time: Option<String>,
    /// for all of the labels present on the resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "effectiveLabels"
    )]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificates/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The resource name of the issuing CertificateAuthority in the format projects/*/locations/*/caPools/*/certificateAuthorities/*.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "issuerCertificateAuthority"
    )]
    #[builder(default)]
    pub issuer_certificate_authority: Option<String>,
    /// Labels with user-defined metadata to apply to this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
    /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
    /// fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifetime: Option<String>,
    /// Location of the Certificate. A full list of valid locations can be found by
    /// running gcloud privateca locations list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// Output only. The pem-encoded, signed X.509 certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemCertificate"
    )]
    #[builder(default)]
    pub pem_certificate: Option<String>,
    /// The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pemCertificateChain"
    )]
    #[builder(default)]
    pub pem_certificate_chain: Option<Vec<String>>,
    /// Immutable. A pem-encoded X.509 certificate signing request (CSR).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCsr")]
    #[builder(default)]
    pub pem_csr: Option<String>,
    /// The name of the CaPool this Certificate belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pool: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Output only. Details regarding the revocation of this Certificate. This Certificate is
    /// considered revoked if and only if this field is present.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "revocationDetails"
    )]
    #[builder(default)]
    pub revocation_details: Option<Vec<CertificateStatusAtProviderRevocationDetails>>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terraformLabels"
    )]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Output only. The time at which this CertificateAuthority was updated.
    /// This is in RFC3339 text format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "updateTime"
    )]
    #[builder(default)]
    pub update_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescription {
    /// (Output)
    /// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aiaIssuingCertificateUrls"
    )]
    #[builder(default)]
    pub aia_issuing_certificate_urls: Option<Vec<String>>,
    /// (Output)
    /// Identifies the subjectKeyId of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorityKeyId"
    )]
    #[builder(default)]
    pub authority_key_id:
        Option<Vec<CertificateStatusAtProviderCertificateDescriptionAuthorityKeyId>>,
    /// (Output)
    /// The hash of the x.509 certificate.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certFingerprint"
    )]
    #[builder(default)]
    pub cert_fingerprint:
        Option<Vec<CertificateStatusAtProviderCertificateDescriptionCertFingerprint>>,
    /// (Output)
    /// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "crlDistributionPoints"
    )]
    #[builder(default)]
    pub crl_distribution_points: Option<Vec<String>>,
    /// (Output)
    /// A PublicKey describes a public key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicKey")]
    #[builder(default)]
    pub public_key: Option<Vec<CertificateStatusAtProviderCertificateDescriptionPublicKey>>,
    /// (Output)
    /// Describes some of the values in a certificate that are related to the subject and lifetime.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectDescription"
    )]
    #[builder(default)]
    pub subject_description:
        Option<Vec<CertificateStatusAtProviderCertificateDescriptionSubjectDescription>>,
    /// (Output)
    /// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectKeyId"
    )]
    #[builder(default)]
    pub subject_key_id: Option<Vec<CertificateStatusAtProviderCertificateDescriptionSubjectKeyId>>,
    /// (Output)
    /// A structured description of the issued X.509 certificate.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "x509Description"
    )]
    #[builder(default)]
    pub x509_description:
        Option<Vec<CertificateStatusAtProviderCertificateDescriptionX509Description>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionAuthorityKeyId {
    /// The value of the KeyId in lowercase hexidecimal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionCertFingerprint {
    /// (Output)
    /// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sha256Hash"
    )]
    #[builder(default)]
    pub sha256_hash: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionPublicKey {
    /// The format of the public key. Currently, only PEM format is supported.
    /// Possible values are: KEY_TYPE_UNSPECIFIED, PEM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 SubjectPublicKeyInfo structure containing an algorithm identifier and a key. A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionSubjectDescription {
    /// (Output)
    /// The serial number encoded in lowercase hexadecimal.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hexSerialNumber"
    )]
    #[builder(default)]
    pub hex_serial_number: Option<String>,
    /// (Output)
    /// For convenience, the actual lifetime of an issued certificate. Corresponds to 'notAfterTime' - 'notBeforeTime'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lifetime: Option<String>,
    /// (Output)
    /// The time at which the certificate expires.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notAfterTime"
    )]
    #[builder(default)]
    pub not_after_time: Option<String>,
    /// (Output)
    /// The time at which the certificate becomes valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notBeforeTime"
    )]
    #[builder(default)]
    pub not_before_time: Option<String>,
    /// (Output)
    /// Contains distinguished name fields such as the location and organization.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subject:
        Option<Vec<CertificateStatusAtProviderCertificateDescriptionSubjectDescriptionSubject>>,
    /// (Output)
    /// The subject alternative name fields.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAltName"
    )]
    #[builder(default)]
    pub subject_alt_name: Option<
        Vec<CertificateStatusAtProviderCertificateDescriptionSubjectDescriptionSubjectAltName>,
    >,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionSubjectDescriptionSubject {
    /// The common name of the distinguished name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default)]
    pub common_name: Option<String>,
    /// The country code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "countryCode"
    )]
    #[builder(default)]
    pub country_code: Option<String>,
    /// The locality or city of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locality: Option<String>,
    /// The organization of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub organization: Option<String>,
    /// The organizational unit of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default)]
    pub organizational_unit: Option<String>,
    /// The postal code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default)]
    pub postal_code: Option<String>,
    /// The province, territory, or regional state of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub province: Option<String>,
    /// The street address of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default)]
    pub street_address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionSubjectDescriptionSubjectAltName {
    /// (Output)
    /// Contains additional subject alternative name values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSans")]
    #[builder(default)]
    pub custom_sans: Option<Vec<CertificateStatusAtProviderCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSans>>,
    /// Contains only valid, fully-qualified host names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsNames")]
    #[builder(default)]
    pub dns_names: Option<Vec<String>>,
    /// Contains only valid RFC 2822 E-mail addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailAddresses")]
    #[builder(default)]
    pub email_addresses: Option<Vec<String>>,
    /// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddresses")]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
    /// Contains only valid RFC 3986 URIs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSans {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// (Output)
    /// Describes how some of the technical fields in a certificate should be populated.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "obectId")]
    #[builder(default)]
    pub obect_id: Option<Vec<CertificateStatusAtProviderCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectId>>,
    /// (Output)
    /// The value of this X.509 extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectId
{
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionSubjectKeyId {
    /// The value of the KeyId in lowercase hexidecimal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509Description {
    /// (Output)
    /// Describes custom X.509 extensions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalExtensions"
    )]
    #[builder(default)]
    pub additional_extensions: Option<
        Vec<CertificateStatusAtProviderCertificateDescriptionX509DescriptionAdditionalExtensions>,
    >,
    /// (Output)
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aiaOcspServers"
    )]
    #[builder(default)]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// (Output)
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    #[builder(default)]
    pub ca_options:
        Option<Vec<CertificateStatusAtProviderCertificateDescriptionX509DescriptionCaOptions>>,
    /// (Output)
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    #[builder(default)]
    pub key_usage:
        Option<Vec<CertificateStatusAtProviderCertificateDescriptionX509DescriptionKeyUsage>>,
    /// (Output)
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameConstraints"
    )]
    #[builder(default)]
    pub name_constraints: Option<
        Vec<CertificateStatusAtProviderCertificateDescriptionX509DescriptionNameConstraints>,
    >,
    /// (Output)
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    #[builder(default)]
    pub policy_ids:
        Option<Vec<CertificateStatusAtProviderCertificateDescriptionX509DescriptionPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509DescriptionAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    #[builder(default)]
    pub object_id: Option<Vec<CertificateStatusAtProviderCertificateDescriptionX509DescriptionAdditionalExtensionsObjectId>>,
    /// (Output)
    /// The value of this X.509 extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509DescriptionAdditionalExtensionsObjectId
{
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509DescriptionCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    #[builder(default)]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIssuerPathLength"
    )]
    #[builder(default)]
    pub max_issuer_path_length: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509DescriptionKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseKeyUsage")]
    #[builder(default)]
    pub base_key_usage: Option<Vec<CertificateStatusAtProviderCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsage>>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedKeyUsage")]
    #[builder(default)]
    pub extended_key_usage: Option<Vec<CertificateStatusAtProviderCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsage>>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unknownExtendedKeyUsages")]
    #[builder(default)]
    pub unknown_extended_key_usages: Option<Vec<CertificateStatusAtProviderCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsages>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    #[builder(default)]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentCommitment"
    )]
    #[builder(default)]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    #[builder(default)]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataEncipherment"
    )]
    #[builder(default)]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "decipherOnly"
    )]
    #[builder(default)]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "digitalSignature"
    )]
    #[builder(default)]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encipherOnly"
    )]
    #[builder(default)]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAgreement"
    )]
    #[builder(default)]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyEncipherment"
    )]
    #[builder(default)]
    pub key_encipherment: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsage
{
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientAuth"
    )]
    #[builder(default)]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeSigning"
    )]
    #[builder(default)]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailProtection"
    )]
    #[builder(default)]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspSigning"
    )]
    #[builder(default)]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverAuth"
    )]
    #[builder(default)]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeStamping"
    )]
    #[builder(default)]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsages
{
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509DescriptionNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedDnsNames"
    )]
    #[builder(default)]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedEmailAddresses"
    )]
    #[builder(default)]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedIpRanges"
    )]
    #[builder(default)]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedUris"
    )]
    #[builder(default)]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedDnsNames"
    )]
    #[builder(default)]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedEmailAddresses"
    )]
    #[builder(default)]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedIpRanges"
    )]
    #[builder(default)]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedUris"
    )]
    #[builder(default)]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderCertificateDescriptionX509DescriptionPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// The config used to create a self-signed X.509 certificate or CSR.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfig {
    /// A PublicKey describes a public key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicKey")]
    #[builder(default)]
    pub public_key: Option<CertificateStatusAtProviderConfigPublicKey>,
    /// Specifies some of the values in a certificate that are related to the subject.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectConfig"
    )]
    #[builder(default)]
    pub subject_config: Option<CertificateStatusAtProviderConfigSubjectConfig>,
    /// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectKeyId"
    )]
    #[builder(default)]
    pub subject_key_id: Option<CertificateStatusAtProviderConfigSubjectKeyId>,
    /// Describes how some of the technical X.509 fields in a certificate should be populated.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "x509Config"
    )]
    #[builder(default)]
    pub x509_config: Option<CertificateStatusAtProviderConfigX509Config>,
}

/// A PublicKey describes a public key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigPublicKey {
    /// The format of the public key. Currently, only PEM format is supported.
    /// Possible values are: KEY_TYPE_UNSPECIFIED, PEM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
}

/// Specifies some of the values in a certificate that are related to the subject.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigSubjectConfig {
    /// (Output)
    /// Contains distinguished name fields such as the location and organization.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subject: Option<CertificateStatusAtProviderConfigSubjectConfigSubject>,
    /// (Output)
    /// The subject alternative name fields.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAltName"
    )]
    #[builder(default)]
    pub subject_alt_name: Option<CertificateStatusAtProviderConfigSubjectConfigSubjectAltName>,
}

/// (Output)
/// Contains distinguished name fields such as the location and organization.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigSubjectConfigSubject {
    /// The common name of the distinguished name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default)]
    pub common_name: Option<String>,
    /// The country code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "countryCode"
    )]
    #[builder(default)]
    pub country_code: Option<String>,
    /// The locality or city of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub locality: Option<String>,
    /// The organization of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub organization: Option<String>,
    /// The organizational unit of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default)]
    pub organizational_unit: Option<String>,
    /// The postal code of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default)]
    pub postal_code: Option<String>,
    /// The province, territory, or regional state of the subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub province: Option<String>,
    /// The street address of the subject.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default)]
    pub street_address: Option<String>,
}

/// (Output)
/// The subject alternative name fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigSubjectConfigSubjectAltName {
    /// Contains only valid, fully-qualified host names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsNames")]
    #[builder(default)]
    pub dns_names: Option<Vec<String>>,
    /// Contains only valid RFC 2822 E-mail addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailAddresses"
    )]
    #[builder(default)]
    pub email_addresses: Option<Vec<String>>,
    /// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddresses"
    )]
    #[builder(default)]
    pub ip_addresses: Option<Vec<String>>,
    /// Contains only valid RFC 3986 URIs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uris: Option<Vec<String>>,
}

/// When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigSubjectKeyId {
    /// The value of the KeyId in lowercase hexidecimal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default)]
    pub key_id: Option<String>,
}

/// Describes how some of the technical X.509 fields in a certificate should be populated.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509Config {
    /// (Output)
    /// Describes custom X.509 extensions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalExtensions"
    )]
    #[builder(default)]
    pub additional_extensions:
        Option<Vec<CertificateStatusAtProviderConfigX509ConfigAdditionalExtensions>>,
    /// (Output)
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aiaOcspServers"
    )]
    #[builder(default)]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// (Output)
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    #[builder(default)]
    pub ca_options: Option<CertificateStatusAtProviderConfigX509ConfigCaOptions>,
    /// (Output)
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    #[builder(default)]
    pub key_usage: Option<CertificateStatusAtProviderConfigX509ConfigKeyUsage>,
    /// (Output)
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameConstraints"
    )]
    #[builder(default)]
    pub name_constraints: Option<CertificateStatusAtProviderConfigX509ConfigNameConstraints>,
    /// (Output)
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    #[builder(default)]
    pub policy_ids: Option<Vec<CertificateStatusAtProviderConfigX509ConfigPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509ConfigAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    #[builder(default)]
    pub object_id: Option<CertificateStatusAtProviderConfigX509ConfigAdditionalExtensionsObjectId>,
    /// (Output)
    /// The value of this X.509 extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509ConfigAdditionalExtensionsObjectId {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// (Output)
/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509ConfigCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    #[builder(default)]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIssuerPathLength"
    )]
    #[builder(default)]
    pub max_issuer_path_length: Option<f64>,
    /// When true, the "CA" in Basic Constraints extension will be set to false.
    /// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonCa")]
    #[builder(default)]
    pub non_ca: Option<bool>,
    /// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
    /// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
    /// the max path length will be omitted from the CA certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zeroMaxIssuerPathLength"
    )]
    #[builder(default)]
    pub zero_max_issuer_path_length: Option<bool>,
}

/// (Output)
/// Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509ConfigKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "baseKeyUsage"
    )]
    #[builder(default)]
    pub base_key_usage: Option<CertificateStatusAtProviderConfigX509ConfigKeyUsageBaseKeyUsage>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "extendedKeyUsage"
    )]
    #[builder(default)]
    pub extended_key_usage:
        Option<CertificateStatusAtProviderConfigX509ConfigKeyUsageExtendedKeyUsage>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unknownExtendedKeyUsages"
    )]
    #[builder(default)]
    pub unknown_extended_key_usages:
        Option<Vec<CertificateStatusAtProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages>>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509ConfigKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    #[builder(default)]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentCommitment"
    )]
    #[builder(default)]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    #[builder(default)]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataEncipherment"
    )]
    #[builder(default)]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "decipherOnly"
    )]
    #[builder(default)]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "digitalSignature"
    )]
    #[builder(default)]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encipherOnly"
    )]
    #[builder(default)]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAgreement"
    )]
    #[builder(default)]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyEncipherment"
    )]
    #[builder(default)]
    pub key_encipherment: Option<bool>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509ConfigKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientAuth"
    )]
    #[builder(default)]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeSigning"
    )]
    #[builder(default)]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailProtection"
    )]
    #[builder(default)]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspSigning"
    )]
    #[builder(default)]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverAuth"
    )]
    #[builder(default)]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeStamping"
    )]
    #[builder(default)]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509ConfigKeyUsageUnknownExtendedKeyUsages {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

/// (Output)
/// Describes the X.509 name constraints extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509ConfigNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedDnsNames"
    )]
    #[builder(default)]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedEmailAddresses"
    )]
    #[builder(default)]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedIpRanges"
    )]
    #[builder(default)]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedUris"
    )]
    #[builder(default)]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedDnsNames"
    )]
    #[builder(default)]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedEmailAddresses"
    )]
    #[builder(default)]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedIpRanges"
    )]
    #[builder(default)]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permittedUris"
    )]
    #[builder(default)]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderConfigX509ConfigPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "objectIdPath"
    )]
    #[builder(default)]
    pub object_id_path: Option<Vec<f64>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderRevocationDetails {
    /// (Output)
    /// Indicates why a Certificate was revoked.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "revocationState"
    )]
    #[builder(default)]
    pub revocation_state: Option<String>,
    /// (Output)
    /// The time at which this Certificate was revoked.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "revocationTime"
    )]
    #[builder(default)]
    pub revocation_time: Option<String>,
}

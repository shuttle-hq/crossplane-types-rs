// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// CertificateSpec defines the desired state of Certificate
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "acm.aws.upbound.io",
    version = "v1beta2",
    kind = "Certificate",
    plural = "certificates"
)]
#[kube(status = "CertificateStatus")]
pub struct CertificateSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<CertificateDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CertificateForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<CertificateInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<CertificateProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<CertificatePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<CertificateWriteConnectionSecretToRef>,
}

/// CertificateSpec defines the desired state of Certificate
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProvider {
    /// ARN of an ACM PCA
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityArn"
    )]
    #[builder(default)]
    pub certificate_authority_arn: Option<String>,
    /// Reference to a CertificateAuthority in acmpca to populate certificateAuthorityArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityArnRef"
    )]
    #[builder(default)]
    pub certificate_authority_arn_ref: Option<CertificateForProviderCertificateAuthorityArnRef>,
    /// Selector for a CertificateAuthority in acmpca to populate certificateAuthorityArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityArnSelector"
    )]
    #[builder(default)]
    pub certificate_authority_arn_selector:
        Option<CertificateForProviderCertificateAuthorityArnSelector>,
    /// Certificate's PEM-formatted public key
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateBody"
    )]
    #[builder(default)]
    pub certificate_body: Option<String>,
    /// Certificate's PEM-formatted chain
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateChain"
    )]
    #[builder(default)]
    pub certificate_chain: Option<String>,
    /// Domain name for which the certificate should be issued
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// Amount of time to start automatic renewal process before expiration.
    /// Has no effect if less than 60 days.
    /// Represented by either
    /// a subset of RFC 3339 duration supporting years, months, and days (e.g., P90D),
    /// or a string such as 2160h.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "earlyRenewalDuration"
    )]
    #[builder(default)]
    pub early_renewal_duration: Option<String>,
    /// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See ACM Certificate characteristics for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAlgorithm"
    )]
    #[builder(default)]
    pub key_algorithm: Option<String>,
    /// Configuration block used to set certificate options. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub options: Option<CertificateForProviderOptions>,
    /// Certificate's PEM-formatted private key
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateKeySecretRef"
    )]
    #[builder(default)]
    pub private_key_secret_ref: Option<CertificateForProviderPrivateKeySecretRef>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Set of domains that should be SANs in the issued certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAlternativeNames"
    )]
    #[builder(default)]
    pub subject_alternative_names: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Which method to use for validation. DNS or EMAIL are valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMethod"
    )]
    #[builder(default)]
    pub validation_method: Option<String>,
    /// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationOption"
    )]
    #[builder(default)]
    pub validation_option: Option<Vec<CertificateForProviderValidationOption>>,
}

/// Reference to a CertificateAuthority in acmpca to populate certificateAuthorityArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateAuthorityArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateForProviderCertificateAuthorityArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateAuthorityArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateForProviderCertificateAuthorityArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateForProviderCertificateAuthorityArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateAuthorityArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateAuthorityArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateAuthority in acmpca to populate certificateAuthorityArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateAuthorityArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateForProviderCertificateAuthorityArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderCertificateAuthorityArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateForProviderCertificateAuthorityArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateForProviderCertificateAuthorityArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateAuthorityArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateForProviderCertificateAuthorityArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block used to set certificate options. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderOptions {
    /// Whether certificate details should be added to a certificate transparency log. Valid values are ENABLED or DISABLED. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTransparencyLoggingPreference"
    )]
    #[builder(default)]
    pub certificate_transparency_logging_preference: Option<String>,
}

/// Certificate's PEM-formatted private key
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderPrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateForProviderValidationOption {
    /// Fully qualified domain name (FQDN) in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the domain_name value or a superdomain of the domain_name value. For example, if you request a certificate for "testing.example.com", you can specify "example.com" for this value.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationDomain"
    )]
    #[builder(default)]
    pub validation_domain: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProvider {
    /// ARN of an ACM PCA
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityArn"
    )]
    #[builder(default)]
    pub certificate_authority_arn: Option<String>,
    /// Reference to a CertificateAuthority in acmpca to populate certificateAuthorityArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityArnRef"
    )]
    #[builder(default)]
    pub certificate_authority_arn_ref: Option<CertificateInitProviderCertificateAuthorityArnRef>,
    /// Selector for a CertificateAuthority in acmpca to populate certificateAuthorityArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityArnSelector"
    )]
    #[builder(default)]
    pub certificate_authority_arn_selector:
        Option<CertificateInitProviderCertificateAuthorityArnSelector>,
    /// Certificate's PEM-formatted public key
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateBody"
    )]
    #[builder(default)]
    pub certificate_body: Option<String>,
    /// Certificate's PEM-formatted chain
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateChain"
    )]
    #[builder(default)]
    pub certificate_chain: Option<String>,
    /// Domain name for which the certificate should be issued
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// Amount of time to start automatic renewal process before expiration.
    /// Has no effect if less than 60 days.
    /// Represented by either
    /// a subset of RFC 3339 duration supporting years, months, and days (e.g., P90D),
    /// or a string such as 2160h.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "earlyRenewalDuration"
    )]
    #[builder(default)]
    pub early_renewal_duration: Option<String>,
    /// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See ACM Certificate characteristics for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAlgorithm"
    )]
    #[builder(default)]
    pub key_algorithm: Option<String>,
    /// Configuration block used to set certificate options. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub options: Option<CertificateInitProviderOptions>,
    /// Certificate's PEM-formatted private key
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateKeySecretRef"
    )]
    #[builder(default)]
    pub private_key_secret_ref: Option<CertificateInitProviderPrivateKeySecretRef>,
    /// Set of domains that should be SANs in the issued certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAlternativeNames"
    )]
    #[builder(default)]
    pub subject_alternative_names: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Which method to use for validation. DNS or EMAIL are valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMethod"
    )]
    #[builder(default)]
    pub validation_method: Option<String>,
    /// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationOption"
    )]
    #[builder(default)]
    pub validation_option: Option<Vec<CertificateInitProviderValidationOption>>,
}

/// Reference to a CertificateAuthority in acmpca to populate certificateAuthorityArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateAuthorityArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateInitProviderCertificateAuthorityArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateAuthorityArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateInitProviderCertificateAuthorityArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateInitProviderCertificateAuthorityArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateAuthorityArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateAuthorityArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateAuthority in acmpca to populate certificateAuthorityArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateAuthorityArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateInitProviderCertificateAuthorityArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderCertificateAuthorityArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateInitProviderCertificateAuthorityArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateInitProviderCertificateAuthorityArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateAuthorityArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateInitProviderCertificateAuthorityArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block used to set certificate options. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderOptions {
    /// Whether certificate details should be added to a certificate transparency log. Valid values are ENABLED or DISABLED. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTransparencyLoggingPreference"
    )]
    #[builder(default)]
    pub certificate_transparency_logging_preference: Option<String>,
}

/// Certificate's PEM-formatted private key
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderPrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateInitProviderValidationOption {
    /// Fully qualified domain name (FQDN) in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the domain_name value or a superdomain of the domain_name value. For example, if you request a certificate for "testing.example.com", you can specify "example.com" for this value.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationDomain"
    )]
    #[builder(default)]
    pub validation_domain: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificateProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificateProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificateProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificatePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<CertificatePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<CertificatePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificatePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CertificatePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificatePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CertificatePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CertificatePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificatePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificatePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificatePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CertificateStatus defines the observed state of Certificate.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<CertificateStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProvider {
    /// ARN of the certificate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// ARN of an ACM PCA
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityArn"
    )]
    #[builder(default)]
    pub certificate_authority_arn: Option<String>,
    /// Certificate's PEM-formatted public key
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateBody"
    )]
    #[builder(default)]
    pub certificate_body: Option<String>,
    /// Certificate's PEM-formatted chain
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateChain"
    )]
    #[builder(default)]
    pub certificate_chain: Option<String>,
    /// Domain name for which the certificate should be issued
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// Set of domain validation objects which can be used to complete certificate validation.
    /// Can have more than one element, e.g., if SANs are defined.
    /// Only set if DNS-validation was used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainValidationOptions"
    )]
    #[builder(default)]
    pub domain_validation_options: Option<Vec<CertificateStatusAtProviderDomainValidationOptions>>,
    /// Amount of time to start automatic renewal process before expiration.
    /// Has no effect if less than 60 days.
    /// Represented by either
    /// a subset of RFC 3339 duration supporting years, months, and days (e.g., P90D),
    /// or a string such as 2160h.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "earlyRenewalDuration"
    )]
    #[builder(default)]
    pub early_renewal_duration: Option<String>,
    /// ARN of the certificate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See ACM Certificate characteristics for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAlgorithm"
    )]
    #[builder(default)]
    pub key_algorithm: Option<String>,
    /// Expiration date and time of the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notAfter")]
    #[builder(default)]
    pub not_after: Option<String>,
    /// Start of the validity period of the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    #[builder(default)]
    pub not_before: Option<String>,
    /// Configuration block used to set certificate options. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub options: Option<CertificateStatusAtProviderOptions>,
    /// true if a Private certificate eligible for managed renewal is within the early_renewal_duration period.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pendingRenewal"
    )]
    #[builder(default)]
    pub pending_renewal: Option<bool>,
    /// Whether the certificate is eligible for managed renewal.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "renewalEligibility"
    )]
    #[builder(default)]
    pub renewal_eligibility: Option<String>,
    /// Contains information about the status of ACM's managed renewal for the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "renewalSummary"
    )]
    #[builder(default)]
    pub renewal_summary: Option<Vec<CertificateStatusAtProviderRenewalSummary>>,
    /// Status of the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
    /// Set of domains that should be SANs in the issued certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subjectAlternativeNames"
    )]
    #[builder(default)]
    pub subject_alternative_names: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Source of the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// List of addresses that received a validation email. Only set if EMAIL validation was used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationEmails"
    )]
    #[builder(default)]
    pub validation_emails: Option<Vec<String>>,
    /// Which method to use for validation. DNS or EMAIL are valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMethod"
    )]
    #[builder(default)]
    pub validation_method: Option<String>,
    /// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationOption"
    )]
    #[builder(default)]
    pub validation_option: Option<Vec<CertificateStatusAtProviderValidationOption>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderDomainValidationOptions {
    /// Fully qualified domain name (FQDN) in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// The name of the DNS record to create to validate the certificate
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceRecordName"
    )]
    #[builder(default)]
    pub resource_record_name: Option<String>,
    /// The type of DNS record to create
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceRecordType"
    )]
    #[builder(default)]
    pub resource_record_type: Option<String>,
    /// The value the DNS record needs to have
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceRecordValue"
    )]
    #[builder(default)]
    pub resource_record_value: Option<String>,
}

/// Configuration block used to set certificate options. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderOptions {
    /// Whether certificate details should be added to a certificate transparency log. Valid values are ENABLED or DISABLED. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateTransparencyLoggingPreference"
    )]
    #[builder(default)]
    pub certificate_transparency_logging_preference: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderRenewalSummary {
    /// The status of ACM's managed renewal of the certificate
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "renewalStatus"
    )]
    #[builder(default)]
    pub renewal_status: Option<String>,
    /// The reason that a renewal request was unsuccessful or is pending
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "renewalStatusReason"
    )]
    #[builder(default)]
    pub renewal_status_reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatedAt")]
    #[builder(default)]
    pub updated_at: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CertificateStatusAtProviderValidationOption {
    /// Fully qualified domain name (FQDN) in the certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the domain_name value or a superdomain of the domain_name value. For example, if you request a certificate for "testing.example.com", you can specify "example.com" for this value.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationDomain"
    )]
    #[builder(default)]
    pub validation_domain: Option<String>,
}

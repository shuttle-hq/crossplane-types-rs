// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AutoscalingPolicySpec defines the desired state of AutoscalingPolicy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "dataproc.gcp.upbound.io",
    version = "v1beta2",
    kind = "AutoscalingPolicy",
    plural = "autoscalingpolicies"
)]
#[kube(status = "AutoscalingPolicyStatus")]
pub struct AutoscalingPolicySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<AutoscalingPolicyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AutoscalingPolicyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<AutoscalingPolicyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<AutoscalingPolicyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<AutoscalingPolicyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<AutoscalingPolicyWriteConnectionSecretToRef>,
}

/// AutoscalingPolicySpec defines the desired state of AutoscalingPolicy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingPolicyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyForProvider {
    /// Basic algorithm for autoscaling.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "basicAlgorithm"
    )]
    #[builder(default)]
    pub basic_algorithm: Option<AutoscalingPolicyForProviderBasicAlgorithm>,
    /// The  location where the autoscaling policy should reside.
    /// The default value is global.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Describes how the autoscaler will operate for secondary workers.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryWorkerConfig"
    )]
    #[builder(default)]
    pub secondary_worker_config: Option<AutoscalingPolicyForProviderSecondaryWorkerConfig>,
    /// Describes how the autoscaler will operate for primary workers.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workerConfig"
    )]
    #[builder(default)]
    pub worker_config: Option<AutoscalingPolicyForProviderWorkerConfig>,
}

/// Basic algorithm for autoscaling.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyForProviderBasicAlgorithm {
    /// Duration between scaling events. A scaling period starts after the
    /// update operation from the previous event has completed.
    /// Bounds: [2m, 1d]. Default: 2m.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cooldownPeriod"
    )]
    #[builder(default)]
    pub cooldown_period: Option<String>,
    /// YARN autoscaling configuration.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yarnConfig"
    )]
    #[builder(default)]
    pub yarn_config: Option<AutoscalingPolicyForProviderBasicAlgorithmYarnConfig>,
}

/// YARN autoscaling configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyForProviderBasicAlgorithmYarnConfig {
    /// Timeout for YARN graceful decommissioning of Node Managers. Specifies the
    /// duration to wait for jobs to complete before forcefully removing workers
    /// (and potentially interrupting jobs). Only applicable to downscaling operations.
    /// Bounds: [0s, 1d].
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gracefulDecommissionTimeout"
    )]
    #[builder(default)]
    pub graceful_decommission_timeout: Option<String>,
    /// Fraction of average pending memory in the last cooldown period for which to
    /// remove workers. A scale-down factor of 1 will result in scaling down so that there
    /// is no available memory remaining after the update (more aggressive scaling).
    /// A scale-down factor of 0 disables removing workers, which can be beneficial for
    /// autoscaling a single job.
    /// Bounds: [0.0, 1.0].
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleDownFactor"
    )]
    #[builder(default)]
    pub scale_down_factor: Option<f64>,
    /// Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
    /// For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
    /// recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
    /// means the autoscaler will scale down on any recommended change.
    /// Bounds: [0.0, 1.0]. Default: 0.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleDownMinWorkerFraction"
    )]
    #[builder(default)]
    pub scale_down_min_worker_fraction: Option<f64>,
    /// Fraction of average pending memory in the last cooldown period for which to
    /// add workers. A scale-up factor of 1.0 will result in scaling up so that there
    /// is no pending memory remaining after the update (more aggressive scaling).
    /// A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
    /// (less aggressive scaling).
    /// Bounds: [0.0, 1.0].
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleUpFactor"
    )]
    #[builder(default)]
    pub scale_up_factor: Option<f64>,
    /// Minimum scale-up threshold as a fraction of total cluster size before scaling
    /// occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
    /// must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
    /// 0 means the autoscaler will scale up on any recommended change.
    /// Bounds: [0.0, 1.0]. Default: 0.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleUpMinWorkerFraction"
    )]
    #[builder(default)]
    pub scale_up_min_worker_fraction: Option<f64>,
}

/// Describes how the autoscaler will operate for secondary workers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyForProviderSecondaryWorkerConfig {
    /// Maximum number of instances for this group. Note that by default, clusters will not use
    /// secondary workers. Required for secondary workers if the minimum secondary instances is set.
    /// Bounds: [minInstances, ). Defaults to 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxInstances"
    )]
    #[builder(default)]
    pub max_instances: Option<f64>,
    /// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minInstances"
    )]
    #[builder(default)]
    pub min_instances: Option<f64>,
    /// Weight for the instance group, which is used to determine the fraction of total workers
    /// in the cluster from this instance group. For example, if primary workers have weight 2,
    /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
    /// for each secondary worker.
    /// The cluster may not reach the specified balance if constrained by min/max bounds or other
    /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
    /// primary workers will be added. The cluster can also be out of balance when created.
    /// If weight is not set on any instance group, the cluster will default to equal weight for
    /// all groups: the cluster will attempt to maintain an equal number of workers in each group
    /// within the configured size bounds for each group. If weight is set for one group only,
    /// the cluster will default to zero weight on the unset group. For example if weight is set
    /// only on primary workers, the cluster will use primary workers only and no secondary workers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub weight: Option<f64>,
}

/// Describes how the autoscaler will operate for primary workers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyForProviderWorkerConfig {
    /// Maximum number of instances for this group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxInstances"
    )]
    #[builder(default)]
    pub max_instances: Option<f64>,
    /// Minimum number of instances for this group. Bounds: [2, maxInstances]. Defaults to 2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minInstances"
    )]
    #[builder(default)]
    pub min_instances: Option<f64>,
    /// Weight for the instance group, which is used to determine the fraction of total workers
    /// in the cluster from this instance group. For example, if primary workers have weight 2,
    /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
    /// for each secondary worker.
    /// The cluster may not reach the specified balance if constrained by min/max bounds or other
    /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
    /// primary workers will be added. The cluster can also be out of balance when created.
    /// If weight is not set on any instance group, the cluster will default to equal weight for
    /// all groups: the cluster will attempt to maintain an equal number of workers in each group
    /// within the configured size bounds for each group. If weight is set for one group only,
    /// the cluster will default to zero weight on the unset group. For example if weight is set
    /// only on primary workers, the cluster will use primary workers only and no secondary workers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub weight: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyInitProvider {
    /// Basic algorithm for autoscaling.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "basicAlgorithm"
    )]
    #[builder(default)]
    pub basic_algorithm: Option<AutoscalingPolicyInitProviderBasicAlgorithm>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Describes how the autoscaler will operate for secondary workers.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryWorkerConfig"
    )]
    #[builder(default)]
    pub secondary_worker_config: Option<AutoscalingPolicyInitProviderSecondaryWorkerConfig>,
    /// Describes how the autoscaler will operate for primary workers.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workerConfig"
    )]
    #[builder(default)]
    pub worker_config: Option<AutoscalingPolicyInitProviderWorkerConfig>,
}

/// Basic algorithm for autoscaling.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyInitProviderBasicAlgorithm {
    /// Duration between scaling events. A scaling period starts after the
    /// update operation from the previous event has completed.
    /// Bounds: [2m, 1d]. Default: 2m.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cooldownPeriod"
    )]
    #[builder(default)]
    pub cooldown_period: Option<String>,
    /// YARN autoscaling configuration.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yarnConfig"
    )]
    #[builder(default)]
    pub yarn_config: Option<AutoscalingPolicyInitProviderBasicAlgorithmYarnConfig>,
}

/// YARN autoscaling configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyInitProviderBasicAlgorithmYarnConfig {
    /// Timeout for YARN graceful decommissioning of Node Managers. Specifies the
    /// duration to wait for jobs to complete before forcefully removing workers
    /// (and potentially interrupting jobs). Only applicable to downscaling operations.
    /// Bounds: [0s, 1d].
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gracefulDecommissionTimeout"
    )]
    #[builder(default)]
    pub graceful_decommission_timeout: Option<String>,
    /// Fraction of average pending memory in the last cooldown period for which to
    /// remove workers. A scale-down factor of 1 will result in scaling down so that there
    /// is no available memory remaining after the update (more aggressive scaling).
    /// A scale-down factor of 0 disables removing workers, which can be beneficial for
    /// autoscaling a single job.
    /// Bounds: [0.0, 1.0].
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleDownFactor"
    )]
    #[builder(default)]
    pub scale_down_factor: Option<f64>,
    /// Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
    /// For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
    /// recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
    /// means the autoscaler will scale down on any recommended change.
    /// Bounds: [0.0, 1.0]. Default: 0.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleDownMinWorkerFraction"
    )]
    #[builder(default)]
    pub scale_down_min_worker_fraction: Option<f64>,
    /// Fraction of average pending memory in the last cooldown period for which to
    /// add workers. A scale-up factor of 1.0 will result in scaling up so that there
    /// is no pending memory remaining after the update (more aggressive scaling).
    /// A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
    /// (less aggressive scaling).
    /// Bounds: [0.0, 1.0].
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleUpFactor"
    )]
    #[builder(default)]
    pub scale_up_factor: Option<f64>,
    /// Minimum scale-up threshold as a fraction of total cluster size before scaling
    /// occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
    /// must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
    /// 0 means the autoscaler will scale up on any recommended change.
    /// Bounds: [0.0, 1.0]. Default: 0.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleUpMinWorkerFraction"
    )]
    #[builder(default)]
    pub scale_up_min_worker_fraction: Option<f64>,
}

/// Describes how the autoscaler will operate for secondary workers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyInitProviderSecondaryWorkerConfig {
    /// Maximum number of instances for this group. Note that by default, clusters will not use
    /// secondary workers. Required for secondary workers if the minimum secondary instances is set.
    /// Bounds: [minInstances, ). Defaults to 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxInstances"
    )]
    #[builder(default)]
    pub max_instances: Option<f64>,
    /// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minInstances"
    )]
    #[builder(default)]
    pub min_instances: Option<f64>,
    /// Weight for the instance group, which is used to determine the fraction of total workers
    /// in the cluster from this instance group. For example, if primary workers have weight 2,
    /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
    /// for each secondary worker.
    /// The cluster may not reach the specified balance if constrained by min/max bounds or other
    /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
    /// primary workers will be added. The cluster can also be out of balance when created.
    /// If weight is not set on any instance group, the cluster will default to equal weight for
    /// all groups: the cluster will attempt to maintain an equal number of workers in each group
    /// within the configured size bounds for each group. If weight is set for one group only,
    /// the cluster will default to zero weight on the unset group. For example if weight is set
    /// only on primary workers, the cluster will use primary workers only and no secondary workers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub weight: Option<f64>,
}

/// Describes how the autoscaler will operate for primary workers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyInitProviderWorkerConfig {
    /// Maximum number of instances for this group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxInstances"
    )]
    #[builder(default)]
    pub max_instances: Option<f64>,
    /// Minimum number of instances for this group. Bounds: [2, maxInstances]. Defaults to 2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minInstances"
    )]
    #[builder(default)]
    pub min_instances: Option<f64>,
    /// Weight for the instance group, which is used to determine the fraction of total workers
    /// in the cluster from this instance group. For example, if primary workers have weight 2,
    /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
    /// for each secondary worker.
    /// The cluster may not reach the specified balance if constrained by min/max bounds or other
    /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
    /// primary workers will be added. The cluster can also be out of balance when created.
    /// If weight is not set on any instance group, the cluster will default to equal weight for
    /// all groups: the cluster will attempt to maintain an equal number of workers in each group
    /// within the configured size bounds for each group. If weight is set for one group only,
    /// the cluster will default to zero weight on the unset group. For example if weight is set
    /// only on primary workers, the cluster will use primary workers only and no secondary workers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub weight: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AutoscalingPolicyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AutoscalingPolicyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AutoscalingPolicyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingPolicyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingPolicyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<AutoscalingPolicyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<AutoscalingPolicyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AutoscalingPolicyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AutoscalingPolicyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AutoscalingPolicyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingPolicyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingPolicyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AutoscalingPolicyStatus defines the observed state of AutoscalingPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<AutoscalingPolicyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyStatusAtProvider {
    /// Basic algorithm for autoscaling.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "basicAlgorithm"
    )]
    #[builder(default)]
    pub basic_algorithm: Option<AutoscalingPolicyStatusAtProviderBasicAlgorithm>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/autoscalingPolicies/{{policy_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The  location where the autoscaling policy should reside.
    /// The default value is global.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// The "resource name" of the autoscaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Describes how the autoscaler will operate for secondary workers.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryWorkerConfig"
    )]
    #[builder(default)]
    pub secondary_worker_config: Option<AutoscalingPolicyStatusAtProviderSecondaryWorkerConfig>,
    /// Describes how the autoscaler will operate for primary workers.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workerConfig"
    )]
    #[builder(default)]
    pub worker_config: Option<AutoscalingPolicyStatusAtProviderWorkerConfig>,
}

/// Basic algorithm for autoscaling.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyStatusAtProviderBasicAlgorithm {
    /// Duration between scaling events. A scaling period starts after the
    /// update operation from the previous event has completed.
    /// Bounds: [2m, 1d]. Default: 2m.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cooldownPeriod"
    )]
    #[builder(default)]
    pub cooldown_period: Option<String>,
    /// YARN autoscaling configuration.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yarnConfig"
    )]
    #[builder(default)]
    pub yarn_config: Option<AutoscalingPolicyStatusAtProviderBasicAlgorithmYarnConfig>,
}

/// YARN autoscaling configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyStatusAtProviderBasicAlgorithmYarnConfig {
    /// Timeout for YARN graceful decommissioning of Node Managers. Specifies the
    /// duration to wait for jobs to complete before forcefully removing workers
    /// (and potentially interrupting jobs). Only applicable to downscaling operations.
    /// Bounds: [0s, 1d].
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gracefulDecommissionTimeout"
    )]
    #[builder(default)]
    pub graceful_decommission_timeout: Option<String>,
    /// Fraction of average pending memory in the last cooldown period for which to
    /// remove workers. A scale-down factor of 1 will result in scaling down so that there
    /// is no available memory remaining after the update (more aggressive scaling).
    /// A scale-down factor of 0 disables removing workers, which can be beneficial for
    /// autoscaling a single job.
    /// Bounds: [0.0, 1.0].
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleDownFactor"
    )]
    #[builder(default)]
    pub scale_down_factor: Option<f64>,
    /// Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
    /// For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
    /// recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
    /// means the autoscaler will scale down on any recommended change.
    /// Bounds: [0.0, 1.0]. Default: 0.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleDownMinWorkerFraction"
    )]
    #[builder(default)]
    pub scale_down_min_worker_fraction: Option<f64>,
    /// Fraction of average pending memory in the last cooldown period for which to
    /// add workers. A scale-up factor of 1.0 will result in scaling up so that there
    /// is no pending memory remaining after the update (more aggressive scaling).
    /// A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
    /// (less aggressive scaling).
    /// Bounds: [0.0, 1.0].
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleUpFactor"
    )]
    #[builder(default)]
    pub scale_up_factor: Option<f64>,
    /// Minimum scale-up threshold as a fraction of total cluster size before scaling
    /// occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
    /// must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
    /// 0 means the autoscaler will scale up on any recommended change.
    /// Bounds: [0.0, 1.0]. Default: 0.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleUpMinWorkerFraction"
    )]
    #[builder(default)]
    pub scale_up_min_worker_fraction: Option<f64>,
}

/// Describes how the autoscaler will operate for secondary workers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyStatusAtProviderSecondaryWorkerConfig {
    /// Maximum number of instances for this group. Note that by default, clusters will not use
    /// secondary workers. Required for secondary workers if the minimum secondary instances is set.
    /// Bounds: [minInstances, ). Defaults to 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxInstances"
    )]
    #[builder(default)]
    pub max_instances: Option<f64>,
    /// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minInstances"
    )]
    #[builder(default)]
    pub min_instances: Option<f64>,
    /// Weight for the instance group, which is used to determine the fraction of total workers
    /// in the cluster from this instance group. For example, if primary workers have weight 2,
    /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
    /// for each secondary worker.
    /// The cluster may not reach the specified balance if constrained by min/max bounds or other
    /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
    /// primary workers will be added. The cluster can also be out of balance when created.
    /// If weight is not set on any instance group, the cluster will default to equal weight for
    /// all groups: the cluster will attempt to maintain an equal number of workers in each group
    /// within the configured size bounds for each group. If weight is set for one group only,
    /// the cluster will default to zero weight on the unset group. For example if weight is set
    /// only on primary workers, the cluster will use primary workers only and no secondary workers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub weight: Option<f64>,
}

/// Describes how the autoscaler will operate for primary workers.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AutoscalingPolicyStatusAtProviderWorkerConfig {
    /// Maximum number of instances for this group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxInstances"
    )]
    #[builder(default)]
    pub max_instances: Option<f64>,
    /// Minimum number of instances for this group. Bounds: [2, maxInstances]. Defaults to 2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minInstances"
    )]
    #[builder(default)]
    pub min_instances: Option<f64>,
    /// Weight for the instance group, which is used to determine the fraction of total workers
    /// in the cluster from this instance group. For example, if primary workers have weight 2,
    /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
    /// for each secondary worker.
    /// The cluster may not reach the specified balance if constrained by min/max bounds or other
    /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
    /// primary workers will be added. The cluster can also be out of balance when created.
    /// If weight is not set on any instance group, the cluster will default to equal weight for
    /// all groups: the cluster will attempt to maintain an equal number of workers in each group
    /// within the configured size bounds for each group. If weight is set for one group only,
    /// the cluster will default to zero weight on the unset group. For example if weight is set
    /// only on primary workers, the cluster will use primary workers only and no secondary workers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub weight: Option<f64>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ClusterSpec defines the desired state of Cluster
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "docdb.aws.upbound.io",
    version = "v1beta1",
    kind = "Cluster",
    plural = "clusters"
)]
#[kube(status = "ClusterStatus")]
pub struct ClusterSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<ClusterDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ClusterForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<ClusterInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<ClusterProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<ClusterPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ClusterWriteConnectionSecretToRef>,
}

/// ClusterSpec defines the desired state of Cluster
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProvider {
    /// A value that indicates whether major version upgrades are allowed. Constraints: You must allow major version upgrades when specifying a value for the EngineVersion parameter that is a different major version than the DB cluster's current version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowMajorVersionUpgrade"
    )]
    #[builder(default)]
    pub allow_major_version_upgrade: Option<bool>,
    /// Specifies whether any cluster modifications
    /// are applied immediately, or during the next maintenance window. Default is
    /// false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applyImmediately"
    )]
    #[builder(default)]
    pub apply_immediately: Option<bool>,
    /// If true, the password will be auto-generated and stored in the Secret referenced by the masterPasswordSecretRef field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoGeneratePassword"
    )]
    #[builder(default)]
    pub auto_generate_password: Option<bool>,
    /// A list of EC2 Availability Zones that
    /// instances in the DB cluster can be created in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZones"
    )]
    #[builder(default)]
    pub availability_zones: Option<Vec<String>>,
    /// The days to retain backups for. Default 1
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "backupRetentionPeriod"
    )]
    #[builder(default)]
    pub backup_retention_period: Option<f64>,
    /// A cluster parameter group to associate with the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbClusterParameterGroupName"
    )]
    #[builder(default)]
    pub db_cluster_parameter_group_name: Option<String>,
    /// Reference to a ClusterParameterGroup in docdb to populate dbClusterParameterGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbClusterParameterGroupNameRef"
    )]
    #[builder(default)]
    pub db_cluster_parameter_group_name_ref:
        Option<ClusterForProviderDbClusterParameterGroupNameRef>,
    /// Selector for a ClusterParameterGroup in docdb to populate dbClusterParameterGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbClusterParameterGroupNameSelector"
    )]
    #[builder(default)]
    pub db_cluster_parameter_group_name_selector:
        Option<ClusterForProviderDbClusterParameterGroupNameSelector>,
    /// A DB subnet group to associate with this DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupName"
    )]
    #[builder(default)]
    pub db_subnet_group_name: Option<String>,
    /// A boolean value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionProtection"
    )]
    #[builder(default)]
    pub deletion_protection: Option<bool>,
    /// List of log types to export to cloudwatch. If omitted, no logs will be exported.
    /// The following log types are supported: audit, profiler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enabledCloudwatchLogsExports"
    )]
    #[builder(default)]
    pub enabled_cloudwatch_logs_exports: Option<Vec<String>>,
    /// The name of the database engine to be used for this DB cluster. Defaults to docdb. Valid values: docdb.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub engine: Option<String>,
    /// The database engine version. Updating this argument results in an outage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersion"
    )]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// The name of your final DB snapshot
    /// when this DB cluster is deleted. If omitted, no final snapshot will be
    /// made.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "finalSnapshotIdentifier"
    )]
    #[builder(default)]
    pub final_snapshot_identifier: Option<String>,
    /// The global cluster identifier specified on aws_docdb_global_cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "globalClusterIdentifier"
    )]
    #[builder(default)]
    pub global_cluster_identifier: Option<String>,
    /// The ARN for the KMS encryption key. When specifying kms_key_id, storage_encrypted needs to be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default)]
    pub kms_key_id_ref: Option<ClusterForProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default)]
    pub kms_key_id_selector: Option<ClusterForProviderKmsKeyIdSelector>,
    /// Password for the master DB user. Note that this may
    /// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
    /// Password for the master DB user. If you set autoGeneratePassword to true, the Secret referenced here will be created or updated with generated password if it does not already contain one.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterPasswordSecretRef"
    )]
    #[builder(default)]
    pub master_password_secret_ref: Option<ClusterForProviderMasterPasswordSecretRef>,
    /// Username for the master DB user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUsername"
    )]
    #[builder(default)]
    pub master_username: Option<String>,
    /// The port on which the DB accepts connections
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
    /// Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredBackupWindow"
    )]
    #[builder(default)]
    pub preferred_backup_window: Option<String>,
    /// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredMaintenanceWindow"
    )]
    #[builder(default)]
    pub preferred_maintenance_window: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A configuration block for restoring a DB instance to an arbitrary point in time. Requires the identifier argument to be set with the name of the new DB instance to be created. See Restore To Point In Time below for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreToPointInTime"
    )]
    #[builder(default)]
    pub restore_to_point_in_time: Option<ClusterForProviderRestoreToPointInTime>,
    /// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from final_snapshot_identifier. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipFinalSnapshot"
    )]
    #[builder(default)]
    pub skip_final_snapshot: Option<bool>,
    /// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots should not be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotIdentifier"
    )]
    #[builder(default)]
    pub snapshot_identifier: Option<String>,
    /// Specifies whether the DB cluster is encrypted. The default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageEncrypted"
    )]
    #[builder(default)]
    pub storage_encrypted: Option<bool>,
    /// The storage type to associate with the DB cluster. Valid values: standard, iopt1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageType"
    )]
    #[builder(default)]
    pub storage_type: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIdRefs"
    )]
    #[builder(default)]
    pub vpc_security_group_id_refs: Option<Vec<ClusterForProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIdSelector"
    )]
    #[builder(default)]
    pub vpc_security_group_id_selector: Option<ClusterForProviderVpcSecurityGroupIdSelector>,
    /// List of VPC security groups to associate
    /// with the Cluster
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIds"
    )]
    #[builder(default)]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Reference to a ClusterParameterGroup in docdb to populate dbClusterParameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderDbClusterParameterGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterForProviderDbClusterParameterGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderDbClusterParameterGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterForProviderDbClusterParameterGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterForProviderDbClusterParameterGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderDbClusterParameterGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderDbClusterParameterGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ClusterParameterGroup in docdb to populate dbClusterParameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderDbClusterParameterGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterForProviderDbClusterParameterGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderDbClusterParameterGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterForProviderDbClusterParameterGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterForProviderDbClusterParameterGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderDbClusterParameterGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderDbClusterParameterGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterForProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterForProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterForProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterForProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterForProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterForProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Password for the master DB user. Note that this may
/// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
/// Password for the master DB user. If you set autoGeneratePassword to true, the Secret referenced here will be created or updated with generated password if it does not already contain one.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderMasterPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// A configuration block for restoring a DB instance to an arbitrary point in time. Requires the identifier argument to be set with the name of the new DB instance to be created. See Restore To Point In Time below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderRestoreToPointInTime {
    /// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with use_latest_restorable_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreToTime"
    )]
    #[builder(default)]
    pub restore_to_time: Option<String>,
    /// The type of restore to be performed. Valid values are full-copy, copy-on-write.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreType"
    )]
    #[builder(default)]
    pub restore_type: Option<String>,
    /// The identifier of the source DB cluster from which to restore. Must match the identifier of an existing DB cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceClusterIdentifier"
    )]
    #[builder(default)]
    pub source_cluster_identifier: Option<String>,
    /// A boolean value that indicates whether the DB cluster is restored from the latest backup time. Defaults to false. Cannot be specified with restore_to_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useLatestRestorableTime"
    )]
    #[builder(default)]
    pub use_latest_restorable_time: Option<bool>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterForProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterForProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterForProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterForProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterForProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterForProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterForProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProvider {
    /// A value that indicates whether major version upgrades are allowed. Constraints: You must allow major version upgrades when specifying a value for the EngineVersion parameter that is a different major version than the DB cluster's current version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowMajorVersionUpgrade"
    )]
    #[builder(default)]
    pub allow_major_version_upgrade: Option<bool>,
    /// Specifies whether any cluster modifications
    /// are applied immediately, or during the next maintenance window. Default is
    /// false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applyImmediately"
    )]
    #[builder(default)]
    pub apply_immediately: Option<bool>,
    /// A list of EC2 Availability Zones that
    /// instances in the DB cluster can be created in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZones"
    )]
    #[builder(default)]
    pub availability_zones: Option<Vec<String>>,
    /// The days to retain backups for. Default 1
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "backupRetentionPeriod"
    )]
    #[builder(default)]
    pub backup_retention_period: Option<f64>,
    /// A cluster parameter group to associate with the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbClusterParameterGroupName"
    )]
    #[builder(default)]
    pub db_cluster_parameter_group_name: Option<String>,
    /// Reference to a ClusterParameterGroup in docdb to populate dbClusterParameterGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbClusterParameterGroupNameRef"
    )]
    #[builder(default)]
    pub db_cluster_parameter_group_name_ref:
        Option<ClusterInitProviderDbClusterParameterGroupNameRef>,
    /// Selector for a ClusterParameterGroup in docdb to populate dbClusterParameterGroupName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbClusterParameterGroupNameSelector"
    )]
    #[builder(default)]
    pub db_cluster_parameter_group_name_selector:
        Option<ClusterInitProviderDbClusterParameterGroupNameSelector>,
    /// A DB subnet group to associate with this DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupName"
    )]
    #[builder(default)]
    pub db_subnet_group_name: Option<String>,
    /// A boolean value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionProtection"
    )]
    #[builder(default)]
    pub deletion_protection: Option<bool>,
    /// List of log types to export to cloudwatch. If omitted, no logs will be exported.
    /// The following log types are supported: audit, profiler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enabledCloudwatchLogsExports"
    )]
    #[builder(default)]
    pub enabled_cloudwatch_logs_exports: Option<Vec<String>>,
    /// The name of the database engine to be used for this DB cluster. Defaults to docdb. Valid values: docdb.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub engine: Option<String>,
    /// The database engine version. Updating this argument results in an outage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersion"
    )]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// The name of your final DB snapshot
    /// when this DB cluster is deleted. If omitted, no final snapshot will be
    /// made.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "finalSnapshotIdentifier"
    )]
    #[builder(default)]
    pub final_snapshot_identifier: Option<String>,
    /// The global cluster identifier specified on aws_docdb_global_cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "globalClusterIdentifier"
    )]
    #[builder(default)]
    pub global_cluster_identifier: Option<String>,
    /// The ARN for the KMS encryption key. When specifying kms_key_id, storage_encrypted needs to be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default)]
    pub kms_key_id_ref: Option<ClusterInitProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default)]
    pub kms_key_id_selector: Option<ClusterInitProviderKmsKeyIdSelector>,
    /// Password for the master DB user. Note that this may
    /// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
    /// Password for the master DB user. If you set autoGeneratePassword to true, the Secret referenced here will be created or updated with generated password if it does not already contain one.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterPasswordSecretRef"
    )]
    #[builder(default)]
    pub master_password_secret_ref: Option<ClusterInitProviderMasterPasswordSecretRef>,
    /// Username for the master DB user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUsername"
    )]
    #[builder(default)]
    pub master_username: Option<String>,
    /// The port on which the DB accepts connections
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
    /// Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredBackupWindow"
    )]
    #[builder(default)]
    pub preferred_backup_window: Option<String>,
    /// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredMaintenanceWindow"
    )]
    #[builder(default)]
    pub preferred_maintenance_window: Option<String>,
    /// A configuration block for restoring a DB instance to an arbitrary point in time. Requires the identifier argument to be set with the name of the new DB instance to be created. See Restore To Point In Time below for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreToPointInTime"
    )]
    #[builder(default)]
    pub restore_to_point_in_time: Option<ClusterInitProviderRestoreToPointInTime>,
    /// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from final_snapshot_identifier. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipFinalSnapshot"
    )]
    #[builder(default)]
    pub skip_final_snapshot: Option<bool>,
    /// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots should not be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotIdentifier"
    )]
    #[builder(default)]
    pub snapshot_identifier: Option<String>,
    /// Specifies whether the DB cluster is encrypted. The default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageEncrypted"
    )]
    #[builder(default)]
    pub storage_encrypted: Option<bool>,
    /// The storage type to associate with the DB cluster. Valid values: standard, iopt1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageType"
    )]
    #[builder(default)]
    pub storage_type: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIdRefs"
    )]
    #[builder(default)]
    pub vpc_security_group_id_refs: Option<Vec<ClusterInitProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIdSelector"
    )]
    #[builder(default)]
    pub vpc_security_group_id_selector: Option<ClusterInitProviderVpcSecurityGroupIdSelector>,
    /// List of VPC security groups to associate
    /// with the Cluster
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIds"
    )]
    #[builder(default)]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Reference to a ClusterParameterGroup in docdb to populate dbClusterParameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderDbClusterParameterGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInitProviderDbClusterParameterGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderDbClusterParameterGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInitProviderDbClusterParameterGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInitProviderDbClusterParameterGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderDbClusterParameterGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderDbClusterParameterGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ClusterParameterGroup in docdb to populate dbClusterParameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderDbClusterParameterGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInitProviderDbClusterParameterGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderDbClusterParameterGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInitProviderDbClusterParameterGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInitProviderDbClusterParameterGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderDbClusterParameterGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderDbClusterParameterGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInitProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInitProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInitProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInitProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInitProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInitProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Password for the master DB user. Note that this may
/// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
/// Password for the master DB user. If you set autoGeneratePassword to true, the Secret referenced here will be created or updated with generated password if it does not already contain one.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderMasterPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// A configuration block for restoring a DB instance to an arbitrary point in time. Requires the identifier argument to be set with the name of the new DB instance to be created. See Restore To Point In Time below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderRestoreToPointInTime {
    /// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with use_latest_restorable_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreToTime"
    )]
    #[builder(default)]
    pub restore_to_time: Option<String>,
    /// The type of restore to be performed. Valid values are full-copy, copy-on-write.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreType"
    )]
    #[builder(default)]
    pub restore_type: Option<String>,
    /// The identifier of the source DB cluster from which to restore. Must match the identifier of an existing DB cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceClusterIdentifier"
    )]
    #[builder(default)]
    pub source_cluster_identifier: Option<String>,
    /// A boolean value that indicates whether the DB cluster is restored from the latest backup time. Defaults to false. Cannot be specified with restore_to_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useLatestRestorableTime"
    )]
    #[builder(default)]
    pub use_latest_restorable_time: Option<bool>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInitProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInitProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInitProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterInitProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterInitProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterInitProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterInitProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ClusterPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ClusterPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClusterPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ClusterStatus defines the observed state of Cluster.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<ClusterStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProvider {
    /// A value that indicates whether major version upgrades are allowed. Constraints: You must allow major version upgrades when specifying a value for the EngineVersion parameter that is a different major version than the DB cluster's current version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowMajorVersionUpgrade"
    )]
    #[builder(default)]
    pub allow_major_version_upgrade: Option<bool>,
    /// Specifies whether any cluster modifications
    /// are applied immediately, or during the next maintenance window. Default is
    /// false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applyImmediately"
    )]
    #[builder(default)]
    pub apply_immediately: Option<bool>,
    /// Amazon Resource Name (ARN) of cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// A list of EC2 Availability Zones that
    /// instances in the DB cluster can be created in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZones"
    )]
    #[builder(default)]
    pub availability_zones: Option<Vec<String>>,
    /// The days to retain backups for. Default 1
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "backupRetentionPeriod"
    )]
    #[builder(default)]
    pub backup_retention_period: Option<f64>,
    /// – List of DocumentDB Instances that are a part of this cluster
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterMembers"
    )]
    #[builder(default)]
    pub cluster_members: Option<Vec<String>>,
    /// The DocumentDB Cluster Resource ID
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterResourceId"
    )]
    #[builder(default)]
    pub cluster_resource_id: Option<String>,
    /// A cluster parameter group to associate with the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbClusterParameterGroupName"
    )]
    #[builder(default)]
    pub db_cluster_parameter_group_name: Option<String>,
    /// A DB subnet group to associate with this DB instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dbSubnetGroupName"
    )]
    #[builder(default)]
    pub db_subnet_group_name: Option<String>,
    /// A boolean value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionProtection"
    )]
    #[builder(default)]
    pub deletion_protection: Option<bool>,
    /// List of log types to export to cloudwatch. If omitted, no logs will be exported.
    /// The following log types are supported: audit, profiler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enabledCloudwatchLogsExports"
    )]
    #[builder(default)]
    pub enabled_cloudwatch_logs_exports: Option<Vec<String>>,
    /// The DNS address of the DocumentDB instance
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub endpoint: Option<String>,
    /// The name of the database engine to be used for this DB cluster. Defaults to docdb. Valid values: docdb.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub engine: Option<String>,
    /// The database engine version. Updating this argument results in an outage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineVersion"
    )]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// The name of your final DB snapshot
    /// when this DB cluster is deleted. If omitted, no final snapshot will be
    /// made.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "finalSnapshotIdentifier"
    )]
    #[builder(default)]
    pub final_snapshot_identifier: Option<String>,
    /// The global cluster identifier specified on aws_docdb_global_cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "globalClusterIdentifier"
    )]
    #[builder(default)]
    pub global_cluster_identifier: Option<String>,
    /// The Route53 Hosted Zone ID of the endpoint
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostedZoneId"
    )]
    #[builder(default)]
    pub hosted_zone_id: Option<String>,
    /// The DocumentDB Cluster Identifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The ARN for the KMS encryption key. When specifying kms_key_id, storage_encrypted needs to be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Username for the master DB user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "masterUsername"
    )]
    #[builder(default)]
    pub master_username: Option<String>,
    /// The port on which the DB accepts connections
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
    /// Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredBackupWindow"
    )]
    #[builder(default)]
    pub preferred_backup_window: Option<String>,
    /// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredMaintenanceWindow"
    )]
    #[builder(default)]
    pub preferred_maintenance_window: Option<String>,
    /// A read-only endpoint for the DocumentDB cluster, automatically load-balanced across replicas
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readerEndpoint"
    )]
    #[builder(default)]
    pub reader_endpoint: Option<String>,
    /// A configuration block for restoring a DB instance to an arbitrary point in time. Requires the identifier argument to be set with the name of the new DB instance to be created. See Restore To Point In Time below for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreToPointInTime"
    )]
    #[builder(default)]
    pub restore_to_point_in_time: Option<ClusterStatusAtProviderRestoreToPointInTime>,
    /// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from final_snapshot_identifier. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipFinalSnapshot"
    )]
    #[builder(default)]
    pub skip_final_snapshot: Option<bool>,
    /// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots should not be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotIdentifier"
    )]
    #[builder(default)]
    pub snapshot_identifier: Option<String>,
    /// Specifies whether the DB cluster is encrypted. The default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageEncrypted"
    )]
    #[builder(default)]
    pub storage_encrypted: Option<bool>,
    /// The storage type to associate with the DB cluster. Valid values: standard, iopt1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageType"
    )]
    #[builder(default)]
    pub storage_type: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// List of VPC security groups to associate
    /// with the Cluster
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIds"
    )]
    #[builder(default)]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// A configuration block for restoring a DB instance to an arbitrary point in time. Requires the identifier argument to be set with the name of the new DB instance to be created. See Restore To Point In Time below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClusterStatusAtProviderRestoreToPointInTime {
    /// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with use_latest_restorable_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreToTime"
    )]
    #[builder(default)]
    pub restore_to_time: Option<String>,
    /// The type of restore to be performed. Valid values are full-copy, copy-on-write.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreType"
    )]
    #[builder(default)]
    pub restore_type: Option<String>,
    /// The identifier of the source DB cluster from which to restore. Must match the identifier of an existing DB cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceClusterIdentifier"
    )]
    #[builder(default)]
    pub source_cluster_identifier: Option<String>,
    /// A boolean value that indicates whether the DB cluster is restored from the latest backup time. Defaults to false. Cannot be specified with restore_to_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useLatestRestorableTime"
    )]
    #[builder(default)]
    pub use_latest_restorable_time: Option<bool>,
}

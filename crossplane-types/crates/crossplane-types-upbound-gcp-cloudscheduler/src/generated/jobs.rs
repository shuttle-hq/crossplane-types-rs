// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// JobSpec defines the desired state of Job
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "cloudscheduler.gcp.upbound.io", version = "v1beta2", kind = "Job", plural = "jobs")]
#[kube(status = "JobStatus")]
pub struct JobSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<JobDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: JobForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<JobInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<JobProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<JobPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<JobWriteConnectionSecretToRef>,
}

/// JobSpec defines the desired state of Job
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProvider {
    /// App Engine HTTP target.
    /// If the job providers a App Engine HTTP target the cron will
    /// send a request to the service instance
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineHttpTarget")]
    #[builder(default)]
    pub app_engine_http_target: Option<JobForProviderAppEngineHttpTarget>,
    /// The deadline for job attempts. If the request handler does not respond by this deadline then the request is
    /// cancelled and the attempt is marked as a DEADLINE_EXCEEDED failure. The failed attempt can be viewed in
    /// execution logs. Cloud Scheduler will retry the job according to the RetryConfig.
    /// The allowed duration for this deadline is:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attemptDeadline")]
    #[builder(default)]
    pub attempt_deadline: Option<String>,
    /// A human-readable description for the job.
    /// This string must not contain more than 500 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// HTTP target.
    /// If the job providers a http_target the cron will
    /// send a request to the targeted url
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTarget")]
    #[builder(default)]
    pub http_target: Option<JobForProviderHttpTarget>,
    /// Sets the job to a paused state. Jobs default to being enabled when this property is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub paused: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Pub/Sub target
    /// If the job providers a Pub/Sub target the cron will publish
    /// a message to the provided topic
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pubsubTarget")]
    #[builder(default)]
    pub pubsub_target: Option<JobForProviderPubsubTarget>,
    /// Region where the scheduler job resides.
    pub region: String,
    /// By default, if a job does not complete successfully,
    /// meaning that an acknowledgement is not received from the handler,
    /// then it will be retried with exponential backoff according to the settings
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryConfig")]
    #[builder(default)]
    pub retry_config: Option<JobForProviderRetryConfig>,
    /// Describes the schedule on which the job will be executed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schedule: Option<String>,
    /// Specifies the time zone to be used in interpreting schedule.
    /// The value of this field must be a time zone name from the tz database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    #[builder(default)]
    pub time_zone: Option<String>,
}

/// App Engine HTTP target.
/// If the job providers a App Engine HTTP target the cron will
/// send a request to the service instance
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderAppEngineHttpTarget {
    /// App Engine Routing setting for the job.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineRouting")]
    #[builder(default)]
    pub app_engine_routing: Option<JobForProviderAppEngineHttpTargetAppEngineRouting>,
    /// HTTP request body.
    /// A request body is allowed only if the HTTP method is POST or PUT.
    /// It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
    /// A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub body: Option<String>,
    /// HTTP request headers.
    /// This map contains the header field names and values.
    /// Headers can be set when the job is created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub headers: Option<HashMap<String, String>>,
    /// Which HTTP method to use for the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpMethod")]
    #[builder(default)]
    pub http_method: Option<String>,
    /// The relative URI.
    /// The relative URL must begin with "/" and must be a valid HTTP relative URL.
    /// It can contain a path, query string arguments, and # fragments.
    /// If the relative URL is empty, then the root path "/" will be used.
    /// No spaces are allowed, and the maximum length allowed is 2083 characters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relativeUri")]
    #[builder(default)]
    pub relative_uri: Option<String>,
}

/// App Engine Routing setting for the job.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderAppEngineHttpTargetAppEngineRouting {
    /// App instance.
    /// By default, the job is sent to an instance which is available when the job is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub instance: Option<String>,
    /// App service.
    /// By default, the job is sent to the service which is the default service when the job is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// App version.
    /// By default, the job is sent to the version which is the default version when the job is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// HTTP target.
/// If the job providers a http_target the cron will
/// send a request to the targeted url
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderHttpTarget {
    /// HTTP request body.
    /// A request body is allowed only if the HTTP method is POST, PUT, or PATCH.
    /// It is an error to set body on a job with an incompatible HttpMethod.
    /// A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub body: Option<String>,
    /// This map contains the header field names and values.
    /// Repeated headers are not supported, but a header value can contain commas.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub headers: Option<HashMap<String, String>>,
    /// Which HTTP method to use for the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpMethod")]
    #[builder(default)]
    pub http_method: Option<String>,
    /// Contains information needed for generating an OAuth token.
    /// This type of authorization should be used when sending requests to a GCP endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthToken")]
    #[builder(default)]
    pub oauth_token: Option<JobForProviderHttpTargetOauthToken>,
    /// Contains information needed for generating an OpenID Connect token.
    /// This type of authorization should be used when sending requests to third party endpoints or Cloud Run.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oidcToken")]
    #[builder(default)]
    pub oidc_token: Option<JobForProviderHttpTargetOidcToken>,
    /// The full URI path that the request will be sent to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Contains information needed for generating an OAuth token.
/// This type of authorization should be used when sending requests to a GCP endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderHttpTargetOauthToken {
    /// OAuth scope to be used for generating OAuth access token. If not specified,
    /// "https://www.googleapis.com/auth/cloud-platform" will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub scope: Option<String>,
    /// Service account email to be used for generating OAuth token.
    /// The service account must be within the same project as the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmail")]
    #[builder(default)]
    pub service_account_email: Option<String>,
}

/// Contains information needed for generating an OpenID Connect token.
/// This type of authorization should be used when sending requests to third party endpoints or Cloud Run.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderHttpTargetOidcToken {
    /// Audience to be used when generating OIDC token. If not specified,
    /// the URI specified in target will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub audience: Option<String>,
    /// Service account email to be used for generating OAuth token.
    /// The service account must be within the same project as the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmail")]
    #[builder(default)]
    pub service_account_email: Option<String>,
}

/// Pub/Sub target
/// If the job providers a Pub/Sub target the cron will publish
/// a message to the provided topic
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderPubsubTarget {
    /// Attributes for PubsubMessage.
    /// Pubsub message must contain either non-empty data, or at least one attribute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub attributes: Option<HashMap<String, String>>,
    /// The message payload for PubsubMessage.
    /// Pubsub message must contain either non-empty data, or at least one attribute.
    /// A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub data: Option<String>,
    /// The full resource name for the Cloud Pub/Sub topic to which
    /// messages will be published when a job is delivered. ~>NOTE:
    /// The topic name must be in the same format as required by PubSub's
    /// PublishRequest.name, e.g. projects/my-project/topics/my-topic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicName")]
    #[builder(default)]
    pub topic_name: Option<String>,
    /// Reference to a Topic in pubsub to populate topicName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicNameRef")]
    #[builder(default)]
    pub topic_name_ref: Option<JobForProviderPubsubTargetTopicNameRef>,
    /// Selector for a Topic in pubsub to populate topicName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicNameSelector")]
    #[builder(default)]
    pub topic_name_selector: Option<JobForProviderPubsubTargetTopicNameSelector>,
}

/// Reference to a Topic in pubsub to populate topicName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderPubsubTargetTopicNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobForProviderPubsubTargetTopicNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderPubsubTargetTopicNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobForProviderPubsubTargetTopicNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobForProviderPubsubTargetTopicNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobForProviderPubsubTargetTopicNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobForProviderPubsubTargetTopicNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Topic in pubsub to populate topicName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderPubsubTargetTopicNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobForProviderPubsubTargetTopicNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderPubsubTargetTopicNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobForProviderPubsubTargetTopicNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobForProviderPubsubTargetTopicNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobForProviderPubsubTargetTopicNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobForProviderPubsubTargetTopicNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// By default, if a job does not complete successfully,
/// meaning that an acknowledgement is not received from the handler,
/// then it will be retried with exponential backoff according to the settings
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderRetryConfig {
    /// The maximum amount of time to wait before retrying a job after it fails.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBackoffDuration")]
    #[builder(default)]
    pub max_backoff_duration: Option<String>,
    /// The time between retries will double maxDoublings times.
    /// A job's retry interval starts at minBackoffDuration,
    /// then doubles maxDoublings times, then increases linearly,
    /// and finally retries retries at intervals of maxBackoffDuration up to retryCount times.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDoublings")]
    #[builder(default)]
    pub max_doublings: Option<f64>,
    /// The time limit for retrying a failed job, measured from time when an execution was first attempted.
    /// If specified with retryCount, the job will be retried until both limits are reached.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetryDuration")]
    #[builder(default)]
    pub max_retry_duration: Option<String>,
    /// The minimum amount of time to wait before retrying a job after it fails.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minBackoffDuration")]
    #[builder(default)]
    pub min_backoff_duration: Option<String>,
    /// The number of attempts that the system will make to run a
    /// job using the exponential backoff procedure described by maxDoublings.
    /// Values greater than 5 and negative values are not allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryCount")]
    #[builder(default)]
    pub retry_count: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProvider {
    /// App Engine HTTP target.
    /// If the job providers a App Engine HTTP target the cron will
    /// send a request to the service instance
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineHttpTarget")]
    #[builder(default)]
    pub app_engine_http_target: Option<JobInitProviderAppEngineHttpTarget>,
    /// The deadline for job attempts. If the request handler does not respond by this deadline then the request is
    /// cancelled and the attempt is marked as a DEADLINE_EXCEEDED failure. The failed attempt can be viewed in
    /// execution logs. Cloud Scheduler will retry the job according to the RetryConfig.
    /// The allowed duration for this deadline is:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attemptDeadline")]
    #[builder(default)]
    pub attempt_deadline: Option<String>,
    /// A human-readable description for the job.
    /// This string must not contain more than 500 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// HTTP target.
    /// If the job providers a http_target the cron will
    /// send a request to the targeted url
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTarget")]
    #[builder(default)]
    pub http_target: Option<JobInitProviderHttpTarget>,
    /// Sets the job to a paused state. Jobs default to being enabled when this property is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub paused: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Pub/Sub target
    /// If the job providers a Pub/Sub target the cron will publish
    /// a message to the provided topic
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pubsubTarget")]
    #[builder(default)]
    pub pubsub_target: Option<JobInitProviderPubsubTarget>,
    /// By default, if a job does not complete successfully,
    /// meaning that an acknowledgement is not received from the handler,
    /// then it will be retried with exponential backoff according to the settings
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryConfig")]
    #[builder(default)]
    pub retry_config: Option<JobInitProviderRetryConfig>,
    /// Describes the schedule on which the job will be executed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schedule: Option<String>,
    /// Specifies the time zone to be used in interpreting schedule.
    /// The value of this field must be a time zone name from the tz database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    #[builder(default)]
    pub time_zone: Option<String>,
}

/// App Engine HTTP target.
/// If the job providers a App Engine HTTP target the cron will
/// send a request to the service instance
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderAppEngineHttpTarget {
    /// App Engine Routing setting for the job.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineRouting")]
    #[builder(default)]
    pub app_engine_routing: Option<JobInitProviderAppEngineHttpTargetAppEngineRouting>,
    /// HTTP request body.
    /// A request body is allowed only if the HTTP method is POST or PUT.
    /// It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
    /// A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub body: Option<String>,
    /// HTTP request headers.
    /// This map contains the header field names and values.
    /// Headers can be set when the job is created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub headers: Option<HashMap<String, String>>,
    /// Which HTTP method to use for the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpMethod")]
    #[builder(default)]
    pub http_method: Option<String>,
    /// The relative URI.
    /// The relative URL must begin with "/" and must be a valid HTTP relative URL.
    /// It can contain a path, query string arguments, and # fragments.
    /// If the relative URL is empty, then the root path "/" will be used.
    /// No spaces are allowed, and the maximum length allowed is 2083 characters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relativeUri")]
    #[builder(default)]
    pub relative_uri: Option<String>,
}

/// App Engine Routing setting for the job.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderAppEngineHttpTargetAppEngineRouting {
    /// App instance.
    /// By default, the job is sent to an instance which is available when the job is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub instance: Option<String>,
    /// App service.
    /// By default, the job is sent to the service which is the default service when the job is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// App version.
    /// By default, the job is sent to the version which is the default version when the job is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// HTTP target.
/// If the job providers a http_target the cron will
/// send a request to the targeted url
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderHttpTarget {
    /// HTTP request body.
    /// A request body is allowed only if the HTTP method is POST, PUT, or PATCH.
    /// It is an error to set body on a job with an incompatible HttpMethod.
    /// A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub body: Option<String>,
    /// This map contains the header field names and values.
    /// Repeated headers are not supported, but a header value can contain commas.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub headers: Option<HashMap<String, String>>,
    /// Which HTTP method to use for the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpMethod")]
    #[builder(default)]
    pub http_method: Option<String>,
    /// Contains information needed for generating an OAuth token.
    /// This type of authorization should be used when sending requests to a GCP endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthToken")]
    #[builder(default)]
    pub oauth_token: Option<JobInitProviderHttpTargetOauthToken>,
    /// Contains information needed for generating an OpenID Connect token.
    /// This type of authorization should be used when sending requests to third party endpoints or Cloud Run.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oidcToken")]
    #[builder(default)]
    pub oidc_token: Option<JobInitProviderHttpTargetOidcToken>,
    /// The full URI path that the request will be sent to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Contains information needed for generating an OAuth token.
/// This type of authorization should be used when sending requests to a GCP endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderHttpTargetOauthToken {
    /// OAuth scope to be used for generating OAuth access token. If not specified,
    /// "https://www.googleapis.com/auth/cloud-platform" will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub scope: Option<String>,
    /// Service account email to be used for generating OAuth token.
    /// The service account must be within the same project as the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmail")]
    #[builder(default)]
    pub service_account_email: Option<String>,
}

/// Contains information needed for generating an OpenID Connect token.
/// This type of authorization should be used when sending requests to third party endpoints or Cloud Run.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderHttpTargetOidcToken {
    /// Audience to be used when generating OIDC token. If not specified,
    /// the URI specified in target will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub audience: Option<String>,
    /// Service account email to be used for generating OAuth token.
    /// The service account must be within the same project as the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmail")]
    #[builder(default)]
    pub service_account_email: Option<String>,
}

/// Pub/Sub target
/// If the job providers a Pub/Sub target the cron will publish
/// a message to the provided topic
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderPubsubTarget {
    /// Attributes for PubsubMessage.
    /// Pubsub message must contain either non-empty data, or at least one attribute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub attributes: Option<HashMap<String, String>>,
    /// The message payload for PubsubMessage.
    /// Pubsub message must contain either non-empty data, or at least one attribute.
    /// A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub data: Option<String>,
    /// The full resource name for the Cloud Pub/Sub topic to which
    /// messages will be published when a job is delivered. ~>NOTE:
    /// The topic name must be in the same format as required by PubSub's
    /// PublishRequest.name, e.g. projects/my-project/topics/my-topic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicName")]
    #[builder(default)]
    pub topic_name: Option<String>,
    /// Reference to a Topic in pubsub to populate topicName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicNameRef")]
    #[builder(default)]
    pub topic_name_ref: Option<JobInitProviderPubsubTargetTopicNameRef>,
    /// Selector for a Topic in pubsub to populate topicName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicNameSelector")]
    #[builder(default)]
    pub topic_name_selector: Option<JobInitProviderPubsubTargetTopicNameSelector>,
}

/// Reference to a Topic in pubsub to populate topicName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderPubsubTargetTopicNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobInitProviderPubsubTargetTopicNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderPubsubTargetTopicNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobInitProviderPubsubTargetTopicNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobInitProviderPubsubTargetTopicNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobInitProviderPubsubTargetTopicNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobInitProviderPubsubTargetTopicNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Topic in pubsub to populate topicName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderPubsubTargetTopicNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobInitProviderPubsubTargetTopicNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderPubsubTargetTopicNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobInitProviderPubsubTargetTopicNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobInitProviderPubsubTargetTopicNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobInitProviderPubsubTargetTopicNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobInitProviderPubsubTargetTopicNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// By default, if a job does not complete successfully,
/// meaning that an acknowledgement is not received from the handler,
/// then it will be retried with exponential backoff according to the settings
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderRetryConfig {
    /// The maximum amount of time to wait before retrying a job after it fails.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBackoffDuration")]
    #[builder(default)]
    pub max_backoff_duration: Option<String>,
    /// The time between retries will double maxDoublings times.
    /// A job's retry interval starts at minBackoffDuration,
    /// then doubles maxDoublings times, then increases linearly,
    /// and finally retries retries at intervals of maxBackoffDuration up to retryCount times.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDoublings")]
    #[builder(default)]
    pub max_doublings: Option<f64>,
    /// The time limit for retrying a failed job, measured from time when an execution was first attempted.
    /// If specified with retryCount, the job will be retried until both limits are reached.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetryDuration")]
    #[builder(default)]
    pub max_retry_duration: Option<String>,
    /// The minimum amount of time to wait before retrying a job after it fails.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minBackoffDuration")]
    #[builder(default)]
    pub min_backoff_duration: Option<String>,
    /// The number of attempts that the system will make to run a
    /// job using the exponential backoff procedure described by maxDoublings.
    /// Values greater than 5 and negative values are not allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryCount")]
    #[builder(default)]
    pub retry_count: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<JobPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<JobPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// JobStatus defines the observed state of Job.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<JobStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProvider {
    /// App Engine HTTP target.
    /// If the job providers a App Engine HTTP target the cron will
    /// send a request to the service instance
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineHttpTarget")]
    #[builder(default)]
    pub app_engine_http_target: Option<JobStatusAtProviderAppEngineHttpTarget>,
    /// The deadline for job attempts. If the request handler does not respond by this deadline then the request is
    /// cancelled and the attempt is marked as a DEADLINE_EXCEEDED failure. The failed attempt can be viewed in
    /// execution logs. Cloud Scheduler will retry the job according to the RetryConfig.
    /// The allowed duration for this deadline is:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attemptDeadline")]
    #[builder(default)]
    pub attempt_deadline: Option<String>,
    /// A human-readable description for the job.
    /// This string must not contain more than 500 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// HTTP target.
    /// If the job providers a http_target the cron will
    /// send a request to the targeted url
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTarget")]
    #[builder(default)]
    pub http_target: Option<JobStatusAtProviderHttpTarget>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{region}}/jobs/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Sets the job to a paused state. Jobs default to being enabled when this property is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub paused: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Pub/Sub target
    /// If the job providers a Pub/Sub target the cron will publish
    /// a message to the provided topic
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pubsubTarget")]
    #[builder(default)]
    pub pubsub_target: Option<JobStatusAtProviderPubsubTarget>,
    /// Region where the scheduler job resides.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// By default, if a job does not complete successfully,
    /// meaning that an acknowledgement is not received from the handler,
    /// then it will be retried with exponential backoff according to the settings
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryConfig")]
    #[builder(default)]
    pub retry_config: Option<JobStatusAtProviderRetryConfig>,
    /// Describes the schedule on which the job will be executed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schedule: Option<String>,
    /// State of the job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Specifies the time zone to be used in interpreting schedule.
    /// The value of this field must be a time zone name from the tz database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    #[builder(default)]
    pub time_zone: Option<String>,
}

/// App Engine HTTP target.
/// If the job providers a App Engine HTTP target the cron will
/// send a request to the service instance
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderAppEngineHttpTarget {
    /// App Engine Routing setting for the job.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineRouting")]
    #[builder(default)]
    pub app_engine_routing: Option<JobStatusAtProviderAppEngineHttpTargetAppEngineRouting>,
    /// HTTP request body.
    /// A request body is allowed only if the HTTP method is POST or PUT.
    /// It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
    /// A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub body: Option<String>,
    /// HTTP request headers.
    /// This map contains the header field names and values.
    /// Headers can be set when the job is created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub headers: Option<HashMap<String, String>>,
    /// Which HTTP method to use for the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpMethod")]
    #[builder(default)]
    pub http_method: Option<String>,
    /// The relative URI.
    /// The relative URL must begin with "/" and must be a valid HTTP relative URL.
    /// It can contain a path, query string arguments, and # fragments.
    /// If the relative URL is empty, then the root path "/" will be used.
    /// No spaces are allowed, and the maximum length allowed is 2083 characters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relativeUri")]
    #[builder(default)]
    pub relative_uri: Option<String>,
}

/// App Engine Routing setting for the job.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderAppEngineHttpTargetAppEngineRouting {
    /// App instance.
    /// By default, the job is sent to an instance which is available when the job is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub instance: Option<String>,
    /// App service.
    /// By default, the job is sent to the service which is the default service when the job is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// App version.
    /// By default, the job is sent to the version which is the default version when the job is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// HTTP target.
/// If the job providers a http_target the cron will
/// send a request to the targeted url
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderHttpTarget {
    /// HTTP request body.
    /// A request body is allowed only if the HTTP method is POST, PUT, or PATCH.
    /// It is an error to set body on a job with an incompatible HttpMethod.
    /// A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub body: Option<String>,
    /// This map contains the header field names and values.
    /// Repeated headers are not supported, but a header value can contain commas.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub headers: Option<HashMap<String, String>>,
    /// Which HTTP method to use for the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpMethod")]
    #[builder(default)]
    pub http_method: Option<String>,
    /// Contains information needed for generating an OAuth token.
    /// This type of authorization should be used when sending requests to a GCP endpoint.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthToken")]
    #[builder(default)]
    pub oauth_token: Option<JobStatusAtProviderHttpTargetOauthToken>,
    /// Contains information needed for generating an OpenID Connect token.
    /// This type of authorization should be used when sending requests to third party endpoints or Cloud Run.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oidcToken")]
    #[builder(default)]
    pub oidc_token: Option<JobStatusAtProviderHttpTargetOidcToken>,
    /// The full URI path that the request will be sent to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Contains information needed for generating an OAuth token.
/// This type of authorization should be used when sending requests to a GCP endpoint.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderHttpTargetOauthToken {
    /// OAuth scope to be used for generating OAuth access token. If not specified,
    /// "https://www.googleapis.com/auth/cloud-platform" will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub scope: Option<String>,
    /// Service account email to be used for generating OAuth token.
    /// The service account must be within the same project as the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmail")]
    #[builder(default)]
    pub service_account_email: Option<String>,
}

/// Contains information needed for generating an OpenID Connect token.
/// This type of authorization should be used when sending requests to third party endpoints or Cloud Run.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderHttpTargetOidcToken {
    /// Audience to be used when generating OIDC token. If not specified,
    /// the URI specified in target will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub audience: Option<String>,
    /// Service account email to be used for generating OAuth token.
    /// The service account must be within the same project as the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmail")]
    #[builder(default)]
    pub service_account_email: Option<String>,
}

/// Pub/Sub target
/// If the job providers a Pub/Sub target the cron will publish
/// a message to the provided topic
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderPubsubTarget {
    /// Attributes for PubsubMessage.
    /// Pubsub message must contain either non-empty data, or at least one attribute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub attributes: Option<HashMap<String, String>>,
    /// The message payload for PubsubMessage.
    /// Pubsub message must contain either non-empty data, or at least one attribute.
    /// A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub data: Option<String>,
    /// The full resource name for the Cloud Pub/Sub topic to which
    /// messages will be published when a job is delivered. ~>NOTE:
    /// The topic name must be in the same format as required by PubSub's
    /// PublishRequest.name, e.g. projects/my-project/topics/my-topic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicName")]
    #[builder(default)]
    pub topic_name: Option<String>,
}

/// By default, if a job does not complete successfully,
/// meaning that an acknowledgement is not received from the handler,
/// then it will be retried with exponential backoff according to the settings
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderRetryConfig {
    /// The maximum amount of time to wait before retrying a job after it fails.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBackoffDuration")]
    #[builder(default)]
    pub max_backoff_duration: Option<String>,
    /// The time between retries will double maxDoublings times.
    /// A job's retry interval starts at minBackoffDuration,
    /// then doubles maxDoublings times, then increases linearly,
    /// and finally retries retries at intervals of maxBackoffDuration up to retryCount times.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDoublings")]
    #[builder(default)]
    pub max_doublings: Option<f64>,
    /// The time limit for retrying a failed job, measured from time when an execution was first attempted.
    /// If specified with retryCount, the job will be retried until both limits are reached.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetryDuration")]
    #[builder(default)]
    pub max_retry_duration: Option<String>,
    /// The minimum amount of time to wait before retrying a job after it fails.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minBackoffDuration")]
    #[builder(default)]
    pub min_backoff_duration: Option<String>,
    /// The number of attempts that the system will make to run a
    /// job using the exponential backoff procedure described by maxDoublings.
    /// Values greater than 5 and negative values are not allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryCount")]
    #[builder(default)]
    pub retry_count: Option<f64>,
}


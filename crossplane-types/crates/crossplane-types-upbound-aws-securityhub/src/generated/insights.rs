// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InsightSpec defines the desired state of Insight
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "securityhub.aws.upbound.io", version = "v1beta2", kind = "Insight", plural = "insights")]
#[kube(status = "InsightStatus")]
pub struct InsightSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<InsightDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InsightForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<InsightInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<InsightProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<InsightPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<InsightWriteConnectionSecretToRef>,
}

/// InsightSpec defines the desired state of Insight
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InsightDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProvider {
    /// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub filters: Option<InsightForProviderFilters>,
    /// The attribute used to group the findings for the insight e.g., if an insight is grouped by ResourceId, then the insight produces a list of resource identifiers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupByAttribute")]
    #[builder(default)]
    pub group_by_attribute: Option<String>,
    /// The name of the custom insight.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFilters {
    /// AWS account ID that a finding is generated in. See String_Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsAccountId")]
    #[builder(default)]
    pub aws_account_id: Option<Vec<InsightForProviderFiltersAwsAccountId>>,
    /// The name of the findings provider (company) that owns the solution (product) that generates findings. See String_Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "companyName")]
    #[builder(default)]
    pub company_name: Option<Vec<InsightForProviderFiltersCompanyName>>,
    /// Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS AWS Foundations. Contains security standard-related finding details. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "complianceStatus")]
    #[builder(default)]
    pub compliance_status: Option<Vec<InsightForProviderFiltersComplianceStatus>>,
    /// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub confidence: Option<Vec<InsightForProviderFiltersConfidence>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider captured the potential security issue that a finding captured. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    #[builder(default)]
    pub created_at: Option<Vec<InsightForProviderFiltersCreatedAt>>,
    /// The level of importance assigned to the resources associated with the finding. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub criticality: Option<Vec<InsightForProviderFiltersCriticality>>,
    /// A finding's description. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<Vec<InsightForProviderFiltersDescription>>,
    /// The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsConfidence")]
    #[builder(default)]
    pub finding_provider_fields_confidence: Option<Vec<InsightForProviderFiltersFindingProviderFieldsConfidence>>,
    /// The finding provider value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsCriticality")]
    #[builder(default)]
    pub finding_provider_fields_criticality: Option<Vec<InsightForProviderFiltersFindingProviderFieldsCriticality>>,
    /// The finding identifier of a related finding that is identified by the finding provider. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsRelatedFindingsId")]
    #[builder(default)]
    pub finding_provider_fields_related_findings_id: Option<Vec<InsightForProviderFiltersFindingProviderFieldsRelatedFindingsId>>,
    /// The ARN of the solution that generated a related finding that is identified by the finding provider. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsRelatedFindingsProductArn")]
    #[builder(default)]
    pub finding_provider_fields_related_findings_product_arn: Option<Vec<InsightForProviderFiltersFindingProviderFieldsRelatedFindingsProductArn>>,
    /// The finding provider value for the severity label. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsSeverityLabel")]
    #[builder(default)]
    pub finding_provider_fields_severity_label: Option<Vec<InsightForProviderFiltersFindingProviderFieldsSeverityLabel>>,
    /// The finding provider's original value for the severity. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsSeverityOriginal")]
    #[builder(default)]
    pub finding_provider_fields_severity_original: Option<Vec<InsightForProviderFiltersFindingProviderFieldsSeverityOriginal>>,
    /// One or more finding types that the finding provider assigned to the finding. Uses the format of namespace/category/classifier that classify a finding. Valid namespace values include: Software and Configuration Checks, TTPs, Effects, Unusual Behaviors, and Sensitive Data Identifications. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsTypes")]
    #[builder(default)]
    pub finding_provider_fields_types: Option<Vec<InsightForProviderFiltersFindingProviderFieldsTypes>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider first observed the potential security issue that a finding captured. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstObservedAt")]
    #[builder(default)]
    pub first_observed_at: Option<Vec<InsightForProviderFiltersFirstObservedAt>>,
    /// The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatorId")]
    #[builder(default)]
    pub generator_id: Option<Vec<InsightForProviderFiltersGeneratorId>>,
    /// The security findings provider-specific identifier for a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<Vec<InsightForProviderFiltersId>>,
    /// A keyword for a finding. See Keyword Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub keyword: Option<Vec<InsightForProviderFiltersKeyword>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider most recently observed the potential security issue that a finding captured. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastObservedAt")]
    #[builder(default)]
    pub last_observed_at: Option<Vec<InsightForProviderFiltersLastObservedAt>>,
    /// The name of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwareName")]
    #[builder(default)]
    pub malware_name: Option<Vec<InsightForProviderFiltersMalwareName>>,
    /// The filesystem path of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwarePath")]
    #[builder(default)]
    pub malware_path: Option<Vec<InsightForProviderFiltersMalwarePath>>,
    /// The state of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwareState")]
    #[builder(default)]
    pub malware_state: Option<Vec<InsightForProviderFiltersMalwareState>>,
    /// The type of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwareType")]
    #[builder(default)]
    pub malware_type: Option<Vec<InsightForProviderFiltersMalwareType>>,
    /// The destination domain of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationDomain")]
    #[builder(default)]
    pub network_destination_domain: Option<Vec<InsightForProviderFiltersNetworkDestinationDomain>>,
    /// The destination IPv4 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationIpv4")]
    #[builder(default)]
    pub network_destination_ipv4: Option<Vec<InsightForProviderFiltersNetworkDestinationIpv4>>,
    /// The destination IPv6 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationIpv6")]
    #[builder(default)]
    pub network_destination_ipv6: Option<Vec<InsightForProviderFiltersNetworkDestinationIpv6>>,
    /// The destination port of network-related information about a finding. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationPort")]
    #[builder(default)]
    pub network_destination_port: Option<Vec<InsightForProviderFiltersNetworkDestinationPort>>,
    /// Indicates the direction of network traffic associated with a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDirection")]
    #[builder(default)]
    pub network_direction: Option<Vec<InsightForProviderFiltersNetworkDirection>>,
    /// The protocol of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkProtocol")]
    #[builder(default)]
    pub network_protocol: Option<Vec<InsightForProviderFiltersNetworkProtocol>>,
    /// The source domain of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceDomain")]
    #[builder(default)]
    pub network_source_domain: Option<Vec<InsightForProviderFiltersNetworkSourceDomain>>,
    /// The source IPv4 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceIpv4")]
    #[builder(default)]
    pub network_source_ipv4: Option<Vec<InsightForProviderFiltersNetworkSourceIpv4>>,
    /// The source IPv6 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceIpv6")]
    #[builder(default)]
    pub network_source_ipv6: Option<Vec<InsightForProviderFiltersNetworkSourceIpv6>>,
    /// The source media access control (MAC) address of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceMac")]
    #[builder(default)]
    pub network_source_mac: Option<Vec<InsightForProviderFiltersNetworkSourceMac>>,
    /// The source port of network-related information about a finding. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourcePort")]
    #[builder(default)]
    pub network_source_port: Option<Vec<InsightForProviderFiltersNetworkSourcePort>>,
    /// The text of a note. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noteText")]
    #[builder(default)]
    pub note_text: Option<Vec<InsightForProviderFiltersNoteText>>,
    /// The timestamp of when the note was updated. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noteUpdatedAt")]
    #[builder(default)]
    pub note_updated_at: Option<Vec<InsightForProviderFiltersNoteUpdatedAt>>,
    /// The principal that created a note. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noteUpdatedBy")]
    #[builder(default)]
    pub note_updated_by: Option<Vec<InsightForProviderFiltersNoteUpdatedBy>>,
    /// The date/time that the process was launched. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processLaunchedAt")]
    #[builder(default)]
    pub process_launched_at: Option<Vec<InsightForProviderFiltersProcessLaunchedAt>>,
    /// The name of the process. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processName")]
    #[builder(default)]
    pub process_name: Option<Vec<InsightForProviderFiltersProcessName>>,
    /// The parent process ID. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processParentPid")]
    #[builder(default)]
    pub process_parent_pid: Option<Vec<InsightForProviderFiltersProcessParentPid>>,
    /// The path to the process executable. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processPath")]
    #[builder(default)]
    pub process_path: Option<Vec<InsightForProviderFiltersProcessPath>>,
    /// The process ID. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processPid")]
    #[builder(default)]
    pub process_pid: Option<Vec<InsightForProviderFiltersProcessPid>>,
    /// The date/time that the process was terminated. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processTerminatedAt")]
    #[builder(default)]
    pub process_terminated_at: Option<Vec<InsightForProviderFiltersProcessTerminatedAt>>,
    /// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productArn")]
    #[builder(default)]
    pub product_arn: Option<Vec<InsightForProviderFiltersProductArn>>,
    /// A data type where security-findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productFields")]
    #[builder(default)]
    pub product_fields: Option<Vec<InsightForProviderFiltersProductFields>>,
    /// The name of the solution (product) that generates findings. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productName")]
    #[builder(default)]
    pub product_name: Option<Vec<InsightForProviderFiltersProductName>>,
    /// The recommendation of what to do about the issue described in a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recommendationText")]
    #[builder(default)]
    pub recommendation_text: Option<Vec<InsightForProviderFiltersRecommendationText>>,
    /// The updated record state for the finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordState")]
    #[builder(default)]
    pub record_state: Option<Vec<InsightForProviderFiltersRecordState>>,
    /// The solution-generated identifier for a related finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relatedFindingsId")]
    #[builder(default)]
    pub related_findings_id: Option<Vec<InsightForProviderFiltersRelatedFindingsId>>,
    /// The ARN of the solution that generated a related finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relatedFindingsProductArn")]
    #[builder(default)]
    pub related_findings_product_arn: Option<Vec<InsightForProviderFiltersRelatedFindingsProductArn>>,
    /// The IAM profile ARN of the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceIamInstanceProfileArn")]
    #[builder(default)]
    pub resource_aws_ec2_instance_iam_instance_profile_arn: Option<Vec<InsightForProviderFiltersResourceAwsEc2InstanceIamInstanceProfileArn>>,
    /// The Amazon Machine Image (AMI) ID of the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceImageId")]
    #[builder(default)]
    pub resource_aws_ec2_instance_image_id: Option<Vec<InsightForProviderFiltersResourceAwsEc2InstanceImageId>>,
    /// The IPv4 addresses associated with the instance. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceIpv4Addresses")]
    #[builder(default)]
    pub resource_aws_ec2_instance_ipv4_addresses: Option<Vec<InsightForProviderFiltersResourceAwsEc2InstanceIpv4Addresses>>,
    /// The IPv6 addresses associated with the instance. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceIpv6Addresses")]
    #[builder(default)]
    pub resource_aws_ec2_instance_ipv6_addresses: Option<Vec<InsightForProviderFiltersResourceAwsEc2InstanceIpv6Addresses>>,
    /// The key name associated with the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceKeyName")]
    #[builder(default)]
    pub resource_aws_ec2_instance_key_name: Option<Vec<InsightForProviderFiltersResourceAwsEc2InstanceKeyName>>,
    /// The date and time the instance was launched. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceLaunchedAt")]
    #[builder(default)]
    pub resource_aws_ec2_instance_launched_at: Option<Vec<InsightForProviderFiltersResourceAwsEc2InstanceLaunchedAt>>,
    /// The identifier of the subnet that the instance was launched in. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceSubnetId")]
    #[builder(default)]
    pub resource_aws_ec2_instance_subnet_id: Option<Vec<InsightForProviderFiltersResourceAwsEc2InstanceSubnetId>>,
    /// The instance type of the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceType")]
    #[builder(default)]
    pub resource_aws_ec2_instance_type: Option<Vec<InsightForProviderFiltersResourceAwsEc2InstanceType>>,
    /// The identifier of the VPC that the instance was launched in. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceVpcId")]
    #[builder(default)]
    pub resource_aws_ec2_instance_vpc_id: Option<Vec<InsightForProviderFiltersResourceAwsEc2InstanceVpcId>>,
    /// The creation date/time of the IAM access key related to a finding. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsIamAccessKeyCreatedAt")]
    #[builder(default)]
    pub resource_aws_iam_access_key_created_at: Option<Vec<InsightForProviderFiltersResourceAwsIamAccessKeyCreatedAt>>,
    /// The status of the IAM access key related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsIamAccessKeyStatus")]
    #[builder(default)]
    pub resource_aws_iam_access_key_status: Option<Vec<InsightForProviderFiltersResourceAwsIamAccessKeyStatus>>,
    /// The user associated with the IAM access key related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsIamAccessKeyUserName")]
    #[builder(default)]
    pub resource_aws_iam_access_key_user_name: Option<Vec<InsightForProviderFiltersResourceAwsIamAccessKeyUserName>>,
    /// The canonical user ID of the owner of the S3 bucket. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsS3BucketOwnerId")]
    #[builder(default)]
    pub resource_aws_s3_bucket_owner_id: Option<Vec<InsightForProviderFiltersResourceAwsS3BucketOwnerId>>,
    /// The display name of the owner of the S3 bucket. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsS3BucketOwnerName")]
    #[builder(default)]
    pub resource_aws_s3_bucket_owner_name: Option<Vec<InsightForProviderFiltersResourceAwsS3BucketOwnerName>>,
    /// The identifier of the image related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerImageId")]
    #[builder(default)]
    pub resource_container_image_id: Option<Vec<InsightForProviderFiltersResourceContainerImageId>>,
    /// The name of the image related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerImageName")]
    #[builder(default)]
    pub resource_container_image_name: Option<Vec<InsightForProviderFiltersResourceContainerImageName>>,
    /// The date/time that the container was started. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerLaunchedAt")]
    #[builder(default)]
    pub resource_container_launched_at: Option<Vec<InsightForProviderFiltersResourceContainerLaunchedAt>>,
    /// The name of the container related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerName")]
    #[builder(default)]
    pub resource_container_name: Option<Vec<InsightForProviderFiltersResourceContainerName>>,
    /// The details of a resource that doesn't have a specific subfield for the resource type defined. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceDetailsOther")]
    #[builder(default)]
    pub resource_details_other: Option<Vec<InsightForProviderFiltersResourceDetailsOther>>,
    /// The canonical identifier for the given resource type. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    #[builder(default)]
    pub resource_id: Option<Vec<InsightForProviderFiltersResourceId>>,
    /// The canonical AWS partition name that the Region is assigned to. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcePartition")]
    #[builder(default)]
    pub resource_partition: Option<Vec<InsightForProviderFiltersResourcePartition>>,
    /// The canonical AWS external Region name where this resource is located. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceRegion")]
    #[builder(default)]
    pub resource_region: Option<Vec<InsightForProviderFiltersResourceRegion>>,
    /// A list of AWS tags associated with a resource at the time the finding was processed. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTags")]
    #[builder(default)]
    pub resource_tags: Option<Vec<InsightForProviderFiltersResourceTags>>,
    /// Specifies the type of the resource that details are provided for. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    #[builder(default)]
    pub resource_type: Option<Vec<InsightForProviderFiltersResourceType>>,
    /// The label of a finding's severity. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "severityLabel")]
    #[builder(default)]
    pub severity_label: Option<Vec<InsightForProviderFiltersSeverityLabel>>,
    /// A URL that links to a page about the current finding in the security-findings provider's solution. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceUrl")]
    #[builder(default)]
    pub source_url: Option<Vec<InsightForProviderFiltersSourceUrl>>,
    /// The category of a threat intelligence indicator. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorCategory")]
    #[builder(default)]
    pub threat_intel_indicator_category: Option<Vec<InsightForProviderFiltersThreatIntelIndicatorCategory>>,
    /// The date/time of the last observation of a threat intelligence indicator. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorLastObservedAt")]
    #[builder(default)]
    pub threat_intel_indicator_last_observed_at: Option<Vec<InsightForProviderFiltersThreatIntelIndicatorLastObservedAt>>,
    /// The source of the threat intelligence. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorSource")]
    #[builder(default)]
    pub threat_intel_indicator_source: Option<Vec<InsightForProviderFiltersThreatIntelIndicatorSource>>,
    /// The URL for more details from the source of the threat intelligence. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorSourceUrl")]
    #[builder(default)]
    pub threat_intel_indicator_source_url: Option<Vec<InsightForProviderFiltersThreatIntelIndicatorSourceUrl>>,
    /// The type of a threat intelligence indicator. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorType")]
    #[builder(default)]
    pub threat_intel_indicator_type: Option<Vec<InsightForProviderFiltersThreatIntelIndicatorType>>,
    /// The value of a threat intelligence indicator. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorValue")]
    #[builder(default)]
    pub threat_intel_indicator_value: Option<Vec<InsightForProviderFiltersThreatIntelIndicatorValue>>,
    /// A finding's title. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub title: Option<Vec<InsightForProviderFiltersTitle>>,
    /// A finding type in the format of namespace/category/classifier that classifies a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<Vec<InsightForProviderFiltersType>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider last updated the finding record. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatedAt")]
    #[builder(default)]
    pub updated_at: Option<Vec<InsightForProviderFiltersUpdatedAt>>,
    /// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDefinedValues")]
    #[builder(default)]
    pub user_defined_values: Option<Vec<InsightForProviderFiltersUserDefinedValues>>,
    /// The veracity of a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verificationState")]
    #[builder(default)]
    pub verification_state: Option<Vec<InsightForProviderFiltersVerificationState>>,
    /// The status of the investigation into a finding. See Workflow Status Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowStatus")]
    #[builder(default)]
    pub workflow_status: Option<Vec<InsightForProviderFiltersWorkflowStatus>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersAwsAccountId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersCompanyName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersComplianceStatus {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersConfidence {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersCreatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersCreatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersCreatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersCriticality {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersDescription {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersFindingProviderFieldsConfidence {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersFindingProviderFieldsCriticality {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersFindingProviderFieldsRelatedFindingsId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersFindingProviderFieldsRelatedFindingsProductArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersFindingProviderFieldsSeverityLabel {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersFindingProviderFieldsSeverityOriginal {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersFindingProviderFieldsTypes {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersFirstObservedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersFirstObservedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersFirstObservedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersGeneratorId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersKeyword {
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersLastObservedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersLastObservedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersLastObservedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersMalwareName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersMalwarePath {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersMalwareState {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersMalwareType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkDestinationDomain {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkDestinationIpv4 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkDestinationIpv6 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkDestinationPort {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkDirection {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkProtocol {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkSourceDomain {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkSourceIpv4 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkSourceIpv6 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkSourceMac {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNetworkSourcePort {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNoteText {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNoteUpdatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersNoteUpdatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNoteUpdatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersNoteUpdatedBy {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProcessLaunchedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersProcessLaunchedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProcessLaunchedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProcessName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProcessParentPid {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProcessPath {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProcessPid {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProcessTerminatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersProcessTerminatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProcessTerminatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProductArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProductFields {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersProductName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersRecommendationText {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersRecordState {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersRelatedFindingsId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersRelatedFindingsProductArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceIamInstanceProfileArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceImageId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceIpv4Addresses {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceIpv6Addresses {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceKeyName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceLaunchedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersResourceAwsEc2InstanceLaunchedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceLaunchedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceSubnetId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsEc2InstanceVpcId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsIamAccessKeyCreatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersResourceAwsIamAccessKeyCreatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsIamAccessKeyCreatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsIamAccessKeyStatus {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsIamAccessKeyUserName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsS3BucketOwnerId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceAwsS3BucketOwnerName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceContainerImageId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceContainerImageName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceContainerLaunchedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersResourceContainerLaunchedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceContainerLaunchedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceContainerName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceDetailsOther {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourcePartition {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceRegion {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceTags {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersResourceType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersSeverityLabel {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersSourceUrl {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersThreatIntelIndicatorCategory {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersThreatIntelIndicatorLastObservedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersThreatIntelIndicatorLastObservedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersThreatIntelIndicatorLastObservedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersThreatIntelIndicatorSource {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersThreatIntelIndicatorSourceUrl {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersThreatIntelIndicatorType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersThreatIntelIndicatorValue {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersTitle {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersUpdatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightForProviderFiltersUpdatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersUpdatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersUserDefinedValues {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersVerificationState {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightForProviderFiltersWorkflowStatus {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProvider {
    /// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub filters: Option<InsightInitProviderFilters>,
    /// The attribute used to group the findings for the insight e.g., if an insight is grouped by ResourceId, then the insight produces a list of resource identifiers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupByAttribute")]
    #[builder(default)]
    pub group_by_attribute: Option<String>,
    /// The name of the custom insight.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFilters {
    /// AWS account ID that a finding is generated in. See String_Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsAccountId")]
    #[builder(default)]
    pub aws_account_id: Option<Vec<InsightInitProviderFiltersAwsAccountId>>,
    /// The name of the findings provider (company) that owns the solution (product) that generates findings. See String_Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "companyName")]
    #[builder(default)]
    pub company_name: Option<Vec<InsightInitProviderFiltersCompanyName>>,
    /// Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS AWS Foundations. Contains security standard-related finding details. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "complianceStatus")]
    #[builder(default)]
    pub compliance_status: Option<Vec<InsightInitProviderFiltersComplianceStatus>>,
    /// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub confidence: Option<Vec<InsightInitProviderFiltersConfidence>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider captured the potential security issue that a finding captured. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    #[builder(default)]
    pub created_at: Option<Vec<InsightInitProviderFiltersCreatedAt>>,
    /// The level of importance assigned to the resources associated with the finding. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub criticality: Option<Vec<InsightInitProviderFiltersCriticality>>,
    /// A finding's description. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<Vec<InsightInitProviderFiltersDescription>>,
    /// The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsConfidence")]
    #[builder(default)]
    pub finding_provider_fields_confidence: Option<Vec<InsightInitProviderFiltersFindingProviderFieldsConfidence>>,
    /// The finding provider value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsCriticality")]
    #[builder(default)]
    pub finding_provider_fields_criticality: Option<Vec<InsightInitProviderFiltersFindingProviderFieldsCriticality>>,
    /// The finding identifier of a related finding that is identified by the finding provider. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsRelatedFindingsId")]
    #[builder(default)]
    pub finding_provider_fields_related_findings_id: Option<Vec<InsightInitProviderFiltersFindingProviderFieldsRelatedFindingsId>>,
    /// The ARN of the solution that generated a related finding that is identified by the finding provider. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsRelatedFindingsProductArn")]
    #[builder(default)]
    pub finding_provider_fields_related_findings_product_arn: Option<Vec<InsightInitProviderFiltersFindingProviderFieldsRelatedFindingsProductArn>>,
    /// The finding provider value for the severity label. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsSeverityLabel")]
    #[builder(default)]
    pub finding_provider_fields_severity_label: Option<Vec<InsightInitProviderFiltersFindingProviderFieldsSeverityLabel>>,
    /// The finding provider's original value for the severity. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsSeverityOriginal")]
    #[builder(default)]
    pub finding_provider_fields_severity_original: Option<Vec<InsightInitProviderFiltersFindingProviderFieldsSeverityOriginal>>,
    /// One or more finding types that the finding provider assigned to the finding. Uses the format of namespace/category/classifier that classify a finding. Valid namespace values include: Software and Configuration Checks, TTPs, Effects, Unusual Behaviors, and Sensitive Data Identifications. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsTypes")]
    #[builder(default)]
    pub finding_provider_fields_types: Option<Vec<InsightInitProviderFiltersFindingProviderFieldsTypes>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider first observed the potential security issue that a finding captured. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstObservedAt")]
    #[builder(default)]
    pub first_observed_at: Option<Vec<InsightInitProviderFiltersFirstObservedAt>>,
    /// The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatorId")]
    #[builder(default)]
    pub generator_id: Option<Vec<InsightInitProviderFiltersGeneratorId>>,
    /// The security findings provider-specific identifier for a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<Vec<InsightInitProviderFiltersId>>,
    /// A keyword for a finding. See Keyword Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub keyword: Option<Vec<InsightInitProviderFiltersKeyword>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider most recently observed the potential security issue that a finding captured. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastObservedAt")]
    #[builder(default)]
    pub last_observed_at: Option<Vec<InsightInitProviderFiltersLastObservedAt>>,
    /// The name of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwareName")]
    #[builder(default)]
    pub malware_name: Option<Vec<InsightInitProviderFiltersMalwareName>>,
    /// The filesystem path of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwarePath")]
    #[builder(default)]
    pub malware_path: Option<Vec<InsightInitProviderFiltersMalwarePath>>,
    /// The state of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwareState")]
    #[builder(default)]
    pub malware_state: Option<Vec<InsightInitProviderFiltersMalwareState>>,
    /// The type of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwareType")]
    #[builder(default)]
    pub malware_type: Option<Vec<InsightInitProviderFiltersMalwareType>>,
    /// The destination domain of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationDomain")]
    #[builder(default)]
    pub network_destination_domain: Option<Vec<InsightInitProviderFiltersNetworkDestinationDomain>>,
    /// The destination IPv4 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationIpv4")]
    #[builder(default)]
    pub network_destination_ipv4: Option<Vec<InsightInitProviderFiltersNetworkDestinationIpv4>>,
    /// The destination IPv6 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationIpv6")]
    #[builder(default)]
    pub network_destination_ipv6: Option<Vec<InsightInitProviderFiltersNetworkDestinationIpv6>>,
    /// The destination port of network-related information about a finding. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationPort")]
    #[builder(default)]
    pub network_destination_port: Option<Vec<InsightInitProviderFiltersNetworkDestinationPort>>,
    /// Indicates the direction of network traffic associated with a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDirection")]
    #[builder(default)]
    pub network_direction: Option<Vec<InsightInitProviderFiltersNetworkDirection>>,
    /// The protocol of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkProtocol")]
    #[builder(default)]
    pub network_protocol: Option<Vec<InsightInitProviderFiltersNetworkProtocol>>,
    /// The source domain of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceDomain")]
    #[builder(default)]
    pub network_source_domain: Option<Vec<InsightInitProviderFiltersNetworkSourceDomain>>,
    /// The source IPv4 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceIpv4")]
    #[builder(default)]
    pub network_source_ipv4: Option<Vec<InsightInitProviderFiltersNetworkSourceIpv4>>,
    /// The source IPv6 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceIpv6")]
    #[builder(default)]
    pub network_source_ipv6: Option<Vec<InsightInitProviderFiltersNetworkSourceIpv6>>,
    /// The source media access control (MAC) address of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceMac")]
    #[builder(default)]
    pub network_source_mac: Option<Vec<InsightInitProviderFiltersNetworkSourceMac>>,
    /// The source port of network-related information about a finding. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourcePort")]
    #[builder(default)]
    pub network_source_port: Option<Vec<InsightInitProviderFiltersNetworkSourcePort>>,
    /// The text of a note. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noteText")]
    #[builder(default)]
    pub note_text: Option<Vec<InsightInitProviderFiltersNoteText>>,
    /// The timestamp of when the note was updated. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noteUpdatedAt")]
    #[builder(default)]
    pub note_updated_at: Option<Vec<InsightInitProviderFiltersNoteUpdatedAt>>,
    /// The principal that created a note. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noteUpdatedBy")]
    #[builder(default)]
    pub note_updated_by: Option<Vec<InsightInitProviderFiltersNoteUpdatedBy>>,
    /// The date/time that the process was launched. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processLaunchedAt")]
    #[builder(default)]
    pub process_launched_at: Option<Vec<InsightInitProviderFiltersProcessLaunchedAt>>,
    /// The name of the process. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processName")]
    #[builder(default)]
    pub process_name: Option<Vec<InsightInitProviderFiltersProcessName>>,
    /// The parent process ID. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processParentPid")]
    #[builder(default)]
    pub process_parent_pid: Option<Vec<InsightInitProviderFiltersProcessParentPid>>,
    /// The path to the process executable. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processPath")]
    #[builder(default)]
    pub process_path: Option<Vec<InsightInitProviderFiltersProcessPath>>,
    /// The process ID. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processPid")]
    #[builder(default)]
    pub process_pid: Option<Vec<InsightInitProviderFiltersProcessPid>>,
    /// The date/time that the process was terminated. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processTerminatedAt")]
    #[builder(default)]
    pub process_terminated_at: Option<Vec<InsightInitProviderFiltersProcessTerminatedAt>>,
    /// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productArn")]
    #[builder(default)]
    pub product_arn: Option<Vec<InsightInitProviderFiltersProductArn>>,
    /// A data type where security-findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productFields")]
    #[builder(default)]
    pub product_fields: Option<Vec<InsightInitProviderFiltersProductFields>>,
    /// The name of the solution (product) that generates findings. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productName")]
    #[builder(default)]
    pub product_name: Option<Vec<InsightInitProviderFiltersProductName>>,
    /// The recommendation of what to do about the issue described in a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recommendationText")]
    #[builder(default)]
    pub recommendation_text: Option<Vec<InsightInitProviderFiltersRecommendationText>>,
    /// The updated record state for the finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordState")]
    #[builder(default)]
    pub record_state: Option<Vec<InsightInitProviderFiltersRecordState>>,
    /// The solution-generated identifier for a related finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relatedFindingsId")]
    #[builder(default)]
    pub related_findings_id: Option<Vec<InsightInitProviderFiltersRelatedFindingsId>>,
    /// The ARN of the solution that generated a related finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relatedFindingsProductArn")]
    #[builder(default)]
    pub related_findings_product_arn: Option<Vec<InsightInitProviderFiltersRelatedFindingsProductArn>>,
    /// The IAM profile ARN of the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceIamInstanceProfileArn")]
    #[builder(default)]
    pub resource_aws_ec2_instance_iam_instance_profile_arn: Option<Vec<InsightInitProviderFiltersResourceAwsEc2InstanceIamInstanceProfileArn>>,
    /// The Amazon Machine Image (AMI) ID of the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceImageId")]
    #[builder(default)]
    pub resource_aws_ec2_instance_image_id: Option<Vec<InsightInitProviderFiltersResourceAwsEc2InstanceImageId>>,
    /// The IPv4 addresses associated with the instance. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceIpv4Addresses")]
    #[builder(default)]
    pub resource_aws_ec2_instance_ipv4_addresses: Option<Vec<InsightInitProviderFiltersResourceAwsEc2InstanceIpv4Addresses>>,
    /// The IPv6 addresses associated with the instance. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceIpv6Addresses")]
    #[builder(default)]
    pub resource_aws_ec2_instance_ipv6_addresses: Option<Vec<InsightInitProviderFiltersResourceAwsEc2InstanceIpv6Addresses>>,
    /// The key name associated with the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceKeyName")]
    #[builder(default)]
    pub resource_aws_ec2_instance_key_name: Option<Vec<InsightInitProviderFiltersResourceAwsEc2InstanceKeyName>>,
    /// The date and time the instance was launched. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceLaunchedAt")]
    #[builder(default)]
    pub resource_aws_ec2_instance_launched_at: Option<Vec<InsightInitProviderFiltersResourceAwsEc2InstanceLaunchedAt>>,
    /// The identifier of the subnet that the instance was launched in. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceSubnetId")]
    #[builder(default)]
    pub resource_aws_ec2_instance_subnet_id: Option<Vec<InsightInitProviderFiltersResourceAwsEc2InstanceSubnetId>>,
    /// The instance type of the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceType")]
    #[builder(default)]
    pub resource_aws_ec2_instance_type: Option<Vec<InsightInitProviderFiltersResourceAwsEc2InstanceType>>,
    /// The identifier of the VPC that the instance was launched in. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceVpcId")]
    #[builder(default)]
    pub resource_aws_ec2_instance_vpc_id: Option<Vec<InsightInitProviderFiltersResourceAwsEc2InstanceVpcId>>,
    /// The creation date/time of the IAM access key related to a finding. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsIamAccessKeyCreatedAt")]
    #[builder(default)]
    pub resource_aws_iam_access_key_created_at: Option<Vec<InsightInitProviderFiltersResourceAwsIamAccessKeyCreatedAt>>,
    /// The status of the IAM access key related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsIamAccessKeyStatus")]
    #[builder(default)]
    pub resource_aws_iam_access_key_status: Option<Vec<InsightInitProviderFiltersResourceAwsIamAccessKeyStatus>>,
    /// The user associated with the IAM access key related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsIamAccessKeyUserName")]
    #[builder(default)]
    pub resource_aws_iam_access_key_user_name: Option<Vec<InsightInitProviderFiltersResourceAwsIamAccessKeyUserName>>,
    /// The canonical user ID of the owner of the S3 bucket. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsS3BucketOwnerId")]
    #[builder(default)]
    pub resource_aws_s3_bucket_owner_id: Option<Vec<InsightInitProviderFiltersResourceAwsS3BucketOwnerId>>,
    /// The display name of the owner of the S3 bucket. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsS3BucketOwnerName")]
    #[builder(default)]
    pub resource_aws_s3_bucket_owner_name: Option<Vec<InsightInitProviderFiltersResourceAwsS3BucketOwnerName>>,
    /// The identifier of the image related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerImageId")]
    #[builder(default)]
    pub resource_container_image_id: Option<Vec<InsightInitProviderFiltersResourceContainerImageId>>,
    /// The name of the image related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerImageName")]
    #[builder(default)]
    pub resource_container_image_name: Option<Vec<InsightInitProviderFiltersResourceContainerImageName>>,
    /// The date/time that the container was started. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerLaunchedAt")]
    #[builder(default)]
    pub resource_container_launched_at: Option<Vec<InsightInitProviderFiltersResourceContainerLaunchedAt>>,
    /// The name of the container related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerName")]
    #[builder(default)]
    pub resource_container_name: Option<Vec<InsightInitProviderFiltersResourceContainerName>>,
    /// The details of a resource that doesn't have a specific subfield for the resource type defined. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceDetailsOther")]
    #[builder(default)]
    pub resource_details_other: Option<Vec<InsightInitProviderFiltersResourceDetailsOther>>,
    /// The canonical identifier for the given resource type. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    #[builder(default)]
    pub resource_id: Option<Vec<InsightInitProviderFiltersResourceId>>,
    /// The canonical AWS partition name that the Region is assigned to. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcePartition")]
    #[builder(default)]
    pub resource_partition: Option<Vec<InsightInitProviderFiltersResourcePartition>>,
    /// The canonical AWS external Region name where this resource is located. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceRegion")]
    #[builder(default)]
    pub resource_region: Option<Vec<InsightInitProviderFiltersResourceRegion>>,
    /// A list of AWS tags associated with a resource at the time the finding was processed. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTags")]
    #[builder(default)]
    pub resource_tags: Option<Vec<InsightInitProviderFiltersResourceTags>>,
    /// Specifies the type of the resource that details are provided for. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    #[builder(default)]
    pub resource_type: Option<Vec<InsightInitProviderFiltersResourceType>>,
    /// The label of a finding's severity. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "severityLabel")]
    #[builder(default)]
    pub severity_label: Option<Vec<InsightInitProviderFiltersSeverityLabel>>,
    /// A URL that links to a page about the current finding in the security-findings provider's solution. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceUrl")]
    #[builder(default)]
    pub source_url: Option<Vec<InsightInitProviderFiltersSourceUrl>>,
    /// The category of a threat intelligence indicator. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorCategory")]
    #[builder(default)]
    pub threat_intel_indicator_category: Option<Vec<InsightInitProviderFiltersThreatIntelIndicatorCategory>>,
    /// The date/time of the last observation of a threat intelligence indicator. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorLastObservedAt")]
    #[builder(default)]
    pub threat_intel_indicator_last_observed_at: Option<Vec<InsightInitProviderFiltersThreatIntelIndicatorLastObservedAt>>,
    /// The source of the threat intelligence. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorSource")]
    #[builder(default)]
    pub threat_intel_indicator_source: Option<Vec<InsightInitProviderFiltersThreatIntelIndicatorSource>>,
    /// The URL for more details from the source of the threat intelligence. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorSourceUrl")]
    #[builder(default)]
    pub threat_intel_indicator_source_url: Option<Vec<InsightInitProviderFiltersThreatIntelIndicatorSourceUrl>>,
    /// The type of a threat intelligence indicator. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorType")]
    #[builder(default)]
    pub threat_intel_indicator_type: Option<Vec<InsightInitProviderFiltersThreatIntelIndicatorType>>,
    /// The value of a threat intelligence indicator. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorValue")]
    #[builder(default)]
    pub threat_intel_indicator_value: Option<Vec<InsightInitProviderFiltersThreatIntelIndicatorValue>>,
    /// A finding's title. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub title: Option<Vec<InsightInitProviderFiltersTitle>>,
    /// A finding type in the format of namespace/category/classifier that classifies a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<Vec<InsightInitProviderFiltersType>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider last updated the finding record. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatedAt")]
    #[builder(default)]
    pub updated_at: Option<Vec<InsightInitProviderFiltersUpdatedAt>>,
    /// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDefinedValues")]
    #[builder(default)]
    pub user_defined_values: Option<Vec<InsightInitProviderFiltersUserDefinedValues>>,
    /// The veracity of a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verificationState")]
    #[builder(default)]
    pub verification_state: Option<Vec<InsightInitProviderFiltersVerificationState>>,
    /// The status of the investigation into a finding. See Workflow Status Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowStatus")]
    #[builder(default)]
    pub workflow_status: Option<Vec<InsightInitProviderFiltersWorkflowStatus>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersAwsAccountId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersCompanyName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersComplianceStatus {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersConfidence {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersCreatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersCreatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersCreatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersCriticality {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersDescription {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersFindingProviderFieldsConfidence {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersFindingProviderFieldsCriticality {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersFindingProviderFieldsRelatedFindingsId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersFindingProviderFieldsRelatedFindingsProductArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersFindingProviderFieldsSeverityLabel {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersFindingProviderFieldsSeverityOriginal {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersFindingProviderFieldsTypes {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersFirstObservedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersFirstObservedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersFirstObservedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersGeneratorId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersKeyword {
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersLastObservedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersLastObservedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersLastObservedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersMalwareName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersMalwarePath {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersMalwareState {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersMalwareType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkDestinationDomain {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkDestinationIpv4 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkDestinationIpv6 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkDestinationPort {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkDirection {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkProtocol {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkSourceDomain {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkSourceIpv4 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkSourceIpv6 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkSourceMac {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNetworkSourcePort {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNoteText {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNoteUpdatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersNoteUpdatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNoteUpdatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersNoteUpdatedBy {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProcessLaunchedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersProcessLaunchedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProcessLaunchedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProcessName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProcessParentPid {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProcessPath {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProcessPid {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProcessTerminatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersProcessTerminatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProcessTerminatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProductArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProductFields {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersProductName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersRecommendationText {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersRecordState {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersRelatedFindingsId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersRelatedFindingsProductArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceIamInstanceProfileArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceImageId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceIpv4Addresses {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceIpv6Addresses {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceKeyName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceLaunchedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersResourceAwsEc2InstanceLaunchedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceLaunchedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceSubnetId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsEc2InstanceVpcId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsIamAccessKeyCreatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersResourceAwsIamAccessKeyCreatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsIamAccessKeyCreatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsIamAccessKeyStatus {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsIamAccessKeyUserName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsS3BucketOwnerId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceAwsS3BucketOwnerName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceContainerImageId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceContainerImageName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceContainerLaunchedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersResourceContainerLaunchedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceContainerLaunchedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceContainerName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceDetailsOther {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourcePartition {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceRegion {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceTags {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersResourceType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersSeverityLabel {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersSourceUrl {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersThreatIntelIndicatorCategory {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersThreatIntelIndicatorLastObservedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersThreatIntelIndicatorLastObservedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersThreatIntelIndicatorLastObservedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersThreatIntelIndicatorSource {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersThreatIntelIndicatorSourceUrl {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersThreatIntelIndicatorType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersThreatIntelIndicatorValue {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersTitle {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersUpdatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightInitProviderFiltersUpdatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersUpdatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersUserDefinedValues {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersVerificationState {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightInitProviderFiltersWorkflowStatus {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<InsightProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<InsightProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<InsightProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InsightProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InsightProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<InsightPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<InsightPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<InsightPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<InsightPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<InsightPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InsightPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InsightPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InsightStatus defines the observed state of Insight.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<InsightStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProvider {
    /// ARN of the insight.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub filters: Option<InsightStatusAtProviderFilters>,
    /// The attribute used to group the findings for the insight e.g., if an insight is grouped by ResourceId, then the insight produces a list of resource identifiers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupByAttribute")]
    #[builder(default)]
    pub group_by_attribute: Option<String>,
    /// ARN of the insight.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The name of the custom insight.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFilters {
    /// AWS account ID that a finding is generated in. See String_Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsAccountId")]
    #[builder(default)]
    pub aws_account_id: Option<Vec<InsightStatusAtProviderFiltersAwsAccountId>>,
    /// The name of the findings provider (company) that owns the solution (product) that generates findings. See String_Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "companyName")]
    #[builder(default)]
    pub company_name: Option<Vec<InsightStatusAtProviderFiltersCompanyName>>,
    /// Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS AWS Foundations. Contains security standard-related finding details. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "complianceStatus")]
    #[builder(default)]
    pub compliance_status: Option<Vec<InsightStatusAtProviderFiltersComplianceStatus>>,
    /// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub confidence: Option<Vec<InsightStatusAtProviderFiltersConfidence>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider captured the potential security issue that a finding captured. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    #[builder(default)]
    pub created_at: Option<Vec<InsightStatusAtProviderFiltersCreatedAt>>,
    /// The level of importance assigned to the resources associated with the finding. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub criticality: Option<Vec<InsightStatusAtProviderFiltersCriticality>>,
    /// A finding's description. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<Vec<InsightStatusAtProviderFiltersDescription>>,
    /// The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsConfidence")]
    #[builder(default)]
    pub finding_provider_fields_confidence: Option<Vec<InsightStatusAtProviderFiltersFindingProviderFieldsConfidence>>,
    /// The finding provider value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsCriticality")]
    #[builder(default)]
    pub finding_provider_fields_criticality: Option<Vec<InsightStatusAtProviderFiltersFindingProviderFieldsCriticality>>,
    /// The finding identifier of a related finding that is identified by the finding provider. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsRelatedFindingsId")]
    #[builder(default)]
    pub finding_provider_fields_related_findings_id: Option<Vec<InsightStatusAtProviderFiltersFindingProviderFieldsRelatedFindingsId>>,
    /// The ARN of the solution that generated a related finding that is identified by the finding provider. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsRelatedFindingsProductArn")]
    #[builder(default)]
    pub finding_provider_fields_related_findings_product_arn: Option<Vec<InsightStatusAtProviderFiltersFindingProviderFieldsRelatedFindingsProductArn>>,
    /// The finding provider value for the severity label. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsSeverityLabel")]
    #[builder(default)]
    pub finding_provider_fields_severity_label: Option<Vec<InsightStatusAtProviderFiltersFindingProviderFieldsSeverityLabel>>,
    /// The finding provider's original value for the severity. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsSeverityOriginal")]
    #[builder(default)]
    pub finding_provider_fields_severity_original: Option<Vec<InsightStatusAtProviderFiltersFindingProviderFieldsSeverityOriginal>>,
    /// One or more finding types that the finding provider assigned to the finding. Uses the format of namespace/category/classifier that classify a finding. Valid namespace values include: Software and Configuration Checks, TTPs, Effects, Unusual Behaviors, and Sensitive Data Identifications. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "findingProviderFieldsTypes")]
    #[builder(default)]
    pub finding_provider_fields_types: Option<Vec<InsightStatusAtProviderFiltersFindingProviderFieldsTypes>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider first observed the potential security issue that a finding captured. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstObservedAt")]
    #[builder(default)]
    pub first_observed_at: Option<Vec<InsightStatusAtProviderFiltersFirstObservedAt>>,
    /// The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatorId")]
    #[builder(default)]
    pub generator_id: Option<Vec<InsightStatusAtProviderFiltersGeneratorId>>,
    /// The security findings provider-specific identifier for a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<Vec<InsightStatusAtProviderFiltersId>>,
    /// A keyword for a finding. See Keyword Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub keyword: Option<Vec<InsightStatusAtProviderFiltersKeyword>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider most recently observed the potential security issue that a finding captured. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastObservedAt")]
    #[builder(default)]
    pub last_observed_at: Option<Vec<InsightStatusAtProviderFiltersLastObservedAt>>,
    /// The name of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwareName")]
    #[builder(default)]
    pub malware_name: Option<Vec<InsightStatusAtProviderFiltersMalwareName>>,
    /// The filesystem path of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwarePath")]
    #[builder(default)]
    pub malware_path: Option<Vec<InsightStatusAtProviderFiltersMalwarePath>>,
    /// The state of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwareState")]
    #[builder(default)]
    pub malware_state: Option<Vec<InsightStatusAtProviderFiltersMalwareState>>,
    /// The type of the malware that was observed. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "malwareType")]
    #[builder(default)]
    pub malware_type: Option<Vec<InsightStatusAtProviderFiltersMalwareType>>,
    /// The destination domain of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationDomain")]
    #[builder(default)]
    pub network_destination_domain: Option<Vec<InsightStatusAtProviderFiltersNetworkDestinationDomain>>,
    /// The destination IPv4 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationIpv4")]
    #[builder(default)]
    pub network_destination_ipv4: Option<Vec<InsightStatusAtProviderFiltersNetworkDestinationIpv4>>,
    /// The destination IPv6 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationIpv6")]
    #[builder(default)]
    pub network_destination_ipv6: Option<Vec<InsightStatusAtProviderFiltersNetworkDestinationIpv6>>,
    /// The destination port of network-related information about a finding. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDestinationPort")]
    #[builder(default)]
    pub network_destination_port: Option<Vec<InsightStatusAtProviderFiltersNetworkDestinationPort>>,
    /// Indicates the direction of network traffic associated with a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDirection")]
    #[builder(default)]
    pub network_direction: Option<Vec<InsightStatusAtProviderFiltersNetworkDirection>>,
    /// The protocol of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkProtocol")]
    #[builder(default)]
    pub network_protocol: Option<Vec<InsightStatusAtProviderFiltersNetworkProtocol>>,
    /// The source domain of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceDomain")]
    #[builder(default)]
    pub network_source_domain: Option<Vec<InsightStatusAtProviderFiltersNetworkSourceDomain>>,
    /// The source IPv4 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceIpv4")]
    #[builder(default)]
    pub network_source_ipv4: Option<Vec<InsightStatusAtProviderFiltersNetworkSourceIpv4>>,
    /// The source IPv6 address of network-related information about a finding. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceIpv6")]
    #[builder(default)]
    pub network_source_ipv6: Option<Vec<InsightStatusAtProviderFiltersNetworkSourceIpv6>>,
    /// The source media access control (MAC) address of network-related information about a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourceMac")]
    #[builder(default)]
    pub network_source_mac: Option<Vec<InsightStatusAtProviderFiltersNetworkSourceMac>>,
    /// The source port of network-related information about a finding. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSourcePort")]
    #[builder(default)]
    pub network_source_port: Option<Vec<InsightStatusAtProviderFiltersNetworkSourcePort>>,
    /// The text of a note. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noteText")]
    #[builder(default)]
    pub note_text: Option<Vec<InsightStatusAtProviderFiltersNoteText>>,
    /// The timestamp of when the note was updated. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noteUpdatedAt")]
    #[builder(default)]
    pub note_updated_at: Option<Vec<InsightStatusAtProviderFiltersNoteUpdatedAt>>,
    /// The principal that created a note. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noteUpdatedBy")]
    #[builder(default)]
    pub note_updated_by: Option<Vec<InsightStatusAtProviderFiltersNoteUpdatedBy>>,
    /// The date/time that the process was launched. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processLaunchedAt")]
    #[builder(default)]
    pub process_launched_at: Option<Vec<InsightStatusAtProviderFiltersProcessLaunchedAt>>,
    /// The name of the process. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processName")]
    #[builder(default)]
    pub process_name: Option<Vec<InsightStatusAtProviderFiltersProcessName>>,
    /// The parent process ID. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processParentPid")]
    #[builder(default)]
    pub process_parent_pid: Option<Vec<InsightStatusAtProviderFiltersProcessParentPid>>,
    /// The path to the process executable. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processPath")]
    #[builder(default)]
    pub process_path: Option<Vec<InsightStatusAtProviderFiltersProcessPath>>,
    /// The process ID. See Number Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processPid")]
    #[builder(default)]
    pub process_pid: Option<Vec<InsightStatusAtProviderFiltersProcessPid>>,
    /// The date/time that the process was terminated. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processTerminatedAt")]
    #[builder(default)]
    pub process_terminated_at: Option<Vec<InsightStatusAtProviderFiltersProcessTerminatedAt>>,
    /// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productArn")]
    #[builder(default)]
    pub product_arn: Option<Vec<InsightStatusAtProviderFiltersProductArn>>,
    /// A data type where security-findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productFields")]
    #[builder(default)]
    pub product_fields: Option<Vec<InsightStatusAtProviderFiltersProductFields>>,
    /// The name of the solution (product) that generates findings. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productName")]
    #[builder(default)]
    pub product_name: Option<Vec<InsightStatusAtProviderFiltersProductName>>,
    /// The recommendation of what to do about the issue described in a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recommendationText")]
    #[builder(default)]
    pub recommendation_text: Option<Vec<InsightStatusAtProviderFiltersRecommendationText>>,
    /// The updated record state for the finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordState")]
    #[builder(default)]
    pub record_state: Option<Vec<InsightStatusAtProviderFiltersRecordState>>,
    /// The solution-generated identifier for a related finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relatedFindingsId")]
    #[builder(default)]
    pub related_findings_id: Option<Vec<InsightStatusAtProviderFiltersRelatedFindingsId>>,
    /// The ARN of the solution that generated a related finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relatedFindingsProductArn")]
    #[builder(default)]
    pub related_findings_product_arn: Option<Vec<InsightStatusAtProviderFiltersRelatedFindingsProductArn>>,
    /// The IAM profile ARN of the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceIamInstanceProfileArn")]
    #[builder(default)]
    pub resource_aws_ec2_instance_iam_instance_profile_arn: Option<Vec<InsightStatusAtProviderFiltersResourceAwsEc2InstanceIamInstanceProfileArn>>,
    /// The Amazon Machine Image (AMI) ID of the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceImageId")]
    #[builder(default)]
    pub resource_aws_ec2_instance_image_id: Option<Vec<InsightStatusAtProviderFiltersResourceAwsEc2InstanceImageId>>,
    /// The IPv4 addresses associated with the instance. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceIpv4Addresses")]
    #[builder(default)]
    pub resource_aws_ec2_instance_ipv4_addresses: Option<Vec<InsightStatusAtProviderFiltersResourceAwsEc2InstanceIpv4Addresses>>,
    /// The IPv6 addresses associated with the instance. See Ip Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceIpv6Addresses")]
    #[builder(default)]
    pub resource_aws_ec2_instance_ipv6_addresses: Option<Vec<InsightStatusAtProviderFiltersResourceAwsEc2InstanceIpv6Addresses>>,
    /// The key name associated with the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceKeyName")]
    #[builder(default)]
    pub resource_aws_ec2_instance_key_name: Option<Vec<InsightStatusAtProviderFiltersResourceAwsEc2InstanceKeyName>>,
    /// The date and time the instance was launched. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceLaunchedAt")]
    #[builder(default)]
    pub resource_aws_ec2_instance_launched_at: Option<Vec<InsightStatusAtProviderFiltersResourceAwsEc2InstanceLaunchedAt>>,
    /// The identifier of the subnet that the instance was launched in. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceSubnetId")]
    #[builder(default)]
    pub resource_aws_ec2_instance_subnet_id: Option<Vec<InsightStatusAtProviderFiltersResourceAwsEc2InstanceSubnetId>>,
    /// The instance type of the instance. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceType")]
    #[builder(default)]
    pub resource_aws_ec2_instance_type: Option<Vec<InsightStatusAtProviderFiltersResourceAwsEc2InstanceType>>,
    /// The identifier of the VPC that the instance was launched in. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsEc2InstanceVpcId")]
    #[builder(default)]
    pub resource_aws_ec2_instance_vpc_id: Option<Vec<InsightStatusAtProviderFiltersResourceAwsEc2InstanceVpcId>>,
    /// The creation date/time of the IAM access key related to a finding. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsIamAccessKeyCreatedAt")]
    #[builder(default)]
    pub resource_aws_iam_access_key_created_at: Option<Vec<InsightStatusAtProviderFiltersResourceAwsIamAccessKeyCreatedAt>>,
    /// The status of the IAM access key related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsIamAccessKeyStatus")]
    #[builder(default)]
    pub resource_aws_iam_access_key_status: Option<Vec<InsightStatusAtProviderFiltersResourceAwsIamAccessKeyStatus>>,
    /// The user associated with the IAM access key related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsIamAccessKeyUserName")]
    #[builder(default)]
    pub resource_aws_iam_access_key_user_name: Option<Vec<InsightStatusAtProviderFiltersResourceAwsIamAccessKeyUserName>>,
    /// The canonical user ID of the owner of the S3 bucket. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsS3BucketOwnerId")]
    #[builder(default)]
    pub resource_aws_s3_bucket_owner_id: Option<Vec<InsightStatusAtProviderFiltersResourceAwsS3BucketOwnerId>>,
    /// The display name of the owner of the S3 bucket. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceAwsS3BucketOwnerName")]
    #[builder(default)]
    pub resource_aws_s3_bucket_owner_name: Option<Vec<InsightStatusAtProviderFiltersResourceAwsS3BucketOwnerName>>,
    /// The identifier of the image related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerImageId")]
    #[builder(default)]
    pub resource_container_image_id: Option<Vec<InsightStatusAtProviderFiltersResourceContainerImageId>>,
    /// The name of the image related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerImageName")]
    #[builder(default)]
    pub resource_container_image_name: Option<Vec<InsightStatusAtProviderFiltersResourceContainerImageName>>,
    /// The date/time that the container was started. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerLaunchedAt")]
    #[builder(default)]
    pub resource_container_launched_at: Option<Vec<InsightStatusAtProviderFiltersResourceContainerLaunchedAt>>,
    /// The name of the container related to a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceContainerName")]
    #[builder(default)]
    pub resource_container_name: Option<Vec<InsightStatusAtProviderFiltersResourceContainerName>>,
    /// The details of a resource that doesn't have a specific subfield for the resource type defined. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceDetailsOther")]
    #[builder(default)]
    pub resource_details_other: Option<Vec<InsightStatusAtProviderFiltersResourceDetailsOther>>,
    /// The canonical identifier for the given resource type. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    #[builder(default)]
    pub resource_id: Option<Vec<InsightStatusAtProviderFiltersResourceId>>,
    /// The canonical AWS partition name that the Region is assigned to. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcePartition")]
    #[builder(default)]
    pub resource_partition: Option<Vec<InsightStatusAtProviderFiltersResourcePartition>>,
    /// The canonical AWS external Region name where this resource is located. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceRegion")]
    #[builder(default)]
    pub resource_region: Option<Vec<InsightStatusAtProviderFiltersResourceRegion>>,
    /// A list of AWS tags associated with a resource at the time the finding was processed. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTags")]
    #[builder(default)]
    pub resource_tags: Option<Vec<InsightStatusAtProviderFiltersResourceTags>>,
    /// Specifies the type of the resource that details are provided for. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    #[builder(default)]
    pub resource_type: Option<Vec<InsightStatusAtProviderFiltersResourceType>>,
    /// The label of a finding's severity. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "severityLabel")]
    #[builder(default)]
    pub severity_label: Option<Vec<InsightStatusAtProviderFiltersSeverityLabel>>,
    /// A URL that links to a page about the current finding in the security-findings provider's solution. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceUrl")]
    #[builder(default)]
    pub source_url: Option<Vec<InsightStatusAtProviderFiltersSourceUrl>>,
    /// The category of a threat intelligence indicator. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorCategory")]
    #[builder(default)]
    pub threat_intel_indicator_category: Option<Vec<InsightStatusAtProviderFiltersThreatIntelIndicatorCategory>>,
    /// The date/time of the last observation of a threat intelligence indicator. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorLastObservedAt")]
    #[builder(default)]
    pub threat_intel_indicator_last_observed_at: Option<Vec<InsightStatusAtProviderFiltersThreatIntelIndicatorLastObservedAt>>,
    /// The source of the threat intelligence. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorSource")]
    #[builder(default)]
    pub threat_intel_indicator_source: Option<Vec<InsightStatusAtProviderFiltersThreatIntelIndicatorSource>>,
    /// The URL for more details from the source of the threat intelligence. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorSourceUrl")]
    #[builder(default)]
    pub threat_intel_indicator_source_url: Option<Vec<InsightStatusAtProviderFiltersThreatIntelIndicatorSourceUrl>>,
    /// The type of a threat intelligence indicator. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorType")]
    #[builder(default)]
    pub threat_intel_indicator_type: Option<Vec<InsightStatusAtProviderFiltersThreatIntelIndicatorType>>,
    /// The value of a threat intelligence indicator. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threatIntelIndicatorValue")]
    #[builder(default)]
    pub threat_intel_indicator_value: Option<Vec<InsightStatusAtProviderFiltersThreatIntelIndicatorValue>>,
    /// A finding's title. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub title: Option<Vec<InsightStatusAtProviderFiltersTitle>>,
    /// A finding type in the format of namespace/category/classifier that classifies a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<Vec<InsightStatusAtProviderFiltersType>>,
    /// An ISO8601-formatted timestamp that indicates when the security-findings provider last updated the finding record. See Date Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatedAt")]
    #[builder(default)]
    pub updated_at: Option<Vec<InsightStatusAtProviderFiltersUpdatedAt>>,
    /// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. See Map Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDefinedValues")]
    #[builder(default)]
    pub user_defined_values: Option<Vec<InsightStatusAtProviderFiltersUserDefinedValues>>,
    /// The veracity of a finding. See String Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verificationState")]
    #[builder(default)]
    pub verification_state: Option<Vec<InsightStatusAtProviderFiltersVerificationState>>,
    /// The status of the investigation into a finding. See Workflow Status Filter below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowStatus")]
    #[builder(default)]
    pub workflow_status: Option<Vec<InsightStatusAtProviderFiltersWorkflowStatus>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersAwsAccountId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersCompanyName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersComplianceStatus {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersConfidence {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersCreatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersCreatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersCreatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersCriticality {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersDescription {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersFindingProviderFieldsConfidence {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersFindingProviderFieldsCriticality {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersFindingProviderFieldsRelatedFindingsId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersFindingProviderFieldsRelatedFindingsProductArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersFindingProviderFieldsSeverityLabel {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersFindingProviderFieldsSeverityOriginal {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersFindingProviderFieldsTypes {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersFirstObservedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersFirstObservedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersFirstObservedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersGeneratorId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersKeyword {
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersLastObservedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersLastObservedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersLastObservedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersMalwareName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersMalwarePath {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersMalwareState {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersMalwareType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkDestinationDomain {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkDestinationIpv4 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkDestinationIpv6 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkDestinationPort {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkDirection {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkProtocol {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkSourceDomain {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkSourceIpv4 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkSourceIpv6 {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkSourceMac {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNetworkSourcePort {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNoteText {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNoteUpdatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersNoteUpdatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNoteUpdatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersNoteUpdatedBy {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProcessLaunchedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersProcessLaunchedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProcessLaunchedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProcessName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProcessParentPid {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProcessPath {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProcessPid {
    /// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub eq: Option<String>,
    /// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gte: Option<String>,
    /// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub lte: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProcessTerminatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersProcessTerminatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProcessTerminatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProductArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProductFields {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersProductName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersRecommendationText {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersRecordState {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersRelatedFindingsId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersRelatedFindingsProductArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceIamInstanceProfileArn {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceImageId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceIpv4Addresses {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceIpv6Addresses {
    /// A finding's CIDR value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceKeyName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceLaunchedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersResourceAwsEc2InstanceLaunchedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceLaunchedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceSubnetId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsEc2InstanceVpcId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsIamAccessKeyCreatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersResourceAwsIamAccessKeyCreatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsIamAccessKeyCreatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsIamAccessKeyStatus {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsIamAccessKeyUserName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsS3BucketOwnerId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceAwsS3BucketOwnerName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceContainerImageId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceContainerImageName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceContainerLaunchedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersResourceContainerLaunchedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceContainerLaunchedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceContainerName {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceDetailsOther {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceId {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourcePartition {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceRegion {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceTags {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersResourceType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersSeverityLabel {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersSourceUrl {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersThreatIntelIndicatorCategory {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersThreatIntelIndicatorLastObservedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersThreatIntelIndicatorLastObservedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersThreatIntelIndicatorLastObservedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersThreatIntelIndicatorSource {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersThreatIntelIndicatorSourceUrl {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersThreatIntelIndicatorType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersThreatIntelIndicatorValue {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersTitle {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersType {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersUpdatedAt {
    /// A configuration block of the date range for the date filter. See date_range below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateRange")]
    #[builder(default)]
    pub date_range: Option<InsightStatusAtProviderFiltersUpdatedAtDateRange>,
    /// An end date for the date filter. Required with start if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub end: Option<String>,
    /// A start date for the date filter. Required with end if date_range is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub start: Option<String>,
}

/// A configuration block of the date range for the date filter. See date_range below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersUpdatedAtDateRange {
    /// A date range unit for the date filter. Valid values: DAYS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersUserDefinedValues {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// The key of the map filter. For example, for ResourceTags, Key identifies the name of the tag. For UserDefinedFields, Key is the name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersVerificationState {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct InsightStatusAtProviderFiltersWorkflowStatus {
    /// The condition to apply to a string value when querying for findings. Valid values include: EQUALS and NOT_EQUALS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comparison: Option<String>,
    /// A value for the keyword.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}


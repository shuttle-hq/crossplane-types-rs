// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// GlobalReplicationGroupSpec defines the desired state of GlobalReplicationGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "elasticache.aws.upbound.io", version = "v1beta1", kind = "GlobalReplicationGroup", plural = "globalreplicationgroups")]
#[kube(status = "GlobalReplicationGroupStatus")]
pub struct GlobalReplicationGroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<GlobalReplicationGroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: GlobalReplicationGroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<GlobalReplicationGroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<GlobalReplicationGroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<GlobalReplicationGroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<GlobalReplicationGroupWriteConnectionSecretToRef>,
}

/// GlobalReplicationGroupSpec defines the desired state of GlobalReplicationGroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupForProvider {
    /// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
    /// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticFailoverEnabled")]
    #[builder(default)]
    pub automatic_failover_enabled: Option<bool>,
    /// The instance class used.
    /// See AWS documentation for information on supported node types
    /// and guidance on selecting node types.
    /// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheNodeType")]
    #[builder(default)]
    pub cache_node_type: Option<String>,
    /// Redis version to use for the Global Replication Group.
    /// When creating, by default the Global Replication Group inherits the version of the primary replication group.
    /// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
    /// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
    /// When the version is 7 or higher, the major and minor version should be set, e.g., 7.2.
    /// When the version is 6, the major and minor version can be set, e.g., 6.2,
    /// or the minor version can be unspecified which will use the latest version at creation time, e.g., 6.x.
    /// The actual engine version used is returned in the attribute engine_version_actual, see Attribute Reference below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// created description for the global replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupDescription")]
    #[builder(default)]
    pub global_replication_group_description: Option<String>,
    /// –  The suffix name of a Global Datastore. If global_replication_group_id_suffix is changed, creates a new resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupIdSuffix")]
    #[builder(default)]
    pub global_replication_group_id_suffix: Option<String>,
    /// The number of node groups (shards) on the global replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numNodeGroups")]
    #[builder(default)]
    pub num_node_groups: Option<f64>,
    /// An ElastiCache Parameter Group to use for the Global Replication Group.
    /// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
    /// Specifying without a major version upgrade will fail.
    /// Note that ElastiCache creates a copy of this parameter group for each member replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupName")]
    #[builder(default)]
    pub parameter_group_name: Option<String>,
    /// –  The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If primary_replication_group_id is changed, creates a new resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryReplicationGroupId")]
    #[builder(default)]
    pub primary_replication_group_id: Option<String>,
    /// Reference to a ReplicationGroup in elasticache to populate primaryReplicationGroupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryReplicationGroupIdRef")]
    #[builder(default)]
    pub primary_replication_group_id_ref: Option<GlobalReplicationGroupForProviderPrimaryReplicationGroupIdRef>,
    /// Selector for a ReplicationGroup in elasticache to populate primaryReplicationGroupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryReplicationGroupIdSelector")]
    #[builder(default)]
    pub primary_replication_group_id_selector: Option<GlobalReplicationGroupForProviderPrimaryReplicationGroupIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// Reference to a ReplicationGroup in elasticache to populate primaryReplicationGroupId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupForProviderPrimaryReplicationGroupIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GlobalReplicationGroupForProviderPrimaryReplicationGroupIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupForProviderPrimaryReplicationGroupIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GlobalReplicationGroupForProviderPrimaryReplicationGroupIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GlobalReplicationGroupForProviderPrimaryReplicationGroupIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupForProviderPrimaryReplicationGroupIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupForProviderPrimaryReplicationGroupIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ReplicationGroup in elasticache to populate primaryReplicationGroupId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupForProviderPrimaryReplicationGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GlobalReplicationGroupForProviderPrimaryReplicationGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupForProviderPrimaryReplicationGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GlobalReplicationGroupForProviderPrimaryReplicationGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GlobalReplicationGroupForProviderPrimaryReplicationGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupForProviderPrimaryReplicationGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupForProviderPrimaryReplicationGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupInitProvider {
    /// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
    /// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticFailoverEnabled")]
    #[builder(default)]
    pub automatic_failover_enabled: Option<bool>,
    /// The instance class used.
    /// See AWS documentation for information on supported node types
    /// and guidance on selecting node types.
    /// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheNodeType")]
    #[builder(default)]
    pub cache_node_type: Option<String>,
    /// Redis version to use for the Global Replication Group.
    /// When creating, by default the Global Replication Group inherits the version of the primary replication group.
    /// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
    /// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
    /// When the version is 7 or higher, the major and minor version should be set, e.g., 7.2.
    /// When the version is 6, the major and minor version can be set, e.g., 6.2,
    /// or the minor version can be unspecified which will use the latest version at creation time, e.g., 6.x.
    /// The actual engine version used is returned in the attribute engine_version_actual, see Attribute Reference below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// created description for the global replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupDescription")]
    #[builder(default)]
    pub global_replication_group_description: Option<String>,
    /// –  The suffix name of a Global Datastore. If global_replication_group_id_suffix is changed, creates a new resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupIdSuffix")]
    #[builder(default)]
    pub global_replication_group_id_suffix: Option<String>,
    /// The number of node groups (shards) on the global replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numNodeGroups")]
    #[builder(default)]
    pub num_node_groups: Option<f64>,
    /// An ElastiCache Parameter Group to use for the Global Replication Group.
    /// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
    /// Specifying without a major version upgrade will fail.
    /// Note that ElastiCache creates a copy of this parameter group for each member replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupName")]
    #[builder(default)]
    pub parameter_group_name: Option<String>,
    /// –  The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If primary_replication_group_id is changed, creates a new resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryReplicationGroupId")]
    #[builder(default)]
    pub primary_replication_group_id: Option<String>,
    /// Reference to a ReplicationGroup in elasticache to populate primaryReplicationGroupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryReplicationGroupIdRef")]
    #[builder(default)]
    pub primary_replication_group_id_ref: Option<GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdRef>,
    /// Selector for a ReplicationGroup in elasticache to populate primaryReplicationGroupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryReplicationGroupIdSelector")]
    #[builder(default)]
    pub primary_replication_group_id_selector: Option<GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdSelector>,
}

/// Reference to a ReplicationGroup in elasticache to populate primaryReplicationGroupId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ReplicationGroup in elasticache to populate primaryReplicationGroupId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupInitProviderPrimaryReplicationGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GlobalReplicationGroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GlobalReplicationGroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GlobalReplicationGroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<GlobalReplicationGroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<GlobalReplicationGroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<GlobalReplicationGroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<GlobalReplicationGroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<GlobalReplicationGroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GlobalReplicationGroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// GlobalReplicationGroupStatus defines the observed state of GlobalReplicationGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<GlobalReplicationGroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupStatusAtProvider {
    /// The ARN of the ElastiCache Global Replication Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// A flag that indicate whether the encryption at rest is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atRestEncryptionEnabled")]
    #[builder(default)]
    pub at_rest_encryption_enabled: Option<bool>,
    /// A flag that indicate whether AuthToken (password) is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTokenEnabled")]
    #[builder(default)]
    pub auth_token_enabled: Option<bool>,
    /// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
    /// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticFailoverEnabled")]
    #[builder(default)]
    pub automatic_failover_enabled: Option<bool>,
    /// The instance class used.
    /// See AWS documentation for information on supported node types
    /// and guidance on selecting node types.
    /// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheNodeType")]
    #[builder(default)]
    pub cache_node_type: Option<String>,
    /// Indicates whether the Global Datastore is cluster enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterEnabled")]
    #[builder(default)]
    pub cluster_enabled: Option<bool>,
    /// The name of the cache engine to be used for the clusters in this global replication group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub engine: Option<String>,
    /// Redis version to use for the Global Replication Group.
    /// When creating, by default the Global Replication Group inherits the version of the primary replication group.
    /// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
    /// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
    /// When the version is 7 or higher, the major and minor version should be set, e.g., 7.2.
    /// When the version is 6, the major and minor version can be set, e.g., 6.2,
    /// or the minor version can be unspecified which will use the latest version at creation time, e.g., 6.x.
    /// The actual engine version used is returned in the attribute engine_version_actual, see Attribute Reference below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    #[builder(default)]
    pub engine_version: Option<String>,
    /// The full version number of the cache engine running on the members of this global replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersionActual")]
    #[builder(default)]
    pub engine_version_actual: Option<String>,
    /// Set of node groups (shards) on the global replication group.
    /// Has the values:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalNodeGroups")]
    #[builder(default)]
    pub global_node_groups: Option<Vec<GlobalReplicationGroupStatusAtProviderGlobalNodeGroups>>,
    /// created description for the global replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupDescription")]
    #[builder(default)]
    pub global_replication_group_description: Option<String>,
    /// The full ID of the global replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupId")]
    #[builder(default)]
    pub global_replication_group_id: Option<String>,
    /// –  The suffix name of a Global Datastore. If global_replication_group_id_suffix is changed, creates a new resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupIdSuffix")]
    #[builder(default)]
    pub global_replication_group_id_suffix: Option<String>,
    /// The ID of the ElastiCache Global Replication Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The number of node groups (shards) on the global replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numNodeGroups")]
    #[builder(default)]
    pub num_node_groups: Option<f64>,
    /// An ElastiCache Parameter Group to use for the Global Replication Group.
    /// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
    /// Specifying without a major version upgrade will fail.
    /// Note that ElastiCache creates a copy of this parameter group for each member replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupName")]
    #[builder(default)]
    pub parameter_group_name: Option<String>,
    /// –  The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If primary_replication_group_id is changed, creates a new resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryReplicationGroupId")]
    #[builder(default)]
    pub primary_replication_group_id: Option<String>,
    /// A flag that indicates whether the encryption in transit is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitEncryptionEnabled")]
    #[builder(default)]
    pub transit_encryption_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct GlobalReplicationGroupStatusAtProviderGlobalNodeGroups {
    /// The ID of the global node group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalNodeGroupId")]
    #[builder(default)]
    pub global_node_group_id: Option<String>,
    /// The keyspace for this node group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slots: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AttestorSpec defines the desired state of Attestor
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "binaryauthorization.gcp.upbound.io",
    version = "v1beta2",
    kind = "Attestor",
    plural = "attestors"
)]
#[kube(status = "AttestorStatus")]
pub struct AttestorSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<AttestorDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AttestorForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<AttestorInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<AttestorProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<AttestorPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<AttestorWriteConnectionSecretToRef>,
}

/// AttestorSpec defines the desired state of Attestor
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorForProvider {
    /// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "attestationAuthorityNote"
    )]
    #[builder(default)]
    pub attestation_authority_note: Option<AttestorForProviderAttestationAuthorityNote>,
    /// A descriptive comment. This field may be updated. The field may be
    /// displayed in chooser dialogs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorForProviderAttestationAuthorityNote {
    /// The resource name of a ATTESTATION_AUTHORITY Note, created by the
    /// user. If the Note is in a different project from the Attestor, it
    /// should be specified in the format projects/*/notes/* (or the legacy
    /// providers/*/notes/*). This field may not be updated.
    /// An attestation by this attestor is stored as a Container Analysis
    /// ATTESTATION_AUTHORITY Occurrence that names a container image
    /// and that links to this Note.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteReference"
    )]
    #[builder(default)]
    pub note_reference: Option<String>,
    /// Reference to a Note in containeranalysis to populate noteReference.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteReferenceRef"
    )]
    #[builder(default)]
    pub note_reference_ref: Option<AttestorForProviderAttestationAuthorityNoteNoteReferenceRef>,
    /// Selector for a Note in containeranalysis to populate noteReference.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteReferenceSelector"
    )]
    #[builder(default)]
    pub note_reference_selector:
        Option<AttestorForProviderAttestationAuthorityNoteNoteReferenceSelector>,
    /// Public keys that verify attestations signed by this attestor. This
    /// field may be updated.
    /// If this field is non-empty, one of the specified public keys must
    /// verify that an attestation was signed by this attestor for the
    /// image specified in the admission request.
    /// If this field is empty, this attestor always returns that no valid
    /// attestations exist.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicKeys"
    )]
    #[builder(default)]
    pub public_keys: Option<Vec<AttestorForProviderAttestationAuthorityNotePublicKeys>>,
}

/// Reference to a Note in containeranalysis to populate noteReference.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorForProviderAttestationAuthorityNoteNoteReferenceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AttestorForProviderAttestationAuthorityNoteNoteReferenceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorForProviderAttestationAuthorityNoteNoteReferenceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<AttestorForProviderAttestationAuthorityNoteNoteReferenceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AttestorForProviderAttestationAuthorityNoteNoteReferenceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorForProviderAttestationAuthorityNoteNoteReferenceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorForProviderAttestationAuthorityNoteNoteReferenceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Note in containeranalysis to populate noteReference.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorForProviderAttestationAuthorityNoteNoteReferenceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AttestorForProviderAttestationAuthorityNoteNoteReferenceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorForProviderAttestationAuthorityNoteNoteReferenceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<AttestorForProviderAttestationAuthorityNoteNoteReferenceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<AttestorForProviderAttestationAuthorityNoteNoteReferenceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorForProviderAttestationAuthorityNoteNoteReferenceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorForProviderAttestationAuthorityNoteNoteReferenceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorForProviderAttestationAuthorityNotePublicKeys {
    /// ASCII-armored representation of a PGP public key, as the
    /// entire output by the command
    /// gpg --export --armor foo@example.com (either LF or CRLF
    /// line endings). When using this field, id should be left
    /// blank. The BinAuthz API handlers will calculate the ID
    /// and fill it in automatically. BinAuthz computes this ID
    /// as the OpenPGP RFC4880 V4 fingerprint, represented as
    /// upper-case hex. If id is provided by the caller, it will
    /// be overwritten by the API-calculated ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "asciiArmoredPgpPublicKey"
    )]
    #[builder(default)]
    pub ascii_armored_pgp_public_key: Option<String>,
    /// A descriptive comment. This field may be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comment: Option<String>,
    /// The ID of this public key. Signatures verified by BinAuthz
    /// must include the ID of the public key that can be used to
    /// verify them, and that ID must match the contents of this
    /// field exactly. Additional restrictions on this field can
    /// be imposed based on which public key type is encapsulated.
    /// See the documentation on publicKey cases below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// A raw PKIX SubjectPublicKeyInfo format public key.
    /// NOTE: id may be explicitly provided by the caller when using this
    /// type of public key, but it MUST be a valid RFC3986 URI. If id is left
    /// blank, a default one will be computed based on the digest of the DER
    /// encoding of the public key.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pkixPublicKey"
    )]
    #[builder(default)]
    pub pkix_public_key: Option<AttestorForProviderAttestationAuthorityNotePublicKeysPkixPublicKey>,
}

/// A raw PKIX SubjectPublicKeyInfo format public key.
/// NOTE: id may be explicitly provided by the caller when using this
/// type of public key, but it MUST be a valid RFC3986 URI. If id is left
/// blank, a default one will be computed based on the digest of the DER
/// encoding of the public key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorForProviderAttestationAuthorityNotePublicKeysPkixPublicKey {
    /// A PEM-encoded public key, as described in
    /// https://tools.ietf.org/html/rfc7468#section-13
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicKeyPem"
    )]
    #[builder(default)]
    pub public_key_pem: Option<String>,
    /// The signature algorithm used to verify a message against
    /// a signature using this key. These signature algorithm must
    /// match the structure and any object identifiers encoded in
    /// publicKeyPem (i.e. this algorithm must match that of the
    /// public key).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureAlgorithm"
    )]
    #[builder(default)]
    pub signature_algorithm: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorInitProvider {
    /// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "attestationAuthorityNote"
    )]
    #[builder(default)]
    pub attestation_authority_note: Option<AttestorInitProviderAttestationAuthorityNote>,
    /// A descriptive comment. This field may be updated. The field may be
    /// displayed in chooser dialogs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorInitProviderAttestationAuthorityNote {
    /// The resource name of a ATTESTATION_AUTHORITY Note, created by the
    /// user. If the Note is in a different project from the Attestor, it
    /// should be specified in the format projects/*/notes/* (or the legacy
    /// providers/*/notes/*). This field may not be updated.
    /// An attestation by this attestor is stored as a Container Analysis
    /// ATTESTATION_AUTHORITY Occurrence that names a container image
    /// and that links to this Note.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteReference"
    )]
    #[builder(default)]
    pub note_reference: Option<String>,
    /// Reference to a Note in containeranalysis to populate noteReference.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteReferenceRef"
    )]
    #[builder(default)]
    pub note_reference_ref: Option<AttestorInitProviderAttestationAuthorityNoteNoteReferenceRef>,
    /// Selector for a Note in containeranalysis to populate noteReference.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteReferenceSelector"
    )]
    #[builder(default)]
    pub note_reference_selector:
        Option<AttestorInitProviderAttestationAuthorityNoteNoteReferenceSelector>,
    /// Public keys that verify attestations signed by this attestor. This
    /// field may be updated.
    /// If this field is non-empty, one of the specified public keys must
    /// verify that an attestation was signed by this attestor for the
    /// image specified in the admission request.
    /// If this field is empty, this attestor always returns that no valid
    /// attestations exist.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicKeys"
    )]
    #[builder(default)]
    pub public_keys: Option<Vec<AttestorInitProviderAttestationAuthorityNotePublicKeys>>,
}

/// Reference to a Note in containeranalysis to populate noteReference.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorInitProviderAttestationAuthorityNoteNoteReferenceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AttestorInitProviderAttestationAuthorityNoteNoteReferenceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorInitProviderAttestationAuthorityNoteNoteReferenceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<AttestorInitProviderAttestationAuthorityNoteNoteReferenceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AttestorInitProviderAttestationAuthorityNoteNoteReferenceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorInitProviderAttestationAuthorityNoteNoteReferenceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorInitProviderAttestationAuthorityNoteNoteReferenceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Note in containeranalysis to populate noteReference.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorInitProviderAttestationAuthorityNoteNoteReferenceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AttestorInitProviderAttestationAuthorityNoteNoteReferenceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorInitProviderAttestationAuthorityNoteNoteReferenceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<AttestorInitProviderAttestationAuthorityNoteNoteReferenceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<AttestorInitProviderAttestationAuthorityNoteNoteReferenceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorInitProviderAttestationAuthorityNoteNoteReferenceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorInitProviderAttestationAuthorityNoteNoteReferenceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorInitProviderAttestationAuthorityNotePublicKeys {
    /// ASCII-armored representation of a PGP public key, as the
    /// entire output by the command
    /// gpg --export --armor foo@example.com (either LF or CRLF
    /// line endings). When using this field, id should be left
    /// blank. The BinAuthz API handlers will calculate the ID
    /// and fill it in automatically. BinAuthz computes this ID
    /// as the OpenPGP RFC4880 V4 fingerprint, represented as
    /// upper-case hex. If id is provided by the caller, it will
    /// be overwritten by the API-calculated ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "asciiArmoredPgpPublicKey"
    )]
    #[builder(default)]
    pub ascii_armored_pgp_public_key: Option<String>,
    /// A descriptive comment. This field may be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comment: Option<String>,
    /// The ID of this public key. Signatures verified by BinAuthz
    /// must include the ID of the public key that can be used to
    /// verify them, and that ID must match the contents of this
    /// field exactly. Additional restrictions on this field can
    /// be imposed based on which public key type is encapsulated.
    /// See the documentation on publicKey cases below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// A raw PKIX SubjectPublicKeyInfo format public key.
    /// NOTE: id may be explicitly provided by the caller when using this
    /// type of public key, but it MUST be a valid RFC3986 URI. If id is left
    /// blank, a default one will be computed based on the digest of the DER
    /// encoding of the public key.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pkixPublicKey"
    )]
    #[builder(default)]
    pub pkix_public_key:
        Option<AttestorInitProviderAttestationAuthorityNotePublicKeysPkixPublicKey>,
}

/// A raw PKIX SubjectPublicKeyInfo format public key.
/// NOTE: id may be explicitly provided by the caller when using this
/// type of public key, but it MUST be a valid RFC3986 URI. If id is left
/// blank, a default one will be computed based on the digest of the DER
/// encoding of the public key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorInitProviderAttestationAuthorityNotePublicKeysPkixPublicKey {
    /// A PEM-encoded public key, as described in
    /// https://tools.ietf.org/html/rfc7468#section-13
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicKeyPem"
    )]
    #[builder(default)]
    pub public_key_pem: Option<String>,
    /// The signature algorithm used to verify a message against
    /// a signature using this key. These signature algorithm must
    /// match the structure and any object identifiers encoded in
    /// publicKeyPem (i.e. this algorithm must match that of the
    /// public key).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureAlgorithm"
    )]
    #[builder(default)]
    pub signature_algorithm: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AttestorProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AttestorProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AttestorProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<AttestorPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<AttestorPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AttestorPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AttestorPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AttestorPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AttestorPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AttestorStatus defines the observed state of Attestor.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<AttestorStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorStatusAtProvider {
    /// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "attestationAuthorityNote"
    )]
    #[builder(default)]
    pub attestation_authority_note: Option<AttestorStatusAtProviderAttestationAuthorityNote>,
    /// A descriptive comment. This field may be updated. The field may be
    /// displayed in chooser dialogs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/attestors/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
}

/// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorStatusAtProviderAttestationAuthorityNote {
    /// (Output)
    /// This field will contain the service account email address that
    /// this Attestor will use as the principal when querying Container
    /// Analysis. Attestor administrators must grant this service account
    /// the IAM role needed to read attestations from the noteReference in
    /// Container Analysis (containeranalysis.notes.occurrences.viewer).
    /// This email address is fixed for the lifetime of the Attestor, but
    /// callers should not make any other assumptions about the service
    /// account email; future versions may use an email based on a
    /// different naming pattern.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "delegationServiceAccountEmail"
    )]
    #[builder(default)]
    pub delegation_service_account_email: Option<String>,
    /// The resource name of a ATTESTATION_AUTHORITY Note, created by the
    /// user. If the Note is in a different project from the Attestor, it
    /// should be specified in the format projects/*/notes/* (or the legacy
    /// providers/*/notes/*). This field may not be updated.
    /// An attestation by this attestor is stored as a Container Analysis
    /// ATTESTATION_AUTHORITY Occurrence that names a container image
    /// and that links to this Note.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteReference"
    )]
    #[builder(default)]
    pub note_reference: Option<String>,
    /// Public keys that verify attestations signed by this attestor. This
    /// field may be updated.
    /// If this field is non-empty, one of the specified public keys must
    /// verify that an attestation was signed by this attestor for the
    /// image specified in the admission request.
    /// If this field is empty, this attestor always returns that no valid
    /// attestations exist.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicKeys"
    )]
    #[builder(default)]
    pub public_keys: Option<Vec<AttestorStatusAtProviderAttestationAuthorityNotePublicKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorStatusAtProviderAttestationAuthorityNotePublicKeys {
    /// ASCII-armored representation of a PGP public key, as the
    /// entire output by the command
    /// gpg --export --armor foo@example.com (either LF or CRLF
    /// line endings). When using this field, id should be left
    /// blank. The BinAuthz API handlers will calculate the ID
    /// and fill it in automatically. BinAuthz computes this ID
    /// as the OpenPGP RFC4880 V4 fingerprint, represented as
    /// upper-case hex. If id is provided by the caller, it will
    /// be overwritten by the API-calculated ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "asciiArmoredPgpPublicKey"
    )]
    #[builder(default)]
    pub ascii_armored_pgp_public_key: Option<String>,
    /// A descriptive comment. This field may be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub comment: Option<String>,
    /// The ID of this public key. Signatures verified by BinAuthz
    /// must include the ID of the public key that can be used to
    /// verify them, and that ID must match the contents of this
    /// field exactly. Additional restrictions on this field can
    /// be imposed based on which public key type is encapsulated.
    /// See the documentation on publicKey cases below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// A raw PKIX SubjectPublicKeyInfo format public key.
    /// NOTE: id may be explicitly provided by the caller when using this
    /// type of public key, but it MUST be a valid RFC3986 URI. If id is left
    /// blank, a default one will be computed based on the digest of the DER
    /// encoding of the public key.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pkixPublicKey"
    )]
    #[builder(default)]
    pub pkix_public_key:
        Option<AttestorStatusAtProviderAttestationAuthorityNotePublicKeysPkixPublicKey>,
}

/// A raw PKIX SubjectPublicKeyInfo format public key.
/// NOTE: id may be explicitly provided by the caller when using this
/// type of public key, but it MUST be a valid RFC3986 URI. If id is left
/// blank, a default one will be computed based on the digest of the DER
/// encoding of the public key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AttestorStatusAtProviderAttestationAuthorityNotePublicKeysPkixPublicKey {
    /// A PEM-encoded public key, as described in
    /// https://tools.ietf.org/html/rfc7468#section-13
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicKeyPem"
    )]
    #[builder(default)]
    pub public_key_pem: Option<String>,
    /// The signature algorithm used to verify a message against
    /// a signature using this key. These signature algorithm must
    /// match the structure and any object identifiers encoded in
    /// publicKeyPem (i.e. this algorithm must match that of the
    /// public key).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureAlgorithm"
    )]
    #[builder(default)]
    pub signature_algorithm: Option<String>,
}

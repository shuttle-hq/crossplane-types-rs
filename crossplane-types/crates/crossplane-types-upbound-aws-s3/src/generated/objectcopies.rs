// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ObjectCopySpec defines the desired state of ObjectCopy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "s3.aws.upbound.io", version = "v1beta1", kind = "ObjectCopy", plural = "objectcopies")]
#[kube(status = "ObjectCopyStatus")]
pub struct ObjectCopySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<ObjectCopyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ObjectCopyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<ObjectCopyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<ObjectCopyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<ObjectCopyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ObjectCopyWriteConnectionSecretToRef>,
}

/// ObjectCopySpec defines the desired state of ObjectCopy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectCopyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyForProvider {
    /// Canned ACL to apply. Valid values are private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, and bucket-owner-full-control. Conflicts with grant.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub acl: Option<String>,
    /// Name of the bucket to put the file in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketKeyEnabled")]
    #[builder(default)]
    pub bucket_key_enabled: Option<bool>,
    /// Specifies caching behavior along the request/reply chain Read w3c cache_control for further details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheControl")]
    #[builder(default)]
    pub cache_control: Option<String>,
    /// Indicates the algorithm used to create the checksum for the object. If a value is specified and the object is encrypted with KMS, you must have permission to use the kms:Decrypt action. Valid values: CRC32, CRC32C, SHA1, SHA256.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumAlgorithm")]
    #[builder(default)]
    pub checksum_algorithm: Option<String>,
    /// Specifies presentational information for the object. Read w3c content_disposition for further information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDisposition")]
    #[builder(default)]
    pub content_disposition: Option<String>,
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read w3c content encoding for further information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentEncoding")]
    #[builder(default)]
    pub content_encoding: Option<String>,
    /// Language the content is in e.g., en-US or en-GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentLanguage")]
    #[builder(default)]
    pub content_language: Option<String>,
    /// Standard MIME type describing the format of the object data, e.g., application/octet-stream. All Valid MIME Types are valid for this input.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Copies the object if its entity tag (ETag) matches the specified tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfMatch")]
    #[builder(default)]
    pub copy_if_match: Option<String>,
    /// Copies the object if it has been modified since the specified time, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfModifiedSince")]
    #[builder(default)]
    pub copy_if_modified_since: Option<String>,
    /// Copies the object if its entity tag (ETag) is different than the specified ETag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfNoneMatch")]
    #[builder(default)]
    pub copy_if_none_match: Option<String>,
    /// Copies the object if it hasn't been modified since the specified time, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfUnmodifiedSince")]
    #[builder(default)]
    pub copy_if_unmodified_since: Option<String>,
    /// Specifies the algorithm to use to when encrypting the object (for example, AES256).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerAlgorithm")]
    #[builder(default)]
    pub customer_algorithm: Option<String>,
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerKeyMd5")]
    #[builder(default)]
    pub customer_key_md5: Option<String>,
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerKeySecretRef")]
    #[builder(default)]
    pub customer_key_secret_ref: Option<ObjectCopyForProviderCustomerKeySecretRef>,
    /// Account id of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedBucketOwner")]
    #[builder(default)]
    pub expected_bucket_owner: Option<String>,
    /// Account id of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedSourceBucketOwner")]
    #[builder(default)]
    pub expected_source_bucket_owner: Option<String>,
    /// Date and time at which the object is no longer cacheable, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expires: Option<String>,
    /// Allow the object to be deleted by removing any legal hold on any object version. Default is false. This value should be set to true only if the bucket has S3 object lock enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// Configuration block for header grants. Documented below. Conflicts with acl.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grant: Option<Vec<ObjectCopyForProviderGrant>>,
    /// Name of the object once it is in the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// Specifies the AWS KMS Encryption Context to use for object encryption. The value is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsEncryptionContextSecretRef")]
    #[builder(default)]
    pub kms_encryption_context_secret_ref: Option<ObjectCopyForProviderKmsEncryptionContextSecretRef>,
    /// Specifies the AWS KMS Key ARN to use for object encryption. This value is a fully qualified ARN of the KMS Key. If using aws_kms_key, use the exported arn attribute: kms_key_id = aws_kms_key.foo.arn
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdSecretRef")]
    #[builder(default)]
    pub kms_key_id_secret_ref: Option<ObjectCopyForProviderKmsKeyIdSecretRef>,
    /// Map of keys/values to provision metadata (will be automatically prefixed by x-amz-meta-, note that only lowercase label are currently supported by the AWS Go API).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<HashMap<String, String>>,
    /// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are COPY and REPLACE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataDirective")]
    #[builder(default)]
    pub metadata_directive: Option<String>,
    /// The legal hold status that you want to apply to the specified object. Valid values are ON and OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockLegalHoldStatus")]
    #[builder(default)]
    pub object_lock_legal_hold_status: Option<String>,
    /// Object lock retention mode that you want to apply to this object. Valid values are GOVERNANCE and COMPLIANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockMode")]
    #[builder(default)]
    pub object_lock_mode: Option<String>,
    /// Date and time, in RFC3339 format, when this object's object lock will expire.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockRetainUntilDate")]
    #[builder(default)]
    pub object_lock_retain_until_date: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. For information about downloading objects from requester pays buckets, see Downloading Objects in Requestor Pays Buckets (https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 Developer Guide. If included, the only valid value is requester.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestPayer")]
    #[builder(default)]
    pub request_payer: Option<String>,
    /// Specifies server-side encryption of the object in S3. Valid values are AES256 and aws:kms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryption")]
    #[builder(default)]
    pub server_side_encryption: Option<String>,
    /// Specifies the source object for the copy operation. You specify the value in one of two formats. For objects not accessed through an access point, specify the name of the source bucket and the key of the source object, separated by a slash (/). For example, testbucket/test1.json. For objects accessed through access points, specify the ARN of the object as accessed through the access point, in the format arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key>. For example, arn:aws:s3:us-west-2:9999912999:accesspoint/my-access-point/object/testbucket/test1.json.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
    /// Specifies the algorithm to use when decrypting the source object (for example, AES256).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCustomerAlgorithm")]
    #[builder(default)]
    pub source_customer_algorithm: Option<String>,
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCustomerKeyMd5")]
    #[builder(default)]
    pub source_customer_key_md5: Option<String>,
    /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCustomerKeySecretRef")]
    #[builder(default)]
    pub source_customer_key_secret_ref: Option<ObjectCopyForProviderSourceCustomerKeySecretRef>,
    /// Specifies the desired storage class for the object. Defaults to STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    #[builder(default)]
    pub storage_class: Option<String>,
    /// Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request. Valid values are COPY and REPLACE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taggingDirective")]
    #[builder(default)]
    pub tagging_directive: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Specifies a target URL for website redirect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "websiteRedirect")]
    #[builder(default)]
    pub website_redirect: Option<String>,
}

/// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyForProviderCustomerKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyForProviderGrant {
    /// Email address of the grantee. Used only when type is AmazonCustomerByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub email: Option<String>,
    /// Canonical user ID of the grantee. Used only when type is CanonicalUser.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// List of permissions to grant to grantee. Valid values are READ, READ_ACP, WRITE_ACP, FULL_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub permissions: Option<Vec<String>>,
    /// - Type of grantee. Valid values are CanonicalUser, Group, and AmazonCustomerByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// URI of the grantee group. Used only when type is Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specifies the AWS KMS Encryption Context to use for object encryption. The value is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyForProviderKmsEncryptionContextSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Specifies the AWS KMS Key ARN to use for object encryption. This value is a fully qualified ARN of the KMS Key. If using aws_kms_key, use the exported arn attribute: kms_key_id = aws_kms_key.foo.arn
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyForProviderKmsKeyIdSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyForProviderSourceCustomerKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyInitProvider {
    /// Canned ACL to apply. Valid values are private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, and bucket-owner-full-control. Conflicts with grant.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub acl: Option<String>,
    /// Name of the bucket to put the file in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketKeyEnabled")]
    #[builder(default)]
    pub bucket_key_enabled: Option<bool>,
    /// Specifies caching behavior along the request/reply chain Read w3c cache_control for further details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheControl")]
    #[builder(default)]
    pub cache_control: Option<String>,
    /// Indicates the algorithm used to create the checksum for the object. If a value is specified and the object is encrypted with KMS, you must have permission to use the kms:Decrypt action. Valid values: CRC32, CRC32C, SHA1, SHA256.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumAlgorithm")]
    #[builder(default)]
    pub checksum_algorithm: Option<String>,
    /// Specifies presentational information for the object. Read w3c content_disposition for further information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDisposition")]
    #[builder(default)]
    pub content_disposition: Option<String>,
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read w3c content encoding for further information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentEncoding")]
    #[builder(default)]
    pub content_encoding: Option<String>,
    /// Language the content is in e.g., en-US or en-GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentLanguage")]
    #[builder(default)]
    pub content_language: Option<String>,
    /// Standard MIME type describing the format of the object data, e.g., application/octet-stream. All Valid MIME Types are valid for this input.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Copies the object if its entity tag (ETag) matches the specified tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfMatch")]
    #[builder(default)]
    pub copy_if_match: Option<String>,
    /// Copies the object if it has been modified since the specified time, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfModifiedSince")]
    #[builder(default)]
    pub copy_if_modified_since: Option<String>,
    /// Copies the object if its entity tag (ETag) is different than the specified ETag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfNoneMatch")]
    #[builder(default)]
    pub copy_if_none_match: Option<String>,
    /// Copies the object if it hasn't been modified since the specified time, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfUnmodifiedSince")]
    #[builder(default)]
    pub copy_if_unmodified_since: Option<String>,
    /// Specifies the algorithm to use to when encrypting the object (for example, AES256).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerAlgorithm")]
    #[builder(default)]
    pub customer_algorithm: Option<String>,
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerKeyMd5")]
    #[builder(default)]
    pub customer_key_md5: Option<String>,
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerKeySecretRef")]
    #[builder(default)]
    pub customer_key_secret_ref: Option<ObjectCopyInitProviderCustomerKeySecretRef>,
    /// Account id of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedBucketOwner")]
    #[builder(default)]
    pub expected_bucket_owner: Option<String>,
    /// Account id of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedSourceBucketOwner")]
    #[builder(default)]
    pub expected_source_bucket_owner: Option<String>,
    /// Date and time at which the object is no longer cacheable, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expires: Option<String>,
    /// Allow the object to be deleted by removing any legal hold on any object version. Default is false. This value should be set to true only if the bucket has S3 object lock enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// Configuration block for header grants. Documented below. Conflicts with acl.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grant: Option<Vec<ObjectCopyInitProviderGrant>>,
    /// Name of the object once it is in the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// Specifies the AWS KMS Encryption Context to use for object encryption. The value is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsEncryptionContextSecretRef")]
    #[builder(default)]
    pub kms_encryption_context_secret_ref: Option<ObjectCopyInitProviderKmsEncryptionContextSecretRef>,
    /// Specifies the AWS KMS Key ARN to use for object encryption. This value is a fully qualified ARN of the KMS Key. If using aws_kms_key, use the exported arn attribute: kms_key_id = aws_kms_key.foo.arn
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdSecretRef")]
    #[builder(default)]
    pub kms_key_id_secret_ref: Option<ObjectCopyInitProviderKmsKeyIdSecretRef>,
    /// Map of keys/values to provision metadata (will be automatically prefixed by x-amz-meta-, note that only lowercase label are currently supported by the AWS Go API).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<HashMap<String, String>>,
    /// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are COPY and REPLACE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataDirective")]
    #[builder(default)]
    pub metadata_directive: Option<String>,
    /// The legal hold status that you want to apply to the specified object. Valid values are ON and OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockLegalHoldStatus")]
    #[builder(default)]
    pub object_lock_legal_hold_status: Option<String>,
    /// Object lock retention mode that you want to apply to this object. Valid values are GOVERNANCE and COMPLIANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockMode")]
    #[builder(default)]
    pub object_lock_mode: Option<String>,
    /// Date and time, in RFC3339 format, when this object's object lock will expire.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockRetainUntilDate")]
    #[builder(default)]
    pub object_lock_retain_until_date: Option<String>,
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. For information about downloading objects from requester pays buckets, see Downloading Objects in Requestor Pays Buckets (https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 Developer Guide. If included, the only valid value is requester.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestPayer")]
    #[builder(default)]
    pub request_payer: Option<String>,
    /// Specifies server-side encryption of the object in S3. Valid values are AES256 and aws:kms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryption")]
    #[builder(default)]
    pub server_side_encryption: Option<String>,
    /// Specifies the source object for the copy operation. You specify the value in one of two formats. For objects not accessed through an access point, specify the name of the source bucket and the key of the source object, separated by a slash (/). For example, testbucket/test1.json. For objects accessed through access points, specify the ARN of the object as accessed through the access point, in the format arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key>. For example, arn:aws:s3:us-west-2:9999912999:accesspoint/my-access-point/object/testbucket/test1.json.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
    /// Specifies the algorithm to use when decrypting the source object (for example, AES256).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCustomerAlgorithm")]
    #[builder(default)]
    pub source_customer_algorithm: Option<String>,
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCustomerKeyMd5")]
    #[builder(default)]
    pub source_customer_key_md5: Option<String>,
    /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCustomerKeySecretRef")]
    #[builder(default)]
    pub source_customer_key_secret_ref: Option<ObjectCopyInitProviderSourceCustomerKeySecretRef>,
    /// Specifies the desired storage class for the object. Defaults to STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    #[builder(default)]
    pub storage_class: Option<String>,
    /// Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request. Valid values are COPY and REPLACE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taggingDirective")]
    #[builder(default)]
    pub tagging_directive: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Specifies a target URL for website redirect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "websiteRedirect")]
    #[builder(default)]
    pub website_redirect: Option<String>,
}

/// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyInitProviderCustomerKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyInitProviderGrant {
    /// Email address of the grantee. Used only when type is AmazonCustomerByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub email: Option<String>,
    /// Canonical user ID of the grantee. Used only when type is CanonicalUser.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// List of permissions to grant to grantee. Valid values are READ, READ_ACP, WRITE_ACP, FULL_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub permissions: Option<Vec<String>>,
    /// - Type of grantee. Valid values are CanonicalUser, Group, and AmazonCustomerByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// URI of the grantee group. Used only when type is Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Specifies the AWS KMS Encryption Context to use for object encryption. The value is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyInitProviderKmsEncryptionContextSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Specifies the AWS KMS Key ARN to use for object encryption. This value is a fully qualified ARN of the KMS Key. If using aws_kms_key, use the exported arn attribute: kms_key_id = aws_kms_key.foo.arn
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyInitProviderKmsKeyIdSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyInitProviderSourceCustomerKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ObjectCopyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ObjectCopyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ObjectCopyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectCopyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectCopyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ObjectCopyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ObjectCopyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ObjectCopyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ObjectCopyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ObjectCopyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectCopyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectCopyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ObjectCopyStatus defines the observed state of ObjectCopy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<ObjectCopyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyStatusAtProvider {
    /// Canned ACL to apply. Valid values are private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, and bucket-owner-full-control. Conflicts with grant.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub acl: Option<String>,
    /// ARN of the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Name of the bucket to put the file in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketKeyEnabled")]
    #[builder(default)]
    pub bucket_key_enabled: Option<bool>,
    /// Specifies caching behavior along the request/reply chain Read w3c cache_control for further details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheControl")]
    #[builder(default)]
    pub cache_control: Option<String>,
    /// Indicates the algorithm used to create the checksum for the object. If a value is specified and the object is encrypted with KMS, you must have permission to use the kms:Decrypt action. Valid values: CRC32, CRC32C, SHA1, SHA256.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumAlgorithm")]
    #[builder(default)]
    pub checksum_algorithm: Option<String>,
    /// The base64-encoded, 32-bit CRC32 checksum of the object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumCrc32")]
    #[builder(default)]
    pub checksum_crc32: Option<String>,
    /// The base64-encoded, 32-bit CRC32C checksum of the object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumCrc32C")]
    #[builder(default)]
    pub checksum_crc32_c: Option<String>,
    /// The base64-encoded, 160-bit SHA-1 digest of the object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumSha1")]
    #[builder(default)]
    pub checksum_sha1: Option<String>,
    /// The base64-encoded, 256-bit SHA-256 digest of the object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumSha256")]
    #[builder(default)]
    pub checksum_sha256: Option<String>,
    /// Specifies presentational information for the object. Read w3c content_disposition for further information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDisposition")]
    #[builder(default)]
    pub content_disposition: Option<String>,
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read w3c content encoding for further information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentEncoding")]
    #[builder(default)]
    pub content_encoding: Option<String>,
    /// Language the content is in e.g., en-US or en-GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentLanguage")]
    #[builder(default)]
    pub content_language: Option<String>,
    /// Standard MIME type describing the format of the object data, e.g., application/octet-stream. All Valid MIME Types are valid for this input.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    #[builder(default)]
    pub content_type: Option<String>,
    /// Copies the object if its entity tag (ETag) matches the specified tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfMatch")]
    #[builder(default)]
    pub copy_if_match: Option<String>,
    /// Copies the object if it has been modified since the specified time, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfModifiedSince")]
    #[builder(default)]
    pub copy_if_modified_since: Option<String>,
    /// Copies the object if its entity tag (ETag) is different than the specified ETag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfNoneMatch")]
    #[builder(default)]
    pub copy_if_none_match: Option<String>,
    /// Copies the object if it hasn't been modified since the specified time, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyIfUnmodifiedSince")]
    #[builder(default)]
    pub copy_if_unmodified_since: Option<String>,
    /// Specifies the algorithm to use to when encrypting the object (for example, AES256).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerAlgorithm")]
    #[builder(default)]
    pub customer_algorithm: Option<String>,
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerKeyMd5")]
    #[builder(default)]
    pub customer_key_md5: Option<String>,
    /// ETag generated for the object (an MD5 sum of the object content). For plaintext objects or objects encrypted with an AWS-managed key, the hash is an MD5 digest of the object data. For objects encrypted with a KMS key or objects created by either the Multipart Upload or Part Copy operation, the hash is not an MD5 digest, regardless of the method of encryption. More information on possible values can be found on Common Response Headers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub etag: Option<String>,
    /// Account id of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedBucketOwner")]
    #[builder(default)]
    pub expected_bucket_owner: Option<String>,
    /// Account id of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedSourceBucketOwner")]
    #[builder(default)]
    pub expected_source_bucket_owner: Option<String>,
    /// If the object expiration is configured, this attribute will be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expiration: Option<String>,
    /// Date and time at which the object is no longer cacheable, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expires: Option<String>,
    /// Allow the object to be deleted by removing any legal hold on any object version. Default is false. This value should be set to true only if the bucket has S3 object lock enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// Configuration block for header grants. Documented below. Conflicts with acl.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grant: Option<Vec<ObjectCopyStatusAtProviderGrant>>,
    /// Canonical user ID of the grantee. Used only when type is CanonicalUser.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Name of the object once it is in the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// Returns the date that the object was last modified, in RFC3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastModified")]
    #[builder(default)]
    pub last_modified: Option<String>,
    /// Map of keys/values to provision metadata (will be automatically prefixed by x-amz-meta-, note that only lowercase label are currently supported by the AWS Go API).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<HashMap<String, String>>,
    /// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are COPY and REPLACE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataDirective")]
    #[builder(default)]
    pub metadata_directive: Option<String>,
    /// The legal hold status that you want to apply to the specified object. Valid values are ON and OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockLegalHoldStatus")]
    #[builder(default)]
    pub object_lock_legal_hold_status: Option<String>,
    /// Object lock retention mode that you want to apply to this object. Valid values are GOVERNANCE and COMPLIANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockMode")]
    #[builder(default)]
    pub object_lock_mode: Option<String>,
    /// Date and time, in RFC3339 format, when this object's object lock will expire.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectLockRetainUntilDate")]
    #[builder(default)]
    pub object_lock_retain_until_date: Option<String>,
    /// If present, indicates that the requester was successfully charged for the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCharged")]
    #[builder(default)]
    pub request_charged: Option<bool>,
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. For information about downloading objects from requester pays buckets, see Downloading Objects in Requestor Pays Buckets (https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 Developer Guide. If included, the only valid value is requester.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestPayer")]
    #[builder(default)]
    pub request_payer: Option<String>,
    /// Specifies server-side encryption of the object in S3. Valid values are AES256 and aws:kms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryption")]
    #[builder(default)]
    pub server_side_encryption: Option<String>,
    /// Specifies the source object for the copy operation. You specify the value in one of two formats. For objects not accessed through an access point, specify the name of the source bucket and the key of the source object, separated by a slash (/). For example, testbucket/test1.json. For objects accessed through access points, specify the ARN of the object as accessed through the access point, in the format arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key>. For example, arn:aws:s3:us-west-2:9999912999:accesspoint/my-access-point/object/testbucket/test1.json.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
    /// Specifies the algorithm to use when decrypting the source object (for example, AES256).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCustomerAlgorithm")]
    #[builder(default)]
    pub source_customer_algorithm: Option<String>,
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCustomerKeyMd5")]
    #[builder(default)]
    pub source_customer_key_md5: Option<String>,
    /// Version of the copied object in the source bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceVersionId")]
    #[builder(default)]
    pub source_version_id: Option<String>,
    /// Specifies the desired storage class for the object. Defaults to STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    #[builder(default)]
    pub storage_class: Option<String>,
    /// Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request. Valid values are COPY and REPLACE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taggingDirective")]
    #[builder(default)]
    pub tagging_directive: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Version ID of the newly created copy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionId")]
    #[builder(default)]
    pub version_id: Option<String>,
    /// Specifies a target URL for website redirect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "websiteRedirect")]
    #[builder(default)]
    pub website_redirect: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ObjectCopyStatusAtProviderGrant {
    /// Email address of the grantee. Used only when type is AmazonCustomerByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub email: Option<String>,
    /// Canonical user ID of the grantee. Used only when type is CanonicalUser.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// List of permissions to grant to grantee. Valid values are READ, READ_ACP, WRITE_ACP, FULL_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub permissions: Option<Vec<String>>,
    /// - Type of grantee. Valid values are CanonicalUser, Group, and AmazonCustomerByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// URI of the grantee group. Used only when type is Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}


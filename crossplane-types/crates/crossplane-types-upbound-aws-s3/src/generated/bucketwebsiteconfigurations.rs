// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// BucketWebsiteConfigurationSpec defines the desired state of BucketWebsiteConfiguration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "s3.aws.upbound.io",
    version = "v1beta2",
    kind = "BucketWebsiteConfiguration",
    plural = "bucketwebsiteconfigurations"
)]
#[kube(status = "BucketWebsiteConfigurationStatus")]
pub struct BucketWebsiteConfigurationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<BucketWebsiteConfigurationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BucketWebsiteConfigurationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<BucketWebsiteConfigurationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<BucketWebsiteConfigurationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<BucketWebsiteConfigurationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref:
        Option<BucketWebsiteConfigurationWriteConnectionSecretToRef>,
}

/// BucketWebsiteConfigurationSpec defines the desired state of BucketWebsiteConfiguration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProvider {
    /// Name of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    #[builder(default)]
    pub bucket_ref: Option<BucketWebsiteConfigurationForProviderBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketSelector"
    )]
    #[builder(default)]
    pub bucket_selector: Option<BucketWebsiteConfigurationForProviderBucketSelector>,
    /// Name of the error document for the website. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDocument"
    )]
    #[builder(default)]
    pub error_document: Option<BucketWebsiteConfigurationForProviderErrorDocument>,
    /// Account ID of the expected bucket owner.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expectedBucketOwner"
    )]
    #[builder(default)]
    pub expected_bucket_owner: Option<String>,
    /// Name of the index document for the website. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "indexDocument"
    )]
    #[builder(default)]
    pub index_document: Option<BucketWebsiteConfigurationForProviderIndexDocument>,
    /// Redirect behavior for every request to this bucket's website endpoint. See below. Conflicts with error_document, index_document, and routing_rule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "redirectAllRequestsTo"
    )]
    #[builder(default)]
    pub redirect_all_requests_to:
        Option<BucketWebsiteConfigurationForProviderRedirectAllRequestsTo>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// List of rules that define when a redirect is applied and the redirect behavior. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingRule"
    )]
    #[builder(default)]
    pub routing_rule: Option<Vec<BucketWebsiteConfigurationForProviderRoutingRule>>,
    /// JSON array containing routing rules
    /// describing redirect behavior and when redirects are applied. Use this parameter when your routing rules contain empty String values ("") as seen in the example above.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingRules"
    )]
    #[builder(default)]
    pub routing_rules: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BucketWebsiteConfigurationForProviderBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<BucketWebsiteConfigurationForProviderBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BucketWebsiteConfigurationForProviderBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationForProviderBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationForProviderBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BucketWebsiteConfigurationForProviderBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<BucketWebsiteConfigurationForProviderBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BucketWebsiteConfigurationForProviderBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationForProviderBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationForProviderBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Name of the error document for the website. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderErrorDocument {
    /// Object key name to use when a 4XX class error occurs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Name of the index document for the website. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderIndexDocument {
    /// Suffix that is appended to a request that is for a directory on the website endpoint.
    /// For example, if the suffix is index.html and you make a request to samplebucket/images/, the data that is returned will be for the object with the key name images/index.html.
    /// The suffix must not be empty and must not include a slash character.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub suffix: Option<String>,
}

/// Redirect behavior for every request to this bucket's website endpoint. See below. Conflicts with error_document, index_document, and routing_rule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderRedirectAllRequestsTo {
    /// Name of the host where requests are redirected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostName")]
    #[builder(default)]
    pub host_name: Option<String>,
    /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderRoutingRule {
    /// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub condition: Option<BucketWebsiteConfigurationForProviderRoutingRuleCondition>,
    /// Configuration block for redirect information. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub redirect: Option<BucketWebsiteConfigurationForProviderRoutingRuleRedirect>,
}

/// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderRoutingRuleCondition {
    /// HTTP error code when the redirect is applied. If specified with key_prefix_equals, then both must be true for the redirect to be applied.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpErrorCodeReturnedEquals"
    )]
    #[builder(default)]
    pub http_error_code_returned_equals: Option<String>,
    /// Object key name prefix when the redirect is applied. If specified with http_error_code_returned_equals, then both must be true for the redirect to be applied.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyPrefixEquals"
    )]
    #[builder(default)]
    pub key_prefix_equals: Option<String>,
}

/// Configuration block for redirect information. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationForProviderRoutingRuleRedirect {
    /// Name of the host where requests are redirected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostName")]
    #[builder(default)]
    pub host_name: Option<String>,
    /// HTTP redirect code to use on the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpRedirectCode"
    )]
    #[builder(default)]
    pub http_redirect_code: Option<String>,
    /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
    /// Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with key_prefix_equals set to docs/ and in the redirect set replace_key_prefix_with to /documents.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replaceKeyPrefixWith"
    )]
    #[builder(default)]
    pub replace_key_prefix_with: Option<String>,
    /// Specific object key to use in the redirect request. For example, redirect request to error.html.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replaceKeyWith"
    )]
    #[builder(default)]
    pub replace_key_with: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProvider {
    /// Name of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    #[builder(default)]
    pub bucket_ref: Option<BucketWebsiteConfigurationInitProviderBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketSelector"
    )]
    #[builder(default)]
    pub bucket_selector: Option<BucketWebsiteConfigurationInitProviderBucketSelector>,
    /// Name of the error document for the website. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDocument"
    )]
    #[builder(default)]
    pub error_document: Option<BucketWebsiteConfigurationInitProviderErrorDocument>,
    /// Account ID of the expected bucket owner.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expectedBucketOwner"
    )]
    #[builder(default)]
    pub expected_bucket_owner: Option<String>,
    /// Name of the index document for the website. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "indexDocument"
    )]
    #[builder(default)]
    pub index_document: Option<BucketWebsiteConfigurationInitProviderIndexDocument>,
    /// Redirect behavior for every request to this bucket's website endpoint. See below. Conflicts with error_document, index_document, and routing_rule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "redirectAllRequestsTo"
    )]
    #[builder(default)]
    pub redirect_all_requests_to:
        Option<BucketWebsiteConfigurationInitProviderRedirectAllRequestsTo>,
    /// List of rules that define when a redirect is applied and the redirect behavior. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingRule"
    )]
    #[builder(default)]
    pub routing_rule: Option<Vec<BucketWebsiteConfigurationInitProviderRoutingRule>>,
    /// JSON array containing routing rules
    /// describing redirect behavior and when redirects are applied. Use this parameter when your routing rules contain empty String values ("") as seen in the example above.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingRules"
    )]
    #[builder(default)]
    pub routing_rules: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BucketWebsiteConfigurationInitProviderBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<BucketWebsiteConfigurationInitProviderBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BucketWebsiteConfigurationInitProviderBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationInitProviderBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationInitProviderBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BucketWebsiteConfigurationInitProviderBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<BucketWebsiteConfigurationInitProviderBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BucketWebsiteConfigurationInitProviderBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationInitProviderBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationInitProviderBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Name of the error document for the website. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderErrorDocument {
    /// Object key name to use when a 4XX class error occurs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Name of the index document for the website. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderIndexDocument {
    /// Suffix that is appended to a request that is for a directory on the website endpoint.
    /// For example, if the suffix is index.html and you make a request to samplebucket/images/, the data that is returned will be for the object with the key name images/index.html.
    /// The suffix must not be empty and must not include a slash character.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub suffix: Option<String>,
}

/// Redirect behavior for every request to this bucket's website endpoint. See below. Conflicts with error_document, index_document, and routing_rule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderRedirectAllRequestsTo {
    /// Name of the host where requests are redirected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostName")]
    #[builder(default)]
    pub host_name: Option<String>,
    /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderRoutingRule {
    /// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub condition: Option<BucketWebsiteConfigurationInitProviderRoutingRuleCondition>,
    /// Configuration block for redirect information. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub redirect: Option<BucketWebsiteConfigurationInitProviderRoutingRuleRedirect>,
}

/// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderRoutingRuleCondition {
    /// HTTP error code when the redirect is applied. If specified with key_prefix_equals, then both must be true for the redirect to be applied.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpErrorCodeReturnedEquals"
    )]
    #[builder(default)]
    pub http_error_code_returned_equals: Option<String>,
    /// Object key name prefix when the redirect is applied. If specified with http_error_code_returned_equals, then both must be true for the redirect to be applied.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyPrefixEquals"
    )]
    #[builder(default)]
    pub key_prefix_equals: Option<String>,
}

/// Configuration block for redirect information. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationInitProviderRoutingRuleRedirect {
    /// Name of the host where requests are redirected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostName")]
    #[builder(default)]
    pub host_name: Option<String>,
    /// HTTP redirect code to use on the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpRedirectCode"
    )]
    #[builder(default)]
    pub http_redirect_code: Option<String>,
    /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
    /// Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with key_prefix_equals set to docs/ and in the redirect set replace_key_prefix_with to /documents.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replaceKeyPrefixWith"
    )]
    #[builder(default)]
    pub replace_key_prefix_with: Option<String>,
    /// Specific object key to use in the redirect request. For example, redirect request to error.html.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replaceKeyWith"
    )]
    #[builder(default)]
    pub replace_key_with: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BucketWebsiteConfigurationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<BucketWebsiteConfigurationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BucketWebsiteConfigurationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<BucketWebsiteConfigurationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<BucketWebsiteConfigurationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BucketWebsiteConfigurationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<BucketWebsiteConfigurationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BucketWebsiteConfigurationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketWebsiteConfigurationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BucketWebsiteConfigurationStatus defines the observed state of BucketWebsiteConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<BucketWebsiteConfigurationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationStatusAtProvider {
    /// Name of the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// Name of the error document for the website. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDocument"
    )]
    #[builder(default)]
    pub error_document: Option<BucketWebsiteConfigurationStatusAtProviderErrorDocument>,
    /// Account ID of the expected bucket owner.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expectedBucketOwner"
    )]
    #[builder(default)]
    pub expected_bucket_owner: Option<String>,
    /// The bucket or bucket and expected_bucket_owner separated by a comma (,) if the latter is provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Name of the index document for the website. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "indexDocument"
    )]
    #[builder(default)]
    pub index_document: Option<BucketWebsiteConfigurationStatusAtProviderIndexDocument>,
    /// Redirect behavior for every request to this bucket's website endpoint. See below. Conflicts with error_document, index_document, and routing_rule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "redirectAllRequestsTo"
    )]
    #[builder(default)]
    pub redirect_all_requests_to:
        Option<BucketWebsiteConfigurationStatusAtProviderRedirectAllRequestsTo>,
    /// List of rules that define when a redirect is applied and the redirect behavior. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingRule"
    )]
    #[builder(default)]
    pub routing_rule: Option<Vec<BucketWebsiteConfigurationStatusAtProviderRoutingRule>>,
    /// JSON array containing routing rules
    /// describing redirect behavior and when redirects are applied. Use this parameter when your routing rules contain empty String values ("") as seen in the example above.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingRules"
    )]
    #[builder(default)]
    pub routing_rules: Option<String>,
    /// Domain of the website endpoint. This is used to create Route 53 alias records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "websiteDomain"
    )]
    #[builder(default)]
    pub website_domain: Option<String>,
    /// Website endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "websiteEndpoint"
    )]
    #[builder(default)]
    pub website_endpoint: Option<String>,
}

/// Name of the error document for the website. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationStatusAtProviderErrorDocument {
    /// Object key name to use when a 4XX class error occurs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
}

/// Name of the index document for the website. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationStatusAtProviderIndexDocument {
    /// Suffix that is appended to a request that is for a directory on the website endpoint.
    /// For example, if the suffix is index.html and you make a request to samplebucket/images/, the data that is returned will be for the object with the key name images/index.html.
    /// The suffix must not be empty and must not include a slash character.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub suffix: Option<String>,
}

/// Redirect behavior for every request to this bucket's website endpoint. See below. Conflicts with error_document, index_document, and routing_rule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationStatusAtProviderRedirectAllRequestsTo {
    /// Name of the host where requests are redirected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostName")]
    #[builder(default)]
    pub host_name: Option<String>,
    /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationStatusAtProviderRoutingRule {
    /// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub condition: Option<BucketWebsiteConfigurationStatusAtProviderRoutingRuleCondition>,
    /// Configuration block for redirect information. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub redirect: Option<BucketWebsiteConfigurationStatusAtProviderRoutingRuleRedirect>,
}

/// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationStatusAtProviderRoutingRuleCondition {
    /// HTTP error code when the redirect is applied. If specified with key_prefix_equals, then both must be true for the redirect to be applied.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpErrorCodeReturnedEquals"
    )]
    #[builder(default)]
    pub http_error_code_returned_equals: Option<String>,
    /// Object key name prefix when the redirect is applied. If specified with http_error_code_returned_equals, then both must be true for the redirect to be applied.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyPrefixEquals"
    )]
    #[builder(default)]
    pub key_prefix_equals: Option<String>,
}

/// Configuration block for redirect information. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWebsiteConfigurationStatusAtProviderRoutingRuleRedirect {
    /// Name of the host where requests are redirected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostName")]
    #[builder(default)]
    pub host_name: Option<String>,
    /// HTTP redirect code to use on the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpRedirectCode"
    )]
    #[builder(default)]
    pub http_redirect_code: Option<String>,
    /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
    /// Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with key_prefix_equals set to docs/ and in the redirect set replace_key_prefix_with to /documents.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replaceKeyPrefixWith"
    )]
    #[builder(default)]
    pub replace_key_prefix_with: Option<String>,
    /// Specific object key to use in the redirect request. For example, redirect request to error.html.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replaceKeyWith"
    )]
    #[builder(default)]
    pub replace_key_with: Option<String>,
}

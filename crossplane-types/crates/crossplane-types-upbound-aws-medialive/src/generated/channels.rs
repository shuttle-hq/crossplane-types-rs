// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ChannelSpec defines the desired state of Channel
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "medialive.aws.upbound.io",
    version = "v1beta2",
    kind = "Channel",
    plural = "channels"
)]
#[kube(status = "ChannelStatus")]
pub struct ChannelSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<ChannelDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ChannelForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<ChannelInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<ChannelProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<ChannelPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ChannelWriteConnectionSecretToRef>,
}

/// ChannelSpec defines the desired state of Channel
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProvider {
    /// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cdiInputSpecification"
    )]
    #[builder(default)]
    pub cdi_input_specification: Option<ChannelForProviderCdiInputSpecification>,
    /// Concise argument description.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelClass"
    )]
    #[builder(default)]
    pub channel_class: Option<String>,
    /// Destinations for channel. See Destinations for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destinations: Option<Vec<ChannelForProviderDestinations>>,
    /// Encoder settings. See Encoder Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encoderSettings"
    )]
    #[builder(default)]
    pub encoder_settings: Option<ChannelForProviderEncoderSettings>,
    /// Input attachments for the channel. See Input Attachments for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputAttachments"
    )]
    #[builder(default)]
    pub input_attachments: Option<Vec<ChannelForProviderInputAttachments>>,
    /// Specification of network and file inputs for the channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputSpecification"
    )]
    #[builder(default)]
    pub input_specification: Option<ChannelForProviderInputSpecification>,
    /// The log level to write to Cloudwatch logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    #[builder(default)]
    pub log_level: Option<String>,
    /// Maintenance settings for this channel. See Maintenance for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub maintenance: Option<ChannelForProviderMaintenance>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Concise argument description.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default)]
    pub role_arn_ref: Option<ChannelForProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default)]
    pub role_arn_selector: Option<ChannelForProviderRoleArnSelector>,
    /// Whether to start/stop channel. Default: false
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startChannel"
    )]
    #[builder(default)]
    pub start_channel: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Settings for the VPC outputs. See VPC for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub vpc: Option<ChannelForProviderVpc>,
}

/// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderCdiInputSpecification {
    /// - Maximum CDI input resolution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderDestinations {
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mediaPackageSettings"
    )]
    #[builder(default)]
    pub media_package_settings: Option<Vec<ChannelForProviderDestinationsMediaPackageSettings>>,
    /// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiplexSettings"
    )]
    #[builder(default)]
    pub multiplex_settings: Option<ChannelForProviderDestinationsMultiplexSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub settings: Option<Vec<ChannelForProviderDestinationsSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderDestinationsMediaPackageSettings {
    /// ID of the channel in MediaPackage that is the destination for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelId")]
    #[builder(default)]
    pub channel_id: Option<String>,
}

/// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderDestinationsMultiplexSettings {
    /// The ID of the Multiplex that the encoder is providing output to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiplexId"
    )]
    #[builder(default)]
    pub multiplex_id: Option<String>,
    /// The program name of the Multiplex program that the encoder is providing output to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "programName"
    )]
    #[builder(default)]
    pub program_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderDestinationsSettings {
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// Stream name RTMP destinations (URLs of type rtmp://)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamName"
    )]
    #[builder(default)]
    pub stream_name: Option<String>,
    /// A URL specifying a destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Encoder settings. See Encoder Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettings {
    /// Audio descriptions for the channel. See Audio Descriptions for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioDescriptions"
    )]
    #[builder(default)]
    pub audio_descriptions: Option<Vec<ChannelForProviderEncoderSettingsAudioDescriptions>>,
    /// Settings for ad avail blanking. See Avail Blanking for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availBlanking"
    )]
    #[builder(default)]
    pub avail_blanking: Option<ChannelForProviderEncoderSettingsAvailBlanking>,
    /// Caption Descriptions. See Caption Descriptions for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionDescriptions"
    )]
    #[builder(default)]
    pub caption_descriptions: Option<Vec<ChannelForProviderEncoderSettingsCaptionDescriptions>>,
    /// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "globalConfiguration"
    )]
    #[builder(default)]
    pub global_configuration: Option<ChannelForProviderEncoderSettingsGlobalConfiguration>,
    /// Settings for motion graphics. See Motion Graphics Configuration for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "motionGraphicsConfiguration"
    )]
    #[builder(default)]
    pub motion_graphics_configuration:
        Option<ChannelForProviderEncoderSettingsMotionGraphicsConfiguration>,
    /// Nielsen configuration settings. See Nielsen Configuration for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenConfiguration"
    )]
    #[builder(default)]
    pub nielsen_configuration: Option<ChannelForProviderEncoderSettingsNielsenConfiguration>,
    /// Output groups for the channel. See Output Groups for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputGroups"
    )]
    #[builder(default)]
    pub output_groups: Option<Vec<ChannelForProviderEncoderSettingsOutputGroups>>,
    /// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeConfig"
    )]
    #[builder(default)]
    pub timecode_config: Option<ChannelForProviderEncoderSettingsTimecodeConfig>,
    /// Video Descriptions. See Video Descriptions for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoDescriptions"
    )]
    #[builder(default)]
    pub video_descriptions: Option<Vec<ChannelForProviderEncoderSettingsVideoDescriptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptions {
    /// Advanced audio normalization settings. See Audio Normalization Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioNormalizationSettings"
    )]
    #[builder(default)]
    pub audio_normalization_settings:
        Option<ChannelForProviderEncoderSettingsAudioDescriptionsAudioNormalizationSettings>,
    /// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSelectorName"
    )]
    #[builder(default)]
    pub audio_selector_name: Option<String>,
    /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioType")]
    #[builder(default)]
    pub audio_type: Option<String>,
    /// Determined how audio type is determined.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioTypeControl"
    )]
    #[builder(default)]
    pub audio_type_control: Option<String>,
    /// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioWatermarkSettings"
    )]
    #[builder(default)]
    pub audio_watermark_settings:
        Option<ChannelForProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettings>,
    /// Audio codec settings. See Audio Codec Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codecSettings"
    )]
    #[builder(default)]
    pub codec_settings: Option<ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettings>,
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCodeControl"
    )]
    #[builder(default)]
    pub language_code_control: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remixSettings"
    )]
    #[builder(default)]
    pub remix_settings: Option<ChannelForProviderEncoderSettingsAudioDescriptionsRemixSettings>,
    /// Stream name RTMP destinations (URLs of type rtmp://)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamName"
    )]
    #[builder(default)]
    pub stream_name: Option<String>,
}

/// Advanced audio normalization settings. See Audio Normalization Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsAudioNormalizationSettings {
    /// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub algorithm: Option<String>,
    /// Algorithm control for the audio description.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "algorithmControl"
    )]
    #[builder(default)]
    pub algorithm_control: Option<String>,
    /// Target LKFS (loudness) to adjust volume to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetLkfs"
    )]
    #[builder(default)]
    pub target_lkfs: Option<f64>,
}

/// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenWatermarksSettings")]
    #[builder(default)]
    pub nielsen_watermarks_settings: Option<ChannelForProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings {
    /// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenCbetSettings")]
    #[builder(default)]
    pub nielsen_cbet_settings: Option<ChannelForProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings>,
    /// Distribution types to assign to the watermarks. Options are PROGRAM_CONTENT and FINAL_DISTRIBUTOR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenDistributionType")]
    #[builder(default)]
    pub nielsen_distribution_type: Option<String>,
    /// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenNaesIiNwSettings")]
    #[builder(default)]
    pub nielsen_naes_ii_nw_settings: Option<Vec<ChannelForProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings>>,
}

/// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cbetCheckDigitString"
    )]
    #[builder(default)]
    pub cbet_check_digit_string: Option<String>,
    /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cbetStepaside"
    )]
    #[builder(default)]
    pub cbet_stepaside: Option<String>,
    /// CBET source ID to use in the watermark.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub csid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkDigitString"
    )]
    #[builder(default)]
    pub check_digit_string: Option<String>,
    /// The Nielsen Source ID to include in the watermark.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub sid: Option<f64>,
}

/// Audio codec settings. See Audio Codec Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettings {
    /// Aac Settings. See AAC Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aacSettings"
    )]
    #[builder(default)]
    pub aac_settings:
        Option<ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsAacSettings>,
    /// Ac3 Settings. See AC3 Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ac3Settings"
    )]
    #[builder(default)]
    pub ac3_settings:
        Option<ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings>,
    /// - Eac3 Atmos Settings. See EAC3 Atmos Settings
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eac3AtmosSettings"
    )]
    #[builder(default)]
    pub eac3_atmos_settings:
        Option<ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings>,
    /// - Eac3 Settings. See EAC3 Settings
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eac3Settings"
    )]
    #[builder(default)]
    pub eac3_settings:
        Option<ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mp2Settings"
    )]
    #[builder(default)]
    pub mp2_settings:
        Option<ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passThroughSettings"
    )]
    #[builder(default)]
    pub pass_through_settings:
        Option<ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "wavSettings"
    )]
    #[builder(default)]
    pub wav_settings:
        Option<ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsWavSettings>,
}

/// Aac Settings. See AAC Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsAacSettings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputType")]
    #[builder(default)]
    pub input_type: Option<String>,
    /// AAC profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// The rate control mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rateControlMode"
    )]
    #[builder(default)]
    pub rate_control_mode: Option<String>,
    /// Sets LATM/LOAS AAC output for raw containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawFormat")]
    #[builder(default)]
    pub raw_format: Option<String>,
    /// Sample rate in Hz.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleRate"
    )]
    #[builder(default)]
    pub sample_rate: Option<f64>,
    /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub spec: Option<String>,
    /// VBR Quality Level - Only used if rateControlMode is VBR.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vbrQuality"
    )]
    #[builder(default)]
    pub vbr_quality: Option<String>,
}

/// Ac3 Settings. See AC3 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bitstreamMode"
    )]
    #[builder(default)]
    pub bitstream_mode: Option<String>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sets the dialnorm of the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dialnorm: Option<f64>,
    /// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "drcProfile"
    )]
    #[builder(default)]
    pub drc_profile: Option<String>,
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lfeFilter")]
    #[builder(default)]
    pub lfe_filter: Option<String>,
    /// Metadata control.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataControl"
    )]
    #[builder(default)]
    pub metadata_control: Option<String>,
}

/// - Eac3 Atmos Settings. See EAC3 Atmos Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sets the dialnorm of the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dialnorm: Option<f64>,
    /// Sets the Dolby dynamic range compression profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcLine")]
    #[builder(default)]
    pub drc_line: Option<String>,
    /// Sets the profile for heavy Dolby dynamic range compression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcRf")]
    #[builder(default)]
    pub drc_rf: Option<String>,
    /// Height dimensional trim.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightTrim"
    )]
    #[builder(default)]
    pub height_trim: Option<f64>,
    /// Surround dimensional trim.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "surroundTrim"
    )]
    #[builder(default)]
    pub surround_trim: Option<f64>,
}

/// - Eac3 Settings. See EAC3 Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings {
    /// Sets the attenuation control.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "attenuationControl"
    )]
    #[builder(default)]
    pub attenuation_control: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bitstreamMode"
    )]
    #[builder(default)]
    pub bitstream_mode: Option<String>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dcFilter")]
    #[builder(default)]
    pub dc_filter: Option<String>,
    /// Sets the dialnorm of the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dialnorm: Option<f64>,
    /// Sets the Dolby dynamic range compression profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcLine")]
    #[builder(default)]
    pub drc_line: Option<String>,
    /// Sets the profile for heavy Dolby dynamic range compression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcRf")]
    #[builder(default)]
    pub drc_rf: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lfeControl"
    )]
    #[builder(default)]
    pub lfe_control: Option<String>,
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lfeFilter")]
    #[builder(default)]
    pub lfe_filter: Option<String>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loRoCenterMixLevel"
    )]
    #[builder(default)]
    pub lo_ro_center_mix_level: Option<f64>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loRoSurroundMixLevel"
    )]
    #[builder(default)]
    pub lo_ro_surround_mix_level: Option<f64>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ltRtCenterMixLevel"
    )]
    #[builder(default)]
    pub lt_rt_center_mix_level: Option<f64>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ltRtSurroundMixLevel"
    )]
    #[builder(default)]
    pub lt_rt_surround_mix_level: Option<f64>,
    /// Metadata control.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataControl"
    )]
    #[builder(default)]
    pub metadata_control: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passthroughControl"
    )]
    #[builder(default)]
    pub passthrough_control: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phaseControl"
    )]
    #[builder(default)]
    pub phase_control: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stereoDownmix"
    )]
    #[builder(default)]
    pub stereo_downmix: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "surroundExMode"
    )]
    #[builder(default)]
    pub surround_ex_mode: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "surroundMode"
    )]
    #[builder(default)]
    pub surround_mode: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sample rate in Hz.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleRate"
    )]
    #[builder(default)]
    pub sample_rate: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings {}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsCodecSettingsWavSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitDepth")]
    #[builder(default)]
    pub bit_depth: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sample rate in Hz.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleRate"
    )]
    #[builder(default)]
    pub sample_rate: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsRemixSettings {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelMappings"
    )]
    #[builder(default)]
    pub channel_mappings:
        Option<Vec<ChannelForProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelsIn"
    )]
    #[builder(default)]
    pub channels_in: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelsOut"
    )]
    #[builder(default)]
    pub channels_out: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputChannelLevels")]
    #[builder(default)]
    pub input_channel_levels: Option<Vec<ChannelForProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputChannel")]
    #[builder(default)]
    pub output_channel: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels
{
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gain: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputChannel"
    )]
    #[builder(default)]
    pub input_channel: Option<f64>,
}

/// Settings for ad avail blanking. See Avail Blanking for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAvailBlanking {
    /// Blanking image to be used. See Avail Blanking Image for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availBlankingImage"
    )]
    #[builder(default)]
    pub avail_blanking_image:
        Option<ChannelForProviderEncoderSettingsAvailBlankingAvailBlankingImage>,
    /// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
}

/// Blanking image to be used. See Avail Blanking Image for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsAvailBlankingAvailBlankingImage {
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptions {
    /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub accessibility: Option<String>,
    /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionSelectorName"
    )]
    #[builder(default)]
    pub caption_selector_name: Option<String>,
    /// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationSettings"
    )]
    #[builder(default)]
    pub destination_settings:
        Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettings>,
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageDescription"
    )]
    #[builder(default)]
    pub language_description: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettings {
    /// ARIB Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribDestinationSettings")]
    #[builder(default)]
    pub arib_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings>,
    /// Burn In Destination Settings. See Burn In Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burnInDestinationSettings")]
    #[builder(default)]
    pub burn_in_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings>,
    /// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubDestinationSettings")]
    #[builder(default)]
    pub dvb_sub_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings>,
    /// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebuTtDDestinationSettings")]
    #[builder(default)]
    pub ebu_tt_d_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings>,
    /// Embedded Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "embeddedDestinationSettings")]
    #[builder(default)]
    pub embedded_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings>,
    /// Embedded Plus SCTE20 Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "embeddedPlusScte20DestinationSettings")]
    #[builder(default)]
    pub embedded_plus_scte20_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings>,
    /// RTMP Caption Info Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rtmpCaptionInfoDestinationSettings")]
    #[builder(default)]
    pub rtmp_caption_info_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings>,
    /// SCTE20 Plus Embedded Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte20PlusEmbeddedDestinationSettings")]
    #[builder(default)]
    pub scte20_plus_embedded_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings>,
    /// –  SCTE27 Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27DestinationSettings")]
    #[builder(default)]
    pub scte27_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings>,
    /// –  SMPTE TT Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "smpteTtDestinationSettings")]
    #[builder(default)]
    pub smpte_tt_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings>,
    /// –  Teletext Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextDestinationSettings")]
    #[builder(default)]
    pub teletext_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings>,
    /// –  TTML Destination Settings. See TTML Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttmlDestinationSettings")]
    #[builder(default)]
    pub ttml_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings>,
    /// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webvttDestinationSettings")]
    #[builder(default)]
    pub webvtt_destination_settings: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings>,
}

/// ARIB Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings
{}

/// Burn In Destination Settings. See Burn In Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings {
    /// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alignment: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundColor")]
    #[builder(default)]
    pub background_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundOpacity")]
    #[builder(default)]
    pub background_opacity: Option<f64>,
    /// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub font: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont>,
    /// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontColor")]
    #[builder(default)]
    pub font_color: Option<String>,
    /// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontOpacity")]
    #[builder(default)]
    pub font_opacity: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontResolution")]
    #[builder(default)]
    pub font_resolution: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontSize")]
    #[builder(default)]
    pub font_size: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineColor")]
    #[builder(default)]
    pub outline_color: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineSize")]
    #[builder(default)]
    pub outline_size: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowColor")]
    #[builder(default)]
    pub shadow_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowOpacity")]
    #[builder(default)]
    pub shadow_opacity: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowXOffset")]
    #[builder(default)]
    pub shadow_x_offset: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowYOffset")]
    #[builder(default)]
    pub shadow_y_offset: Option<f64>,
    /// Sub/Burn-in outputs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextGridControl")]
    #[builder(default)]
    pub teletext_grid_control: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xPosition")]
    #[builder(default)]
    pub x_position: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yPosition")]
    #[builder(default)]
    pub y_position: Option<f64>,
}

/// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings {
    /// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alignment: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundColor")]
    #[builder(default)]
    pub background_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundOpacity")]
    #[builder(default)]
    pub background_opacity: Option<f64>,
    /// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub font: Option<ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont>,
    /// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontColor")]
    #[builder(default)]
    pub font_color: Option<String>,
    /// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontOpacity")]
    #[builder(default)]
    pub font_opacity: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontResolution")]
    #[builder(default)]
    pub font_resolution: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontSize")]
    #[builder(default)]
    pub font_size: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineColor")]
    #[builder(default)]
    pub outline_color: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineSize")]
    #[builder(default)]
    pub outline_size: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowColor")]
    #[builder(default)]
    pub shadow_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowOpacity")]
    #[builder(default)]
    pub shadow_opacity: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowXOffset")]
    #[builder(default)]
    pub shadow_x_offset: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowYOffset")]
    #[builder(default)]
    pub shadow_y_offset: Option<f64>,
    /// Sub/Burn-in outputs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextGridControl")]
    #[builder(default)]
    pub teletext_grid_control: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xPosition")]
    #[builder(default)]
    pub x_position: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yPosition")]
    #[builder(default)]
    pub y_position: Option<f64>,
}

/// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings
{
    /// –  Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "copyrightHolder"
    )]
    #[builder(default)]
    pub copyright_holder: Option<String>,
    /// line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fillLineGap"
    )]
    #[builder(default)]
    pub fill_line_gap: Option<String>,
    /// TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to “monospaced”. (If styleControl is set to exclude, the font family is always set to “monospaced”.) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontFamily"
    )]
    #[builder(default)]
    pub font_family: Option<String>,
    /// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "styleControl"
    )]
    #[builder(default)]
    pub style_control: Option<String>,
}

/// Embedded Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings
{}

/// Embedded Plus SCTE20 Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings
{}

/// RTMP Caption Info Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings
{}

/// SCTE20 Plus Embedded Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings
{}

/// –  SCTE27 Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings
{}

/// –  SMPTE TT Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings
{}

/// –  Teletext Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings
{}

/// –  TTML Destination Settings. See TTML Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings
{
    /// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "styleControl"
    )]
    #[builder(default)]
    pub style_control: Option<String>,
}

/// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings
{
    /// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "styleControl"
    )]
    #[builder(default)]
    pub style_control: Option<String>,
}

/// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsGlobalConfiguration {
    /// –  Value to set the initial audio gain for the Live Event.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialAudioGain"
    )]
    #[builder(default)]
    pub initial_audio_gain: Option<f64>,
    /// of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputEndAction"
    )]
    #[builder(default)]
    pub input_end_action: Option<String>,
    /// Settings for system actions when input is lost. See Input Loss Behavior for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossBehavior"
    )]
    #[builder(default)]
    pub input_loss_behavior:
        Option<ChannelForProviderEncoderSettingsGlobalConfigurationInputLossBehavior>,
    /// MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputLockingMode"
    )]
    #[builder(default)]
    pub output_locking_mode: Option<String>,
    /// –  Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputTimingSource"
    )]
    #[builder(default)]
    pub output_timing_source: Option<String>,
    /// –  Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportLowFramerateInputs"
    )]
    #[builder(default)]
    pub support_low_framerate_inputs: Option<String>,
}

/// Settings for system actions when input is lost. See Input Loss Behavior for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsGlobalConfigurationInputLossBehavior {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blackFrameMsec"
    )]
    #[builder(default)]
    pub black_frame_msec: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossImageColor"
    )]
    #[builder(default)]
    pub input_loss_image_color: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossImageSlate"
    )]
    #[builder(default)]
    pub input_loss_image_slate: Option<
        ChannelForProviderEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate,
    >,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossImageType"
    )]
    #[builder(default)]
    pub input_loss_image_type: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repeatFrameMsec"
    )]
    #[builder(default)]
    pub repeat_frame_msec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Settings for motion graphics. See Motion Graphics Configuration for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsMotionGraphicsConfiguration {
    /// –  Motion Graphics Insertion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "motionGraphicsInsertion"
    )]
    #[builder(default)]
    pub motion_graphics_insertion: Option<String>,
    /// –  Motion Graphics Settings. See Motion Graphics Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "motionGraphicsSettings"
    )]
    #[builder(default)]
    pub motion_graphics_settings:
        Option<ChannelForProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings>,
}

/// –  Motion Graphics Settings. See Motion Graphics Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings {
    /// –  Html Motion Graphics Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlMotionGraphicsSettings")]
    #[builder(default)]
    pub html_motion_graphics_settings: Option<ChannelForProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings>,
}

/// –  Html Motion Graphics Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings
{}

/// Nielsen configuration settings. See Nielsen Configuration for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsNielsenConfiguration {
    /// –  Enter the Distributor ID assigned to your organization by Nielsen.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "distributorId"
    )]
    #[builder(default)]
    pub distributor_id: Option<String>,
    /// –  Enables Nielsen PCM to ID3 tagging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenPcmToId3Tagging"
    )]
    #[builder(default)]
    pub nielsen_pcm_to_id3_tagging: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroups {
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Settings associated with the output group. See Output Group Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputGroupSettings"
    )]
    #[builder(default)]
    pub output_group_settings:
        Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettings>,
    /// List of outputs. See Outputs for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub outputs: Option<Vec<ChannelForProviderEncoderSettingsOutputGroupsOutputs>>,
}

/// Settings associated with the output group. See Output Group Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettings {
    /// Archive group settings. See Archive Group Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "archiveGroupSettings"
    )]
    #[builder(default)]
    pub archive_group_settings: Option<
        Vec<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings>,
    >,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameCaptureGroupSettings"
    )]
    #[builder(default)]
    pub frame_capture_group_settings: Option<
        ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings,
    >,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hlsGroupSettings"
    )]
    #[builder(default)]
    pub hls_group_settings:
        Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings>,
    /// Media package group settings. See Media Package Group Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mediaPackageGroupSettings"
    )]
    #[builder(default)]
    pub media_package_group_settings: Option<
        ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings,
    >,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "msSmoothGroupSettings"
    )]
    #[builder(default)]
    pub ms_smooth_group_settings: Option<
        ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings,
    >,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiplexGroupSettings"
    )]
    #[builder(default)]
    pub multiplex_group_settings: Option<
        ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings,
    >,
    /// RTMP group settings. See RTMP Group Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rtmpGroupSettings"
    )]
    #[builder(default)]
    pub rtmp_group_settings:
        Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "udpGroupSettings"
    )]
    #[builder(default)]
    pub udp_group_settings:
        Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings {
    /// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveCdnSettings")]
    #[builder(default)]
    pub archive_cdn_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination>,
    /// Number of seconds to write to archive file before closing and starting a new one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolloverInterval")]
    #[builder(default)]
    pub rollover_interval: Option<f64>,
}

/// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings {
    /// Archive S3 Settings. See Archive S3 Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveS3Settings")]
    #[builder(default)]
    pub archive_s3_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings>,
}

/// Archive S3 Settings. See Archive S3 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings
{
    /// Specify the canned ACL to apply to each S3 request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAcl")]
    #[builder(default)]
    pub canned_acl: Option<String>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings {
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureCdnSettings")]
    #[builder(default)]
    pub frame_capture_cdn_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureS3Settings")]
    #[builder(default)]
    pub frame_capture_s3_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings
{
    /// Specify the canned ACL to apply to each S3 request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAcl")]
    #[builder(default)]
    pub canned_acl: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings {
    /// The ad marker type for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adMarkers")]
    #[builder(default)]
    pub ad_markers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlContent")]
    #[builder(default)]
    pub base_url_content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlContent1")]
    #[builder(default)]
    pub base_url_content1: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlManifest")]
    #[builder(default)]
    pub base_url_manifest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlManifest1")]
    #[builder(default)]
    pub base_url_manifest1: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "captionLanguageMappings")]
    #[builder(default)]
    pub caption_language_mappings: Option<Vec<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "captionLanguageSetting")]
    #[builder(default)]
    pub caption_language_setting: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCache")]
    #[builder(default)]
    pub client_cache: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codecSpecification")]
    #[builder(default)]
    pub codec_specification: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "constantIv")]
    #[builder(default)]
    pub constant_iv: Option<String>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryStructure")]
    #[builder(default)]
    pub directory_structure: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discontinuityTags")]
    #[builder(default)]
    pub discontinuity_tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionType")]
    #[builder(default)]
    pub encryption_type: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsCdnSettings")]
    #[builder(default)]
    pub hls_cdn_settings: Option<Vec<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsId3SegmentTagging")]
    #[builder(default)]
    pub hls_id3_segment_tagging: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iframeOnlyPlaylists")]
    #[builder(default)]
    pub iframe_only_playlists: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incompleteSegmentBehavior")]
    #[builder(default)]
    pub incomplete_segment_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexNSegments")]
    #[builder(default)]
    pub index_n_segments: Option<f64>,
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossAction")]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ivInManifest")]
    #[builder(default)]
    pub iv_in_manifest: Option<String>,
    /// The source for the timecode that will be associated with the events outputs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ivSource")]
    #[builder(default)]
    pub iv_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepSegments")]
    #[builder(default)]
    pub keep_segments: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFormat")]
    #[builder(default)]
    pub key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFormatVersions")]
    #[builder(default)]
    pub key_format_versions: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyProviderSettings")]
    #[builder(default)]
    pub key_provider_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manifestCompression")]
    #[builder(default)]
    pub manifest_compression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manifestDurationFormat")]
    #[builder(default)]
    pub manifest_duration_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSegmentLength")]
    #[builder(default)]
    pub min_segment_length: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSelection")]
    #[builder(default)]
    pub output_selection: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programDateTime")]
    #[builder(default)]
    pub program_date_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programDateTimeClock")]
    #[builder(default)]
    pub program_date_time_clock: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programDateTimePeriod")]
    #[builder(default)]
    pub program_date_time_period: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redundantManifest")]
    #[builder(default)]
    pub redundant_manifest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentLength")]
    #[builder(default)]
    pub segment_length: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentsPerSubdirectory")]
    #[builder(default)]
    pub segments_per_subdirectory: Option<f64>,
    /// - Maximum CDI input resolution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamInfResolution")]
    #[builder(default)]
    pub stream_inf_resolution: Option<String>,
    /// Indicates ID3 frame that has the timecode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataId3Frame")]
    #[builder(default)]
    pub timed_metadata_id3_frame: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataId3Period")]
    #[builder(default)]
    pub timed_metadata_id3_period: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampDeltaMilliseconds")]
    #[builder(default)]
    pub timestamp_delta_milliseconds: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tsFileMode")]
    #[builder(default)]
    pub ts_file_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionChannel"
    )]
    #[builder(default)]
    pub caption_channel: Option<f64>,
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageDescription"
    )]
    #[builder(default)]
    pub language_description: Option<String>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsAkamaiSettings")]
    #[builder(default)]
    pub hls_akamai_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsBasicPutSettings")]
    #[builder(default)]
    pub hls_basic_put_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsMediaStoreSettings")]
    #[builder(default)]
    pub hls_media_store_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsS3Settings")]
    #[builder(default)]
    pub hls_s3_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsWebdavSettings")]
    #[builder(default)]
    pub hls_webdav_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTransferMode"
    )]
    #[builder(default)]
    pub http_transfer_mode: Option<String>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub salt: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub token: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mediaStoreStorageClass"
    )]
    #[builder(default)]
    pub media_store_storage_class: Option<String>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings
{
    /// Specify the canned ACL to apply to each S3 request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAcl")]
    #[builder(default)]
    pub canned_acl: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTransferMode"
    )]
    #[builder(default)]
    pub http_transfer_mode: Option<String>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticKeySettings")]
    #[builder(default)]
    pub static_key_settings: Option<Vec<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyProviderServer")]
    #[builder(default)]
    pub key_provider_server: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticKeyValue")]
    #[builder(default)]
    pub static_key_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Media package group settings. See Media Package Group Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings {
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings {
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acquisitionPointId")]
    #[builder(default)]
    pub acquisition_point_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioOnlyTimecodeControl")]
    #[builder(default)]
    pub audio_only_timecode_control: Option<String>,
    /// Setting to allow self signed or verified RTMP certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateMode")]
    #[builder(default)]
    pub certificate_mode: Option<String>,
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionRetryInterval")]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventId")]
    #[builder(default)]
    pub event_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventIdMode")]
    #[builder(default)]
    pub event_id_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventStopBehavior")]
    #[builder(default)]
    pub event_stop_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filecacheDuration")]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fragmentLength")]
    #[builder(default)]
    pub fragment_length: Option<f64>,
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossAction")]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    /// Number of retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartDelay")]
    #[builder(default)]
    pub restart_delay: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationMode")]
    #[builder(default)]
    pub segmentation_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendDelayMs")]
    #[builder(default)]
    pub send_delay_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseTrackType")]
    #[builder(default)]
    pub sparse_track_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamManifestBehavior")]
    #[builder(default)]
    pub stream_manifest_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampOffset")]
    #[builder(default)]
    pub timestamp_offset: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampOffsetMode")]
    #[builder(default)]
    pub timestamp_offset_mode: Option<String>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings {
}

/// RTMP group settings. See RTMP Group Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings {
    /// The ad marker type for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adMarkers")]
    #[builder(default)]
    pub ad_markers: Option<Vec<String>>,
    /// Authentication scheme to use when connecting with CDN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationScheme"
    )]
    #[builder(default)]
    pub authentication_scheme: Option<String>,
    /// Controls behavior when content cache fills up.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cacheFullBehavior"
    )]
    #[builder(default)]
    pub cache_full_behavior: Option<String>,
    /// Cache length in seconds, is used to calculate buffer size.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cacheLength"
    )]
    #[builder(default)]
    pub cache_length: Option<f64>,
    /// Controls the types of data that passes to onCaptionInfo outputs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionData"
    )]
    #[builder(default)]
    pub caption_data: Option<String>,
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossAction"
    )]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings {
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossAction"
    )]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    /// Indicates ID3 frame that has the timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataId3Frame"
    )]
    #[builder(default)]
    pub timed_metadata_id3_frame: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataId3Period"
    )]
    #[builder(default)]
    pub timed_metadata_id3_period: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputs {
    /// The names of the audio descriptions used as audio sources for the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioDescriptionNames"
    )]
    #[builder(default)]
    pub audio_description_names: Option<Vec<String>>,
    /// The names of the caption descriptions used as caption sources for the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionDescriptionNames"
    )]
    #[builder(default)]
    pub caption_description_names: Option<Vec<String>>,
    /// The name used to identify an output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputName"
    )]
    #[builder(default)]
    pub output_name: Option<String>,
    /// Settings for output. See Output Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputSettings"
    )]
    #[builder(default)]
    pub output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettings>,
    /// The name of the video description used as video source for the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoDescriptionName"
    )]
    #[builder(default)]
    pub video_description_name: Option<String>,
}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettings {
    /// Archive output settings. See Archive Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveOutputSettings")]
    #[builder(default)]
    pub archive_output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureOutputSettings")]
    #[builder(default)]
    pub frame_capture_output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsOutputSettings")]
    #[builder(default)]
    pub hls_output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings>,
    /// Media package output settings. This can be set as an empty block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mediaPackageOutputSettings")]
    #[builder(default)]
    pub media_package_output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "msSmoothOutputSettings")]
    #[builder(default)]
    pub ms_smooth_output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings>,
    /// Multiplex output settings. See Multiplex Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiplexOutputSettings")]
    #[builder(default)]
    pub multiplex_output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings>,
    /// RTMP output settings. See RTMP Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rtmpOutputSettings")]
    #[builder(default)]
    pub rtmp_output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings>,
    /// UDP output settings. See UDP Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpOutputSettings")]
    #[builder(default)]
    pub udp_output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings>,
}

/// Archive output settings. See Archive Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings {
    /// Settings specific to the container type of the file. See Container Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerSettings")]
    #[builder(default)]
    pub container_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings>,
    /// Output file extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub extension: Option<String>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameModifier")]
    #[builder(default)]
    pub name_modifier: Option<String>,
}

/// Settings specific to the container type of the file. See Container Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings {
    /// M2TS Settings. See M2TS Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "m2tsSettings")]
    #[builder(default)]
    pub m2ts_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings>,
    /// Raw Settings. This can be set as an empty block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawSettings")]
    #[builder(default)]
    pub raw_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings>,
}

/// M2TS Settings. See M2TS Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "absentInputAudioBehavior")]
    #[builder(default)]
    pub absent_input_audio_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arib: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPid")]
    #[builder(default)]
    pub arib_captions_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPidControl")]
    #[builder(default)]
    pub arib_captions_pid_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioBufferModel")]
    #[builder(default)]
    pub audio_buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioFramesPerPes")]
    #[builder(default)]
    pub audio_frames_per_pes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPids")]
    #[builder(default)]
    pub audio_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioStreamType")]
    #[builder(default)]
    pub audio_stream_type: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferModel")]
    #[builder(default)]
    pub buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ccDescriptor")]
    #[builder(default)]
    pub cc_descriptor: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbNitSettings")]
    #[builder(default)]
    pub dvb_nit_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSdtSettings")]
    #[builder(default)]
    pub dvb_sdt_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubPids")]
    #[builder(default)]
    pub dvb_sub_pids: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTdtSettings")]
    #[builder(default)]
    pub dvb_tdt_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTeletextPid")]
    #[builder(default)]
    pub dvb_teletext_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ebif: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpAudioInterval")]
    #[builder(default)]
    pub ebp_audio_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpLookaheadMs")]
    #[builder(default)]
    pub ebp_lookahead_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpPlacement")]
    #[builder(default)]
    pub ebp_placement: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecmPid")]
    #[builder(default)]
    pub ecm_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "esRateInPes")]
    #[builder(default)]
    pub es_rate_in_pes: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvPlatformPid")]
    #[builder(default)]
    pub etv_platform_pid: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvSignalPid")]
    #[builder(default)]
    pub etv_signal_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fragmentTime")]
    #[builder(default)]
    pub fragment_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub klv: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "klvDataPids")]
    #[builder(default)]
    pub klv_data_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenId3Behavior")]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nullPacketBitrate")]
    #[builder(default)]
    pub null_packet_bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "patInterval")]
    #[builder(default)]
    pub pat_interval: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrControl")]
    #[builder(default)]
    pub pcr_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPeriod")]
    #[builder(default)]
    pub pcr_period: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPid")]
    #[builder(default)]
    pub pcr_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtInterval")]
    #[builder(default)]
    pub pmt_interval: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtPid")]
    #[builder(default)]
    pub pmt_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programNum")]
    #[builder(default)]
    pub program_num: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateMode")]
    #[builder(default)]
    pub rate_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27Pids")]
    #[builder(default)]
    pub scte27_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Control")]
    #[builder(default)]
    pub scte35_control: Option<String>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationMarkers")]
    #[builder(default)]
    pub segmentation_markers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationStyle")]
    #[builder(default)]
    pub segmentation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationTime")]
    #[builder(default)]
    pub segmentation_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataBehavior")]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataPid")]
    #[builder(default)]
    pub timed_metadata_pid: Option<String>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportStreamId")]
    #[builder(default)]
    pub transport_stream_id: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoPid")]
    #[builder(default)]
    pub video_pid: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings
{
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkId")]
    #[builder(default)]
    pub network_id: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkName"
    )]
    #[builder(default)]
    pub network_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings
{
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSdt")]
    #[builder(default)]
    pub output_sdt: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default)]
    pub service_name: Option<String>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceProviderName"
    )]
    #[builder(default)]
    pub service_provider_name: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// Raw Settings. This can be set as an empty block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings
{}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings
{
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameModifier"
    )]
    #[builder(default)]
    pub name_modifier: Option<String>,
}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "h265PackagingType")]
    #[builder(default)]
    pub h265_packaging_type: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsSettings")]
    #[builder(default)]
    pub hls_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameModifier")]
    #[builder(default)]
    pub name_modifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentModifier")]
    #[builder(default)]
    pub segment_modifier: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioOnlyHlsSettings")]
    #[builder(default)]
    pub audio_only_hls_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fmp4HlsSettings")]
    #[builder(default)]
    pub fmp4_hls_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureHlsSettings")]
    #[builder(default)]
    pub frame_capture_hls_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardHlsSettings")]
    #[builder(default)]
    pub standard_hls_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings {
    /// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioGroupId")]
    #[builder(default)]
    pub audio_group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioOnlyImage")]
    #[builder(default)]
    pub audio_only_image: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioTrackType")]
    #[builder(default)]
    pub audio_track_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentType")]
    #[builder(default)]
    pub segment_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioRenditionSets"
    )]
    #[builder(default)]
    pub audio_rendition_sets: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenId3Behavior"
    )]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataBehavior"
    )]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings
{}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioRenditionSets")]
    #[builder(default)]
    pub audio_rendition_sets: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "m3u8Settings")]
    #[builder(default)]
    pub m3u8_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioFramesPerPes"
    )]
    #[builder(default)]
    pub audio_frames_per_pes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPids")]
    #[builder(default)]
    pub audio_pids: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecmPid")]
    #[builder(default)]
    pub ecm_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenId3Behavior"
    )]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "patInterval"
    )]
    #[builder(default)]
    pub pat_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pcrControl"
    )]
    #[builder(default)]
    pub pcr_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPeriod")]
    #[builder(default)]
    pub pcr_period: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPid")]
    #[builder(default)]
    pub pcr_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pmtInterval"
    )]
    #[builder(default)]
    pub pmt_interval: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtPid")]
    #[builder(default)]
    pub pmt_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "programNum"
    )]
    #[builder(default)]
    pub program_num: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scte35Behavior"
    )]
    #[builder(default)]
    pub scte35_behavior: Option<String>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataBehavior"
    )]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataPid"
    )]
    #[builder(default)]
    pub timed_metadata_pid: Option<String>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transportStreamId"
    )]
    #[builder(default)]
    pub transport_stream_id: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoPid")]
    #[builder(default)]
    pub video_pid: Option<String>,
}

/// Media package output settings. This can be set as an empty block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings
{}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "h265PackagingType"
    )]
    #[builder(default)]
    pub h265_packaging_type: Option<String>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameModifier"
    )]
    #[builder(default)]
    pub name_modifier: Option<String>,
}

/// Multiplex output settings. See Multiplex Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings {
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// RTMP output settings. See RTMP Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings {
    /// Setting to allow self signed or verified RTMP certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateMode")]
    #[builder(default)]
    pub certificate_mode: Option<String>,
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionRetryInterval")]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination>,
    /// Number of retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    #[builder(default)]
    pub num_retries: Option<f64>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// UDP output settings. See UDP Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings {
    /// UDP output buffering in milliseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferMsec")]
    #[builder(default)]
    pub buffer_msec: Option<f64>,
    /// Settings specific to the container type of the file. See Container Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerSettings")]
    #[builder(default)]
    pub container_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fecOutputSettings")]
    #[builder(default)]
    pub fec_output_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings>,
}

/// Settings specific to the container type of the file. See Container Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings {
    /// M2TS Settings. See M2TS Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "m2tsSettings")]
    #[builder(default)]
    pub m2ts_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings>,
}

/// M2TS Settings. See M2TS Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "absentInputAudioBehavior")]
    #[builder(default)]
    pub absent_input_audio_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arib: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPid")]
    #[builder(default)]
    pub arib_captions_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPidControl")]
    #[builder(default)]
    pub arib_captions_pid_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioBufferModel")]
    #[builder(default)]
    pub audio_buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioFramesPerPes")]
    #[builder(default)]
    pub audio_frames_per_pes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPids")]
    #[builder(default)]
    pub audio_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioStreamType")]
    #[builder(default)]
    pub audio_stream_type: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferModel")]
    #[builder(default)]
    pub buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ccDescriptor")]
    #[builder(default)]
    pub cc_descriptor: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbNitSettings")]
    #[builder(default)]
    pub dvb_nit_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSdtSettings")]
    #[builder(default)]
    pub dvb_sdt_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubPids")]
    #[builder(default)]
    pub dvb_sub_pids: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTdtSettings")]
    #[builder(default)]
    pub dvb_tdt_settings: Option<ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTeletextPid")]
    #[builder(default)]
    pub dvb_teletext_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ebif: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpAudioInterval")]
    #[builder(default)]
    pub ebp_audio_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpLookaheadMs")]
    #[builder(default)]
    pub ebp_lookahead_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpPlacement")]
    #[builder(default)]
    pub ebp_placement: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecmPid")]
    #[builder(default)]
    pub ecm_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "esRateInPes")]
    #[builder(default)]
    pub es_rate_in_pes: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvPlatformPid")]
    #[builder(default)]
    pub etv_platform_pid: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvSignalPid")]
    #[builder(default)]
    pub etv_signal_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fragmentTime")]
    #[builder(default)]
    pub fragment_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub klv: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "klvDataPids")]
    #[builder(default)]
    pub klv_data_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenId3Behavior")]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nullPacketBitrate")]
    #[builder(default)]
    pub null_packet_bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "patInterval")]
    #[builder(default)]
    pub pat_interval: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrControl")]
    #[builder(default)]
    pub pcr_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPeriod")]
    #[builder(default)]
    pub pcr_period: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPid")]
    #[builder(default)]
    pub pcr_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtInterval")]
    #[builder(default)]
    pub pmt_interval: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtPid")]
    #[builder(default)]
    pub pmt_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programNum")]
    #[builder(default)]
    pub program_num: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateMode")]
    #[builder(default)]
    pub rate_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27Pids")]
    #[builder(default)]
    pub scte27_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Control")]
    #[builder(default)]
    pub scte35_control: Option<String>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationMarkers")]
    #[builder(default)]
    pub segmentation_markers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationStyle")]
    #[builder(default)]
    pub segmentation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationTime")]
    #[builder(default)]
    pub segmentation_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataBehavior")]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataPid")]
    #[builder(default)]
    pub timed_metadata_pid: Option<String>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportStreamId")]
    #[builder(default)]
    pub transport_stream_id: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoPid")]
    #[builder(default)]
    pub video_pid: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings
{
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkId")]
    #[builder(default)]
    pub network_id: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkName"
    )]
    #[builder(default)]
    pub network_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings
{
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSdt")]
    #[builder(default)]
    pub output_sdt: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default)]
    pub service_name: Option<String>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceProviderName"
    )]
    #[builder(default)]
    pub service_provider_name: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings
{
    /// The height of the FEC protection matrix.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "columnDepth"
    )]
    #[builder(default)]
    pub column_depth: Option<f64>,
    /// Enables column only or column and row based FEC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeFec"
    )]
    #[builder(default)]
    pub include_fec: Option<String>,
    /// The width of the FEC protection matrix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowLength")]
    #[builder(default)]
    pub row_length: Option<f64>,
}

/// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsTimecodeConfig {
    /// The source for the timecode that will be associated with the events outputs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
    /// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncThreshold"
    )]
    #[builder(default)]
    pub sync_threshold: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptions {
    /// Audio codec settings. See Audio Codec Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codecSettings"
    )]
    #[builder(default)]
    pub codec_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettings>,
    /// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub height: Option<f64>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Indicate how to respond to the AFD values that might be in the input video.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "respondToAfd"
    )]
    #[builder(default)]
    pub respond_to_afd: Option<String>,
    /// Behavior on how to scale.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalingBehavior"
    )]
    #[builder(default)]
    pub scaling_behavior: Option<String>,
    /// Changes the strength of the anti-alias filter used for scaling.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub sharpness: Option<f64>,
    /// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub width: Option<f64>,
}

/// Audio codec settings. See Audio Codec Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettings {
    /// Frame capture settings. See Frame Capture Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameCaptureSettings"
    )]
    #[builder(default)]
    pub frame_capture_settings:
        Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings>,
    /// H264 settings. See H264 Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "h264Settings"
    )]
    #[builder(default)]
    pub h264_settings:
        Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH264Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "h265Settings"
    )]
    #[builder(default)]
    pub h265_settings:
        Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265Settings>,
}

/// Frame capture settings. See Frame Capture Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings {
    /// The frequency at which to capture frames for inclusion in the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captureInterval"
    )]
    #[builder(default)]
    pub capture_interval: Option<f64>,
    /// Unit for the frame capture interval.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captureIntervalUnits"
    )]
    #[builder(default)]
    pub capture_interval_units: Option<String>,
}

/// H264 settings. See H264 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH264Settings {
    /// Enables or disables adaptive quantization.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adaptiveQuantization"
    )]
    #[builder(default)]
    pub adaptive_quantization: Option<String>,
    /// Indicates that AFD values will be written into the output stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "afdSignaling"
    )]
    #[builder(default)]
    pub afd_signaling: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bufFillPct"
    )]
    #[builder(default)]
    pub buf_fill_pct: Option<f64>,
    /// Size of buffer in bits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufSize")]
    #[builder(default)]
    pub buf_size: Option<f64>,
    /// Includes color space metadata in the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "colorMetadata"
    )]
    #[builder(default)]
    pub color_metadata: Option<String>,
    /// Entropy encoding mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "entropyEncoding"
    )]
    #[builder(default)]
    pub entropy_encoding: Option<String>,
    /// Filters to apply to an encode. See H264 Filter Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filterSettings"
    )]
    #[builder(default)]
    pub filter_settings: Option<
        ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings,
    >,
    /// Four bit AFD value to write on all frames of video in the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedAfd")]
    #[builder(default)]
    pub fixed_afd: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flickerAq")]
    #[builder(default)]
    pub flicker_aq: Option<String>,
    /// Controls whether coding is performed on a field basis or on a frame basis.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceFieldPictures"
    )]
    #[builder(default)]
    pub force_field_pictures: Option<String>,
    /// Indicates how the output video frame rate is specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "framerateControl"
    )]
    #[builder(default)]
    pub framerate_control: Option<String>,
    /// Framerate denominator.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "framerateDenominator"
    )]
    #[builder(default)]
    pub framerate_denominator: Option<f64>,
    /// Framerate numerator.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "framerateNumerator"
    )]
    #[builder(default)]
    pub framerate_numerator: Option<f64>,
    /// GOP-B reference.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gopBReference"
    )]
    #[builder(default)]
    pub gop_b_reference: Option<String>,
    /// Frequency of closed GOPs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gopClosedCadence"
    )]
    #[builder(default)]
    pub gop_closed_cadence: Option<f64>,
    /// Number of B-frames between reference frames.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gopNumBFrames"
    )]
    #[builder(default)]
    pub gop_num_b_frames: Option<f64>,
    /// GOP size in units of either frames of seconds per gop_size_units.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSize")]
    #[builder(default)]
    pub gop_size: Option<f64>,
    /// Indicates if the gop_size is specified in frames or seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gopSizeUnits"
    )]
    #[builder(default)]
    pub gop_size_units: Option<String>,
    /// H264 level.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub level: Option<String>,
    /// Amount of lookahead.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lookAheadRateControl"
    )]
    #[builder(default)]
    pub look_ahead_rate_control: Option<String>,
    /// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxBitrate"
    )]
    #[builder(default)]
    pub max_bitrate: Option<f64>,
    /// Min interval.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIInterval"
    )]
    #[builder(default)]
    pub min_i_interval: Option<f64>,
    /// Number of reference frames to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRefFrames"
    )]
    #[builder(default)]
    pub num_ref_frames: Option<f64>,
    /// Indicates how the output pixel aspect ratio is specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parControl"
    )]
    #[builder(default)]
    pub par_control: Option<String>,
    /// Pixel Aspect Ratio denominator.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parDenominator"
    )]
    #[builder(default)]
    pub par_denominator: Option<f64>,
    /// Pixel Aspect Ratio numerator.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parNumerator"
    )]
    #[builder(default)]
    pub par_numerator: Option<f64>,
    /// AAC profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// Quality level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "qualityLevel"
    )]
    #[builder(default)]
    pub quality_level: Option<String>,
    /// Controls the target quality for the video encode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "qvbrQualityLevel"
    )]
    #[builder(default)]
    pub qvbr_quality_level: Option<f64>,
    /// The rate control mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rateControlMode"
    )]
    #[builder(default)]
    pub rate_control_mode: Option<String>,
    /// Sets the scan type of the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanType")]
    #[builder(default)]
    pub scan_type: Option<String>,
    /// Scene change detection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sceneChangeDetect"
    )]
    #[builder(default)]
    pub scene_change_detect: Option<String>,
    /// Number of slices per picture.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slices: Option<f64>,
    /// Softness.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub softness: Option<f64>,
    /// Makes adjustments within each frame based on spatial variation of content complexity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spatialAq")]
    #[builder(default)]
    pub spatial_aq: Option<String>,
    /// Subgop length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subgopLength"
    )]
    #[builder(default)]
    pub subgop_length: Option<String>,
    /// Produces a bitstream compliant with SMPTE RP-2027.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub syntax: Option<String>,
    /// Makes adjustments within each frame based on temporal variation of content complexity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "temporalAq"
    )]
    #[builder(default)]
    pub temporal_aq: Option<String>,
    /// Determines how timecodes should be inserted into the video elementary stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeInsertion"
    )]
    #[builder(default)]
    pub timecode_insertion: Option<String>,
}

/// Filters to apply to an encode. See H264 Filter Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings {
    /// Temporal filter settings. See Temporal Filter Settings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "temporalFilterSettings")]
    #[builder(default)]
    pub temporal_filter_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings>,
}

/// Temporal filter settings. See Temporal Filter Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings
{
    /// Post filter sharpening.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postFilterSharpening"
    )]
    #[builder(default)]
    pub post_filter_sharpening: Option<String>,
    /// Filter strength.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub strength: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265Settings {
    /// Enables or disables adaptive quantization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adaptiveQuantization")]
    #[builder(default)]
    pub adaptive_quantization: Option<String>,
    /// Indicates that AFD values will be written into the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afdSignaling")]
    #[builder(default)]
    pub afd_signaling: Option<String>,
    /// Whether or not EML should insert an Alternative Transfer Function SEI message.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alternativeTransferFunction")]
    #[builder(default)]
    pub alternative_transfer_function: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Size of buffer in bits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufSize")]
    #[builder(default)]
    pub buf_size: Option<f64>,
    /// Includes color space metadata in the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorMetadata")]
    #[builder(default)]
    pub color_metadata: Option<String>,
    /// Define the color metadata for the output. H265 Color Space Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorSpaceSettings")]
    #[builder(default)]
    pub color_space_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings>,
    /// Filters to apply to an encode. See H264 Filter Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterSettings")]
    #[builder(default)]
    pub filter_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings>,
    /// Four bit AFD value to write on all frames of video in the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedAfd")]
    #[builder(default)]
    pub fixed_afd: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flickerAq")]
    #[builder(default)]
    pub flicker_aq: Option<String>,
    /// Framerate denominator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "framerateDenominator")]
    #[builder(default)]
    pub framerate_denominator: Option<f64>,
    /// Framerate numerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "framerateNumerator")]
    #[builder(default)]
    pub framerate_numerator: Option<f64>,
    /// Frequency of closed GOPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopClosedCadence")]
    #[builder(default)]
    pub gop_closed_cadence: Option<f64>,
    /// GOP size in units of either frames of seconds per gop_size_units.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSize")]
    #[builder(default)]
    pub gop_size: Option<f64>,
    /// Indicates if the gop_size is specified in frames or seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSizeUnits")]
    #[builder(default)]
    pub gop_size_units: Option<String>,
    /// H264 level.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub level: Option<String>,
    /// Amount of lookahead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lookAheadRateControl")]
    #[builder(default)]
    pub look_ahead_rate_control: Option<String>,
    /// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBitrate")]
    #[builder(default)]
    pub max_bitrate: Option<f64>,
    /// Min interval.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIInterval")]
    #[builder(default)]
    pub min_i_interval: Option<f64>,
    /// Set the minimum QP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minQp")]
    #[builder(default)]
    pub min_qp: Option<f64>,
    /// Enables or disables motion vector over picture boundaries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mvOverPictureBoundaries")]
    #[builder(default)]
    pub mv_over_picture_boundaries: Option<String>,
    /// Enables or disables the motion vector temporal predictor.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mvTemporalPredictor")]
    #[builder(default)]
    pub mv_temporal_predictor: Option<String>,
    /// Pixel Aspect Ratio denominator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parDenominator")]
    #[builder(default)]
    pub par_denominator: Option<f64>,
    /// Pixel Aspect Ratio numerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parNumerator")]
    #[builder(default)]
    pub par_numerator: Option<f64>,
    /// AAC profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// Controls the target quality for the video encode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qvbrQualityLevel")]
    #[builder(default)]
    pub qvbr_quality_level: Option<f64>,
    /// The rate control mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateControlMode")]
    #[builder(default)]
    pub rate_control_mode: Option<String>,
    /// Sets the scan type of the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanType")]
    #[builder(default)]
    pub scan_type: Option<String>,
    /// Scene change detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sceneChangeDetect")]
    #[builder(default)]
    pub scene_change_detect: Option<String>,
    /// Number of slices per picture.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slices: Option<f64>,
    /// Set the H265 tier in the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tier: Option<String>,
    /// Sets the height of tiles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tileHeight")]
    #[builder(default)]
    pub tile_height: Option<f64>,
    /// Enables or disables padding of tiles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tilePadding")]
    #[builder(default)]
    pub tile_padding: Option<String>,
    /// Sets the width of tiles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tileWidth")]
    #[builder(default)]
    pub tile_width: Option<f64>,
    /// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timecodeBurninSettings")]
    #[builder(default)]
    pub timecode_burnin_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings>,
    /// Determines how timecodes should be inserted into the video elementary stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timecodeInsertion")]
    #[builder(default)]
    pub timecode_insertion: Option<String>,
    /// Sets the size of the treeblock.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "treeblockSize")]
    #[builder(default)]
    pub treeblock_size: Option<String>,
}

/// Define the color metadata for the output. H265 Color Space Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings {
    /// Sets the colorspace metadata to be passed through.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorSpacePassthroughSettings")]
    #[builder(default)]
    pub color_space_passthrough_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings>,
    /// Set the colorspace to Dolby Vision81.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dolbyVision81Settings")]
    #[builder(default)]
    pub dolby_vision81_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings>,
    /// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hdr10Settings")]
    #[builder(default)]
    pub hdr10_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings>,
    /// Set the colorspace to Rec. 601.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rec601Settings")]
    #[builder(default)]
    pub rec601_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings>,
    /// Set the colorspace to Rec. 709.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rec709Settings")]
    #[builder(default)]
    pub rec709_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings>,
}

/// Sets the colorspace metadata to be passed through.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings
{}

/// Set the colorspace to Dolby Vision81.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings
{}

/// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings
{
    /// Sets the MaxCLL value for HDR10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCll")]
    #[builder(default)]
    pub max_cll: Option<f64>,
    /// Sets the MaxFALL value for HDR10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFall")]
    #[builder(default)]
    pub max_fall: Option<f64>,
}

/// Set the colorspace to Rec. 601.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings
{}

/// Set the colorspace to Rec. 709.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings
{}

/// Filters to apply to an encode. See H264 Filter Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings {
    /// Temporal filter settings. See Temporal Filter Settings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "temporalFilterSettings")]
    #[builder(default)]
    pub temporal_filter_settings: Option<ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings>,
}

/// Temporal filter settings. See Temporal Filter Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings
{
    /// Post filter sharpening.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postFilterSharpening"
    )]
    #[builder(default)]
    pub post_filter_sharpening: Option<String>,
    /// Filter strength.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub strength: Option<String>,
}

/// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings
{
    /// Set a prefix on the burned in timecode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prefix: Option<String>,
    /// Sets the size of the burned in timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeBurninFontSize"
    )]
    #[builder(default)]
    pub timecode_burnin_font_size: Option<String>,
    /// Sets the position of the burned in timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeBurninPosition"
    )]
    #[builder(default)]
    pub timecode_burnin_position: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachments {
    /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input. See Automatic Input Failover Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automaticInputFailoverSettings"
    )]
    #[builder(default)]
    pub automatic_input_failover_settings:
        Option<ChannelForProviderInputAttachmentsAutomaticInputFailoverSettings>,
    /// User-specified name for the attachment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputAttachmentName"
    )]
    #[builder(default)]
    pub input_attachment_name: Option<String>,
    /// The ID of the input.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputId")]
    #[builder(default)]
    pub input_id: Option<String>,
    /// Reference to a Input in medialive to populate inputId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputIdRef"
    )]
    #[builder(default)]
    pub input_id_ref: Option<ChannelForProviderInputAttachmentsInputIdRef>,
    /// Selector for a Input in medialive to populate inputId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputIdSelector"
    )]
    #[builder(default)]
    pub input_id_selector: Option<ChannelForProviderInputAttachmentsInputIdSelector>,
    /// Settings of an input. See Input Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputSettings"
    )]
    #[builder(default)]
    pub input_settings: Option<ChannelForProviderInputAttachmentsInputSettings>,
}

/// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input. See Automatic Input Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsAutomaticInputFailoverSettings {
    /// This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorClearTimeMsec"
    )]
    #[builder(default)]
    pub error_clear_time_msec: Option<f64>,
    /// A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input. See Failover Condition Block for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "failoverCondition"
    )]
    #[builder(default)]
    pub failover_condition: Option<
        Vec<ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition>,
    >,
    /// Input preference when deciding which input to make active when a previously failed input has recovered.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputPreference"
    )]
    #[builder(default)]
    pub input_preference: Option<String>,
    /// The input ID of the secondary input in the automatic input failover pair.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryInputId"
    )]
    #[builder(default)]
    pub secondary_input_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition {
    /// Failover condition type-specific settings. See Failover Condition Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverConditionSettings")]
    #[builder(default)]
    pub failover_condition_settings: Option<ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings>,
}

/// Failover condition type-specific settings. See Failover Condition Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings {
    /// MediaLive will perform a failover if the specified audio selector is silent for the specified period. See Audio Silence Failover Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioSilenceSettings")]
    #[builder(default)]
    pub audio_silence_settings: Option<ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings>,
    /// MediaLive will perform a failover if content is not detected in this input for the specified period. See Input Loss Failover Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossSettings")]
    #[builder(default)]
    pub input_loss_settings: Option<ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings>,
    /// MediaLive will perform a failover if content is considered black for the specified period. See Video Black Failover Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoBlackSettings")]
    #[builder(default)]
    pub video_black_settings: Option<ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings>,
}

/// MediaLive will perform a failover if the specified audio selector is silent for the specified period. See Audio Silence Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings
{
    /// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSelectorName"
    )]
    #[builder(default)]
    pub audio_selector_name: Option<String>,
    /// The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSilenceThresholdMsec"
    )]
    #[builder(default)]
    pub audio_silence_threshold_msec: Option<f64>,
}

/// MediaLive will perform a failover if content is not detected in this input for the specified period. See Input Loss Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings
{
    /// The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossThresholdMsec"
    )]
    #[builder(default)]
    pub input_loss_threshold_msec: Option<f64>,
}

/// MediaLive will perform a failover if content is considered black for the specified period. See Video Black Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings
{
    /// A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (10230.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (2550.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blackDetectThreshold"
    )]
    #[builder(default)]
    pub black_detect_threshold: Option<f64>,
    /// The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoBlackThresholdMsec"
    )]
    #[builder(default)]
    pub video_black_threshold_msec: Option<f64>,
}

/// Reference to a Input in medialive to populate inputId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelForProviderInputAttachmentsInputIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelForProviderInputAttachmentsInputIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelForProviderInputAttachmentsInputIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelForProviderInputAttachmentsInputIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelForProviderInputAttachmentsInputIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Input in medialive to populate inputId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelForProviderInputAttachmentsInputIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelForProviderInputAttachmentsInputIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelForProviderInputAttachmentsInputIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelForProviderInputAttachmentsInputIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelForProviderInputAttachmentsInputIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings of an input. See Input Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettings {
    /// Used to select the audio stream to decode for inputs that have multiple. See Audio Selectors for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSelector"
    )]
    #[builder(default)]
    pub audio_selector: Option<Vec<ChannelForProviderInputAttachmentsInputSettingsAudioSelector>>,
    /// Used to select the caption input to use for inputs that have multiple available. See Caption Selectors for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionSelector"
    )]
    #[builder(default)]
    pub caption_selector:
        Option<Vec<ChannelForProviderInputAttachmentsInputSettingsCaptionSelector>>,
    /// Enable or disable the deblock filter when filtering.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deblockFilter"
    )]
    #[builder(default)]
    pub deblock_filter: Option<String>,
    /// Enable or disable the denoise filter when filtering.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "denoiseFilter"
    )]
    #[builder(default)]
    pub denoise_filter: Option<String>,
    /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filterStrength"
    )]
    #[builder(default)]
    pub filter_strength: Option<f64>,
    /// Turns on the filter for the input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputFilter"
    )]
    #[builder(default)]
    pub input_filter: Option<String>,
    /// Input settings. See Network Input Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInputSettings"
    )]
    #[builder(default)]
    pub network_input_settings:
        Option<ChannelForProviderInputAttachmentsInputSettingsNetworkInputSettings>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<f64>,
    /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smpte2038DataPreference"
    )]
    #[builder(default)]
    pub smpte2038_data_preference: Option<String>,
    /// Loop input if it is a file.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndBehavior"
    )]
    #[builder(default)]
    pub source_end_behavior: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoSelector"
    )]
    #[builder(default)]
    pub video_selector: Option<ChannelForProviderInputAttachmentsInputSettingsVideoSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsAudioSelector {
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The audio selector settings. See Audio Selector Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectorSettings"
    )]
    #[builder(default)]
    pub selector_settings:
        Option<ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettings>,
}

/// The audio selector settings. See Audio Selector Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettings {
    /// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioHlsRenditionSelection")]
    #[builder(default)]
    pub audio_hls_rendition_selection: Option<ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection>,
    /// Audio Language Selection. See Audio Language Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioLanguageSelection")]
    #[builder(default)]
    pub audio_language_selection: Option<ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection>,
    /// Audio Pid Selection. See Audio PID Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPidSelection")]
    #[builder(default)]
    pub audio_pid_selection: Option<ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection>,
    /// Audio Track Selection. See Audio Track Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioTrackSelection")]
    #[builder(default)]
    pub audio_track_selection: Option<ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection>,
}

/// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection
{
    /// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupId")]
    #[builder(default)]
    pub group_id: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Audio Language Selection. See Audio Language Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection
{
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageSelectionPolicy"
    )]
    #[builder(default)]
    pub language_selection_policy: Option<String>,
}

/// Audio Pid Selection. See Audio PID Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection
{
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pid: Option<f64>,
}

/// Audio Track Selection. See Audio Track Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection {
    /// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dolbyEDecode")]
    #[builder(default)]
    pub dolby_e_decode: Option<ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode>,
    /// Selects one or more unique audio tracks from within a source. See Audio Tracks for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tracks: Option<Vec<ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks>>,
}

/// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode
{
    /// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "programSelection"
    )]
    #[builder(default)]
    pub program_selection: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks
{
    /// 1-based integer value that maps to a specific audio track.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub track: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelector {
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The audio selector settings. See Audio Selector Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectorSettings"
    )]
    #[builder(default)]
    pub selector_settings:
        Option<ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettings>,
}

/// The audio selector settings. See Audio Selector Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettings {
    /// Ancillary Source Settings. See Ancillary Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ancillarySourceSettings")]
    #[builder(default)]
    pub ancillary_source_settings: Option<ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings>,
    /// ARIB Source Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribSourceSettings")]
    #[builder(default)]
    pub arib_source_settings: Option<ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings>,
    /// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubSourceSettings")]
    #[builder(default)]
    pub dvb_sub_source_settings: Option<ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings>,
    /// Embedded Source Settings. See Embedded Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "embeddedSourceSettings")]
    #[builder(default)]
    pub embedded_source_settings: Option<ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings>,
    /// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte20SourceSettings")]
    #[builder(default)]
    pub scte20_source_settings: Option<ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings>,
    /// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27SourceSettings")]
    #[builder(default)]
    pub scte27_source_settings: Option<ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings>,
    /// Teletext Source Settings. See Teletext Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextSourceSettings")]
    #[builder(default)]
    pub teletext_source_settings: Option<ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings>,
}

/// Ancillary Source Settings. See Ancillary Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings
{
    /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceAncillaryChannelNumber"
    )]
    #[builder(default)]
    pub source_ancillary_channel_number: Option<f64>,
}

/// ARIB Source Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings
{}

/// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings
{
    /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocrLanguage"
    )]
    #[builder(default)]
    pub ocr_language: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pid: Option<f64>,
}

/// Embedded Source Settings. See Embedded Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings
{
    /// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "convert608To708"
    )]
    #[builder(default)]
    pub convert608_to708: Option<String>,
    /// Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scte20Detection"
    )]
    #[builder(default)]
    pub scte20_detection: Option<String>,
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "source608ChannelNumber"
    )]
    #[builder(default)]
    pub source608_channel_number: Option<f64>,
}

/// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings
{
    /// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "convert608To708"
    )]
    #[builder(default)]
    pub convert608_to708: Option<String>,
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "source608ChannelNumber"
    )]
    #[builder(default)]
    pub source608_channel_number: Option<f64>,
}

/// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings
{
    /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocrLanguage"
    )]
    #[builder(default)]
    pub ocr_language: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pid: Option<f64>,
}

/// Teletext Source Settings. See Teletext Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings {
    /// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputRectangle")]
    #[builder(default)]
    pub output_rectangle: Option<ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle>,
    /// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no “0x” prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pageNumber")]
    #[builder(default)]
    pub page_number: Option<String>,
}

/// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle
{
    /// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub height: Option<f64>,
    /// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "leftOffset"
    )]
    #[builder(default)]
    pub left_offset: Option<f64>,
    /// See the description in left_offset. For top_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topOffset")]
    #[builder(default)]
    pub top_offset: Option<f64>,
    /// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub width: Option<f64>,
}

/// Input settings. See Network Input Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsNetworkInputSettings {
    /// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hlsInputSettings"
    )]
    #[builder(default)]
    pub hls_input_settings:
        Option<ChannelForProviderInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings>,
    /// Check HTTPS server certificates.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverValidation"
    )]
    #[builder(default)]
    pub server_validation: Option<String>,
}

/// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings {
    /// The bitrate is specified in bits per second, as in an HLS manifest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bandwidth: Option<f64>,
    /// Buffer segments.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bufferSegments"
    )]
    #[builder(default)]
    pub buffer_segments: Option<f64>,
    /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub retries: Option<f64>,
    /// The number of seconds between retries when an attempt to read a manifest or segment fails.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retryInterval"
    )]
    #[builder(default)]
    pub retry_interval: Option<f64>,
    /// The source for the timecode that will be associated with the events outputs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scte35Source"
    )]
    #[builder(default)]
    pub scte35_source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputAttachmentsInputSettingsVideoSelector {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "colorSpace"
    )]
    #[builder(default)]
    pub color_space: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "colorSpaceUsage"
    )]
    #[builder(default)]
    pub color_space_usage: Option<String>,
}

/// Specification of network and file inputs for the channel.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderInputSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub codec: Option<String>,
    /// - Maximum CDI input resolution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputResolution"
    )]
    #[builder(default)]
    pub input_resolution: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumBitrate"
    )]
    #[builder(default)]
    pub maximum_bitrate: Option<String>,
}

/// Maintenance settings for this channel. See Maintenance for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderMaintenance {
    /// The day of the week to use for maintenance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceDay"
    )]
    #[builder(default)]
    pub maintenance_day: Option<String>,
    /// The hour maintenance will start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceStartTime"
    )]
    #[builder(default)]
    pub maintenance_start_time: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelForProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelForProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelForProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelForProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelForProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelForProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelForProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelForProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelForProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelForProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings for the VPC outputs. See VPC for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelForProviderVpc {
    /// List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicAddressAllocationIds"
    )]
    #[builder(default)]
    pub public_address_allocation_ids: Option<Vec<String>>,
    /// A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProvider {
    /// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cdiInputSpecification"
    )]
    #[builder(default)]
    pub cdi_input_specification: Option<ChannelInitProviderCdiInputSpecification>,
    /// Concise argument description.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelClass"
    )]
    #[builder(default)]
    pub channel_class: Option<String>,
    /// Destinations for channel. See Destinations for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destinations: Option<Vec<ChannelInitProviderDestinations>>,
    /// Encoder settings. See Encoder Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encoderSettings"
    )]
    #[builder(default)]
    pub encoder_settings: Option<ChannelInitProviderEncoderSettings>,
    /// Input attachments for the channel. See Input Attachments for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputAttachments"
    )]
    #[builder(default)]
    pub input_attachments: Option<Vec<ChannelInitProviderInputAttachments>>,
    /// Specification of network and file inputs for the channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputSpecification"
    )]
    #[builder(default)]
    pub input_specification: Option<ChannelInitProviderInputSpecification>,
    /// The log level to write to Cloudwatch logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    #[builder(default)]
    pub log_level: Option<String>,
    /// Maintenance settings for this channel. See Maintenance for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub maintenance: Option<ChannelInitProviderMaintenance>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Concise argument description.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default)]
    pub role_arn_ref: Option<ChannelInitProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default)]
    pub role_arn_selector: Option<ChannelInitProviderRoleArnSelector>,
    /// Whether to start/stop channel. Default: false
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startChannel"
    )]
    #[builder(default)]
    pub start_channel: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Settings for the VPC outputs. See VPC for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub vpc: Option<ChannelInitProviderVpc>,
}

/// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderCdiInputSpecification {
    /// - Maximum CDI input resolution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderDestinations {
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mediaPackageSettings"
    )]
    #[builder(default)]
    pub media_package_settings: Option<Vec<ChannelInitProviderDestinationsMediaPackageSettings>>,
    /// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiplexSettings"
    )]
    #[builder(default)]
    pub multiplex_settings: Option<ChannelInitProviderDestinationsMultiplexSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub settings: Option<Vec<ChannelInitProviderDestinationsSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderDestinationsMediaPackageSettings {
    /// ID of the channel in MediaPackage that is the destination for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelId")]
    #[builder(default)]
    pub channel_id: Option<String>,
}

/// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderDestinationsMultiplexSettings {
    /// The ID of the Multiplex that the encoder is providing output to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiplexId"
    )]
    #[builder(default)]
    pub multiplex_id: Option<String>,
    /// The program name of the Multiplex program that the encoder is providing output to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "programName"
    )]
    #[builder(default)]
    pub program_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderDestinationsSettings {
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// Stream name RTMP destinations (URLs of type rtmp://)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamName"
    )]
    #[builder(default)]
    pub stream_name: Option<String>,
    /// A URL specifying a destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Encoder settings. See Encoder Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettings {
    /// Audio descriptions for the channel. See Audio Descriptions for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioDescriptions"
    )]
    #[builder(default)]
    pub audio_descriptions: Option<Vec<ChannelInitProviderEncoderSettingsAudioDescriptions>>,
    /// Settings for ad avail blanking. See Avail Blanking for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availBlanking"
    )]
    #[builder(default)]
    pub avail_blanking: Option<ChannelInitProviderEncoderSettingsAvailBlanking>,
    /// Caption Descriptions. See Caption Descriptions for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionDescriptions"
    )]
    #[builder(default)]
    pub caption_descriptions: Option<Vec<ChannelInitProviderEncoderSettingsCaptionDescriptions>>,
    /// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "globalConfiguration"
    )]
    #[builder(default)]
    pub global_configuration: Option<ChannelInitProviderEncoderSettingsGlobalConfiguration>,
    /// Settings for motion graphics. See Motion Graphics Configuration for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "motionGraphicsConfiguration"
    )]
    #[builder(default)]
    pub motion_graphics_configuration:
        Option<ChannelInitProviderEncoderSettingsMotionGraphicsConfiguration>,
    /// Nielsen configuration settings. See Nielsen Configuration for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenConfiguration"
    )]
    #[builder(default)]
    pub nielsen_configuration: Option<ChannelInitProviderEncoderSettingsNielsenConfiguration>,
    /// Output groups for the channel. See Output Groups for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputGroups"
    )]
    #[builder(default)]
    pub output_groups: Option<Vec<ChannelInitProviderEncoderSettingsOutputGroups>>,
    /// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeConfig"
    )]
    #[builder(default)]
    pub timecode_config: Option<ChannelInitProviderEncoderSettingsTimecodeConfig>,
    /// Video Descriptions. See Video Descriptions for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoDescriptions"
    )]
    #[builder(default)]
    pub video_descriptions: Option<Vec<ChannelInitProviderEncoderSettingsVideoDescriptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptions {
    /// Advanced audio normalization settings. See Audio Normalization Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioNormalizationSettings"
    )]
    #[builder(default)]
    pub audio_normalization_settings:
        Option<ChannelInitProviderEncoderSettingsAudioDescriptionsAudioNormalizationSettings>,
    /// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSelectorName"
    )]
    #[builder(default)]
    pub audio_selector_name: Option<String>,
    /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioType")]
    #[builder(default)]
    pub audio_type: Option<String>,
    /// Determined how audio type is determined.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioTypeControl"
    )]
    #[builder(default)]
    pub audio_type_control: Option<String>,
    /// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioWatermarkSettings"
    )]
    #[builder(default)]
    pub audio_watermark_settings:
        Option<ChannelInitProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettings>,
    /// Audio codec settings. See Audio Codec Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codecSettings"
    )]
    #[builder(default)]
    pub codec_settings: Option<ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettings>,
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCodeControl"
    )]
    #[builder(default)]
    pub language_code_control: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remixSettings"
    )]
    #[builder(default)]
    pub remix_settings: Option<ChannelInitProviderEncoderSettingsAudioDescriptionsRemixSettings>,
    /// Stream name RTMP destinations (URLs of type rtmp://)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamName"
    )]
    #[builder(default)]
    pub stream_name: Option<String>,
}

/// Advanced audio normalization settings. See Audio Normalization Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsAudioNormalizationSettings {
    /// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub algorithm: Option<String>,
    /// Algorithm control for the audio description.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "algorithmControl"
    )]
    #[builder(default)]
    pub algorithm_control: Option<String>,
    /// Target LKFS (loudness) to adjust volume to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetLkfs"
    )]
    #[builder(default)]
    pub target_lkfs: Option<f64>,
}

/// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenWatermarksSettings")]
    #[builder(default)]
    pub nielsen_watermarks_settings: Option<ChannelInitProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings {
    /// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenCbetSettings")]
    #[builder(default)]
    pub nielsen_cbet_settings: Option<ChannelInitProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings>,
    /// Distribution types to assign to the watermarks. Options are PROGRAM_CONTENT and FINAL_DISTRIBUTOR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenDistributionType")]
    #[builder(default)]
    pub nielsen_distribution_type: Option<String>,
    /// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenNaesIiNwSettings")]
    #[builder(default)]
    pub nielsen_naes_ii_nw_settings: Option<Vec<ChannelInitProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings>>,
}

/// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cbetCheckDigitString"
    )]
    #[builder(default)]
    pub cbet_check_digit_string: Option<String>,
    /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cbetStepaside"
    )]
    #[builder(default)]
    pub cbet_stepaside: Option<String>,
    /// CBET source ID to use in the watermark.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub csid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkDigitString"
    )]
    #[builder(default)]
    pub check_digit_string: Option<String>,
    /// The Nielsen Source ID to include in the watermark.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub sid: Option<f64>,
}

/// Audio codec settings. See Audio Codec Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettings {
    /// Aac Settings. See AAC Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aacSettings"
    )]
    #[builder(default)]
    pub aac_settings:
        Option<ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsAacSettings>,
    /// Ac3 Settings. See AC3 Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ac3Settings"
    )]
    #[builder(default)]
    pub ac3_settings:
        Option<ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings>,
    /// - Eac3 Atmos Settings. See EAC3 Atmos Settings
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eac3AtmosSettings"
    )]
    #[builder(default)]
    pub eac3_atmos_settings:
        Option<ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings>,
    /// - Eac3 Settings. See EAC3 Settings
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eac3Settings"
    )]
    #[builder(default)]
    pub eac3_settings:
        Option<ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mp2Settings"
    )]
    #[builder(default)]
    pub mp2_settings:
        Option<ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passThroughSettings"
    )]
    #[builder(default)]
    pub pass_through_settings:
        Option<ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "wavSettings"
    )]
    #[builder(default)]
    pub wav_settings:
        Option<ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsWavSettings>,
}

/// Aac Settings. See AAC Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsAacSettings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputType")]
    #[builder(default)]
    pub input_type: Option<String>,
    /// AAC profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// The rate control mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rateControlMode"
    )]
    #[builder(default)]
    pub rate_control_mode: Option<String>,
    /// Sets LATM/LOAS AAC output for raw containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawFormat")]
    #[builder(default)]
    pub raw_format: Option<String>,
    /// Sample rate in Hz.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleRate"
    )]
    #[builder(default)]
    pub sample_rate: Option<f64>,
    /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub spec: Option<String>,
    /// VBR Quality Level - Only used if rateControlMode is VBR.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vbrQuality"
    )]
    #[builder(default)]
    pub vbr_quality: Option<String>,
}

/// Ac3 Settings. See AC3 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bitstreamMode"
    )]
    #[builder(default)]
    pub bitstream_mode: Option<String>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sets the dialnorm of the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dialnorm: Option<f64>,
    /// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "drcProfile"
    )]
    #[builder(default)]
    pub drc_profile: Option<String>,
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lfeFilter")]
    #[builder(default)]
    pub lfe_filter: Option<String>,
    /// Metadata control.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataControl"
    )]
    #[builder(default)]
    pub metadata_control: Option<String>,
}

/// - Eac3 Atmos Settings. See EAC3 Atmos Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sets the dialnorm of the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dialnorm: Option<f64>,
    /// Sets the Dolby dynamic range compression profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcLine")]
    #[builder(default)]
    pub drc_line: Option<String>,
    /// Sets the profile for heavy Dolby dynamic range compression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcRf")]
    #[builder(default)]
    pub drc_rf: Option<String>,
    /// Height dimensional trim.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightTrim"
    )]
    #[builder(default)]
    pub height_trim: Option<f64>,
    /// Surround dimensional trim.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "surroundTrim"
    )]
    #[builder(default)]
    pub surround_trim: Option<f64>,
}

/// - Eac3 Settings. See EAC3 Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings {
    /// Sets the attenuation control.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "attenuationControl"
    )]
    #[builder(default)]
    pub attenuation_control: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bitstreamMode"
    )]
    #[builder(default)]
    pub bitstream_mode: Option<String>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dcFilter")]
    #[builder(default)]
    pub dc_filter: Option<String>,
    /// Sets the dialnorm of the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dialnorm: Option<f64>,
    /// Sets the Dolby dynamic range compression profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcLine")]
    #[builder(default)]
    pub drc_line: Option<String>,
    /// Sets the profile for heavy Dolby dynamic range compression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcRf")]
    #[builder(default)]
    pub drc_rf: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lfeControl"
    )]
    #[builder(default)]
    pub lfe_control: Option<String>,
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lfeFilter")]
    #[builder(default)]
    pub lfe_filter: Option<String>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loRoCenterMixLevel"
    )]
    #[builder(default)]
    pub lo_ro_center_mix_level: Option<f64>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loRoSurroundMixLevel"
    )]
    #[builder(default)]
    pub lo_ro_surround_mix_level: Option<f64>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ltRtCenterMixLevel"
    )]
    #[builder(default)]
    pub lt_rt_center_mix_level: Option<f64>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ltRtSurroundMixLevel"
    )]
    #[builder(default)]
    pub lt_rt_surround_mix_level: Option<f64>,
    /// Metadata control.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataControl"
    )]
    #[builder(default)]
    pub metadata_control: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passthroughControl"
    )]
    #[builder(default)]
    pub passthrough_control: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phaseControl"
    )]
    #[builder(default)]
    pub phase_control: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stereoDownmix"
    )]
    #[builder(default)]
    pub stereo_downmix: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "surroundExMode"
    )]
    #[builder(default)]
    pub surround_ex_mode: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "surroundMode"
    )]
    #[builder(default)]
    pub surround_mode: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sample rate in Hz.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleRate"
    )]
    #[builder(default)]
    pub sample_rate: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings {}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsCodecSettingsWavSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitDepth")]
    #[builder(default)]
    pub bit_depth: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sample rate in Hz.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleRate"
    )]
    #[builder(default)]
    pub sample_rate: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsRemixSettings {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelMappings"
    )]
    #[builder(default)]
    pub channel_mappings: Option<
        Vec<ChannelInitProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings>,
    >,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelsIn"
    )]
    #[builder(default)]
    pub channels_in: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelsOut"
    )]
    #[builder(default)]
    pub channels_out: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputChannelLevels")]
    #[builder(default)]
    pub input_channel_levels: Option<Vec<ChannelInitProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputChannel")]
    #[builder(default)]
    pub output_channel: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels
{
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gain: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputChannel"
    )]
    #[builder(default)]
    pub input_channel: Option<f64>,
}

/// Settings for ad avail blanking. See Avail Blanking for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAvailBlanking {
    /// Blanking image to be used. See Avail Blanking Image for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availBlankingImage"
    )]
    #[builder(default)]
    pub avail_blanking_image:
        Option<ChannelInitProviderEncoderSettingsAvailBlankingAvailBlankingImage>,
    /// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
}

/// Blanking image to be used. See Avail Blanking Image for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsAvailBlankingAvailBlankingImage {
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptions {
    /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub accessibility: Option<String>,
    /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionSelectorName"
    )]
    #[builder(default)]
    pub caption_selector_name: Option<String>,
    /// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationSettings"
    )]
    #[builder(default)]
    pub destination_settings:
        Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettings>,
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageDescription"
    )]
    #[builder(default)]
    pub language_description: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettings {
    /// ARIB Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribDestinationSettings")]
    #[builder(default)]
    pub arib_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings>,
    /// Burn In Destination Settings. See Burn In Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burnInDestinationSettings")]
    #[builder(default)]
    pub burn_in_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings>,
    /// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubDestinationSettings")]
    #[builder(default)]
    pub dvb_sub_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings>,
    /// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebuTtDDestinationSettings")]
    #[builder(default)]
    pub ebu_tt_d_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings>,
    /// Embedded Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "embeddedDestinationSettings")]
    #[builder(default)]
    pub embedded_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings>,
    /// Embedded Plus SCTE20 Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "embeddedPlusScte20DestinationSettings")]
    #[builder(default)]
    pub embedded_plus_scte20_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings>,
    /// RTMP Caption Info Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rtmpCaptionInfoDestinationSettings")]
    #[builder(default)]
    pub rtmp_caption_info_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings>,
    /// SCTE20 Plus Embedded Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte20PlusEmbeddedDestinationSettings")]
    #[builder(default)]
    pub scte20_plus_embedded_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings>,
    /// –  SCTE27 Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27DestinationSettings")]
    #[builder(default)]
    pub scte27_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings>,
    /// –  SMPTE TT Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "smpteTtDestinationSettings")]
    #[builder(default)]
    pub smpte_tt_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings>,
    /// –  Teletext Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextDestinationSettings")]
    #[builder(default)]
    pub teletext_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings>,
    /// –  TTML Destination Settings. See TTML Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttmlDestinationSettings")]
    #[builder(default)]
    pub ttml_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings>,
    /// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webvttDestinationSettings")]
    #[builder(default)]
    pub webvtt_destination_settings: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings>,
}

/// ARIB Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings
{}

/// Burn In Destination Settings. See Burn In Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings {
    /// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alignment: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundColor")]
    #[builder(default)]
    pub background_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundOpacity")]
    #[builder(default)]
    pub background_opacity: Option<f64>,
    /// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub font: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont>,
    /// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontColor")]
    #[builder(default)]
    pub font_color: Option<String>,
    /// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontOpacity")]
    #[builder(default)]
    pub font_opacity: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontResolution")]
    #[builder(default)]
    pub font_resolution: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontSize")]
    #[builder(default)]
    pub font_size: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineColor")]
    #[builder(default)]
    pub outline_color: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineSize")]
    #[builder(default)]
    pub outline_size: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowColor")]
    #[builder(default)]
    pub shadow_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowOpacity")]
    #[builder(default)]
    pub shadow_opacity: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowXOffset")]
    #[builder(default)]
    pub shadow_x_offset: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowYOffset")]
    #[builder(default)]
    pub shadow_y_offset: Option<f64>,
    /// Sub/Burn-in outputs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextGridControl")]
    #[builder(default)]
    pub teletext_grid_control: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xPosition")]
    #[builder(default)]
    pub x_position: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yPosition")]
    #[builder(default)]
    pub y_position: Option<f64>,
}

/// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings {
    /// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alignment: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundColor")]
    #[builder(default)]
    pub background_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundOpacity")]
    #[builder(default)]
    pub background_opacity: Option<f64>,
    /// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub font: Option<ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont>,
    /// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontColor")]
    #[builder(default)]
    pub font_color: Option<String>,
    /// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontOpacity")]
    #[builder(default)]
    pub font_opacity: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontResolution")]
    #[builder(default)]
    pub font_resolution: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontSize")]
    #[builder(default)]
    pub font_size: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineColor")]
    #[builder(default)]
    pub outline_color: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineSize")]
    #[builder(default)]
    pub outline_size: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowColor")]
    #[builder(default)]
    pub shadow_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowOpacity")]
    #[builder(default)]
    pub shadow_opacity: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowXOffset")]
    #[builder(default)]
    pub shadow_x_offset: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowYOffset")]
    #[builder(default)]
    pub shadow_y_offset: Option<f64>,
    /// Sub/Burn-in outputs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextGridControl")]
    #[builder(default)]
    pub teletext_grid_control: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xPosition")]
    #[builder(default)]
    pub x_position: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yPosition")]
    #[builder(default)]
    pub y_position: Option<f64>,
}

/// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings
{
    /// –  Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "copyrightHolder"
    )]
    #[builder(default)]
    pub copyright_holder: Option<String>,
    /// line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fillLineGap"
    )]
    #[builder(default)]
    pub fill_line_gap: Option<String>,
    /// TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to “monospaced”. (If styleControl is set to exclude, the font family is always set to “monospaced”.) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontFamily"
    )]
    #[builder(default)]
    pub font_family: Option<String>,
    /// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "styleControl"
    )]
    #[builder(default)]
    pub style_control: Option<String>,
}

/// Embedded Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings
{}

/// Embedded Plus SCTE20 Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings
{}

/// RTMP Caption Info Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings
{}

/// SCTE20 Plus Embedded Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings
{}

/// –  SCTE27 Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings
{}

/// –  SMPTE TT Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings
{}

/// –  Teletext Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings
{}

/// –  TTML Destination Settings. See TTML Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings
{
    /// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "styleControl"
    )]
    #[builder(default)]
    pub style_control: Option<String>,
}

/// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings
{
    /// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "styleControl"
    )]
    #[builder(default)]
    pub style_control: Option<String>,
}

/// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsGlobalConfiguration {
    /// –  Value to set the initial audio gain for the Live Event.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialAudioGain"
    )]
    #[builder(default)]
    pub initial_audio_gain: Option<f64>,
    /// of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputEndAction"
    )]
    #[builder(default)]
    pub input_end_action: Option<String>,
    /// Settings for system actions when input is lost. See Input Loss Behavior for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossBehavior"
    )]
    #[builder(default)]
    pub input_loss_behavior:
        Option<ChannelInitProviderEncoderSettingsGlobalConfigurationInputLossBehavior>,
    /// MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputLockingMode"
    )]
    #[builder(default)]
    pub output_locking_mode: Option<String>,
    /// –  Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputTimingSource"
    )]
    #[builder(default)]
    pub output_timing_source: Option<String>,
    /// –  Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportLowFramerateInputs"
    )]
    #[builder(default)]
    pub support_low_framerate_inputs: Option<String>,
}

/// Settings for system actions when input is lost. See Input Loss Behavior for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsGlobalConfigurationInputLossBehavior {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blackFrameMsec"
    )]
    #[builder(default)]
    pub black_frame_msec: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossImageColor"
    )]
    #[builder(default)]
    pub input_loss_image_color: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossImageSlate"
    )]
    #[builder(default)]
    pub input_loss_image_slate: Option<
        ChannelInitProviderEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate,
    >,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossImageType"
    )]
    #[builder(default)]
    pub input_loss_image_type: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repeatFrameMsec"
    )]
    #[builder(default)]
    pub repeat_frame_msec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Settings for motion graphics. See Motion Graphics Configuration for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsMotionGraphicsConfiguration {
    /// –  Motion Graphics Insertion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "motionGraphicsInsertion"
    )]
    #[builder(default)]
    pub motion_graphics_insertion: Option<String>,
    /// –  Motion Graphics Settings. See Motion Graphics Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "motionGraphicsSettings"
    )]
    #[builder(default)]
    pub motion_graphics_settings:
        Option<ChannelInitProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings>,
}

/// –  Motion Graphics Settings. See Motion Graphics Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings {
    /// –  Html Motion Graphics Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlMotionGraphicsSettings")]
    #[builder(default)]
    pub html_motion_graphics_settings: Option<ChannelInitProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings>,
}

/// –  Html Motion Graphics Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings
{}

/// Nielsen configuration settings. See Nielsen Configuration for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsNielsenConfiguration {
    /// –  Enter the Distributor ID assigned to your organization by Nielsen.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "distributorId"
    )]
    #[builder(default)]
    pub distributor_id: Option<String>,
    /// –  Enables Nielsen PCM to ID3 tagging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenPcmToId3Tagging"
    )]
    #[builder(default)]
    pub nielsen_pcm_to_id3_tagging: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroups {
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Settings associated with the output group. See Output Group Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputGroupSettings"
    )]
    #[builder(default)]
    pub output_group_settings:
        Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettings>,
    /// List of outputs. See Outputs for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub outputs: Option<Vec<ChannelInitProviderEncoderSettingsOutputGroupsOutputs>>,
}

/// Settings associated with the output group. See Output Group Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettings {
    /// Archive group settings. See Archive Group Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "archiveGroupSettings"
    )]
    #[builder(default)]
    pub archive_group_settings: Option<
        Vec<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings>,
    >,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameCaptureGroupSettings"
    )]
    #[builder(default)]
    pub frame_capture_group_settings: Option<
        ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings,
    >,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hlsGroupSettings"
    )]
    #[builder(default)]
    pub hls_group_settings:
        Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings>,
    /// Media package group settings. See Media Package Group Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mediaPackageGroupSettings"
    )]
    #[builder(default)]
    pub media_package_group_settings: Option<
        ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings,
    >,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "msSmoothGroupSettings"
    )]
    #[builder(default)]
    pub ms_smooth_group_settings: Option<
        ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings,
    >,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiplexGroupSettings"
    )]
    #[builder(default)]
    pub multiplex_group_settings: Option<
        ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings,
    >,
    /// RTMP group settings. See RTMP Group Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rtmpGroupSettings"
    )]
    #[builder(default)]
    pub rtmp_group_settings:
        Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "udpGroupSettings"
    )]
    #[builder(default)]
    pub udp_group_settings:
        Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings {
    /// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveCdnSettings")]
    #[builder(default)]
    pub archive_cdn_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination>,
    /// Number of seconds to write to archive file before closing and starting a new one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolloverInterval")]
    #[builder(default)]
    pub rollover_interval: Option<f64>,
}

/// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings {
    /// Archive S3 Settings. See Archive S3 Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveS3Settings")]
    #[builder(default)]
    pub archive_s3_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings>,
}

/// Archive S3 Settings. See Archive S3 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings
{
    /// Specify the canned ACL to apply to each S3 request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAcl")]
    #[builder(default)]
    pub canned_acl: Option<String>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings {
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureCdnSettings")]
    #[builder(default)]
    pub frame_capture_cdn_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureS3Settings")]
    #[builder(default)]
    pub frame_capture_s3_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings
{
    /// Specify the canned ACL to apply to each S3 request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAcl")]
    #[builder(default)]
    pub canned_acl: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings {
    /// The ad marker type for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adMarkers")]
    #[builder(default)]
    pub ad_markers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlContent")]
    #[builder(default)]
    pub base_url_content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlContent1")]
    #[builder(default)]
    pub base_url_content1: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlManifest")]
    #[builder(default)]
    pub base_url_manifest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlManifest1")]
    #[builder(default)]
    pub base_url_manifest1: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "captionLanguageMappings")]
    #[builder(default)]
    pub caption_language_mappings: Option<Vec<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "captionLanguageSetting")]
    #[builder(default)]
    pub caption_language_setting: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCache")]
    #[builder(default)]
    pub client_cache: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codecSpecification")]
    #[builder(default)]
    pub codec_specification: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "constantIv")]
    #[builder(default)]
    pub constant_iv: Option<String>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryStructure")]
    #[builder(default)]
    pub directory_structure: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discontinuityTags")]
    #[builder(default)]
    pub discontinuity_tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionType")]
    #[builder(default)]
    pub encryption_type: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsCdnSettings")]
    #[builder(default)]
    pub hls_cdn_settings: Option<Vec<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsId3SegmentTagging")]
    #[builder(default)]
    pub hls_id3_segment_tagging: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iframeOnlyPlaylists")]
    #[builder(default)]
    pub iframe_only_playlists: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incompleteSegmentBehavior")]
    #[builder(default)]
    pub incomplete_segment_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexNSegments")]
    #[builder(default)]
    pub index_n_segments: Option<f64>,
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossAction")]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ivInManifest")]
    #[builder(default)]
    pub iv_in_manifest: Option<String>,
    /// The source for the timecode that will be associated with the events outputs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ivSource")]
    #[builder(default)]
    pub iv_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepSegments")]
    #[builder(default)]
    pub keep_segments: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFormat")]
    #[builder(default)]
    pub key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFormatVersions")]
    #[builder(default)]
    pub key_format_versions: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyProviderSettings")]
    #[builder(default)]
    pub key_provider_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manifestCompression")]
    #[builder(default)]
    pub manifest_compression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manifestDurationFormat")]
    #[builder(default)]
    pub manifest_duration_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSegmentLength")]
    #[builder(default)]
    pub min_segment_length: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSelection")]
    #[builder(default)]
    pub output_selection: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programDateTime")]
    #[builder(default)]
    pub program_date_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programDateTimeClock")]
    #[builder(default)]
    pub program_date_time_clock: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programDateTimePeriod")]
    #[builder(default)]
    pub program_date_time_period: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redundantManifest")]
    #[builder(default)]
    pub redundant_manifest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentLength")]
    #[builder(default)]
    pub segment_length: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentsPerSubdirectory")]
    #[builder(default)]
    pub segments_per_subdirectory: Option<f64>,
    /// - Maximum CDI input resolution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamInfResolution")]
    #[builder(default)]
    pub stream_inf_resolution: Option<String>,
    /// Indicates ID3 frame that has the timecode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataId3Frame")]
    #[builder(default)]
    pub timed_metadata_id3_frame: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataId3Period")]
    #[builder(default)]
    pub timed_metadata_id3_period: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampDeltaMilliseconds")]
    #[builder(default)]
    pub timestamp_delta_milliseconds: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tsFileMode")]
    #[builder(default)]
    pub ts_file_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionChannel"
    )]
    #[builder(default)]
    pub caption_channel: Option<f64>,
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageDescription"
    )]
    #[builder(default)]
    pub language_description: Option<String>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsAkamaiSettings")]
    #[builder(default)]
    pub hls_akamai_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsBasicPutSettings")]
    #[builder(default)]
    pub hls_basic_put_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsMediaStoreSettings")]
    #[builder(default)]
    pub hls_media_store_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsS3Settings")]
    #[builder(default)]
    pub hls_s3_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsWebdavSettings")]
    #[builder(default)]
    pub hls_webdav_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTransferMode"
    )]
    #[builder(default)]
    pub http_transfer_mode: Option<String>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub salt: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub token: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mediaStoreStorageClass"
    )]
    #[builder(default)]
    pub media_store_storage_class: Option<String>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings
{
    /// Specify the canned ACL to apply to each S3 request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAcl")]
    #[builder(default)]
    pub canned_acl: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTransferMode"
    )]
    #[builder(default)]
    pub http_transfer_mode: Option<String>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticKeySettings")]
    #[builder(default)]
    pub static_key_settings: Option<Vec<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyProviderServer")]
    #[builder(default)]
    pub key_provider_server: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticKeyValue")]
    #[builder(default)]
    pub static_key_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Media package group settings. See Media Package Group Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings {
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings {
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acquisitionPointId")]
    #[builder(default)]
    pub acquisition_point_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioOnlyTimecodeControl")]
    #[builder(default)]
    pub audio_only_timecode_control: Option<String>,
    /// Setting to allow self signed or verified RTMP certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateMode")]
    #[builder(default)]
    pub certificate_mode: Option<String>,
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionRetryInterval")]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventId")]
    #[builder(default)]
    pub event_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventIdMode")]
    #[builder(default)]
    pub event_id_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventStopBehavior")]
    #[builder(default)]
    pub event_stop_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filecacheDuration")]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fragmentLength")]
    #[builder(default)]
    pub fragment_length: Option<f64>,
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossAction")]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    /// Number of retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartDelay")]
    #[builder(default)]
    pub restart_delay: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationMode")]
    #[builder(default)]
    pub segmentation_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendDelayMs")]
    #[builder(default)]
    pub send_delay_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseTrackType")]
    #[builder(default)]
    pub sparse_track_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamManifestBehavior")]
    #[builder(default)]
    pub stream_manifest_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampOffset")]
    #[builder(default)]
    pub timestamp_offset: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampOffsetMode")]
    #[builder(default)]
    pub timestamp_offset_mode: Option<String>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings
{}

/// RTMP group settings. See RTMP Group Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings {
    /// The ad marker type for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adMarkers")]
    #[builder(default)]
    pub ad_markers: Option<Vec<String>>,
    /// Authentication scheme to use when connecting with CDN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationScheme"
    )]
    #[builder(default)]
    pub authentication_scheme: Option<String>,
    /// Controls behavior when content cache fills up.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cacheFullBehavior"
    )]
    #[builder(default)]
    pub cache_full_behavior: Option<String>,
    /// Cache length in seconds, is used to calculate buffer size.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cacheLength"
    )]
    #[builder(default)]
    pub cache_length: Option<f64>,
    /// Controls the types of data that passes to onCaptionInfo outputs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionData"
    )]
    #[builder(default)]
    pub caption_data: Option<String>,
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossAction"
    )]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings {
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossAction"
    )]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    /// Indicates ID3 frame that has the timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataId3Frame"
    )]
    #[builder(default)]
    pub timed_metadata_id3_frame: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataId3Period"
    )]
    #[builder(default)]
    pub timed_metadata_id3_period: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputs {
    /// The names of the audio descriptions used as audio sources for the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioDescriptionNames"
    )]
    #[builder(default)]
    pub audio_description_names: Option<Vec<String>>,
    /// The names of the caption descriptions used as caption sources for the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionDescriptionNames"
    )]
    #[builder(default)]
    pub caption_description_names: Option<Vec<String>>,
    /// The name used to identify an output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputName"
    )]
    #[builder(default)]
    pub output_name: Option<String>,
    /// Settings for output. See Output Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputSettings"
    )]
    #[builder(default)]
    pub output_settings:
        Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettings>,
    /// The name of the video description used as video source for the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoDescriptionName"
    )]
    #[builder(default)]
    pub video_description_name: Option<String>,
}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettings {
    /// Archive output settings. See Archive Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveOutputSettings")]
    #[builder(default)]
    pub archive_output_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureOutputSettings")]
    #[builder(default)]
    pub frame_capture_output_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsOutputSettings")]
    #[builder(default)]
    pub hls_output_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings>,
    /// Media package output settings. This can be set as an empty block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mediaPackageOutputSettings")]
    #[builder(default)]
    pub media_package_output_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "msSmoothOutputSettings")]
    #[builder(default)]
    pub ms_smooth_output_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings>,
    /// Multiplex output settings. See Multiplex Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiplexOutputSettings")]
    #[builder(default)]
    pub multiplex_output_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings>,
    /// RTMP output settings. See RTMP Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rtmpOutputSettings")]
    #[builder(default)]
    pub rtmp_output_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings>,
    /// UDP output settings. See UDP Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpOutputSettings")]
    #[builder(default)]
    pub udp_output_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings>,
}

/// Archive output settings. See Archive Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings {
    /// Settings specific to the container type of the file. See Container Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerSettings")]
    #[builder(default)]
    pub container_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings>,
    /// Output file extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub extension: Option<String>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameModifier")]
    #[builder(default)]
    pub name_modifier: Option<String>,
}

/// Settings specific to the container type of the file. See Container Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings {
    /// M2TS Settings. See M2TS Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "m2tsSettings")]
    #[builder(default)]
    pub m2ts_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings>,
    /// Raw Settings. This can be set as an empty block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawSettings")]
    #[builder(default)]
    pub raw_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings>,
}

/// M2TS Settings. See M2TS Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "absentInputAudioBehavior")]
    #[builder(default)]
    pub absent_input_audio_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arib: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPid")]
    #[builder(default)]
    pub arib_captions_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPidControl")]
    #[builder(default)]
    pub arib_captions_pid_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioBufferModel")]
    #[builder(default)]
    pub audio_buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioFramesPerPes")]
    #[builder(default)]
    pub audio_frames_per_pes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPids")]
    #[builder(default)]
    pub audio_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioStreamType")]
    #[builder(default)]
    pub audio_stream_type: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferModel")]
    #[builder(default)]
    pub buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ccDescriptor")]
    #[builder(default)]
    pub cc_descriptor: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbNitSettings")]
    #[builder(default)]
    pub dvb_nit_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSdtSettings")]
    #[builder(default)]
    pub dvb_sdt_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubPids")]
    #[builder(default)]
    pub dvb_sub_pids: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTdtSettings")]
    #[builder(default)]
    pub dvb_tdt_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTeletextPid")]
    #[builder(default)]
    pub dvb_teletext_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ebif: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpAudioInterval")]
    #[builder(default)]
    pub ebp_audio_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpLookaheadMs")]
    #[builder(default)]
    pub ebp_lookahead_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpPlacement")]
    #[builder(default)]
    pub ebp_placement: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecmPid")]
    #[builder(default)]
    pub ecm_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "esRateInPes")]
    #[builder(default)]
    pub es_rate_in_pes: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvPlatformPid")]
    #[builder(default)]
    pub etv_platform_pid: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvSignalPid")]
    #[builder(default)]
    pub etv_signal_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fragmentTime")]
    #[builder(default)]
    pub fragment_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub klv: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "klvDataPids")]
    #[builder(default)]
    pub klv_data_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenId3Behavior")]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nullPacketBitrate")]
    #[builder(default)]
    pub null_packet_bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "patInterval")]
    #[builder(default)]
    pub pat_interval: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrControl")]
    #[builder(default)]
    pub pcr_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPeriod")]
    #[builder(default)]
    pub pcr_period: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPid")]
    #[builder(default)]
    pub pcr_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtInterval")]
    #[builder(default)]
    pub pmt_interval: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtPid")]
    #[builder(default)]
    pub pmt_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programNum")]
    #[builder(default)]
    pub program_num: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateMode")]
    #[builder(default)]
    pub rate_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27Pids")]
    #[builder(default)]
    pub scte27_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Control")]
    #[builder(default)]
    pub scte35_control: Option<String>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationMarkers")]
    #[builder(default)]
    pub segmentation_markers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationStyle")]
    #[builder(default)]
    pub segmentation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationTime")]
    #[builder(default)]
    pub segmentation_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataBehavior")]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataPid")]
    #[builder(default)]
    pub timed_metadata_pid: Option<String>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportStreamId")]
    #[builder(default)]
    pub transport_stream_id: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoPid")]
    #[builder(default)]
    pub video_pid: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings
{
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkId")]
    #[builder(default)]
    pub network_id: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkName"
    )]
    #[builder(default)]
    pub network_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings
{
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSdt")]
    #[builder(default)]
    pub output_sdt: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default)]
    pub service_name: Option<String>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceProviderName"
    )]
    #[builder(default)]
    pub service_provider_name: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// Raw Settings. This can be set as an empty block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings
{}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings
{
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameModifier"
    )]
    #[builder(default)]
    pub name_modifier: Option<String>,
}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "h265PackagingType")]
    #[builder(default)]
    pub h265_packaging_type: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsSettings")]
    #[builder(default)]
    pub hls_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameModifier")]
    #[builder(default)]
    pub name_modifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentModifier")]
    #[builder(default)]
    pub segment_modifier: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioOnlyHlsSettings")]
    #[builder(default)]
    pub audio_only_hls_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fmp4HlsSettings")]
    #[builder(default)]
    pub fmp4_hls_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureHlsSettings")]
    #[builder(default)]
    pub frame_capture_hls_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardHlsSettings")]
    #[builder(default)]
    pub standard_hls_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings {
    /// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioGroupId")]
    #[builder(default)]
    pub audio_group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioOnlyImage")]
    #[builder(default)]
    pub audio_only_image: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioTrackType")]
    #[builder(default)]
    pub audio_track_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentType")]
    #[builder(default)]
    pub segment_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioRenditionSets"
    )]
    #[builder(default)]
    pub audio_rendition_sets: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenId3Behavior"
    )]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataBehavior"
    )]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings
{}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioRenditionSets")]
    #[builder(default)]
    pub audio_rendition_sets: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "m3u8Settings")]
    #[builder(default)]
    pub m3u8_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioFramesPerPes"
    )]
    #[builder(default)]
    pub audio_frames_per_pes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPids")]
    #[builder(default)]
    pub audio_pids: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecmPid")]
    #[builder(default)]
    pub ecm_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenId3Behavior"
    )]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "patInterval"
    )]
    #[builder(default)]
    pub pat_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pcrControl"
    )]
    #[builder(default)]
    pub pcr_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPeriod")]
    #[builder(default)]
    pub pcr_period: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPid")]
    #[builder(default)]
    pub pcr_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pmtInterval"
    )]
    #[builder(default)]
    pub pmt_interval: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtPid")]
    #[builder(default)]
    pub pmt_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "programNum"
    )]
    #[builder(default)]
    pub program_num: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scte35Behavior"
    )]
    #[builder(default)]
    pub scte35_behavior: Option<String>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataBehavior"
    )]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataPid"
    )]
    #[builder(default)]
    pub timed_metadata_pid: Option<String>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transportStreamId"
    )]
    #[builder(default)]
    pub transport_stream_id: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoPid")]
    #[builder(default)]
    pub video_pid: Option<String>,
}

/// Media package output settings. This can be set as an empty block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings
{}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "h265PackagingType"
    )]
    #[builder(default)]
    pub h265_packaging_type: Option<String>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameModifier"
    )]
    #[builder(default)]
    pub name_modifier: Option<String>,
}

/// Multiplex output settings. See Multiplex Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings {
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// RTMP output settings. See RTMP Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings {
    /// Setting to allow self signed or verified RTMP certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateMode")]
    #[builder(default)]
    pub certificate_mode: Option<String>,
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionRetryInterval")]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination>,
    /// Number of retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    #[builder(default)]
    pub num_retries: Option<f64>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// UDP output settings. See UDP Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings {
    /// UDP output buffering in milliseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferMsec")]
    #[builder(default)]
    pub buffer_msec: Option<f64>,
    /// Settings specific to the container type of the file. See Container Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerSettings")]
    #[builder(default)]
    pub container_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fecOutputSettings")]
    #[builder(default)]
    pub fec_output_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings>,
}

/// Settings specific to the container type of the file. See Container Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings {
    /// M2TS Settings. See M2TS Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "m2tsSettings")]
    #[builder(default)]
    pub m2ts_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings>,
}

/// M2TS Settings. See M2TS Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "absentInputAudioBehavior")]
    #[builder(default)]
    pub absent_input_audio_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arib: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPid")]
    #[builder(default)]
    pub arib_captions_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPidControl")]
    #[builder(default)]
    pub arib_captions_pid_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioBufferModel")]
    #[builder(default)]
    pub audio_buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioFramesPerPes")]
    #[builder(default)]
    pub audio_frames_per_pes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPids")]
    #[builder(default)]
    pub audio_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioStreamType")]
    #[builder(default)]
    pub audio_stream_type: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferModel")]
    #[builder(default)]
    pub buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ccDescriptor")]
    #[builder(default)]
    pub cc_descriptor: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbNitSettings")]
    #[builder(default)]
    pub dvb_nit_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSdtSettings")]
    #[builder(default)]
    pub dvb_sdt_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubPids")]
    #[builder(default)]
    pub dvb_sub_pids: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTdtSettings")]
    #[builder(default)]
    pub dvb_tdt_settings: Option<ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTeletextPid")]
    #[builder(default)]
    pub dvb_teletext_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ebif: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpAudioInterval")]
    #[builder(default)]
    pub ebp_audio_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpLookaheadMs")]
    #[builder(default)]
    pub ebp_lookahead_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpPlacement")]
    #[builder(default)]
    pub ebp_placement: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecmPid")]
    #[builder(default)]
    pub ecm_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "esRateInPes")]
    #[builder(default)]
    pub es_rate_in_pes: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvPlatformPid")]
    #[builder(default)]
    pub etv_platform_pid: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvSignalPid")]
    #[builder(default)]
    pub etv_signal_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fragmentTime")]
    #[builder(default)]
    pub fragment_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub klv: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "klvDataPids")]
    #[builder(default)]
    pub klv_data_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenId3Behavior")]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nullPacketBitrate")]
    #[builder(default)]
    pub null_packet_bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "patInterval")]
    #[builder(default)]
    pub pat_interval: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrControl")]
    #[builder(default)]
    pub pcr_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPeriod")]
    #[builder(default)]
    pub pcr_period: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPid")]
    #[builder(default)]
    pub pcr_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtInterval")]
    #[builder(default)]
    pub pmt_interval: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtPid")]
    #[builder(default)]
    pub pmt_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programNum")]
    #[builder(default)]
    pub program_num: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateMode")]
    #[builder(default)]
    pub rate_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27Pids")]
    #[builder(default)]
    pub scte27_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Control")]
    #[builder(default)]
    pub scte35_control: Option<String>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationMarkers")]
    #[builder(default)]
    pub segmentation_markers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationStyle")]
    #[builder(default)]
    pub segmentation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationTime")]
    #[builder(default)]
    pub segmentation_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataBehavior")]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataPid")]
    #[builder(default)]
    pub timed_metadata_pid: Option<String>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportStreamId")]
    #[builder(default)]
    pub transport_stream_id: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoPid")]
    #[builder(default)]
    pub video_pid: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings
{
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkId")]
    #[builder(default)]
    pub network_id: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkName"
    )]
    #[builder(default)]
    pub network_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings
{
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSdt")]
    #[builder(default)]
    pub output_sdt: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default)]
    pub service_name: Option<String>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceProviderName"
    )]
    #[builder(default)]
    pub service_provider_name: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings
{
    /// The height of the FEC protection matrix.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "columnDepth"
    )]
    #[builder(default)]
    pub column_depth: Option<f64>,
    /// Enables column only or column and row based FEC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeFec"
    )]
    #[builder(default)]
    pub include_fec: Option<String>,
    /// The width of the FEC protection matrix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowLength")]
    #[builder(default)]
    pub row_length: Option<f64>,
}

/// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsTimecodeConfig {
    /// The source for the timecode that will be associated with the events outputs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
    /// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncThreshold"
    )]
    #[builder(default)]
    pub sync_threshold: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptions {
    /// Audio codec settings. See Audio Codec Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codecSettings"
    )]
    #[builder(default)]
    pub codec_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettings>,
    /// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub height: Option<f64>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Indicate how to respond to the AFD values that might be in the input video.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "respondToAfd"
    )]
    #[builder(default)]
    pub respond_to_afd: Option<String>,
    /// Behavior on how to scale.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalingBehavior"
    )]
    #[builder(default)]
    pub scaling_behavior: Option<String>,
    /// Changes the strength of the anti-alias filter used for scaling.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub sharpness: Option<f64>,
    /// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub width: Option<f64>,
}

/// Audio codec settings. See Audio Codec Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettings {
    /// Frame capture settings. See Frame Capture Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameCaptureSettings"
    )]
    #[builder(default)]
    pub frame_capture_settings: Option<
        ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings,
    >,
    /// H264 settings. See H264 Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "h264Settings"
    )]
    #[builder(default)]
    pub h264_settings:
        Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH264Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "h265Settings"
    )]
    #[builder(default)]
    pub h265_settings:
        Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265Settings>,
}

/// Frame capture settings. See Frame Capture Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings {
    /// The frequency at which to capture frames for inclusion in the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captureInterval"
    )]
    #[builder(default)]
    pub capture_interval: Option<f64>,
    /// Unit for the frame capture interval.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captureIntervalUnits"
    )]
    #[builder(default)]
    pub capture_interval_units: Option<String>,
}

/// H264 settings. See H264 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH264Settings {
    /// Enables or disables adaptive quantization.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adaptiveQuantization"
    )]
    #[builder(default)]
    pub adaptive_quantization: Option<String>,
    /// Indicates that AFD values will be written into the output stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "afdSignaling"
    )]
    #[builder(default)]
    pub afd_signaling: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bufFillPct"
    )]
    #[builder(default)]
    pub buf_fill_pct: Option<f64>,
    /// Size of buffer in bits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufSize")]
    #[builder(default)]
    pub buf_size: Option<f64>,
    /// Includes color space metadata in the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "colorMetadata"
    )]
    #[builder(default)]
    pub color_metadata: Option<String>,
    /// Entropy encoding mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "entropyEncoding"
    )]
    #[builder(default)]
    pub entropy_encoding: Option<String>,
    /// Filters to apply to an encode. See H264 Filter Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filterSettings"
    )]
    #[builder(default)]
    pub filter_settings: Option<
        ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings,
    >,
    /// Four bit AFD value to write on all frames of video in the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedAfd")]
    #[builder(default)]
    pub fixed_afd: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flickerAq")]
    #[builder(default)]
    pub flicker_aq: Option<String>,
    /// Controls whether coding is performed on a field basis or on a frame basis.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceFieldPictures"
    )]
    #[builder(default)]
    pub force_field_pictures: Option<String>,
    /// Indicates how the output video frame rate is specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "framerateControl"
    )]
    #[builder(default)]
    pub framerate_control: Option<String>,
    /// Framerate denominator.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "framerateDenominator"
    )]
    #[builder(default)]
    pub framerate_denominator: Option<f64>,
    /// Framerate numerator.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "framerateNumerator"
    )]
    #[builder(default)]
    pub framerate_numerator: Option<f64>,
    /// GOP-B reference.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gopBReference"
    )]
    #[builder(default)]
    pub gop_b_reference: Option<String>,
    /// Frequency of closed GOPs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gopClosedCadence"
    )]
    #[builder(default)]
    pub gop_closed_cadence: Option<f64>,
    /// Number of B-frames between reference frames.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gopNumBFrames"
    )]
    #[builder(default)]
    pub gop_num_b_frames: Option<f64>,
    /// GOP size in units of either frames of seconds per gop_size_units.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSize")]
    #[builder(default)]
    pub gop_size: Option<f64>,
    /// Indicates if the gop_size is specified in frames or seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gopSizeUnits"
    )]
    #[builder(default)]
    pub gop_size_units: Option<String>,
    /// H264 level.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub level: Option<String>,
    /// Amount of lookahead.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lookAheadRateControl"
    )]
    #[builder(default)]
    pub look_ahead_rate_control: Option<String>,
    /// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxBitrate"
    )]
    #[builder(default)]
    pub max_bitrate: Option<f64>,
    /// Min interval.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIInterval"
    )]
    #[builder(default)]
    pub min_i_interval: Option<f64>,
    /// Number of reference frames to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRefFrames"
    )]
    #[builder(default)]
    pub num_ref_frames: Option<f64>,
    /// Indicates how the output pixel aspect ratio is specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parControl"
    )]
    #[builder(default)]
    pub par_control: Option<String>,
    /// Pixel Aspect Ratio denominator.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parDenominator"
    )]
    #[builder(default)]
    pub par_denominator: Option<f64>,
    /// Pixel Aspect Ratio numerator.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parNumerator"
    )]
    #[builder(default)]
    pub par_numerator: Option<f64>,
    /// AAC profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// Quality level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "qualityLevel"
    )]
    #[builder(default)]
    pub quality_level: Option<String>,
    /// Controls the target quality for the video encode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "qvbrQualityLevel"
    )]
    #[builder(default)]
    pub qvbr_quality_level: Option<f64>,
    /// The rate control mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rateControlMode"
    )]
    #[builder(default)]
    pub rate_control_mode: Option<String>,
    /// Sets the scan type of the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanType")]
    #[builder(default)]
    pub scan_type: Option<String>,
    /// Scene change detection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sceneChangeDetect"
    )]
    #[builder(default)]
    pub scene_change_detect: Option<String>,
    /// Number of slices per picture.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slices: Option<f64>,
    /// Softness.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub softness: Option<f64>,
    /// Makes adjustments within each frame based on spatial variation of content complexity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spatialAq")]
    #[builder(default)]
    pub spatial_aq: Option<String>,
    /// Subgop length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subgopLength"
    )]
    #[builder(default)]
    pub subgop_length: Option<String>,
    /// Produces a bitstream compliant with SMPTE RP-2027.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub syntax: Option<String>,
    /// Makes adjustments within each frame based on temporal variation of content complexity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "temporalAq"
    )]
    #[builder(default)]
    pub temporal_aq: Option<String>,
    /// Determines how timecodes should be inserted into the video elementary stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeInsertion"
    )]
    #[builder(default)]
    pub timecode_insertion: Option<String>,
}

/// Filters to apply to an encode. See H264 Filter Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings {
    /// Temporal filter settings. See Temporal Filter Settings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "temporalFilterSettings")]
    #[builder(default)]
    pub temporal_filter_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings>,
}

/// Temporal filter settings. See Temporal Filter Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings
{
    /// Post filter sharpening.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postFilterSharpening"
    )]
    #[builder(default)]
    pub post_filter_sharpening: Option<String>,
    /// Filter strength.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub strength: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265Settings {
    /// Enables or disables adaptive quantization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adaptiveQuantization")]
    #[builder(default)]
    pub adaptive_quantization: Option<String>,
    /// Indicates that AFD values will be written into the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afdSignaling")]
    #[builder(default)]
    pub afd_signaling: Option<String>,
    /// Whether or not EML should insert an Alternative Transfer Function SEI message.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alternativeTransferFunction")]
    #[builder(default)]
    pub alternative_transfer_function: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Size of buffer in bits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufSize")]
    #[builder(default)]
    pub buf_size: Option<f64>,
    /// Includes color space metadata in the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorMetadata")]
    #[builder(default)]
    pub color_metadata: Option<String>,
    /// Define the color metadata for the output. H265 Color Space Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorSpaceSettings")]
    #[builder(default)]
    pub color_space_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings>,
    /// Filters to apply to an encode. See H264 Filter Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterSettings")]
    #[builder(default)]
    pub filter_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings>,
    /// Four bit AFD value to write on all frames of video in the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedAfd")]
    #[builder(default)]
    pub fixed_afd: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flickerAq")]
    #[builder(default)]
    pub flicker_aq: Option<String>,
    /// Framerate denominator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "framerateDenominator")]
    #[builder(default)]
    pub framerate_denominator: Option<f64>,
    /// Framerate numerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "framerateNumerator")]
    #[builder(default)]
    pub framerate_numerator: Option<f64>,
    /// Frequency of closed GOPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopClosedCadence")]
    #[builder(default)]
    pub gop_closed_cadence: Option<f64>,
    /// GOP size in units of either frames of seconds per gop_size_units.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSize")]
    #[builder(default)]
    pub gop_size: Option<f64>,
    /// Indicates if the gop_size is specified in frames or seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSizeUnits")]
    #[builder(default)]
    pub gop_size_units: Option<String>,
    /// H264 level.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub level: Option<String>,
    /// Amount of lookahead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lookAheadRateControl")]
    #[builder(default)]
    pub look_ahead_rate_control: Option<String>,
    /// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBitrate")]
    #[builder(default)]
    pub max_bitrate: Option<f64>,
    /// Min interval.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIInterval")]
    #[builder(default)]
    pub min_i_interval: Option<f64>,
    /// Set the minimum QP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minQp")]
    #[builder(default)]
    pub min_qp: Option<f64>,
    /// Enables or disables motion vector over picture boundaries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mvOverPictureBoundaries")]
    #[builder(default)]
    pub mv_over_picture_boundaries: Option<String>,
    /// Enables or disables the motion vector temporal predictor.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mvTemporalPredictor")]
    #[builder(default)]
    pub mv_temporal_predictor: Option<String>,
    /// Pixel Aspect Ratio denominator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parDenominator")]
    #[builder(default)]
    pub par_denominator: Option<f64>,
    /// Pixel Aspect Ratio numerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parNumerator")]
    #[builder(default)]
    pub par_numerator: Option<f64>,
    /// AAC profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// Controls the target quality for the video encode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qvbrQualityLevel")]
    #[builder(default)]
    pub qvbr_quality_level: Option<f64>,
    /// The rate control mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateControlMode")]
    #[builder(default)]
    pub rate_control_mode: Option<String>,
    /// Sets the scan type of the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanType")]
    #[builder(default)]
    pub scan_type: Option<String>,
    /// Scene change detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sceneChangeDetect")]
    #[builder(default)]
    pub scene_change_detect: Option<String>,
    /// Number of slices per picture.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slices: Option<f64>,
    /// Set the H265 tier in the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tier: Option<String>,
    /// Sets the height of tiles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tileHeight")]
    #[builder(default)]
    pub tile_height: Option<f64>,
    /// Enables or disables padding of tiles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tilePadding")]
    #[builder(default)]
    pub tile_padding: Option<String>,
    /// Sets the width of tiles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tileWidth")]
    #[builder(default)]
    pub tile_width: Option<f64>,
    /// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timecodeBurninSettings")]
    #[builder(default)]
    pub timecode_burnin_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings>,
    /// Determines how timecodes should be inserted into the video elementary stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timecodeInsertion")]
    #[builder(default)]
    pub timecode_insertion: Option<String>,
    /// Sets the size of the treeblock.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "treeblockSize")]
    #[builder(default)]
    pub treeblock_size: Option<String>,
}

/// Define the color metadata for the output. H265 Color Space Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings {
    /// Sets the colorspace metadata to be passed through.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorSpacePassthroughSettings")]
    #[builder(default)]
    pub color_space_passthrough_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings>,
    /// Set the colorspace to Dolby Vision81.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dolbyVision81Settings")]
    #[builder(default)]
    pub dolby_vision81_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings>,
    /// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hdr10Settings")]
    #[builder(default)]
    pub hdr10_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings>,
    /// Set the colorspace to Rec. 601.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rec601Settings")]
    #[builder(default)]
    pub rec601_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings>,
    /// Set the colorspace to Rec. 709.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rec709Settings")]
    #[builder(default)]
    pub rec709_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings>,
}

/// Sets the colorspace metadata to be passed through.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings
{}

/// Set the colorspace to Dolby Vision81.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings
{}

/// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings
{
    /// Sets the MaxCLL value for HDR10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCll")]
    #[builder(default)]
    pub max_cll: Option<f64>,
    /// Sets the MaxFALL value for HDR10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFall")]
    #[builder(default)]
    pub max_fall: Option<f64>,
}

/// Set the colorspace to Rec. 601.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings
{}

/// Set the colorspace to Rec. 709.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings
{}

/// Filters to apply to an encode. See H264 Filter Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings {
    /// Temporal filter settings. See Temporal Filter Settings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "temporalFilterSettings")]
    #[builder(default)]
    pub temporal_filter_settings: Option<ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings>,
}

/// Temporal filter settings. See Temporal Filter Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings
{
    /// Post filter sharpening.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postFilterSharpening"
    )]
    #[builder(default)]
    pub post_filter_sharpening: Option<String>,
    /// Filter strength.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub strength: Option<String>,
}

/// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings
{
    /// Set a prefix on the burned in timecode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prefix: Option<String>,
    /// Sets the size of the burned in timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeBurninFontSize"
    )]
    #[builder(default)]
    pub timecode_burnin_font_size: Option<String>,
    /// Sets the position of the burned in timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeBurninPosition"
    )]
    #[builder(default)]
    pub timecode_burnin_position: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachments {
    /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input. See Automatic Input Failover Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automaticInputFailoverSettings"
    )]
    #[builder(default)]
    pub automatic_input_failover_settings:
        Option<ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettings>,
    /// User-specified name for the attachment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputAttachmentName"
    )]
    #[builder(default)]
    pub input_attachment_name: Option<String>,
    /// The ID of the input.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputId")]
    #[builder(default)]
    pub input_id: Option<String>,
    /// Reference to a Input in medialive to populate inputId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputIdRef"
    )]
    #[builder(default)]
    pub input_id_ref: Option<ChannelInitProviderInputAttachmentsInputIdRef>,
    /// Selector for a Input in medialive to populate inputId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputIdSelector"
    )]
    #[builder(default)]
    pub input_id_selector: Option<ChannelInitProviderInputAttachmentsInputIdSelector>,
    /// Settings of an input. See Input Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputSettings"
    )]
    #[builder(default)]
    pub input_settings: Option<ChannelInitProviderInputAttachmentsInputSettings>,
}

/// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input. See Automatic Input Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettings {
    /// This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorClearTimeMsec"
    )]
    #[builder(default)]
    pub error_clear_time_msec: Option<f64>,
    /// A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input. See Failover Condition Block for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "failoverCondition"
    )]
    #[builder(default)]
    pub failover_condition: Option<
        Vec<ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition>,
    >,
    /// Input preference when deciding which input to make active when a previously failed input has recovered.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputPreference"
    )]
    #[builder(default)]
    pub input_preference: Option<String>,
    /// The input ID of the secondary input in the automatic input failover pair.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryInputId"
    )]
    #[builder(default)]
    pub secondary_input_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition {
    /// Failover condition type-specific settings. See Failover Condition Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverConditionSettings")]
    #[builder(default)]
    pub failover_condition_settings: Option<ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings>,
}

/// Failover condition type-specific settings. See Failover Condition Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings {
    /// MediaLive will perform a failover if the specified audio selector is silent for the specified period. See Audio Silence Failover Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioSilenceSettings")]
    #[builder(default)]
    pub audio_silence_settings: Option<ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings>,
    /// MediaLive will perform a failover if content is not detected in this input for the specified period. See Input Loss Failover Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossSettings")]
    #[builder(default)]
    pub input_loss_settings: Option<ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings>,
    /// MediaLive will perform a failover if content is considered black for the specified period. See Video Black Failover Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoBlackSettings")]
    #[builder(default)]
    pub video_black_settings: Option<ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings>,
}

/// MediaLive will perform a failover if the specified audio selector is silent for the specified period. See Audio Silence Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings
{
    /// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSelectorName"
    )]
    #[builder(default)]
    pub audio_selector_name: Option<String>,
    /// The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSilenceThresholdMsec"
    )]
    #[builder(default)]
    pub audio_silence_threshold_msec: Option<f64>,
}

/// MediaLive will perform a failover if content is not detected in this input for the specified period. See Input Loss Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings
{
    /// The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossThresholdMsec"
    )]
    #[builder(default)]
    pub input_loss_threshold_msec: Option<f64>,
}

/// MediaLive will perform a failover if content is considered black for the specified period. See Video Black Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings
{
    /// A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (10230.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (2550.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blackDetectThreshold"
    )]
    #[builder(default)]
    pub black_detect_threshold: Option<f64>,
    /// The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoBlackThresholdMsec"
    )]
    #[builder(default)]
    pub video_black_threshold_msec: Option<f64>,
}

/// Reference to a Input in medialive to populate inputId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelInitProviderInputAttachmentsInputIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelInitProviderInputAttachmentsInputIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelInitProviderInputAttachmentsInputIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelInitProviderInputAttachmentsInputIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelInitProviderInputAttachmentsInputIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Input in medialive to populate inputId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelInitProviderInputAttachmentsInputIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelInitProviderInputAttachmentsInputIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelInitProviderInputAttachmentsInputIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelInitProviderInputAttachmentsInputIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelInitProviderInputAttachmentsInputIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings of an input. See Input Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettings {
    /// Used to select the audio stream to decode for inputs that have multiple. See Audio Selectors for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSelector"
    )]
    #[builder(default)]
    pub audio_selector: Option<Vec<ChannelInitProviderInputAttachmentsInputSettingsAudioSelector>>,
    /// Used to select the caption input to use for inputs that have multiple available. See Caption Selectors for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionSelector"
    )]
    #[builder(default)]
    pub caption_selector:
        Option<Vec<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelector>>,
    /// Enable or disable the deblock filter when filtering.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deblockFilter"
    )]
    #[builder(default)]
    pub deblock_filter: Option<String>,
    /// Enable or disable the denoise filter when filtering.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "denoiseFilter"
    )]
    #[builder(default)]
    pub denoise_filter: Option<String>,
    /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filterStrength"
    )]
    #[builder(default)]
    pub filter_strength: Option<f64>,
    /// Turns on the filter for the input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputFilter"
    )]
    #[builder(default)]
    pub input_filter: Option<String>,
    /// Input settings. See Network Input Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInputSettings"
    )]
    #[builder(default)]
    pub network_input_settings:
        Option<ChannelInitProviderInputAttachmentsInputSettingsNetworkInputSettings>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<f64>,
    /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smpte2038DataPreference"
    )]
    #[builder(default)]
    pub smpte2038_data_preference: Option<String>,
    /// Loop input if it is a file.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndBehavior"
    )]
    #[builder(default)]
    pub source_end_behavior: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoSelector"
    )]
    #[builder(default)]
    pub video_selector: Option<ChannelInitProviderInputAttachmentsInputSettingsVideoSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsAudioSelector {
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The audio selector settings. See Audio Selector Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectorSettings"
    )]
    #[builder(default)]
    pub selector_settings:
        Option<ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettings>,
}

/// The audio selector settings. See Audio Selector Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettings {
    /// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioHlsRenditionSelection")]
    #[builder(default)]
    pub audio_hls_rendition_selection: Option<ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection>,
    /// Audio Language Selection. See Audio Language Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioLanguageSelection")]
    #[builder(default)]
    pub audio_language_selection: Option<ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection>,
    /// Audio Pid Selection. See Audio PID Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPidSelection")]
    #[builder(default)]
    pub audio_pid_selection: Option<ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection>,
    /// Audio Track Selection. See Audio Track Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioTrackSelection")]
    #[builder(default)]
    pub audio_track_selection: Option<ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection>,
}

/// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection
{
    /// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupId")]
    #[builder(default)]
    pub group_id: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Audio Language Selection. See Audio Language Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection
{
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageSelectionPolicy"
    )]
    #[builder(default)]
    pub language_selection_policy: Option<String>,
}

/// Audio Pid Selection. See Audio PID Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection
{
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pid: Option<f64>,
}

/// Audio Track Selection. See Audio Track Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection {
    /// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dolbyEDecode")]
    #[builder(default)]
    pub dolby_e_decode: Option<ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode>,
    /// Selects one or more unique audio tracks from within a source. See Audio Tracks for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tracks: Option<Vec<ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks>>,
}

/// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode
{
    /// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "programSelection"
    )]
    #[builder(default)]
    pub program_selection: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks
{
    /// 1-based integer value that maps to a specific audio track.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub track: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelector {
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The audio selector settings. See Audio Selector Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectorSettings"
    )]
    #[builder(default)]
    pub selector_settings:
        Option<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettings>,
}

/// The audio selector settings. See Audio Selector Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettings {
    /// Ancillary Source Settings. See Ancillary Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ancillarySourceSettings")]
    #[builder(default)]
    pub ancillary_source_settings: Option<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings>,
    /// ARIB Source Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribSourceSettings")]
    #[builder(default)]
    pub arib_source_settings: Option<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings>,
    /// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubSourceSettings")]
    #[builder(default)]
    pub dvb_sub_source_settings: Option<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings>,
    /// Embedded Source Settings. See Embedded Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "embeddedSourceSettings")]
    #[builder(default)]
    pub embedded_source_settings: Option<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings>,
    /// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte20SourceSettings")]
    #[builder(default)]
    pub scte20_source_settings: Option<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings>,
    /// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27SourceSettings")]
    #[builder(default)]
    pub scte27_source_settings: Option<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings>,
    /// Teletext Source Settings. See Teletext Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextSourceSettings")]
    #[builder(default)]
    pub teletext_source_settings: Option<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings>,
}

/// Ancillary Source Settings. See Ancillary Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings
{
    /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceAncillaryChannelNumber"
    )]
    #[builder(default)]
    pub source_ancillary_channel_number: Option<f64>,
}

/// ARIB Source Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings
{}

/// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings
{
    /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocrLanguage"
    )]
    #[builder(default)]
    pub ocr_language: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pid: Option<f64>,
}

/// Embedded Source Settings. See Embedded Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings
{
    /// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "convert608To708"
    )]
    #[builder(default)]
    pub convert608_to708: Option<String>,
    /// Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scte20Detection"
    )]
    #[builder(default)]
    pub scte20_detection: Option<String>,
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "source608ChannelNumber"
    )]
    #[builder(default)]
    pub source608_channel_number: Option<f64>,
}

/// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings
{
    /// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "convert608To708"
    )]
    #[builder(default)]
    pub convert608_to708: Option<String>,
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "source608ChannelNumber"
    )]
    #[builder(default)]
    pub source608_channel_number: Option<f64>,
}

/// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings
{
    /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocrLanguage"
    )]
    #[builder(default)]
    pub ocr_language: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pid: Option<f64>,
}

/// Teletext Source Settings. See Teletext Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings {
    /// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputRectangle")]
    #[builder(default)]
    pub output_rectangle: Option<ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle>,
    /// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no “0x” prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pageNumber")]
    #[builder(default)]
    pub page_number: Option<String>,
}

/// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle
{
    /// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub height: Option<f64>,
    /// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "leftOffset"
    )]
    #[builder(default)]
    pub left_offset: Option<f64>,
    /// See the description in left_offset. For top_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topOffset")]
    #[builder(default)]
    pub top_offset: Option<f64>,
    /// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub width: Option<f64>,
}

/// Input settings. See Network Input Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsNetworkInputSettings {
    /// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hlsInputSettings"
    )]
    #[builder(default)]
    pub hls_input_settings: Option<
        ChannelInitProviderInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings,
    >,
    /// Check HTTPS server certificates.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverValidation"
    )]
    #[builder(default)]
    pub server_validation: Option<String>,
}

/// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings {
    /// The bitrate is specified in bits per second, as in an HLS manifest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bandwidth: Option<f64>,
    /// Buffer segments.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bufferSegments"
    )]
    #[builder(default)]
    pub buffer_segments: Option<f64>,
    /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub retries: Option<f64>,
    /// The number of seconds between retries when an attempt to read a manifest or segment fails.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retryInterval"
    )]
    #[builder(default)]
    pub retry_interval: Option<f64>,
    /// The source for the timecode that will be associated with the events outputs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scte35Source"
    )]
    #[builder(default)]
    pub scte35_source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputAttachmentsInputSettingsVideoSelector {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "colorSpace"
    )]
    #[builder(default)]
    pub color_space: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "colorSpaceUsage"
    )]
    #[builder(default)]
    pub color_space_usage: Option<String>,
}

/// Specification of network and file inputs for the channel.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderInputSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub codec: Option<String>,
    /// - Maximum CDI input resolution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputResolution"
    )]
    #[builder(default)]
    pub input_resolution: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumBitrate"
    )]
    #[builder(default)]
    pub maximum_bitrate: Option<String>,
}

/// Maintenance settings for this channel. See Maintenance for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderMaintenance {
    /// The day of the week to use for maintenance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceDay"
    )]
    #[builder(default)]
    pub maintenance_day: Option<String>,
    /// The hour maintenance will start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceStartTime"
    )]
    #[builder(default)]
    pub maintenance_start_time: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelInitProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelInitProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelInitProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelInitProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelInitProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelInitProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelInitProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelInitProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelInitProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelInitProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings for the VPC outputs. See VPC for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelInitProviderVpc {
    /// List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicAddressAllocationIds"
    )]
    #[builder(default)]
    pub public_address_allocation_ids: Option<Vec<String>>,
    /// A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ChannelPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ChannelPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ChannelPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ChannelPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ChannelPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ChannelPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ChannelStatus defines the observed state of Channel.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<ChannelStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProvider {
    /// ARN of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cdiInputSpecification"
    )]
    #[builder(default)]
    pub cdi_input_specification: Option<ChannelStatusAtProviderCdiInputSpecification>,
    /// Concise argument description.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelClass"
    )]
    #[builder(default)]
    pub channel_class: Option<String>,
    /// ID of the channel in MediaPackage that is the destination for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelId")]
    #[builder(default)]
    pub channel_id: Option<String>,
    /// Destinations for channel. See Destinations for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destinations: Option<Vec<ChannelStatusAtProviderDestinations>>,
    /// Encoder settings. See Encoder Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encoderSettings"
    )]
    #[builder(default)]
    pub encoder_settings: Option<ChannelStatusAtProviderEncoderSettings>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Input attachments for the channel. See Input Attachments for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputAttachments"
    )]
    #[builder(default)]
    pub input_attachments: Option<Vec<ChannelStatusAtProviderInputAttachments>>,
    /// Specification of network and file inputs for the channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputSpecification"
    )]
    #[builder(default)]
    pub input_specification: Option<ChannelStatusAtProviderInputSpecification>,
    /// The log level to write to Cloudwatch logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    #[builder(default)]
    pub log_level: Option<String>,
    /// Maintenance settings for this channel. See Maintenance for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub maintenance: Option<ChannelStatusAtProviderMaintenance>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Concise argument description.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Whether to start/stop channel. Default: false
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startChannel"
    )]
    #[builder(default)]
    pub start_channel: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Settings for the VPC outputs. See VPC for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub vpc: Option<ChannelStatusAtProviderVpc>,
}

/// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderCdiInputSpecification {
    /// - Maximum CDI input resolution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderDestinations {
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mediaPackageSettings"
    )]
    #[builder(default)]
    pub media_package_settings:
        Option<Vec<ChannelStatusAtProviderDestinationsMediaPackageSettings>>,
    /// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiplexSettings"
    )]
    #[builder(default)]
    pub multiplex_settings: Option<ChannelStatusAtProviderDestinationsMultiplexSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub settings: Option<Vec<ChannelStatusAtProviderDestinationsSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderDestinationsMediaPackageSettings {
    /// ID of the channel in MediaPackage that is the destination for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelId")]
    #[builder(default)]
    pub channel_id: Option<String>,
}

/// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderDestinationsMultiplexSettings {
    /// The ID of the Multiplex that the encoder is providing output to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "multiplexId"
    )]
    #[builder(default)]
    pub multiplex_id: Option<String>,
    /// The program name of the Multiplex program that the encoder is providing output to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "programName"
    )]
    #[builder(default)]
    pub program_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderDestinationsSettings {
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// Stream name RTMP destinations (URLs of type rtmp://)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamName"
    )]
    #[builder(default)]
    pub stream_name: Option<String>,
    /// A URL specifying a destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Encoder settings. See Encoder Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettings {
    /// Audio descriptions for the channel. See Audio Descriptions for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioDescriptions"
    )]
    #[builder(default)]
    pub audio_descriptions: Option<Vec<ChannelStatusAtProviderEncoderSettingsAudioDescriptions>>,
    /// Settings for ad avail blanking. See Avail Blanking for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availBlanking"
    )]
    #[builder(default)]
    pub avail_blanking: Option<ChannelStatusAtProviderEncoderSettingsAvailBlanking>,
    /// Caption Descriptions. See Caption Descriptions for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionDescriptions"
    )]
    #[builder(default)]
    pub caption_descriptions:
        Option<Vec<ChannelStatusAtProviderEncoderSettingsCaptionDescriptions>>,
    /// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "globalConfiguration"
    )]
    #[builder(default)]
    pub global_configuration: Option<ChannelStatusAtProviderEncoderSettingsGlobalConfiguration>,
    /// Settings for motion graphics. See Motion Graphics Configuration for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "motionGraphicsConfiguration"
    )]
    #[builder(default)]
    pub motion_graphics_configuration:
        Option<ChannelStatusAtProviderEncoderSettingsMotionGraphicsConfiguration>,
    /// Nielsen configuration settings. See Nielsen Configuration for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenConfiguration"
    )]
    #[builder(default)]
    pub nielsen_configuration: Option<ChannelStatusAtProviderEncoderSettingsNielsenConfiguration>,
    /// Output groups for the channel. See Output Groups for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputGroups"
    )]
    #[builder(default)]
    pub output_groups: Option<Vec<ChannelStatusAtProviderEncoderSettingsOutputGroups>>,
    /// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeConfig"
    )]
    #[builder(default)]
    pub timecode_config: Option<ChannelStatusAtProviderEncoderSettingsTimecodeConfig>,
    /// Video Descriptions. See Video Descriptions for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoDescriptions"
    )]
    #[builder(default)]
    pub video_descriptions: Option<Vec<ChannelStatusAtProviderEncoderSettingsVideoDescriptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptions {
    /// Advanced audio normalization settings. See Audio Normalization Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioNormalizationSettings"
    )]
    #[builder(default)]
    pub audio_normalization_settings:
        Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioNormalizationSettings>,
    /// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSelectorName"
    )]
    #[builder(default)]
    pub audio_selector_name: Option<String>,
    /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioType")]
    #[builder(default)]
    pub audio_type: Option<String>,
    /// Determined how audio type is determined.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioTypeControl"
    )]
    #[builder(default)]
    pub audio_type_control: Option<String>,
    /// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioWatermarkSettings"
    )]
    #[builder(default)]
    pub audio_watermark_settings:
        Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettings>,
    /// Audio codec settings. See Audio Codec Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codecSettings"
    )]
    #[builder(default)]
    pub codec_settings:
        Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettings>,
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCodeControl"
    )]
    #[builder(default)]
    pub language_code_control: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remixSettings"
    )]
    #[builder(default)]
    pub remix_settings:
        Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsRemixSettings>,
    /// Stream name RTMP destinations (URLs of type rtmp://)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamName"
    )]
    #[builder(default)]
    pub stream_name: Option<String>,
}

/// Advanced audio normalization settings. See Audio Normalization Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioNormalizationSettings {
    /// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub algorithm: Option<String>,
    /// Algorithm control for the audio description.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "algorithmControl"
    )]
    #[builder(default)]
    pub algorithm_control: Option<String>,
    /// Target LKFS (loudness) to adjust volume to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetLkfs"
    )]
    #[builder(default)]
    pub target_lkfs: Option<f64>,
}

/// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenWatermarksSettings")]
    #[builder(default)]
    pub nielsen_watermarks_settings: Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings {
    /// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenCbetSettings")]
    #[builder(default)]
    pub nielsen_cbet_settings: Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings>,
    /// Distribution types to assign to the watermarks. Options are PROGRAM_CONTENT and FINAL_DISTRIBUTOR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenDistributionType")]
    #[builder(default)]
    pub nielsen_distribution_type: Option<String>,
    /// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenNaesIiNwSettings")]
    #[builder(default)]
    pub nielsen_naes_ii_nw_settings: Option<Vec<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings>>,
}

/// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cbetCheckDigitString"
    )]
    #[builder(default)]
    pub cbet_check_digit_string: Option<String>,
    /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cbetStepaside"
    )]
    #[builder(default)]
    pub cbet_stepaside: Option<String>,
    /// CBET source ID to use in the watermark.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub csid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkDigitString"
    )]
    #[builder(default)]
    pub check_digit_string: Option<String>,
    /// The Nielsen Source ID to include in the watermark.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub sid: Option<f64>,
}

/// Audio codec settings. See Audio Codec Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettings {
    /// Aac Settings. See AAC Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "aacSettings"
    )]
    #[builder(default)]
    pub aac_settings:
        Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsAacSettings>,
    /// Ac3 Settings. See AC3 Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ac3Settings"
    )]
    #[builder(default)]
    pub ac3_settings:
        Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings>,
    /// - Eac3 Atmos Settings. See EAC3 Atmos Settings
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eac3AtmosSettings"
    )]
    #[builder(default)]
    pub eac3_atmos_settings: Option<
        ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings,
    >,
    /// - Eac3 Settings. See EAC3 Settings
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eac3Settings"
    )]
    #[builder(default)]
    pub eac3_settings:
        Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mp2Settings"
    )]
    #[builder(default)]
    pub mp2_settings:
        Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passThroughSettings"
    )]
    #[builder(default)]
    pub pass_through_settings: Option<
        ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings,
    >,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "wavSettings"
    )]
    #[builder(default)]
    pub wav_settings:
        Option<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsWavSettings>,
}

/// Aac Settings. See AAC Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsAacSettings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputType")]
    #[builder(default)]
    pub input_type: Option<String>,
    /// AAC profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// The rate control mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rateControlMode"
    )]
    #[builder(default)]
    pub rate_control_mode: Option<String>,
    /// Sets LATM/LOAS AAC output for raw containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawFormat")]
    #[builder(default)]
    pub raw_format: Option<String>,
    /// Sample rate in Hz.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleRate"
    )]
    #[builder(default)]
    pub sample_rate: Option<f64>,
    /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub spec: Option<String>,
    /// VBR Quality Level - Only used if rateControlMode is VBR.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vbrQuality"
    )]
    #[builder(default)]
    pub vbr_quality: Option<String>,
}

/// Ac3 Settings. See AC3 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bitstreamMode"
    )]
    #[builder(default)]
    pub bitstream_mode: Option<String>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sets the dialnorm of the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dialnorm: Option<f64>,
    /// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "drcProfile"
    )]
    #[builder(default)]
    pub drc_profile: Option<String>,
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lfeFilter")]
    #[builder(default)]
    pub lfe_filter: Option<String>,
    /// Metadata control.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataControl"
    )]
    #[builder(default)]
    pub metadata_control: Option<String>,
}

/// - Eac3 Atmos Settings. See EAC3 Atmos Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sets the dialnorm of the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dialnorm: Option<f64>,
    /// Sets the Dolby dynamic range compression profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcLine")]
    #[builder(default)]
    pub drc_line: Option<String>,
    /// Sets the profile for heavy Dolby dynamic range compression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcRf")]
    #[builder(default)]
    pub drc_rf: Option<String>,
    /// Height dimensional trim.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightTrim"
    )]
    #[builder(default)]
    pub height_trim: Option<f64>,
    /// Surround dimensional trim.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "surroundTrim"
    )]
    #[builder(default)]
    pub surround_trim: Option<f64>,
}

/// - Eac3 Settings. See EAC3 Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings {
    /// Sets the attenuation control.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "attenuationControl"
    )]
    #[builder(default)]
    pub attenuation_control: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bitstreamMode"
    )]
    #[builder(default)]
    pub bitstream_mode: Option<String>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dcFilter")]
    #[builder(default)]
    pub dc_filter: Option<String>,
    /// Sets the dialnorm of the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dialnorm: Option<f64>,
    /// Sets the Dolby dynamic range compression profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcLine")]
    #[builder(default)]
    pub drc_line: Option<String>,
    /// Sets the profile for heavy Dolby dynamic range compression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drcRf")]
    #[builder(default)]
    pub drc_rf: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lfeControl"
    )]
    #[builder(default)]
    pub lfe_control: Option<String>,
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lfeFilter")]
    #[builder(default)]
    pub lfe_filter: Option<String>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loRoCenterMixLevel"
    )]
    #[builder(default)]
    pub lo_ro_center_mix_level: Option<f64>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loRoSurroundMixLevel"
    )]
    #[builder(default)]
    pub lo_ro_surround_mix_level: Option<f64>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ltRtCenterMixLevel"
    )]
    #[builder(default)]
    pub lt_rt_center_mix_level: Option<f64>,
    /// H264 level.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ltRtSurroundMixLevel"
    )]
    #[builder(default)]
    pub lt_rt_surround_mix_level: Option<f64>,
    /// Metadata control.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataControl"
    )]
    #[builder(default)]
    pub metadata_control: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passthroughControl"
    )]
    #[builder(default)]
    pub passthrough_control: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phaseControl"
    )]
    #[builder(default)]
    pub phase_control: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stereoDownmix"
    )]
    #[builder(default)]
    pub stereo_downmix: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "surroundExMode"
    )]
    #[builder(default)]
    pub surround_ex_mode: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "surroundMode"
    )]
    #[builder(default)]
    pub surround_mode: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings {
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sample rate in Hz.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleRate"
    )]
    #[builder(default)]
    pub sample_rate: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings
{}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsCodecSettingsWavSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitDepth")]
    #[builder(default)]
    pub bit_depth: Option<f64>,
    /// Mono, Stereo, or 5.1 channel layout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codingMode"
    )]
    #[builder(default)]
    pub coding_mode: Option<String>,
    /// Sample rate in Hz.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sampleRate"
    )]
    #[builder(default)]
    pub sample_rate: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsRemixSettings {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelMappings"
    )]
    #[builder(default)]
    pub channel_mappings: Option<
        Vec<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings>,
    >,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelsIn"
    )]
    #[builder(default)]
    pub channels_in: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "channelsOut"
    )]
    #[builder(default)]
    pub channels_out: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputChannelLevels")]
    #[builder(default)]
    pub input_channel_levels: Option<Vec<ChannelStatusAtProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputChannel")]
    #[builder(default)]
    pub output_channel: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels
{
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gain: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputChannel"
    )]
    #[builder(default)]
    pub input_channel: Option<f64>,
}

/// Settings for ad avail blanking. See Avail Blanking for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAvailBlanking {
    /// Blanking image to be used. See Avail Blanking Image for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availBlankingImage"
    )]
    #[builder(default)]
    pub avail_blanking_image:
        Option<ChannelStatusAtProviderEncoderSettingsAvailBlankingAvailBlankingImage>,
    /// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
}

/// Blanking image to be used. See Avail Blanking Image for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsAvailBlankingAvailBlankingImage {
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptions {
    /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub accessibility: Option<String>,
    /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionSelectorName"
    )]
    #[builder(default)]
    pub caption_selector_name: Option<String>,
    /// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationSettings"
    )]
    #[builder(default)]
    pub destination_settings:
        Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettings>,
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageDescription"
    )]
    #[builder(default)]
    pub language_description: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettings {
    /// ARIB Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribDestinationSettings")]
    #[builder(default)]
    pub arib_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings>,
    /// Burn In Destination Settings. See Burn In Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burnInDestinationSettings")]
    #[builder(default)]
    pub burn_in_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings>,
    /// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubDestinationSettings")]
    #[builder(default)]
    pub dvb_sub_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings>,
    /// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebuTtDDestinationSettings")]
    #[builder(default)]
    pub ebu_tt_d_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings>,
    /// Embedded Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "embeddedDestinationSettings")]
    #[builder(default)]
    pub embedded_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings>,
    /// Embedded Plus SCTE20 Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "embeddedPlusScte20DestinationSettings")]
    #[builder(default)]
    pub embedded_plus_scte20_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings>,
    /// RTMP Caption Info Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rtmpCaptionInfoDestinationSettings")]
    #[builder(default)]
    pub rtmp_caption_info_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings>,
    /// SCTE20 Plus Embedded Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte20PlusEmbeddedDestinationSettings")]
    #[builder(default)]
    pub scte20_plus_embedded_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings>,
    /// –  SCTE27 Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27DestinationSettings")]
    #[builder(default)]
    pub scte27_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings>,
    /// –  SMPTE TT Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "smpteTtDestinationSettings")]
    #[builder(default)]
    pub smpte_tt_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings>,
    /// –  Teletext Destination Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextDestinationSettings")]
    #[builder(default)]
    pub teletext_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings>,
    /// –  TTML Destination Settings. See TTML Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttmlDestinationSettings")]
    #[builder(default)]
    pub ttml_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings>,
    /// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webvttDestinationSettings")]
    #[builder(default)]
    pub webvtt_destination_settings: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings>,
}

/// ARIB Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings
{}

/// Burn In Destination Settings. See Burn In Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings {
    /// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alignment: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundColor")]
    #[builder(default)]
    pub background_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundOpacity")]
    #[builder(default)]
    pub background_opacity: Option<f64>,
    /// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub font: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont>,
    /// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontColor")]
    #[builder(default)]
    pub font_color: Option<String>,
    /// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontOpacity")]
    #[builder(default)]
    pub font_opacity: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontResolution")]
    #[builder(default)]
    pub font_resolution: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontSize")]
    #[builder(default)]
    pub font_size: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineColor")]
    #[builder(default)]
    pub outline_color: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineSize")]
    #[builder(default)]
    pub outline_size: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowColor")]
    #[builder(default)]
    pub shadow_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowOpacity")]
    #[builder(default)]
    pub shadow_opacity: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowXOffset")]
    #[builder(default)]
    pub shadow_x_offset: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowYOffset")]
    #[builder(default)]
    pub shadow_y_offset: Option<f64>,
    /// Sub/Burn-in outputs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextGridControl")]
    #[builder(default)]
    pub teletext_grid_control: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xPosition")]
    #[builder(default)]
    pub x_position: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yPosition")]
    #[builder(default)]
    pub y_position: Option<f64>,
}

/// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings {
    /// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alignment: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundColor")]
    #[builder(default)]
    pub background_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backgroundOpacity")]
    #[builder(default)]
    pub background_opacity: Option<f64>,
    /// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub font: Option<ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont>,
    /// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontColor")]
    #[builder(default)]
    pub font_color: Option<String>,
    /// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontOpacity")]
    #[builder(default)]
    pub font_opacity: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontResolution")]
    #[builder(default)]
    pub font_resolution: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fontSize")]
    #[builder(default)]
    pub font_size: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineColor")]
    #[builder(default)]
    pub outline_color: Option<String>,
    /// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlineSize")]
    #[builder(default)]
    pub outline_size: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowColor")]
    #[builder(default)]
    pub shadow_color: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowOpacity")]
    #[builder(default)]
    pub shadow_opacity: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowXOffset")]
    #[builder(default)]
    pub shadow_x_offset: Option<f64>,
    /// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowYOffset")]
    #[builder(default)]
    pub shadow_y_offset: Option<f64>,
    /// Sub/Burn-in outputs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextGridControl")]
    #[builder(default)]
    pub teletext_grid_control: Option<String>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xPosition")]
    #[builder(default)]
    pub x_position: Option<f64>,
    /// in and DVB-Sub font settings must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yPosition")]
    #[builder(default)]
    pub y_position: Option<f64>,
}

/// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings
{
    /// –  Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "copyrightHolder"
    )]
    #[builder(default)]
    pub copyright_holder: Option<String>,
    /// line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fillLineGap"
    )]
    #[builder(default)]
    pub fill_line_gap: Option<String>,
    /// TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to “monospaced”. (If styleControl is set to exclude, the font family is always set to “monospaced”.) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontFamily"
    )]
    #[builder(default)]
    pub font_family: Option<String>,
    /// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "styleControl"
    )]
    #[builder(default)]
    pub style_control: Option<String>,
}

/// Embedded Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings
{}

/// Embedded Plus SCTE20 Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings
{}

/// RTMP Caption Info Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings
{}

/// SCTE20 Plus Embedded Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings
{}

/// –  SCTE27 Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings
{}

/// –  SMPTE TT Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings
{}

/// –  Teletext Destination Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings
{}

/// –  TTML Destination Settings. See TTML Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings
{
    /// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "styleControl"
    )]
    #[builder(default)]
    pub style_control: Option<String>,
}

/// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings
{
    /// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "styleControl"
    )]
    #[builder(default)]
    pub style_control: Option<String>,
}

/// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsGlobalConfiguration {
    /// –  Value to set the initial audio gain for the Live Event.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialAudioGain"
    )]
    #[builder(default)]
    pub initial_audio_gain: Option<f64>,
    /// of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputEndAction"
    )]
    #[builder(default)]
    pub input_end_action: Option<String>,
    /// Settings for system actions when input is lost. See Input Loss Behavior for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossBehavior"
    )]
    #[builder(default)]
    pub input_loss_behavior:
        Option<ChannelStatusAtProviderEncoderSettingsGlobalConfigurationInputLossBehavior>,
    /// MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputLockingMode"
    )]
    #[builder(default)]
    pub output_locking_mode: Option<String>,
    /// –  Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputTimingSource"
    )]
    #[builder(default)]
    pub output_timing_source: Option<String>,
    /// –  Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportLowFramerateInputs"
    )]
    #[builder(default)]
    pub support_low_framerate_inputs: Option<String>,
}

/// Settings for system actions when input is lost. See Input Loss Behavior for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsGlobalConfigurationInputLossBehavior {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blackFrameMsec")]
    #[builder(default)]
    pub black_frame_msec: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossImageColor")]
    #[builder(default)]
    pub input_loss_image_color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossImageSlate")]
    #[builder(default)]
    pub input_loss_image_slate: Option<ChannelStatusAtProviderEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossImageType")]
    #[builder(default)]
    pub input_loss_image_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repeatFrameMsec")]
    #[builder(default)]
    pub repeat_frame_msec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Settings for motion graphics. See Motion Graphics Configuration for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsMotionGraphicsConfiguration {
    /// –  Motion Graphics Insertion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "motionGraphicsInsertion"
    )]
    #[builder(default)]
    pub motion_graphics_insertion: Option<String>,
    /// –  Motion Graphics Settings. See Motion Graphics Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "motionGraphicsSettings"
    )]
    #[builder(default)]
    pub motion_graphics_settings: Option<
        ChannelStatusAtProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings,
    >,
}

/// –  Motion Graphics Settings. See Motion Graphics Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings {
    /// –  Html Motion Graphics Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlMotionGraphicsSettings")]
    #[builder(default)]
    pub html_motion_graphics_settings: Option<ChannelStatusAtProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings>,
}

/// –  Html Motion Graphics Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings
{}

/// Nielsen configuration settings. See Nielsen Configuration for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsNielsenConfiguration {
    /// –  Enter the Distributor ID assigned to your organization by Nielsen.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "distributorId"
    )]
    #[builder(default)]
    pub distributor_id: Option<String>,
    /// –  Enables Nielsen PCM to ID3 tagging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenPcmToId3Tagging"
    )]
    #[builder(default)]
    pub nielsen_pcm_to_id3_tagging: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroups {
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Settings associated with the output group. See Output Group Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputGroupSettings"
    )]
    #[builder(default)]
    pub output_group_settings:
        Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettings>,
    /// List of outputs. See Outputs for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub outputs: Option<Vec<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputs>>,
}

/// Settings associated with the output group. See Output Group Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettings {
    /// Archive group settings. See Archive Group Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveGroupSettings")]
    #[builder(default)]
    pub archive_group_settings: Option<Vec<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings>>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureGroupSettings")]
    #[builder(default)]
    pub frame_capture_group_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsGroupSettings")]
    #[builder(default)]
    pub hls_group_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings>,
    /// Media package group settings. See Media Package Group Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mediaPackageGroupSettings")]
    #[builder(default)]
    pub media_package_group_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "msSmoothGroupSettings")]
    #[builder(default)]
    pub ms_smooth_group_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiplexGroupSettings")]
    #[builder(default)]
    pub multiplex_group_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings>,
    /// RTMP group settings. See RTMP Group Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rtmpGroupSettings")]
    #[builder(default)]
    pub rtmp_group_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpGroupSettings")]
    #[builder(default)]
    pub udp_group_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings {
    /// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveCdnSettings")]
    #[builder(default)]
    pub archive_cdn_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination>,
    /// Number of seconds to write to archive file before closing and starting a new one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolloverInterval")]
    #[builder(default)]
    pub rollover_interval: Option<f64>,
}

/// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings {
    /// Archive S3 Settings. See Archive S3 Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveS3Settings")]
    #[builder(default)]
    pub archive_s3_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings>,
}

/// Archive S3 Settings. See Archive S3 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings
{
    /// Specify the canned ACL to apply to each S3 request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAcl")]
    #[builder(default)]
    pub canned_acl: Option<String>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings {
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureCdnSettings")]
    #[builder(default)]
    pub frame_capture_cdn_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureS3Settings")]
    #[builder(default)]
    pub frame_capture_s3_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings
{
    /// Specify the canned ACL to apply to each S3 request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAcl")]
    #[builder(default)]
    pub canned_acl: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings {
    /// The ad marker type for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adMarkers")]
    #[builder(default)]
    pub ad_markers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlContent")]
    #[builder(default)]
    pub base_url_content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlContent1")]
    #[builder(default)]
    pub base_url_content1: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlManifest")]
    #[builder(default)]
    pub base_url_manifest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrlManifest1")]
    #[builder(default)]
    pub base_url_manifest1: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "captionLanguageMappings")]
    #[builder(default)]
    pub caption_language_mappings: Option<Vec<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "captionLanguageSetting")]
    #[builder(default)]
    pub caption_language_setting: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCache")]
    #[builder(default)]
    pub client_cache: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codecSpecification")]
    #[builder(default)]
    pub codec_specification: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "constantIv")]
    #[builder(default)]
    pub constant_iv: Option<String>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryStructure")]
    #[builder(default)]
    pub directory_structure: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discontinuityTags")]
    #[builder(default)]
    pub discontinuity_tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionType")]
    #[builder(default)]
    pub encryption_type: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsCdnSettings")]
    #[builder(default)]
    pub hls_cdn_settings: Option<Vec<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsId3SegmentTagging")]
    #[builder(default)]
    pub hls_id3_segment_tagging: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iframeOnlyPlaylists")]
    #[builder(default)]
    pub iframe_only_playlists: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incompleteSegmentBehavior")]
    #[builder(default)]
    pub incomplete_segment_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexNSegments")]
    #[builder(default)]
    pub index_n_segments: Option<f64>,
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossAction")]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ivInManifest")]
    #[builder(default)]
    pub iv_in_manifest: Option<String>,
    /// The source for the timecode that will be associated with the events outputs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ivSource")]
    #[builder(default)]
    pub iv_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepSegments")]
    #[builder(default)]
    pub keep_segments: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFormat")]
    #[builder(default)]
    pub key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFormatVersions")]
    #[builder(default)]
    pub key_format_versions: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyProviderSettings")]
    #[builder(default)]
    pub key_provider_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manifestCompression")]
    #[builder(default)]
    pub manifest_compression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manifestDurationFormat")]
    #[builder(default)]
    pub manifest_duration_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSegmentLength")]
    #[builder(default)]
    pub min_segment_length: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSelection")]
    #[builder(default)]
    pub output_selection: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programDateTime")]
    #[builder(default)]
    pub program_date_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programDateTimeClock")]
    #[builder(default)]
    pub program_date_time_clock: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programDateTimePeriod")]
    #[builder(default)]
    pub program_date_time_period: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redundantManifest")]
    #[builder(default)]
    pub redundant_manifest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentLength")]
    #[builder(default)]
    pub segment_length: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentsPerSubdirectory")]
    #[builder(default)]
    pub segments_per_subdirectory: Option<f64>,
    /// - Maximum CDI input resolution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamInfResolution")]
    #[builder(default)]
    pub stream_inf_resolution: Option<String>,
    /// Indicates ID3 frame that has the timecode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataId3Frame")]
    #[builder(default)]
    pub timed_metadata_id3_frame: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataId3Period")]
    #[builder(default)]
    pub timed_metadata_id3_period: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampDeltaMilliseconds")]
    #[builder(default)]
    pub timestamp_delta_milliseconds: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tsFileMode")]
    #[builder(default)]
    pub ts_file_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionChannel"
    )]
    #[builder(default)]
    pub caption_channel: Option<f64>,
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageDescription"
    )]
    #[builder(default)]
    pub language_description: Option<String>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsAkamaiSettings")]
    #[builder(default)]
    pub hls_akamai_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsBasicPutSettings")]
    #[builder(default)]
    pub hls_basic_put_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsMediaStoreSettings")]
    #[builder(default)]
    pub hls_media_store_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsS3Settings")]
    #[builder(default)]
    pub hls_s3_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsWebdavSettings")]
    #[builder(default)]
    pub hls_webdav_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTransferMode"
    )]
    #[builder(default)]
    pub http_transfer_mode: Option<String>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub salt: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub token: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mediaStoreStorageClass"
    )]
    #[builder(default)]
    pub media_store_storage_class: Option<String>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings
{
    /// Specify the canned ACL to apply to each S3 request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAcl")]
    #[builder(default)]
    pub canned_acl: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings
{
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionRetryInterval"
    )]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filecacheDuration"
    )]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTransferMode"
    )]
    #[builder(default)]
    pub http_transfer_mode: Option<String>,
    /// Number of retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numRetries"
    )]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticKeySettings")]
    #[builder(default)]
    pub static_key_settings: Option<Vec<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyProviderServer")]
    #[builder(default)]
    pub key_provider_server: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticKeyValue")]
    #[builder(default)]
    pub static_key_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Media package group settings. See Media Package Group Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings {
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings {
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acquisitionPointId")]
    #[builder(default)]
    pub acquisition_point_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioOnlyTimecodeControl")]
    #[builder(default)]
    pub audio_only_timecode_control: Option<String>,
    /// Setting to allow self signed or verified RTMP certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateMode")]
    #[builder(default)]
    pub certificate_mode: Option<String>,
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionRetryInterval")]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventId")]
    #[builder(default)]
    pub event_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventIdMode")]
    #[builder(default)]
    pub event_id_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventStopBehavior")]
    #[builder(default)]
    pub event_stop_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filecacheDuration")]
    #[builder(default)]
    pub filecache_duration: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fragmentLength")]
    #[builder(default)]
    pub fragment_length: Option<f64>,
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossAction")]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    /// Number of retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    #[builder(default)]
    pub num_retries: Option<f64>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartDelay")]
    #[builder(default)]
    pub restart_delay: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationMode")]
    #[builder(default)]
    pub segmentation_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendDelayMs")]
    #[builder(default)]
    pub send_delay_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseTrackType")]
    #[builder(default)]
    pub sparse_track_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamManifestBehavior")]
    #[builder(default)]
    pub stream_manifest_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampOffset")]
    #[builder(default)]
    pub timestamp_offset: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampOffsetMode")]
    #[builder(default)]
    pub timestamp_offset_mode: Option<String>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings
{}

/// RTMP group settings. See RTMP Group Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings {
    /// The ad marker type for this output group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adMarkers")]
    #[builder(default)]
    pub ad_markers: Option<Vec<String>>,
    /// Authentication scheme to use when connecting with CDN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationScheme"
    )]
    #[builder(default)]
    pub authentication_scheme: Option<String>,
    /// Controls behavior when content cache fills up.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cacheFullBehavior"
    )]
    #[builder(default)]
    pub cache_full_behavior: Option<String>,
    /// Cache length in seconds, is used to calculate buffer size.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cacheLength"
    )]
    #[builder(default)]
    pub cache_length: Option<f64>,
    /// Controls the types of data that passes to onCaptionInfo outputs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionData"
    )]
    #[builder(default)]
    pub caption_data: Option<String>,
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossAction"
    )]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    /// Number of seconds to wait until a restart is initiated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restartDelay"
    )]
    #[builder(default)]
    pub restart_delay: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings {
    /// Controls the behavior of the RTMP group if input becomes unavailable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossAction"
    )]
    #[builder(default)]
    pub input_loss_action: Option<String>,
    /// Indicates ID3 frame that has the timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataId3Frame"
    )]
    #[builder(default)]
    pub timed_metadata_id3_frame: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataId3Period"
    )]
    #[builder(default)]
    pub timed_metadata_id3_period: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputs {
    /// The names of the audio descriptions used as audio sources for the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioDescriptionNames"
    )]
    #[builder(default)]
    pub audio_description_names: Option<Vec<String>>,
    /// The names of the caption descriptions used as caption sources for the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionDescriptionNames"
    )]
    #[builder(default)]
    pub caption_description_names: Option<Vec<String>>,
    /// The name used to identify an output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputName"
    )]
    #[builder(default)]
    pub output_name: Option<String>,
    /// Settings for output. See Output Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputSettings"
    )]
    #[builder(default)]
    pub output_settings:
        Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettings>,
    /// The name of the video description used as video source for the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoDescriptionName"
    )]
    #[builder(default)]
    pub video_description_name: Option<String>,
}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettings {
    /// Archive output settings. See Archive Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveOutputSettings")]
    #[builder(default)]
    pub archive_output_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureOutputSettings")]
    #[builder(default)]
    pub frame_capture_output_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsOutputSettings")]
    #[builder(default)]
    pub hls_output_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings>,
    /// Media package output settings. This can be set as an empty block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mediaPackageOutputSettings")]
    #[builder(default)]
    pub media_package_output_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "msSmoothOutputSettings")]
    #[builder(default)]
    pub ms_smooth_output_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings>,
    /// Multiplex output settings. See Multiplex Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiplexOutputSettings")]
    #[builder(default)]
    pub multiplex_output_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings>,
    /// RTMP output settings. See RTMP Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rtmpOutputSettings")]
    #[builder(default)]
    pub rtmp_output_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings>,
    /// UDP output settings. See UDP Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpOutputSettings")]
    #[builder(default)]
    pub udp_output_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings>,
}

/// Archive output settings. See Archive Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings {
    /// Settings specific to the container type of the file. See Container Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerSettings")]
    #[builder(default)]
    pub container_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings>,
    /// Output file extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub extension: Option<String>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameModifier")]
    #[builder(default)]
    pub name_modifier: Option<String>,
}

/// Settings specific to the container type of the file. See Container Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings {
    /// M2TS Settings. See M2TS Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "m2tsSettings")]
    #[builder(default)]
    pub m2ts_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings>,
    /// Raw Settings. This can be set as an empty block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawSettings")]
    #[builder(default)]
    pub raw_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings>,
}

/// M2TS Settings. See M2TS Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "absentInputAudioBehavior")]
    #[builder(default)]
    pub absent_input_audio_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arib: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPid")]
    #[builder(default)]
    pub arib_captions_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPidControl")]
    #[builder(default)]
    pub arib_captions_pid_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioBufferModel")]
    #[builder(default)]
    pub audio_buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioFramesPerPes")]
    #[builder(default)]
    pub audio_frames_per_pes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPids")]
    #[builder(default)]
    pub audio_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioStreamType")]
    #[builder(default)]
    pub audio_stream_type: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferModel")]
    #[builder(default)]
    pub buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ccDescriptor")]
    #[builder(default)]
    pub cc_descriptor: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbNitSettings")]
    #[builder(default)]
    pub dvb_nit_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSdtSettings")]
    #[builder(default)]
    pub dvb_sdt_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubPids")]
    #[builder(default)]
    pub dvb_sub_pids: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTdtSettings")]
    #[builder(default)]
    pub dvb_tdt_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTeletextPid")]
    #[builder(default)]
    pub dvb_teletext_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ebif: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpAudioInterval")]
    #[builder(default)]
    pub ebp_audio_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpLookaheadMs")]
    #[builder(default)]
    pub ebp_lookahead_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpPlacement")]
    #[builder(default)]
    pub ebp_placement: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecmPid")]
    #[builder(default)]
    pub ecm_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "esRateInPes")]
    #[builder(default)]
    pub es_rate_in_pes: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvPlatformPid")]
    #[builder(default)]
    pub etv_platform_pid: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvSignalPid")]
    #[builder(default)]
    pub etv_signal_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fragmentTime")]
    #[builder(default)]
    pub fragment_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub klv: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "klvDataPids")]
    #[builder(default)]
    pub klv_data_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenId3Behavior")]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nullPacketBitrate")]
    #[builder(default)]
    pub null_packet_bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "patInterval")]
    #[builder(default)]
    pub pat_interval: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrControl")]
    #[builder(default)]
    pub pcr_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPeriod")]
    #[builder(default)]
    pub pcr_period: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPid")]
    #[builder(default)]
    pub pcr_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtInterval")]
    #[builder(default)]
    pub pmt_interval: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtPid")]
    #[builder(default)]
    pub pmt_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programNum")]
    #[builder(default)]
    pub program_num: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateMode")]
    #[builder(default)]
    pub rate_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27Pids")]
    #[builder(default)]
    pub scte27_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Control")]
    #[builder(default)]
    pub scte35_control: Option<String>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationMarkers")]
    #[builder(default)]
    pub segmentation_markers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationStyle")]
    #[builder(default)]
    pub segmentation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationTime")]
    #[builder(default)]
    pub segmentation_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataBehavior")]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataPid")]
    #[builder(default)]
    pub timed_metadata_pid: Option<String>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportStreamId")]
    #[builder(default)]
    pub transport_stream_id: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoPid")]
    #[builder(default)]
    pub video_pid: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings
{
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkId")]
    #[builder(default)]
    pub network_id: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkName"
    )]
    #[builder(default)]
    pub network_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings
{
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSdt")]
    #[builder(default)]
    pub output_sdt: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default)]
    pub service_name: Option<String>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceProviderName"
    )]
    #[builder(default)]
    pub service_provider_name: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// Raw Settings. This can be set as an empty block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings
{}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings
{
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameModifier"
    )]
    #[builder(default)]
    pub name_modifier: Option<String>,
}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "h265PackagingType")]
    #[builder(default)]
    pub h265_packaging_type: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hlsSettings")]
    #[builder(default)]
    pub hls_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameModifier")]
    #[builder(default)]
    pub name_modifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentModifier")]
    #[builder(default)]
    pub segment_modifier: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings {
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioOnlyHlsSettings")]
    #[builder(default)]
    pub audio_only_hls_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fmp4HlsSettings")]
    #[builder(default)]
    pub fmp4_hls_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameCaptureHlsSettings")]
    #[builder(default)]
    pub frame_capture_hls_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardHlsSettings")]
    #[builder(default)]
    pub standard_hls_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings {
    /// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioGroupId")]
    #[builder(default)]
    pub audio_group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioOnlyImage")]
    #[builder(default)]
    pub audio_only_image: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioTrackType")]
    #[builder(default)]
    pub audio_track_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentType")]
    #[builder(default)]
    pub segment_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage
{
    /// Key used to extract the password from EC2 Parameter store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordParam"
    )]
    #[builder(default)]
    pub password_param: Option<String>,
    /// –  Path to a file accessible to the live stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
    /// Username for destination.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioRenditionSets"
    )]
    #[builder(default)]
    pub audio_rendition_sets: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenId3Behavior"
    )]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataBehavior"
    )]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings
{}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioRenditionSets")]
    #[builder(default)]
    pub audio_rendition_sets: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "m3u8Settings")]
    #[builder(default)]
    pub m3u8_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioFramesPerPes"
    )]
    #[builder(default)]
    pub audio_frames_per_pes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPids")]
    #[builder(default)]
    pub audio_pids: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecmPid")]
    #[builder(default)]
    pub ecm_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nielsenId3Behavior"
    )]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "patInterval"
    )]
    #[builder(default)]
    pub pat_interval: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pcrControl"
    )]
    #[builder(default)]
    pub pcr_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPeriod")]
    #[builder(default)]
    pub pcr_period: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPid")]
    #[builder(default)]
    pub pcr_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pmtInterval"
    )]
    #[builder(default)]
    pub pmt_interval: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtPid")]
    #[builder(default)]
    pub pmt_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "programNum"
    )]
    #[builder(default)]
    pub program_num: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scte35Behavior"
    )]
    #[builder(default)]
    pub scte35_behavior: Option<String>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataBehavior"
    )]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timedMetadataPid"
    )]
    #[builder(default)]
    pub timed_metadata_pid: Option<String>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transportStreamId"
    )]
    #[builder(default)]
    pub transport_stream_id: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoPid")]
    #[builder(default)]
    pub video_pid: Option<String>,
}

/// Media package output settings. This can be set as an empty block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings
{}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "h265PackagingType"
    )]
    #[builder(default)]
    pub h265_packaging_type: Option<String>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameModifier"
    )]
    #[builder(default)]
    pub name_modifier: Option<String>,
}

/// Multiplex output settings. See Multiplex Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings {
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// RTMP output settings. See RTMP Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings {
    /// Setting to allow self signed or verified RTMP certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateMode")]
    #[builder(default)]
    pub certificate_mode: Option<String>,
    /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionRetryInterval")]
    #[builder(default)]
    pub connection_retry_interval: Option<f64>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination>,
    /// Number of retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    #[builder(default)]
    pub num_retries: Option<f64>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// UDP output settings. See UDP Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings {
    /// UDP output buffering in milliseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferMsec")]
    #[builder(default)]
    pub buffer_msec: Option<f64>,
    /// Settings specific to the container type of the file. See Container Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerSettings")]
    #[builder(default)]
    pub container_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings>,
    /// A director and base filename where archive files should be written. See Destination for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub destination: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination>,
    /// Settings for output. See Output Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fecOutputSettings")]
    #[builder(default)]
    pub fec_output_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings>,
}

/// Settings specific to the container type of the file. See Container Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings {
    /// M2TS Settings. See M2TS Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "m2tsSettings")]
    #[builder(default)]
    pub m2ts_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings>,
}

/// M2TS Settings. See M2TS Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "absentInputAudioBehavior")]
    #[builder(default)]
    pub absent_input_audio_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arib: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPid")]
    #[builder(default)]
    pub arib_captions_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribCaptionsPidControl")]
    #[builder(default)]
    pub arib_captions_pid_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioBufferModel")]
    #[builder(default)]
    pub audio_buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioFramesPerPes")]
    #[builder(default)]
    pub audio_frames_per_pes: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPids")]
    #[builder(default)]
    pub audio_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioStreamType")]
    #[builder(default)]
    pub audio_stream_type: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferModel")]
    #[builder(default)]
    pub buffer_model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ccDescriptor")]
    #[builder(default)]
    pub cc_descriptor: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbNitSettings")]
    #[builder(default)]
    pub dvb_nit_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSdtSettings")]
    #[builder(default)]
    pub dvb_sdt_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubPids")]
    #[builder(default)]
    pub dvb_sub_pids: Option<String>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTdtSettings")]
    #[builder(default)]
    pub dvb_tdt_settings: Option<ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbTeletextPid")]
    #[builder(default)]
    pub dvb_teletext_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ebif: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpAudioInterval")]
    #[builder(default)]
    pub ebp_audio_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpLookaheadMs")]
    #[builder(default)]
    pub ebp_lookahead_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebpPlacement")]
    #[builder(default)]
    pub ebp_placement: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecmPid")]
    #[builder(default)]
    pub ecm_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "esRateInPes")]
    #[builder(default)]
    pub es_rate_in_pes: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvPlatformPid")]
    #[builder(default)]
    pub etv_platform_pid: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etvSignalPid")]
    #[builder(default)]
    pub etv_signal_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fragmentTime")]
    #[builder(default)]
    pub fragment_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub klv: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "klvDataPids")]
    #[builder(default)]
    pub klv_data_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nielsenId3Behavior")]
    #[builder(default)]
    pub nielsen_id3_behavior: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nullPacketBitrate")]
    #[builder(default)]
    pub null_packet_bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "patInterval")]
    #[builder(default)]
    pub pat_interval: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrControl")]
    #[builder(default)]
    pub pcr_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPeriod")]
    #[builder(default)]
    pub pcr_period: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pcrPid")]
    #[builder(default)]
    pub pcr_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtInterval")]
    #[builder(default)]
    pub pmt_interval: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pmtPid")]
    #[builder(default)]
    pub pmt_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "programNum")]
    #[builder(default)]
    pub program_num: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateMode")]
    #[builder(default)]
    pub rate_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27Pids")]
    #[builder(default)]
    pub scte27_pids: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Control")]
    #[builder(default)]
    pub scte35_control: Option<String>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationMarkers")]
    #[builder(default)]
    pub segmentation_markers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationStyle")]
    #[builder(default)]
    pub segmentation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentationTime")]
    #[builder(default)]
    pub segmentation_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataBehavior")]
    #[builder(default)]
    pub timed_metadata_behavior: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timedMetadataPid")]
    #[builder(default)]
    pub timed_metadata_pid: Option<String>,
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportStreamId")]
    #[builder(default)]
    pub transport_stream_id: Option<f64>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoPid")]
    #[builder(default)]
    pub video_pid: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings
{
    /// User-specified id. Ths is used in an output group or an output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkId")]
    #[builder(default)]
    pub network_id: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkName"
    )]
    #[builder(default)]
    pub network_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings
{
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputSdt")]
    #[builder(default)]
    pub output_sdt: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default)]
    pub service_name: Option<String>,
    /// Name of the Channel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceProviderName"
    )]
    #[builder(default)]
    pub service_provider_name: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings
{
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repInterval"
    )]
    #[builder(default)]
    pub rep_interval: Option<f64>,
}

/// A director and base filename where archive files should be written. See Destination for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination
{
    /// Reference ID for the destination.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationRefId"
    )]
    #[builder(default)]
    pub destination_ref_id: Option<String>,
}

/// Settings for output. See Output Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings
{
    /// The height of the FEC protection matrix.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "columnDepth"
    )]
    #[builder(default)]
    pub column_depth: Option<f64>,
    /// Enables column only or column and row based FEC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeFec"
    )]
    #[builder(default)]
    pub include_fec: Option<String>,
    /// The width of the FEC protection matrix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowLength")]
    #[builder(default)]
    pub row_length: Option<f64>,
}

/// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsTimecodeConfig {
    /// The source for the timecode that will be associated with the events outputs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub source: Option<String>,
    /// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncThreshold"
    )]
    #[builder(default)]
    pub sync_threshold: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptions {
    /// Audio codec settings. See Audio Codec Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codecSettings"
    )]
    #[builder(default)]
    pub codec_settings:
        Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettings>,
    /// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub height: Option<f64>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Indicate how to respond to the AFD values that might be in the input video.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "respondToAfd"
    )]
    #[builder(default)]
    pub respond_to_afd: Option<String>,
    /// Behavior on how to scale.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalingBehavior"
    )]
    #[builder(default)]
    pub scaling_behavior: Option<String>,
    /// Changes the strength of the anti-alias filter used for scaling.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub sharpness: Option<f64>,
    /// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub width: Option<f64>,
}

/// Audio codec settings. See Audio Codec Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettings {
    /// Frame capture settings. See Frame Capture Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameCaptureSettings"
    )]
    #[builder(default)]
    pub frame_capture_settings: Option<
        ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings,
    >,
    /// H264 settings. See H264 Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "h264Settings"
    )]
    #[builder(default)]
    pub h264_settings:
        Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH264Settings>,
    /// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "h265Settings"
    )]
    #[builder(default)]
    pub h265_settings:
        Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265Settings>,
}

/// Frame capture settings. See Frame Capture Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings
{
    /// The frequency at which to capture frames for inclusion in the output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captureInterval"
    )]
    #[builder(default)]
    pub capture_interval: Option<f64>,
    /// Unit for the frame capture interval.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captureIntervalUnits"
    )]
    #[builder(default)]
    pub capture_interval_units: Option<String>,
}

/// H264 settings. See H264 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH264Settings {
    /// Enables or disables adaptive quantization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adaptiveQuantization")]
    #[builder(default)]
    pub adaptive_quantization: Option<String>,
    /// Indicates that AFD values will be written into the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afdSignaling")]
    #[builder(default)]
    pub afd_signaling: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufFillPct")]
    #[builder(default)]
    pub buf_fill_pct: Option<f64>,
    /// Size of buffer in bits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufSize")]
    #[builder(default)]
    pub buf_size: Option<f64>,
    /// Includes color space metadata in the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorMetadata")]
    #[builder(default)]
    pub color_metadata: Option<String>,
    /// Entropy encoding mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entropyEncoding")]
    #[builder(default)]
    pub entropy_encoding: Option<String>,
    /// Filters to apply to an encode. See H264 Filter Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterSettings")]
    #[builder(default)]
    pub filter_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings>,
    /// Four bit AFD value to write on all frames of video in the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedAfd")]
    #[builder(default)]
    pub fixed_afd: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flickerAq")]
    #[builder(default)]
    pub flicker_aq: Option<String>,
    /// Controls whether coding is performed on a field basis or on a frame basis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceFieldPictures")]
    #[builder(default)]
    pub force_field_pictures: Option<String>,
    /// Indicates how the output video frame rate is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "framerateControl")]
    #[builder(default)]
    pub framerate_control: Option<String>,
    /// Framerate denominator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "framerateDenominator")]
    #[builder(default)]
    pub framerate_denominator: Option<f64>,
    /// Framerate numerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "framerateNumerator")]
    #[builder(default)]
    pub framerate_numerator: Option<f64>,
    /// GOP-B reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopBReference")]
    #[builder(default)]
    pub gop_b_reference: Option<String>,
    /// Frequency of closed GOPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopClosedCadence")]
    #[builder(default)]
    pub gop_closed_cadence: Option<f64>,
    /// Number of B-frames between reference frames.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopNumBFrames")]
    #[builder(default)]
    pub gop_num_b_frames: Option<f64>,
    /// GOP size in units of either frames of seconds per gop_size_units.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSize")]
    #[builder(default)]
    pub gop_size: Option<f64>,
    /// Indicates if the gop_size is specified in frames or seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSizeUnits")]
    #[builder(default)]
    pub gop_size_units: Option<String>,
    /// H264 level.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub level: Option<String>,
    /// Amount of lookahead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lookAheadRateControl")]
    #[builder(default)]
    pub look_ahead_rate_control: Option<String>,
    /// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBitrate")]
    #[builder(default)]
    pub max_bitrate: Option<f64>,
    /// Min interval.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIInterval")]
    #[builder(default)]
    pub min_i_interval: Option<f64>,
    /// Number of reference frames to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRefFrames")]
    #[builder(default)]
    pub num_ref_frames: Option<f64>,
    /// Indicates how the output pixel aspect ratio is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parControl")]
    #[builder(default)]
    pub par_control: Option<String>,
    /// Pixel Aspect Ratio denominator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parDenominator")]
    #[builder(default)]
    pub par_denominator: Option<f64>,
    /// Pixel Aspect Ratio numerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parNumerator")]
    #[builder(default)]
    pub par_numerator: Option<f64>,
    /// AAC profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// Quality level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qualityLevel")]
    #[builder(default)]
    pub quality_level: Option<String>,
    /// Controls the target quality for the video encode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qvbrQualityLevel")]
    #[builder(default)]
    pub qvbr_quality_level: Option<f64>,
    /// The rate control mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateControlMode")]
    #[builder(default)]
    pub rate_control_mode: Option<String>,
    /// Sets the scan type of the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanType")]
    #[builder(default)]
    pub scan_type: Option<String>,
    /// Scene change detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sceneChangeDetect")]
    #[builder(default)]
    pub scene_change_detect: Option<String>,
    /// Number of slices per picture.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slices: Option<f64>,
    /// Softness.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub softness: Option<f64>,
    /// Makes adjustments within each frame based on spatial variation of content complexity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spatialAq")]
    #[builder(default)]
    pub spatial_aq: Option<String>,
    /// Subgop length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subgopLength")]
    #[builder(default)]
    pub subgop_length: Option<String>,
    /// Produces a bitstream compliant with SMPTE RP-2027.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub syntax: Option<String>,
    /// Makes adjustments within each frame based on temporal variation of content complexity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "temporalAq")]
    #[builder(default)]
    pub temporal_aq: Option<String>,
    /// Determines how timecodes should be inserted into the video elementary stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timecodeInsertion")]
    #[builder(default)]
    pub timecode_insertion: Option<String>,
}

/// Filters to apply to an encode. See H264 Filter Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings {
    /// Temporal filter settings. See Temporal Filter Settings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "temporalFilterSettings")]
    #[builder(default)]
    pub temporal_filter_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings>,
}

/// Temporal filter settings. See Temporal Filter Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings
{
    /// Post filter sharpening.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postFilterSharpening"
    )]
    #[builder(default)]
    pub post_filter_sharpening: Option<String>,
    /// Filter strength.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub strength: Option<String>,
}

/// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265Settings {
    /// Enables or disables adaptive quantization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adaptiveQuantization")]
    #[builder(default)]
    pub adaptive_quantization: Option<String>,
    /// Indicates that AFD values will be written into the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afdSignaling")]
    #[builder(default)]
    pub afd_signaling: Option<String>,
    /// Whether or not EML should insert an Alternative Transfer Function SEI message.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alternativeTransferFunction")]
    #[builder(default)]
    pub alternative_transfer_function: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bitrate: Option<f64>,
    /// Size of buffer in bits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufSize")]
    #[builder(default)]
    pub buf_size: Option<f64>,
    /// Includes color space metadata in the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorMetadata")]
    #[builder(default)]
    pub color_metadata: Option<String>,
    /// Define the color metadata for the output. H265 Color Space Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorSpaceSettings")]
    #[builder(default)]
    pub color_space_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings>,
    /// Filters to apply to an encode. See H264 Filter Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterSettings")]
    #[builder(default)]
    pub filter_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings>,
    /// Four bit AFD value to write on all frames of video in the output stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedAfd")]
    #[builder(default)]
    pub fixed_afd: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flickerAq")]
    #[builder(default)]
    pub flicker_aq: Option<String>,
    /// Framerate denominator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "framerateDenominator")]
    #[builder(default)]
    pub framerate_denominator: Option<f64>,
    /// Framerate numerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "framerateNumerator")]
    #[builder(default)]
    pub framerate_numerator: Option<f64>,
    /// Frequency of closed GOPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopClosedCadence")]
    #[builder(default)]
    pub gop_closed_cadence: Option<f64>,
    /// GOP size in units of either frames of seconds per gop_size_units.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSize")]
    #[builder(default)]
    pub gop_size: Option<f64>,
    /// Indicates if the gop_size is specified in frames or seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gopSizeUnits")]
    #[builder(default)]
    pub gop_size_units: Option<String>,
    /// H264 level.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub level: Option<String>,
    /// Amount of lookahead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lookAheadRateControl")]
    #[builder(default)]
    pub look_ahead_rate_control: Option<String>,
    /// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBitrate")]
    #[builder(default)]
    pub max_bitrate: Option<f64>,
    /// Min interval.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIInterval")]
    #[builder(default)]
    pub min_i_interval: Option<f64>,
    /// Set the minimum QP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minQp")]
    #[builder(default)]
    pub min_qp: Option<f64>,
    /// Enables or disables motion vector over picture boundaries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mvOverPictureBoundaries")]
    #[builder(default)]
    pub mv_over_picture_boundaries: Option<String>,
    /// Enables or disables the motion vector temporal predictor.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mvTemporalPredictor")]
    #[builder(default)]
    pub mv_temporal_predictor: Option<String>,
    /// Pixel Aspect Ratio denominator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parDenominator")]
    #[builder(default)]
    pub par_denominator: Option<f64>,
    /// Pixel Aspect Ratio numerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parNumerator")]
    #[builder(default)]
    pub par_numerator: Option<f64>,
    /// AAC profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// Controls the target quality for the video encode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qvbrQualityLevel")]
    #[builder(default)]
    pub qvbr_quality_level: Option<f64>,
    /// The rate control mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateControlMode")]
    #[builder(default)]
    pub rate_control_mode: Option<String>,
    /// Sets the scan type of the output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanType")]
    #[builder(default)]
    pub scan_type: Option<String>,
    /// Scene change detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sceneChangeDetect")]
    #[builder(default)]
    pub scene_change_detect: Option<String>,
    /// Number of slices per picture.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub slices: Option<f64>,
    /// Set the H265 tier in the output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tier: Option<String>,
    /// Sets the height of tiles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tileHeight")]
    #[builder(default)]
    pub tile_height: Option<f64>,
    /// Enables or disables padding of tiles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tilePadding")]
    #[builder(default)]
    pub tile_padding: Option<String>,
    /// Sets the width of tiles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tileWidth")]
    #[builder(default)]
    pub tile_width: Option<f64>,
    /// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timecodeBurninSettings")]
    #[builder(default)]
    pub timecode_burnin_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings>,
    /// Determines how timecodes should be inserted into the video elementary stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timecodeInsertion")]
    #[builder(default)]
    pub timecode_insertion: Option<String>,
    /// Sets the size of the treeblock.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "treeblockSize")]
    #[builder(default)]
    pub treeblock_size: Option<String>,
}

/// Define the color metadata for the output. H265 Color Space Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings {
    /// Sets the colorspace metadata to be passed through.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "colorSpacePassthroughSettings")]
    #[builder(default)]
    pub color_space_passthrough_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings>,
    /// Set the colorspace to Dolby Vision81.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dolbyVision81Settings")]
    #[builder(default)]
    pub dolby_vision81_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings>,
    /// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hdr10Settings")]
    #[builder(default)]
    pub hdr10_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings>,
    /// Set the colorspace to Rec. 601.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rec601Settings")]
    #[builder(default)]
    pub rec601_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings>,
    /// Set the colorspace to Rec. 709.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rec709Settings")]
    #[builder(default)]
    pub rec709_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings>,
}

/// Sets the colorspace metadata to be passed through.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings
{}

/// Set the colorspace to Dolby Vision81.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings
{}

/// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings
{
    /// Sets the MaxCLL value for HDR10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCll")]
    #[builder(default)]
    pub max_cll: Option<f64>,
    /// Sets the MaxFALL value for HDR10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFall")]
    #[builder(default)]
    pub max_fall: Option<f64>,
}

/// Set the colorspace to Rec. 601.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings
{}

/// Set the colorspace to Rec. 709.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings
{}

/// Filters to apply to an encode. See H264 Filter Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings {
    /// Temporal filter settings. See Temporal Filter Settings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "temporalFilterSettings")]
    #[builder(default)]
    pub temporal_filter_settings: Option<ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings>,
}

/// Temporal filter settings. See Temporal Filter Settings
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings
{
    /// Post filter sharpening.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postFilterSharpening"
    )]
    #[builder(default)]
    pub post_filter_sharpening: Option<String>,
    /// Filter strength.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub strength: Option<String>,
}

/// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings
{
    /// Set a prefix on the burned in timecode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prefix: Option<String>,
    /// Sets the size of the burned in timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeBurninFontSize"
    )]
    #[builder(default)]
    pub timecode_burnin_font_size: Option<String>,
    /// Sets the position of the burned in timecode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timecodeBurninPosition"
    )]
    #[builder(default)]
    pub timecode_burnin_position: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachments {
    /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input. See Automatic Input Failover Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automaticInputFailoverSettings"
    )]
    #[builder(default)]
    pub automatic_input_failover_settings:
        Option<ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettings>,
    /// User-specified name for the attachment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputAttachmentName"
    )]
    #[builder(default)]
    pub input_attachment_name: Option<String>,
    /// The ID of the input.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputId")]
    #[builder(default)]
    pub input_id: Option<String>,
    /// Settings of an input. See Input Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputSettings"
    )]
    #[builder(default)]
    pub input_settings: Option<ChannelStatusAtProviderInputAttachmentsInputSettings>,
}

/// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input. See Automatic Input Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettings {
    /// This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorClearTimeMsec"
    )]
    #[builder(default)]
    pub error_clear_time_msec: Option<f64>,
    /// A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input. See Failover Condition Block for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "failoverCondition"
    )]
    #[builder(default)]
    pub failover_condition: Option<
        Vec<ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition>,
    >,
    /// Input preference when deciding which input to make active when a previously failed input has recovered.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputPreference"
    )]
    #[builder(default)]
    pub input_preference: Option<String>,
    /// The input ID of the secondary input in the automatic input failover pair.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryInputId"
    )]
    #[builder(default)]
    pub secondary_input_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition {
    /// Failover condition type-specific settings. See Failover Condition Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverConditionSettings")]
    #[builder(default)]
    pub failover_condition_settings: Option<ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings>,
}

/// Failover condition type-specific settings. See Failover Condition Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings {
    /// MediaLive will perform a failover if the specified audio selector is silent for the specified period. See Audio Silence Failover Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioSilenceSettings")]
    #[builder(default)]
    pub audio_silence_settings: Option<ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings>,
    /// MediaLive will perform a failover if content is not detected in this input for the specified period. See Input Loss Failover Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputLossSettings")]
    #[builder(default)]
    pub input_loss_settings: Option<ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings>,
    /// MediaLive will perform a failover if content is considered black for the specified period. See Video Black Failover Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoBlackSettings")]
    #[builder(default)]
    pub video_black_settings: Option<ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings>,
}

/// MediaLive will perform a failover if the specified audio selector is silent for the specified period. See Audio Silence Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings
{
    /// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSelectorName"
    )]
    #[builder(default)]
    pub audio_selector_name: Option<String>,
    /// The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSilenceThresholdMsec"
    )]
    #[builder(default)]
    pub audio_silence_threshold_msec: Option<f64>,
}

/// MediaLive will perform a failover if content is not detected in this input for the specified period. See Input Loss Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings
{
    /// The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputLossThresholdMsec"
    )]
    #[builder(default)]
    pub input_loss_threshold_msec: Option<f64>,
}

/// MediaLive will perform a failover if content is considered black for the specified period. See Video Black Failover Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings
{
    /// A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (10230.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (2550.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blackDetectThreshold"
    )]
    #[builder(default)]
    pub black_detect_threshold: Option<f64>,
    /// The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoBlackThresholdMsec"
    )]
    #[builder(default)]
    pub video_black_threshold_msec: Option<f64>,
}

/// Settings of an input. See Input Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettings {
    /// Used to select the audio stream to decode for inputs that have multiple. See Audio Selectors for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "audioSelector"
    )]
    #[builder(default)]
    pub audio_selector:
        Option<Vec<ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelector>>,
    /// Used to select the caption input to use for inputs that have multiple available. See Caption Selectors for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captionSelector"
    )]
    #[builder(default)]
    pub caption_selector:
        Option<Vec<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelector>>,
    /// Enable or disable the deblock filter when filtering.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deblockFilter"
    )]
    #[builder(default)]
    pub deblock_filter: Option<String>,
    /// Enable or disable the denoise filter when filtering.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "denoiseFilter"
    )]
    #[builder(default)]
    pub denoise_filter: Option<String>,
    /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filterStrength"
    )]
    #[builder(default)]
    pub filter_strength: Option<f64>,
    /// Turns on the filter for the input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputFilter"
    )]
    #[builder(default)]
    pub input_filter: Option<String>,
    /// Input settings. See Network Input Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInputSettings"
    )]
    #[builder(default)]
    pub network_input_settings:
        Option<ChannelStatusAtProviderInputAttachmentsInputSettingsNetworkInputSettings>,
    /// PID from which to read SCTE-35 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte35Pid")]
    #[builder(default)]
    pub scte35_pid: Option<f64>,
    /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smpte2038DataPreference"
    )]
    #[builder(default)]
    pub smpte2038_data_preference: Option<String>,
    /// Loop input if it is a file.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndBehavior"
    )]
    #[builder(default)]
    pub source_end_behavior: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "videoSelector"
    )]
    #[builder(default)]
    pub video_selector: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsVideoSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelector {
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The audio selector settings. See Audio Selector Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectorSettings"
    )]
    #[builder(default)]
    pub selector_settings:
        Option<ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettings>,
}

/// The audio selector settings. See Audio Selector Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettings {
    /// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioHlsRenditionSelection")]
    #[builder(default)]
    pub audio_hls_rendition_selection: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection>,
    /// Audio Language Selection. See Audio Language Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioLanguageSelection")]
    #[builder(default)]
    pub audio_language_selection: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection>,
    /// Audio Pid Selection. See Audio PID Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPidSelection")]
    #[builder(default)]
    pub audio_pid_selection: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection>,
    /// Audio Track Selection. See Audio Track Selection for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioTrackSelection")]
    #[builder(default)]
    pub audio_track_selection: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection>,
}

/// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection
{
    /// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupId")]
    #[builder(default)]
    pub group_id: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Audio Language Selection. See Audio Language Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection
{
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageSelectionPolicy"
    )]
    #[builder(default)]
    pub language_selection_policy: Option<String>,
}

/// Audio Pid Selection. See Audio PID Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection
{
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pid: Option<f64>,
}

/// Audio Track Selection. See Audio Track Selection for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection {
    /// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dolbyEDecode")]
    #[builder(default)]
    pub dolby_e_decode: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode>,
    /// Selects one or more unique audio tracks from within a source. See Audio Tracks for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tracks: Option<Vec<ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks>>,
}

/// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode
{
    /// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "programSelection"
    )]
    #[builder(default)]
    pub program_selection: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks
{
    /// 1-based integer value that maps to a specific audio track.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub track: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelector {
    /// Selects a specific three-letter language code from within an audio source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "languageCode"
    )]
    #[builder(default)]
    pub language_code: Option<String>,
    /// Name of the Channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The audio selector settings. See Audio Selector Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectorSettings"
    )]
    #[builder(default)]
    pub selector_settings:
        Option<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettings>,
}

/// The audio selector settings. See Audio Selector Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettings {
    /// Ancillary Source Settings. See Ancillary Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ancillarySourceSettings")]
    #[builder(default)]
    pub ancillary_source_settings: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings>,
    /// ARIB Source Settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aribSourceSettings")]
    #[builder(default)]
    pub arib_source_settings: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings>,
    /// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dvbSubSourceSettings")]
    #[builder(default)]
    pub dvb_sub_source_settings: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings>,
    /// Embedded Source Settings. See Embedded Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "embeddedSourceSettings")]
    #[builder(default)]
    pub embedded_source_settings: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings>,
    /// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte20SourceSettings")]
    #[builder(default)]
    pub scte20_source_settings: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings>,
    /// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scte27SourceSettings")]
    #[builder(default)]
    pub scte27_source_settings: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings>,
    /// Teletext Source Settings. See Teletext Source Settings for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teletextSourceSettings")]
    #[builder(default)]
    pub teletext_source_settings: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings>,
}

/// Ancillary Source Settings. See Ancillary Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings
{
    /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceAncillaryChannelNumber"
    )]
    #[builder(default)]
    pub source_ancillary_channel_number: Option<f64>,
}

/// ARIB Source Settings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings
{}

/// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings
{
    /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocrLanguage"
    )]
    #[builder(default)]
    pub ocr_language: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pid: Option<f64>,
}

/// Embedded Source Settings. See Embedded Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings
{
    /// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "convert608To708"
    )]
    #[builder(default)]
    pub convert608_to708: Option<String>,
    /// Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scte20Detection"
    )]
    #[builder(default)]
    pub scte20_detection: Option<String>,
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "source608ChannelNumber"
    )]
    #[builder(default)]
    pub source608_channel_number: Option<f64>,
}

/// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings
{
    /// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "convert608To708"
    )]
    #[builder(default)]
    pub convert608_to708: Option<String>,
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "source608ChannelNumber"
    )]
    #[builder(default)]
    pub source608_channel_number: Option<f64>,
}

/// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings
{
    /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocrLanguage"
    )]
    #[builder(default)]
    pub ocr_language: Option<String>,
    /// Selects a specific PID from within a source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub pid: Option<f64>,
}

/// Teletext Source Settings. See Teletext Source Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings {
    /// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputRectangle")]
    #[builder(default)]
    pub output_rectangle: Option<ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle>,
    /// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no “0x” prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pageNumber")]
    #[builder(default)]
    pub page_number: Option<String>,
}

/// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle
{
    /// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub height: Option<f64>,
    /// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "leftOffset"
    )]
    #[builder(default)]
    pub left_offset: Option<f64>,
    /// See the description in left_offset. For top_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topOffset")]
    #[builder(default)]
    pub top_offset: Option<f64>,
    /// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub width: Option<f64>,
}

/// Input settings. See Network Input Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsNetworkInputSettings {
    /// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hlsInputSettings"
    )]
    #[builder(default)]
    pub hls_input_settings: Option<
        ChannelStatusAtProviderInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings,
    >,
    /// Check HTTPS server certificates.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverValidation"
    )]
    #[builder(default)]
    pub server_validation: Option<String>,
}

/// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings
{
    /// The bitrate is specified in bits per second, as in an HLS manifest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bandwidth: Option<f64>,
    /// Buffer segments.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bufferSegments"
    )]
    #[builder(default)]
    pub buffer_segments: Option<f64>,
    /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub retries: Option<f64>,
    /// The number of seconds between retries when an attempt to read a manifest or segment fails.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retryInterval"
    )]
    #[builder(default)]
    pub retry_interval: Option<f64>,
    /// The source for the timecode that will be associated with the events outputs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scte35Source"
    )]
    #[builder(default)]
    pub scte35_source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputAttachmentsInputSettingsVideoSelector {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "colorSpace"
    )]
    #[builder(default)]
    pub color_space: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "colorSpaceUsage"
    )]
    #[builder(default)]
    pub color_space_usage: Option<String>,
}

/// Specification of network and file inputs for the channel.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderInputSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub codec: Option<String>,
    /// - Maximum CDI input resolution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputResolution"
    )]
    #[builder(default)]
    pub input_resolution: Option<String>,
    /// Average bitrate in bits/second.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumBitrate"
    )]
    #[builder(default)]
    pub maximum_bitrate: Option<String>,
}

/// Maintenance settings for this channel. See Maintenance for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderMaintenance {
    /// The day of the week to use for maintenance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceDay"
    )]
    #[builder(default)]
    pub maintenance_day: Option<String>,
    /// The hour maintenance will start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceStartTime"
    )]
    #[builder(default)]
    pub maintenance_start_time: Option<String>,
}

/// Settings for the VPC outputs. See VPC for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ChannelStatusAtProviderVpc {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZones"
    )]
    #[builder(default)]
    pub availability_zones: Option<Vec<String>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceIds"
    )]
    #[builder(default)]
    pub network_interface_ids: Option<Vec<String>>,
    /// List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicAddressAllocationIds"
    )]
    #[builder(default)]
    pub public_address_allocation_ids: Option<Vec<String>>,
    /// A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}

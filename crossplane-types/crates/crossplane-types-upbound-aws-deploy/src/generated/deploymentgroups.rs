// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// DeploymentGroupSpec defines the desired state of DeploymentGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "deploy.aws.upbound.io",
    version = "v1beta2",
    kind = "DeploymentGroup",
    plural = "deploymentgroups"
)]
#[kube(status = "DeploymentGroupStatus")]
pub struct DeploymentGroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<DeploymentGroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DeploymentGroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<DeploymentGroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<DeploymentGroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<DeploymentGroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<DeploymentGroupWriteConnectionSecretToRef>,
}

/// DeploymentGroupSpec defines the desired state of DeploymentGroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProvider {
    /// Configuration block of alarms associated with the deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "alarmConfiguration"
    )]
    #[builder(default)]
    pub alarm_configuration: Option<DeploymentGroupForProviderAlarmConfiguration>,
    /// The name of the application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appName")]
    #[builder(default)]
    pub app_name: Option<String>,
    /// Reference to a App in deploy to populate appName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appNameRef"
    )]
    #[builder(default)]
    pub app_name_ref: Option<DeploymentGroupForProviderAppNameRef>,
    /// Selector for a App in deploy to populate appName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appNameSelector"
    )]
    #[builder(default)]
    pub app_name_selector: Option<DeploymentGroupForProviderAppNameSelector>,
    /// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRollbackConfiguration"
    )]
    #[builder(default)]
    pub auto_rollback_configuration: Option<DeploymentGroupForProviderAutoRollbackConfiguration>,
    /// Autoscaling groups associated with the deployment group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoscalingGroups"
    )]
    #[builder(default)]
    pub autoscaling_groups: Option<Vec<String>>,
    /// Configuration block of the blue/green deployment options for a deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blueGreenDeploymentConfig"
    )]
    #[builder(default)]
    pub blue_green_deployment_config: Option<DeploymentGroupForProviderBlueGreenDeploymentConfig>,
    /// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentConfigName"
    )]
    #[builder(default)]
    pub deployment_config_name: Option<String>,
    /// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentStyle"
    )]
    #[builder(default)]
    pub deployment_style: Option<DeploymentGroupForProviderDeploymentStyle>,
    /// Tag filters associated with the deployment group. See the AWS docs for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2TagFilter"
    )]
    #[builder(default)]
    pub ec2_tag_filter: Option<Vec<DeploymentGroupForProviderEc2TagFilter>>,
    /// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ec2TagSet")]
    #[builder(default)]
    pub ec2_tag_set: Option<Vec<DeploymentGroupForProviderEc2TagSet>>,
    /// Configuration block(s) of the ECS services for a deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ecsService"
    )]
    #[builder(default)]
    pub ecs_service: Option<DeploymentGroupForProviderEcsService>,
    /// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loadBalancerInfo"
    )]
    #[builder(default)]
    pub load_balancer_info: Option<DeploymentGroupForProviderLoadBalancerInfo>,
    /// On premise tag filters associated with the group. See the AWS docs for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onPremisesInstanceTagFilter"
    )]
    #[builder(default)]
    pub on_premises_instance_tag_filter:
        Option<Vec<DeploymentGroupForProviderOnPremisesInstanceTagFilter>>,
    /// Configuration block of Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. Valid values are UPDATE and IGNORE. Defaults to UPDATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outdatedInstancesStrategy"
    )]
    #[builder(default)]
    pub outdated_instances_strategy: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The service role ARN that allows deployments.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArn"
    )]
    #[builder(default)]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArnRef"
    )]
    #[builder(default)]
    pub service_role_arn_ref: Option<DeploymentGroupForProviderServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArnSelector"
    )]
    #[builder(default)]
    pub service_role_arn_selector: Option<DeploymentGroupForProviderServiceRoleArnSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationHookEnabled"
    )]
    #[builder(default)]
    pub termination_hook_enabled: Option<bool>,
    /// Configuration block(s) of the triggers for the deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerConfiguration"
    )]
    #[builder(default)]
    pub trigger_configuration: Option<Vec<DeploymentGroupForProviderTriggerConfiguration>>,
}

/// Configuration block of alarms associated with the deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderAlarmConfiguration {
    /// A list of alarms configured for the deployment group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<String>>,
    /// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignorePollAlarmFailure"
    )]
    #[builder(default)]
    pub ignore_poll_alarm_failure: Option<bool>,
}

/// Reference to a App in deploy to populate appName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderAppNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderAppNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderAppNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderAppNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderAppNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderAppNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderAppNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a App in deploy to populate appName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderAppNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderAppNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderAppNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderAppNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderAppNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderAppNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderAppNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderAutoRollbackConfiguration {
    /// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE, DEPLOYMENT_STOP_ON_ALARM and DEPLOYMENT_STOP_ON_REQUEST.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub events: Option<Vec<String>>,
}

/// Configuration block of the blue/green deployment options for a deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderBlueGreenDeploymentConfig {
    /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentReadyOption")]
    #[builder(default)]
    pub deployment_ready_option: Option<DeploymentGroupForProviderBlueGreenDeploymentConfigDeploymentReadyOption>,
    /// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "greenFleetProvisioningOption")]
    #[builder(default)]
    pub green_fleet_provisioning_option: Option<DeploymentGroupForProviderBlueGreenDeploymentConfigGreenFleetProvisioningOption>,
    /// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminateBlueInstancesOnDeploymentSuccess")]
    #[builder(default)]
    pub terminate_blue_instances_on_deployment_success: Option<DeploymentGroupForProviderBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess>,
}

/// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderBlueGreenDeploymentConfigDeploymentReadyOption {
    /// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "actionOnTimeout"
    )]
    #[builder(default)]
    pub action_on_timeout: Option<String>,
    /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitTimeInMinutes"
    )]
    #[builder(default)]
    pub wait_time_in_minutes: Option<f64>,
}

/// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderBlueGreenDeploymentConfigGreenFleetProvisioningOption {
    /// The method used to add instances to a replacement environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
}

/// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess
{
    /// The method used to add instances to a replacement environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationWaitTimeInMinutes"
    )]
    #[builder(default)]
    pub termination_wait_time_in_minutes: Option<f64>,
}

/// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderDeploymentStyle {
    /// Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentOption"
    )]
    #[builder(default)]
    pub deployment_option: Option<String>,
    /// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentType"
    )]
    #[builder(default)]
    pub deployment_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEc2TagFilter {
    /// The key of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The value of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEc2TagSet {
    /// Tag filters associated with the deployment group. See the AWS docs for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2TagFilter"
    )]
    #[builder(default)]
    pub ec2_tag_filter: Option<Vec<DeploymentGroupForProviderEc2TagSetEc2TagFilter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEc2TagSetEc2TagFilter {
    /// The key of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The value of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Configuration block(s) of the ECS services for a deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEcsService {
    /// The name of the ECS cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterName"
    )]
    #[builder(default)]
    pub cluster_name: Option<String>,
    /// Reference to a Cluster in ecs to populate clusterName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterNameRef"
    )]
    #[builder(default)]
    pub cluster_name_ref: Option<DeploymentGroupForProviderEcsServiceClusterNameRef>,
    /// Selector for a Cluster in ecs to populate clusterName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterNameSelector"
    )]
    #[builder(default)]
    pub cluster_name_selector: Option<DeploymentGroupForProviderEcsServiceClusterNameSelector>,
    /// The name of the ECS service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default)]
    pub service_name: Option<String>,
    /// Reference to a Service in ecs to populate serviceName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceNameRef"
    )]
    #[builder(default)]
    pub service_name_ref: Option<DeploymentGroupForProviderEcsServiceServiceNameRef>,
    /// Selector for a Service in ecs to populate serviceName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceNameSelector"
    )]
    #[builder(default)]
    pub service_name_selector: Option<DeploymentGroupForProviderEcsServiceServiceNameSelector>,
}

/// Reference to a Cluster in ecs to populate clusterName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEcsServiceClusterNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderEcsServiceClusterNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEcsServiceClusterNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderEcsServiceClusterNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderEcsServiceClusterNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderEcsServiceClusterNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderEcsServiceClusterNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in ecs to populate clusterName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEcsServiceClusterNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderEcsServiceClusterNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEcsServiceClusterNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderEcsServiceClusterNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderEcsServiceClusterNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderEcsServiceClusterNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderEcsServiceClusterNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Service in ecs to populate serviceName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEcsServiceServiceNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderEcsServiceServiceNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEcsServiceServiceNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderEcsServiceServiceNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderEcsServiceServiceNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderEcsServiceServiceNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderEcsServiceServiceNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Service in ecs to populate serviceName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEcsServiceServiceNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderEcsServiceServiceNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderEcsServiceServiceNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderEcsServiceServiceNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderEcsServiceServiceNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderEcsServiceServiceNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderEcsServiceServiceNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfo {
    /// The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elbInfo")]
    #[builder(default)]
    pub elb_info: Option<Vec<DeploymentGroupForProviderLoadBalancerInfoElbInfo>>,
    /// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroupInfo"
    )]
    #[builder(default)]
    pub target_group_info: Option<Vec<DeploymentGroupForProviderLoadBalancerInfoTargetGroupInfo>>,
    /// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroupPairInfo"
    )]
    #[builder(default)]
    pub target_group_pair_info:
        Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfo>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoElbInfo {
    /// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Reference to a ELB in elb to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default)]
    pub name_ref: Option<DeploymentGroupForProviderLoadBalancerInfoElbInfoNameRef>,
    /// Selector for a ELB in elb to populate name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameSelector"
    )]
    #[builder(default)]
    pub name_selector: Option<DeploymentGroupForProviderLoadBalancerInfoElbInfoNameSelector>,
}

/// Reference to a ELB in elb to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoElbInfoNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderLoadBalancerInfoElbInfoNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoElbInfoNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DeploymentGroupForProviderLoadBalancerInfoElbInfoNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderLoadBalancerInfoElbInfoNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoElbInfoNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoElbInfoNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ELB in elb to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoElbInfoNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderLoadBalancerInfoElbInfoNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoElbInfoNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DeploymentGroupForProviderLoadBalancerInfoElbInfoNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderLoadBalancerInfoElbInfoNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoElbInfoNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoElbInfoNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupInfo {
    /// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfo {
    /// Configuration block for the production traffic route (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prodTrafficRoute"
    )]
    #[builder(default)]
    pub prod_traffic_route:
        Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute>,
    /// Configuration blocks for a target group within a target group pair (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroup"
    )]
    #[builder(default)]
    pub target_group:
        Option<Vec<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroup>>,
    /// Configuration block for the test traffic route (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "testTrafficRoute"
    )]
    #[builder(default)]
    pub test_traffic_route:
        Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute>,
}

/// Configuration block for the production traffic route (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute {
    /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArns")]
    #[builder(default)]
    pub listener_arns: Option<Vec<String>>,
    /// References to LBListener in elbv2 to populate listenerArns.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArnsRefs")]
    #[builder(default)]
    pub listener_arns_refs: Option<Vec<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefs>>,
    /// Selector for a list of LBListener in elbv2 to populate listenerArns.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArnsSelector")]
    #[builder(default)]
    pub listener_arns_selector: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a list of LBListener in elbv2 to populate listenerArns.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroup {
    /// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Reference to a LBTargetGroup in elbv2 to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default)]
    pub name_ref:
        Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRef>,
    /// Selector for a LBTargetGroup in elbv2 to populate name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameSelector"
    )]
    #[builder(default)]
    pub name_selector: Option<
        DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelector,
    >,
}

/// Reference to a LBTargetGroup in elbv2 to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<
        DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a LBTargetGroup in elbv2 to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<
        DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Configuration block for the test traffic route (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute {
    /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "listenerArns"
    )]
    #[builder(default)]
    pub listener_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderOnPremisesInstanceTagFilter {
    /// The key of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The value of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupForProviderServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupForProviderServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderTriggerConfiguration {
    /// The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerEvents"
    )]
    #[builder(default)]
    pub trigger_events: Option<Vec<String>>,
    /// The name of the notification trigger.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerName"
    )]
    #[builder(default)]
    pub trigger_name: Option<String>,
    /// The ARN of the SNS topic through which notifications are sent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerTargetArn"
    )]
    #[builder(default)]
    pub trigger_target_arn: Option<String>,
    /// Reference to a Topic in sns to populate triggerTargetArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerTargetArnRef"
    )]
    #[builder(default)]
    pub trigger_target_arn_ref:
        Option<DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnRef>,
    /// Selector for a Topic in sns to populate triggerTargetArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerTargetArnSelector"
    )]
    #[builder(default)]
    pub trigger_target_arn_selector:
        Option<DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnSelector>,
}

/// Reference to a Topic in sns to populate triggerTargetArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Topic in sns to populate triggerTargetArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<
        DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupForProviderTriggerConfigurationTriggerTargetArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProvider {
    /// Configuration block of alarms associated with the deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "alarmConfiguration"
    )]
    #[builder(default)]
    pub alarm_configuration: Option<DeploymentGroupInitProviderAlarmConfiguration>,
    /// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRollbackConfiguration"
    )]
    #[builder(default)]
    pub auto_rollback_configuration: Option<DeploymentGroupInitProviderAutoRollbackConfiguration>,
    /// Autoscaling groups associated with the deployment group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoscalingGroups"
    )]
    #[builder(default)]
    pub autoscaling_groups: Option<Vec<String>>,
    /// Configuration block of the blue/green deployment options for a deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blueGreenDeploymentConfig"
    )]
    #[builder(default)]
    pub blue_green_deployment_config: Option<DeploymentGroupInitProviderBlueGreenDeploymentConfig>,
    /// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentConfigName"
    )]
    #[builder(default)]
    pub deployment_config_name: Option<String>,
    /// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentStyle"
    )]
    #[builder(default)]
    pub deployment_style: Option<DeploymentGroupInitProviderDeploymentStyle>,
    /// Tag filters associated with the deployment group. See the AWS docs for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2TagFilter"
    )]
    #[builder(default)]
    pub ec2_tag_filter: Option<Vec<DeploymentGroupInitProviderEc2TagFilter>>,
    /// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ec2TagSet")]
    #[builder(default)]
    pub ec2_tag_set: Option<Vec<DeploymentGroupInitProviderEc2TagSet>>,
    /// Configuration block(s) of the ECS services for a deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ecsService"
    )]
    #[builder(default)]
    pub ecs_service: Option<DeploymentGroupInitProviderEcsService>,
    /// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loadBalancerInfo"
    )]
    #[builder(default)]
    pub load_balancer_info: Option<DeploymentGroupInitProviderLoadBalancerInfo>,
    /// On premise tag filters associated with the group. See the AWS docs for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onPremisesInstanceTagFilter"
    )]
    #[builder(default)]
    pub on_premises_instance_tag_filter:
        Option<Vec<DeploymentGroupInitProviderOnPremisesInstanceTagFilter>>,
    /// Configuration block of Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. Valid values are UPDATE and IGNORE. Defaults to UPDATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outdatedInstancesStrategy"
    )]
    #[builder(default)]
    pub outdated_instances_strategy: Option<String>,
    /// The service role ARN that allows deployments.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArn"
    )]
    #[builder(default)]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArnRef"
    )]
    #[builder(default)]
    pub service_role_arn_ref: Option<DeploymentGroupInitProviderServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArnSelector"
    )]
    #[builder(default)]
    pub service_role_arn_selector: Option<DeploymentGroupInitProviderServiceRoleArnSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationHookEnabled"
    )]
    #[builder(default)]
    pub termination_hook_enabled: Option<bool>,
    /// Configuration block(s) of the triggers for the deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerConfiguration"
    )]
    #[builder(default)]
    pub trigger_configuration: Option<Vec<DeploymentGroupInitProviderTriggerConfiguration>>,
}

/// Configuration block of alarms associated with the deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderAlarmConfiguration {
    /// A list of alarms configured for the deployment group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<String>>,
    /// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignorePollAlarmFailure"
    )]
    #[builder(default)]
    pub ignore_poll_alarm_failure: Option<bool>,
}

/// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderAutoRollbackConfiguration {
    /// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE, DEPLOYMENT_STOP_ON_ALARM and DEPLOYMENT_STOP_ON_REQUEST.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub events: Option<Vec<String>>,
}

/// Configuration block of the blue/green deployment options for a deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderBlueGreenDeploymentConfig {
    /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentReadyOption")]
    #[builder(default)]
    pub deployment_ready_option: Option<DeploymentGroupInitProviderBlueGreenDeploymentConfigDeploymentReadyOption>,
    /// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "greenFleetProvisioningOption")]
    #[builder(default)]
    pub green_fleet_provisioning_option: Option<DeploymentGroupInitProviderBlueGreenDeploymentConfigGreenFleetProvisioningOption>,
    /// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminateBlueInstancesOnDeploymentSuccess")]
    #[builder(default)]
    pub terminate_blue_instances_on_deployment_success: Option<DeploymentGroupInitProviderBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess>,
}

/// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderBlueGreenDeploymentConfigDeploymentReadyOption {
    /// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "actionOnTimeout"
    )]
    #[builder(default)]
    pub action_on_timeout: Option<String>,
    /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitTimeInMinutes"
    )]
    #[builder(default)]
    pub wait_time_in_minutes: Option<f64>,
}

/// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderBlueGreenDeploymentConfigGreenFleetProvisioningOption {
    /// The method used to add instances to a replacement environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
}

/// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess
{
    /// The method used to add instances to a replacement environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationWaitTimeInMinutes"
    )]
    #[builder(default)]
    pub termination_wait_time_in_minutes: Option<f64>,
}

/// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderDeploymentStyle {
    /// Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentOption"
    )]
    #[builder(default)]
    pub deployment_option: Option<String>,
    /// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentType"
    )]
    #[builder(default)]
    pub deployment_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEc2TagFilter {
    /// The key of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The value of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEc2TagSet {
    /// Tag filters associated with the deployment group. See the AWS docs for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2TagFilter"
    )]
    #[builder(default)]
    pub ec2_tag_filter: Option<Vec<DeploymentGroupInitProviderEc2TagSetEc2TagFilter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEc2TagSetEc2TagFilter {
    /// The key of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The value of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Configuration block(s) of the ECS services for a deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEcsService {
    /// The name of the ECS cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterName"
    )]
    #[builder(default)]
    pub cluster_name: Option<String>,
    /// Reference to a Cluster in ecs to populate clusterName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterNameRef"
    )]
    #[builder(default)]
    pub cluster_name_ref: Option<DeploymentGroupInitProviderEcsServiceClusterNameRef>,
    /// Selector for a Cluster in ecs to populate clusterName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterNameSelector"
    )]
    #[builder(default)]
    pub cluster_name_selector: Option<DeploymentGroupInitProviderEcsServiceClusterNameSelector>,
    /// The name of the ECS service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default)]
    pub service_name: Option<String>,
    /// Reference to a Service in ecs to populate serviceName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceNameRef"
    )]
    #[builder(default)]
    pub service_name_ref: Option<DeploymentGroupInitProviderEcsServiceServiceNameRef>,
    /// Selector for a Service in ecs to populate serviceName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceNameSelector"
    )]
    #[builder(default)]
    pub service_name_selector: Option<DeploymentGroupInitProviderEcsServiceServiceNameSelector>,
}

/// Reference to a Cluster in ecs to populate clusterName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEcsServiceClusterNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderEcsServiceClusterNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEcsServiceClusterNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupInitProviderEcsServiceClusterNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderEcsServiceClusterNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderEcsServiceClusterNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderEcsServiceClusterNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in ecs to populate clusterName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEcsServiceClusterNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderEcsServiceClusterNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEcsServiceClusterNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DeploymentGroupInitProviderEcsServiceClusterNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderEcsServiceClusterNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderEcsServiceClusterNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderEcsServiceClusterNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Service in ecs to populate serviceName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEcsServiceServiceNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderEcsServiceServiceNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEcsServiceServiceNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupInitProviderEcsServiceServiceNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderEcsServiceServiceNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderEcsServiceServiceNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderEcsServiceServiceNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Service in ecs to populate serviceName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEcsServiceServiceNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderEcsServiceServiceNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderEcsServiceServiceNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DeploymentGroupInitProviderEcsServiceServiceNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderEcsServiceServiceNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderEcsServiceServiceNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderEcsServiceServiceNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfo {
    /// The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elbInfo")]
    #[builder(default)]
    pub elb_info: Option<Vec<DeploymentGroupInitProviderLoadBalancerInfoElbInfo>>,
    /// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroupInfo"
    )]
    #[builder(default)]
    pub target_group_info: Option<Vec<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupInfo>>,
    /// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroupPairInfo"
    )]
    #[builder(default)]
    pub target_group_pair_info:
        Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfo>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoElbInfo {
    /// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Reference to a ELB in elb to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default)]
    pub name_ref: Option<DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameRef>,
    /// Selector for a ELB in elb to populate name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameSelector"
    )]
    #[builder(default)]
    pub name_selector: Option<DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameSelector>,
}

/// Reference to a ELB in elb to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ELB in elb to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoElbInfoNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupInfo {
    /// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfo {
    /// Configuration block for the production traffic route (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prodTrafficRoute"
    )]
    #[builder(default)]
    pub prod_traffic_route:
        Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute>,
    /// Configuration blocks for a target group within a target group pair (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroup"
    )]
    #[builder(default)]
    pub target_group:
        Option<Vec<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroup>>,
    /// Configuration block for the test traffic route (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "testTrafficRoute"
    )]
    #[builder(default)]
    pub test_traffic_route:
        Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute>,
}

/// Configuration block for the production traffic route (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute {
    /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArns")]
    #[builder(default)]
    pub listener_arns: Option<Vec<String>>,
    /// References to LBListener in elbv2 to populate listenerArns.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArnsRefs")]
    #[builder(default)]
    pub listener_arns_refs: Option<Vec<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefs>>,
    /// Selector for a list of LBListener in elbv2 to populate listenerArns.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArnsSelector")]
    #[builder(default)]
    pub listener_arns_selector: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsRefsPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a list of LBListener in elbv2 to populate listenerArns.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteListenerArnsSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroup {
    /// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Reference to a LBTargetGroup in elbv2 to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default)]
    pub name_ref:
        Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRef>,
    /// Selector for a LBTargetGroup in elbv2 to populate name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameSelector"
    )]
    #[builder(default)]
    pub name_selector: Option<
        DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelector,
    >,
}

/// Reference to a LBTargetGroup in elbv2 to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<
        DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a LBTargetGroup in elbv2 to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<
        DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTargetGroupNameSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Configuration block for the test traffic route (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute {
    /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "listenerArns"
    )]
    #[builder(default)]
    pub listener_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderOnPremisesInstanceTagFilter {
    /// The key of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The value of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupInitProviderServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupInitProviderServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupInitProviderServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderTriggerConfiguration {
    /// The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerEvents"
    )]
    #[builder(default)]
    pub trigger_events: Option<Vec<String>>,
    /// The name of the notification trigger.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerName"
    )]
    #[builder(default)]
    pub trigger_name: Option<String>,
    /// The ARN of the SNS topic through which notifications are sent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerTargetArn"
    )]
    #[builder(default)]
    pub trigger_target_arn: Option<String>,
    /// Reference to a Topic in sns to populate triggerTargetArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerTargetArnRef"
    )]
    #[builder(default)]
    pub trigger_target_arn_ref:
        Option<DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnRef>,
    /// Selector for a Topic in sns to populate triggerTargetArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerTargetArnSelector"
    )]
    #[builder(default)]
    pub trigger_target_arn_selector:
        Option<DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnSelector>,
}

/// Reference to a Topic in sns to populate triggerTargetArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve:
        Option<DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Topic in sns to populate triggerTargetArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy:
        Option<DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<
        DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<
        DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupInitProviderTriggerConfigurationTriggerTargetArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<DeploymentGroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<DeploymentGroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DeploymentGroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DeploymentGroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DeploymentGroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeploymentGroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DeploymentGroupStatus defines the observed state of DeploymentGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<DeploymentGroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProvider {
    /// Configuration block of alarms associated with the deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "alarmConfiguration"
    )]
    #[builder(default)]
    pub alarm_configuration: Option<DeploymentGroupStatusAtProviderAlarmConfiguration>,
    /// The name of the application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appName")]
    #[builder(default)]
    pub app_name: Option<String>,
    /// The ARN of the CodeDeploy deployment group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRollbackConfiguration"
    )]
    #[builder(default)]
    pub auto_rollback_configuration:
        Option<DeploymentGroupStatusAtProviderAutoRollbackConfiguration>,
    /// Autoscaling groups associated with the deployment group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoscalingGroups"
    )]
    #[builder(default)]
    pub autoscaling_groups: Option<Vec<String>>,
    /// Configuration block of the blue/green deployment options for a deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blueGreenDeploymentConfig"
    )]
    #[builder(default)]
    pub blue_green_deployment_config:
        Option<DeploymentGroupStatusAtProviderBlueGreenDeploymentConfig>,
    /// The destination platform type for the deployment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "computePlatform"
    )]
    #[builder(default)]
    pub compute_platform: Option<String>,
    /// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentConfigName"
    )]
    #[builder(default)]
    pub deployment_config_name: Option<String>,
    /// The ID of the CodeDeploy deployment group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentGroupId"
    )]
    #[builder(default)]
    pub deployment_group_id: Option<String>,
    /// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentStyle"
    )]
    #[builder(default)]
    pub deployment_style: Option<DeploymentGroupStatusAtProviderDeploymentStyle>,
    /// Tag filters associated with the deployment group. See the AWS docs for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2TagFilter"
    )]
    #[builder(default)]
    pub ec2_tag_filter: Option<Vec<DeploymentGroupStatusAtProviderEc2TagFilter>>,
    /// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ec2TagSet")]
    #[builder(default)]
    pub ec2_tag_set: Option<Vec<DeploymentGroupStatusAtProviderEc2TagSet>>,
    /// Configuration block(s) of the ECS services for a deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ecsService"
    )]
    #[builder(default)]
    pub ecs_service: Option<DeploymentGroupStatusAtProviderEcsService>,
    /// Application name and deployment group name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loadBalancerInfo"
    )]
    #[builder(default)]
    pub load_balancer_info: Option<DeploymentGroupStatusAtProviderLoadBalancerInfo>,
    /// On premise tag filters associated with the group. See the AWS docs for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onPremisesInstanceTagFilter"
    )]
    #[builder(default)]
    pub on_premises_instance_tag_filter:
        Option<Vec<DeploymentGroupStatusAtProviderOnPremisesInstanceTagFilter>>,
    /// Configuration block of Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. Valid values are UPDATE and IGNORE. Defaults to UPDATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outdatedInstancesStrategy"
    )]
    #[builder(default)]
    pub outdated_instances_strategy: Option<String>,
    /// The service role ARN that allows deployments.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArn"
    )]
    #[builder(default)]
    pub service_role_arn: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationHookEnabled"
    )]
    #[builder(default)]
    pub termination_hook_enabled: Option<bool>,
    /// Configuration block(s) of the triggers for the deployment group (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerConfiguration"
    )]
    #[builder(default)]
    pub trigger_configuration: Option<Vec<DeploymentGroupStatusAtProviderTriggerConfiguration>>,
}

/// Configuration block of alarms associated with the deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderAlarmConfiguration {
    /// A list of alarms configured for the deployment group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<String>>,
    /// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignorePollAlarmFailure"
    )]
    #[builder(default)]
    pub ignore_poll_alarm_failure: Option<bool>,
}

/// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderAutoRollbackConfiguration {
    /// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE, DEPLOYMENT_STOP_ON_ALARM and DEPLOYMENT_STOP_ON_REQUEST.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub events: Option<Vec<String>>,
}

/// Configuration block of the blue/green deployment options for a deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderBlueGreenDeploymentConfig {
    /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentReadyOption")]
    #[builder(default)]
    pub deployment_ready_option: Option<DeploymentGroupStatusAtProviderBlueGreenDeploymentConfigDeploymentReadyOption>,
    /// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "greenFleetProvisioningOption")]
    #[builder(default)]
    pub green_fleet_provisioning_option: Option<DeploymentGroupStatusAtProviderBlueGreenDeploymentConfigGreenFleetProvisioningOption>,
    /// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminateBlueInstancesOnDeploymentSuccess")]
    #[builder(default)]
    pub terminate_blue_instances_on_deployment_success: Option<DeploymentGroupStatusAtProviderBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess>,
}

/// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderBlueGreenDeploymentConfigDeploymentReadyOption {
    /// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "actionOnTimeout"
    )]
    #[builder(default)]
    pub action_on_timeout: Option<String>,
    /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitTimeInMinutes"
    )]
    #[builder(default)]
    pub wait_time_in_minutes: Option<f64>,
}

/// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderBlueGreenDeploymentConfigGreenFleetProvisioningOption {
    /// The method used to add instances to a replacement environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
}

/// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess
{
    /// The method used to add instances to a replacement environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<String>,
    /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationWaitTimeInMinutes"
    )]
    #[builder(default)]
    pub termination_wait_time_in_minutes: Option<f64>,
}

/// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderDeploymentStyle {
    /// Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentOption"
    )]
    #[builder(default)]
    pub deployment_option: Option<String>,
    /// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentType"
    )]
    #[builder(default)]
    pub deployment_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderEc2TagFilter {
    /// The key of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The value of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderEc2TagSet {
    /// Tag filters associated with the deployment group. See the AWS docs for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2TagFilter"
    )]
    #[builder(default)]
    pub ec2_tag_filter: Option<Vec<DeploymentGroupStatusAtProviderEc2TagSetEc2TagFilter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderEc2TagSetEc2TagFilter {
    /// The key of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The value of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// Configuration block(s) of the ECS services for a deployment group (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderEcsService {
    /// The name of the ECS cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterName"
    )]
    #[builder(default)]
    pub cluster_name: Option<String>,
    /// The name of the ECS service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default)]
    pub service_name: Option<String>,
}

/// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderLoadBalancerInfo {
    /// The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elbInfo")]
    #[builder(default)]
    pub elb_info: Option<Vec<DeploymentGroupStatusAtProviderLoadBalancerInfoElbInfo>>,
    /// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroupInfo"
    )]
    #[builder(default)]
    pub target_group_info:
        Option<Vec<DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupInfo>>,
    /// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroupPairInfo"
    )]
    #[builder(default)]
    pub target_group_pair_info:
        Option<DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupPairInfo>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderLoadBalancerInfoElbInfo {
    /// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupInfo {
    /// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupPairInfo {
    /// Configuration block for the production traffic route (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prodTrafficRoute"
    )]
    #[builder(default)]
    pub prod_traffic_route:
        Option<DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute>,
    /// Configuration blocks for a target group within a target group pair (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroup"
    )]
    #[builder(default)]
    pub target_group:
        Option<Vec<DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupPairInfoTargetGroup>>,
    /// Configuration block for the test traffic route (documented below).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "testTrafficRoute"
    )]
    #[builder(default)]
    pub test_traffic_route:
        Option<DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute>,
}

/// Configuration block for the production traffic route (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute {
    /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "listenerArns"
    )]
    #[builder(default)]
    pub listener_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupPairInfoTargetGroup {
    /// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Configuration block for the test traffic route (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute {
    /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "listenerArns"
    )]
    #[builder(default)]
    pub listener_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderOnPremisesInstanceTagFilter {
    /// The key of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The value of the tag filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DeploymentGroupStatusAtProviderTriggerConfiguration {
    /// The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerEvents"
    )]
    #[builder(default)]
    pub trigger_events: Option<Vec<String>>,
    /// The name of the notification trigger.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerName"
    )]
    #[builder(default)]
    pub trigger_name: Option<String>,
    /// The ARN of the SNS topic through which notifications are sent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "triggerTargetArn"
    )]
    #[builder(default)]
    pub trigger_target_arn: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// WorkgroupSpec defines the desired state of Workgroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "athena.aws.upbound.io", version = "v1beta2", kind = "Workgroup", plural = "workgroups")]
#[kube(status = "WorkgroupStatus")]
pub struct WorkgroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<WorkgroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: WorkgroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<WorkgroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<WorkgroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<WorkgroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<WorkgroupWriteConnectionSecretToRef>,
}

/// WorkgroupSpec defines the desired state of Workgroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProvider {
    /// Configuration block with various settings for the workgroup. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub configuration: Option<WorkgroupForProviderConfiguration>,
    /// Description of the workgroup.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// State of the workgroup. Valid values are DISABLED or ENABLED. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Configuration block with various settings for the workgroup. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProviderConfiguration {
    /// Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least 10485760.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bytesScannedCutoffPerQuery")]
    #[builder(default)]
    pub bytes_scanned_cutoff_per_query: Option<f64>,
    /// Boolean whether the settings for the workgroup override client-side settings. For more information, see Workgroup Settings Override Client-Side Settings. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforceWorkgroupConfiguration")]
    #[builder(default)]
    pub enforce_workgroup_configuration: Option<bool>,
    /// Configuration block for the Athena Engine Versioning. For more information, see Athena Engine Versioning. See Engine Version below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    #[builder(default)]
    pub engine_version: Option<WorkgroupForProviderConfigurationEngineVersion>,
    /// Role used in a notebook session for accessing the user's resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishCloudwatchMetricsEnabled")]
    #[builder(default)]
    pub publish_cloudwatch_metrics_enabled: Option<bool>,
    /// If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see Requester Pays Buckets in the Amazon Simple Storage Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requesterPaysEnabled")]
    #[builder(default)]
    pub requester_pays_enabled: Option<bool>,
    /// Configuration block with result settings. See Result Configuration below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resultConfiguration")]
    #[builder(default)]
    pub result_configuration: Option<WorkgroupForProviderConfigurationResultConfiguration>,
}

/// Configuration block for the Athena Engine Versioning. For more information, see Athena Engine Versioning. See Engine Version below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProviderConfigurationEngineVersion {
    /// Requested engine version. Defaults to AUTO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectedEngineVersion")]
    #[builder(default)]
    pub selected_engine_version: Option<String>,
}

/// Configuration block with result settings. See Result Configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProviderConfigurationResultConfiguration {
    /// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aclConfiguration")]
    #[builder(default)]
    pub acl_configuration: Option<WorkgroupForProviderConfigurationResultConfigurationAclConfiguration>,
    /// Configuration block with encryption settings. See Encryption Configuration below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    #[builder(default)]
    pub encryption_configuration: Option<WorkgroupForProviderConfigurationResultConfigurationEncryptionConfiguration>,
    /// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedBucketOwner")]
    #[builder(default)]
    pub expected_bucket_owner: Option<String>,
    /// Location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. For more information, see Queries and Query Result Files.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputLocation")]
    #[builder(default)]
    pub output_location: Option<String>,
}

/// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProviderConfigurationResultConfigurationAclConfiguration {
    /// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3AclOption")]
    #[builder(default)]
    pub s3_acl_option: Option<String>,
}

/// Configuration block with encryption settings. See Encryption Configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProviderConfigurationResultConfigurationEncryptionConfiguration {
    /// Whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE_S3), server-side encryption with KMS-managed keys (SSE_KMS), or client-side encryption with KMS-managed keys (CSE_KMS) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionOption")]
    #[builder(default)]
    pub encryption_option: Option<String>,
    /// For SSE_KMS and CSE_KMS, this is the KMS key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnRef")]
    #[builder(default)]
    pub kms_key_arn_ref: Option<WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnSelector")]
    #[builder(default)]
    pub kms_key_arn_selector: Option<WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelector>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupForProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProvider {
    /// Configuration block with various settings for the workgroup. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub configuration: Option<WorkgroupInitProviderConfiguration>,
    /// Description of the workgroup.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// State of the workgroup. Valid values are DISABLED or ENABLED. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Configuration block with various settings for the workgroup. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProviderConfiguration {
    /// Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least 10485760.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bytesScannedCutoffPerQuery")]
    #[builder(default)]
    pub bytes_scanned_cutoff_per_query: Option<f64>,
    /// Boolean whether the settings for the workgroup override client-side settings. For more information, see Workgroup Settings Override Client-Side Settings. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforceWorkgroupConfiguration")]
    #[builder(default)]
    pub enforce_workgroup_configuration: Option<bool>,
    /// Configuration block for the Athena Engine Versioning. For more information, see Athena Engine Versioning. See Engine Version below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    #[builder(default)]
    pub engine_version: Option<WorkgroupInitProviderConfigurationEngineVersion>,
    /// Role used in a notebook session for accessing the user's resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishCloudwatchMetricsEnabled")]
    #[builder(default)]
    pub publish_cloudwatch_metrics_enabled: Option<bool>,
    /// If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see Requester Pays Buckets in the Amazon Simple Storage Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requesterPaysEnabled")]
    #[builder(default)]
    pub requester_pays_enabled: Option<bool>,
    /// Configuration block with result settings. See Result Configuration below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resultConfiguration")]
    #[builder(default)]
    pub result_configuration: Option<WorkgroupInitProviderConfigurationResultConfiguration>,
}

/// Configuration block for the Athena Engine Versioning. For more information, see Athena Engine Versioning. See Engine Version below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProviderConfigurationEngineVersion {
    /// Requested engine version. Defaults to AUTO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectedEngineVersion")]
    #[builder(default)]
    pub selected_engine_version: Option<String>,
}

/// Configuration block with result settings. See Result Configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProviderConfigurationResultConfiguration {
    /// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aclConfiguration")]
    #[builder(default)]
    pub acl_configuration: Option<WorkgroupInitProviderConfigurationResultConfigurationAclConfiguration>,
    /// Configuration block with encryption settings. See Encryption Configuration below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    #[builder(default)]
    pub encryption_configuration: Option<WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfiguration>,
    /// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedBucketOwner")]
    #[builder(default)]
    pub expected_bucket_owner: Option<String>,
    /// Location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. For more information, see Queries and Query Result Files.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputLocation")]
    #[builder(default)]
    pub output_location: Option<String>,
}

/// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProviderConfigurationResultConfigurationAclConfiguration {
    /// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3AclOption")]
    #[builder(default)]
    pub s3_acl_option: Option<String>,
}

/// Configuration block with encryption settings. See Encryption Configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfiguration {
    /// Whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE_S3), server-side encryption with KMS-managed keys (SSE_KMS), or client-side encryption with KMS-managed keys (CSE_KMS) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionOption")]
    #[builder(default)]
    pub encryption_option: Option<String>,
    /// For SSE_KMS and CSE_KMS, this is the KMS key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnRef")]
    #[builder(default)]
    pub kms_key_arn_ref: Option<WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnSelector")]
    #[builder(default)]
    pub kms_key_arn_selector: Option<WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelector>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupInitProviderConfigurationResultConfigurationEncryptionConfigurationKmsKeyArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkgroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkgroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkgroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<WorkgroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<WorkgroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<WorkgroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<WorkgroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<WorkgroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkgroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// WorkgroupStatus defines the observed state of Workgroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<WorkgroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupStatusAtProvider {
    /// ARN of the workgroup
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Configuration block with various settings for the workgroup. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub configuration: Option<WorkgroupStatusAtProviderConfiguration>,
    /// Description of the workgroup.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// Workgroup name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// State of the workgroup. Valid values are DISABLED or ENABLED. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

/// Configuration block with various settings for the workgroup. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupStatusAtProviderConfiguration {
    /// Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least 10485760.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bytesScannedCutoffPerQuery")]
    #[builder(default)]
    pub bytes_scanned_cutoff_per_query: Option<f64>,
    /// Boolean whether the settings for the workgroup override client-side settings. For more information, see Workgroup Settings Override Client-Side Settings. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforceWorkgroupConfiguration")]
    #[builder(default)]
    pub enforce_workgroup_configuration: Option<bool>,
    /// Configuration block for the Athena Engine Versioning. For more information, see Athena Engine Versioning. See Engine Version below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    #[builder(default)]
    pub engine_version: Option<WorkgroupStatusAtProviderConfigurationEngineVersion>,
    /// Role used in a notebook session for accessing the user's resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishCloudwatchMetricsEnabled")]
    #[builder(default)]
    pub publish_cloudwatch_metrics_enabled: Option<bool>,
    /// If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see Requester Pays Buckets in the Amazon Simple Storage Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requesterPaysEnabled")]
    #[builder(default)]
    pub requester_pays_enabled: Option<bool>,
    /// Configuration block with result settings. See Result Configuration below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resultConfiguration")]
    #[builder(default)]
    pub result_configuration: Option<WorkgroupStatusAtProviderConfigurationResultConfiguration>,
}

/// Configuration block for the Athena Engine Versioning. For more information, see Athena Engine Versioning. See Engine Version below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupStatusAtProviderConfigurationEngineVersion {
    /// The engine version on which the query runs. If selected_engine_version is set to AUTO, the effective engine version is chosen by Athena.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveEngineVersion")]
    #[builder(default)]
    pub effective_engine_version: Option<String>,
    /// Requested engine version. Defaults to AUTO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectedEngineVersion")]
    #[builder(default)]
    pub selected_engine_version: Option<String>,
}

/// Configuration block with result settings. See Result Configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupStatusAtProviderConfigurationResultConfiguration {
    /// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aclConfiguration")]
    #[builder(default)]
    pub acl_configuration: Option<WorkgroupStatusAtProviderConfigurationResultConfigurationAclConfiguration>,
    /// Configuration block with encryption settings. See Encryption Configuration below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    #[builder(default)]
    pub encryption_configuration: Option<WorkgroupStatusAtProviderConfigurationResultConfigurationEncryptionConfiguration>,
    /// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedBucketOwner")]
    #[builder(default)]
    pub expected_bucket_owner: Option<String>,
    /// Location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. For more information, see Queries and Query Result Files.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputLocation")]
    #[builder(default)]
    pub output_location: Option<String>,
}

/// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupStatusAtProviderConfigurationResultConfigurationAclConfiguration {
    /// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3AclOption")]
    #[builder(default)]
    pub s3_acl_option: Option<String>,
}

/// Configuration block with encryption settings. See Encryption Configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct WorkgroupStatusAtProviderConfigurationResultConfigurationEncryptionConfiguration {
    /// Whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE_S3), server-side encryption with KMS-managed keys (SSE_KMS), or client-side encryption with KMS-managed keys (CSE_KMS) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionOption")]
    #[builder(default)]
    pub encryption_option: Option<String>,
    /// For SSE_KMS and CSE_KMS, this is the KMS key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default)]
    pub kms_key_arn: Option<String>,
}


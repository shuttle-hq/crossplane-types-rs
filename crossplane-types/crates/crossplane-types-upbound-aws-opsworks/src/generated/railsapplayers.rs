// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RailsAppLayerSpec defines the desired state of RailsAppLayer
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "opsworks.aws.upbound.io", version = "v1beta2", kind = "RailsAppLayer", plural = "railsapplayers")]
#[kube(status = "RailsAppLayerStatus")]
pub struct RailsAppLayerSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<RailsAppLayerDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RailsAppLayerForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<RailsAppLayerInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<RailsAppLayerProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<RailsAppLayerPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<RailsAppLayerWriteConnectionSecretToRef>,
}

/// RailsAppLayerSpec defines the desired state of RailsAppLayer
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProvider {
    /// Keyword for the app server to use. Defaults to "apache_passenger".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appServer")]
    #[builder(default)]
    pub app_server: Option<String>,
    /// Whether to automatically assign an elastic IP address to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignElasticIps")]
    #[builder(default)]
    pub auto_assign_elastic_ips: Option<bool>,
    /// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignPublicIps")]
    #[builder(default)]
    pub auto_assign_public_ips: Option<bool>,
    /// Whether to enable auto-healing for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHealing")]
    #[builder(default)]
    pub auto_healing: Option<bool>,
    /// When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bundlerVersion")]
    #[builder(default)]
    pub bundler_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchConfiguration")]
    #[builder(default)]
    pub cloudwatch_configuration: Option<RailsAppLayerForProviderCloudwatchConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customConfigureRecipes")]
    #[builder(default)]
    pub custom_configure_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customDeployRecipes")]
    #[builder(default)]
    pub custom_deploy_recipes: Option<Vec<String>>,
    /// The ARN of an IAM profile that will be used for the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInstanceProfileArn")]
    #[builder(default)]
    pub custom_instance_profile_arn: Option<String>,
    /// Custom JSON attributes to apply to the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customJson")]
    #[builder(default)]
    pub custom_json: Option<String>,
    /// References to SecurityGroup in ec2 to populate customSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIdRefs")]
    #[builder(default)]
    pub custom_security_group_id_refs: Option<Vec<RailsAppLayerForProviderCustomSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIdSelector")]
    #[builder(default)]
    pub custom_security_group_id_selector: Option<RailsAppLayerForProviderCustomSecurityGroupIdSelector>,
    /// Ids for a set of security groups to apply to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIds")]
    #[builder(default)]
    pub custom_security_group_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSetupRecipes")]
    #[builder(default)]
    pub custom_setup_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customShutdownRecipes")]
    #[builder(default)]
    pub custom_shutdown_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customUndeployRecipes")]
    #[builder(default)]
    pub custom_undeploy_recipes: Option<Vec<String>>,
    /// Whether to enable Elastic Load Balancing connection draining.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainElbOnShutdown")]
    #[builder(default)]
    pub drain_elb_on_shutdown: Option<bool>,
    /// ebs_volume blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsVolume")]
    #[builder(default)]
    pub ebs_volume: Option<Vec<RailsAppLayerForProviderEbsVolume>>,
    /// Name of an Elastic Load Balancer to attach to this layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticLoadBalancer")]
    #[builder(default)]
    pub elastic_load_balancer: Option<String>,
    /// Whether to install OS and package updates on each instance when it boots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installUpdatesOnBoot")]
    #[builder(default)]
    pub install_updates_on_boot: Option<bool>,
    /// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceShutdownTimeout")]
    #[builder(default)]
    pub instance_shutdown_timeout: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBasedAutoScaling")]
    #[builder(default)]
    pub load_based_auto_scaling: Option<RailsAppLayerForProviderLoadBasedAutoScaling>,
    /// Whether OpsWorks should manage bundler. On by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageBundler")]
    #[builder(default)]
    pub manage_bundler: Option<bool>,
    /// A human-readable name for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The version of Passenger to use. Defaults to "4.0.46".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passengerVersion")]
    #[builder(default)]
    pub passenger_version: Option<String>,
    /// The version of Ruby to use. Defaults to "2.0.0".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rubyVersion")]
    #[builder(default)]
    pub ruby_version: Option<String>,
    /// The version of RubyGems to use. Defaults to "2.2.2".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rubygemsVersion")]
    #[builder(default)]
    pub rubygems_version: Option<String>,
    /// ID of the stack the layer will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    #[builder(default)]
    pub stack_id: Option<String>,
    /// Reference to a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdRef")]
    #[builder(default)]
    pub stack_id_ref: Option<RailsAppLayerForProviderStackIdRef>,
    /// Selector for a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdSelector")]
    #[builder(default)]
    pub stack_id_selector: Option<RailsAppLayerForProviderStackIdSelector>,
    /// Names of a set of system packages to install on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemPackages")]
    #[builder(default)]
    pub system_packages: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Whether to use EBS-optimized instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useEbsOptimizedInstances")]
    #[builder(default)]
    pub use_ebs_optimized_instances: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderCloudwatchConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreams")]
    #[builder(default)]
    pub log_streams: Option<Vec<RailsAppLayerForProviderCloudwatchConfigurationLogStreams>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderCloudwatchConfigurationLogStreams {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchCount")]
    #[builder(default)]
    pub batch_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    #[builder(default)]
    pub batch_size: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferDuration")]
    #[builder(default)]
    pub buffer_duration: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datetimeFormat")]
    #[builder(default)]
    pub datetime_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encoding: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileFingerprintLines")]
    #[builder(default)]
    pub file_fingerprint_lines: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialPosition")]
    #[builder(default)]
    pub initial_position: Option<String>,
    /// A human-readable name for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    #[builder(default)]
    pub log_group_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multilineStartPattern")]
    #[builder(default)]
    pub multiline_start_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    #[builder(default)]
    pub time_zone: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderCustomSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerForProviderCustomSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderCustomSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerForProviderCustomSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerForProviderCustomSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerForProviderCustomSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerForProviderCustomSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderCustomSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerForProviderCustomSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderCustomSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerForProviderCustomSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerForProviderCustomSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerForProviderCustomSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerForProviderCustomSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderEbsVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// For PIOPS volumes, the IOPS per disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The path to mount the EBS volume on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    #[builder(default)]
    pub mount_point: Option<String>,
    /// The number of disks to use for the EBS volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfDisks")]
    #[builder(default)]
    pub number_of_disks: Option<f64>,
    /// The RAID level to use for the volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "raidLevel")]
    #[builder(default)]
    pub raid_level: Option<String>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub size: Option<f64>,
    /// The type of volume to create. This may be standard (the default), io1 or gp2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderLoadBasedAutoScaling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub downscaling: Option<RailsAppLayerForProviderLoadBasedAutoScalingDownscaling>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub upscaling: Option<RailsAppLayerForProviderLoadBasedAutoScalingUpscaling>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderLoadBasedAutoScalingDownscaling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    #[builder(default)]
    pub cpu_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    #[builder(default)]
    pub ignore_metrics_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    #[builder(default)]
    pub instance_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    #[builder(default)]
    pub load_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    #[builder(default)]
    pub memory_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    #[builder(default)]
    pub thresholds_wait_time: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderLoadBasedAutoScalingUpscaling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    #[builder(default)]
    pub cpu_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    #[builder(default)]
    pub ignore_metrics_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    #[builder(default)]
    pub instance_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    #[builder(default)]
    pub load_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    #[builder(default)]
    pub memory_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    #[builder(default)]
    pub thresholds_wait_time: Option<f64>,
}

/// Reference to a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderStackIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerForProviderStackIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderStackIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerForProviderStackIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerForProviderStackIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerForProviderStackIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerForProviderStackIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderStackIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerForProviderStackIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerForProviderStackIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerForProviderStackIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerForProviderStackIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerForProviderStackIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerForProviderStackIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProvider {
    /// Keyword for the app server to use. Defaults to "apache_passenger".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appServer")]
    #[builder(default)]
    pub app_server: Option<String>,
    /// Whether to automatically assign an elastic IP address to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignElasticIps")]
    #[builder(default)]
    pub auto_assign_elastic_ips: Option<bool>,
    /// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignPublicIps")]
    #[builder(default)]
    pub auto_assign_public_ips: Option<bool>,
    /// Whether to enable auto-healing for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHealing")]
    #[builder(default)]
    pub auto_healing: Option<bool>,
    /// When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bundlerVersion")]
    #[builder(default)]
    pub bundler_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchConfiguration")]
    #[builder(default)]
    pub cloudwatch_configuration: Option<RailsAppLayerInitProviderCloudwatchConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customConfigureRecipes")]
    #[builder(default)]
    pub custom_configure_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customDeployRecipes")]
    #[builder(default)]
    pub custom_deploy_recipes: Option<Vec<String>>,
    /// The ARN of an IAM profile that will be used for the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInstanceProfileArn")]
    #[builder(default)]
    pub custom_instance_profile_arn: Option<String>,
    /// Custom JSON attributes to apply to the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customJson")]
    #[builder(default)]
    pub custom_json: Option<String>,
    /// References to SecurityGroup in ec2 to populate customSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIdRefs")]
    #[builder(default)]
    pub custom_security_group_id_refs: Option<Vec<RailsAppLayerInitProviderCustomSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIdSelector")]
    #[builder(default)]
    pub custom_security_group_id_selector: Option<RailsAppLayerInitProviderCustomSecurityGroupIdSelector>,
    /// Ids for a set of security groups to apply to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIds")]
    #[builder(default)]
    pub custom_security_group_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSetupRecipes")]
    #[builder(default)]
    pub custom_setup_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customShutdownRecipes")]
    #[builder(default)]
    pub custom_shutdown_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customUndeployRecipes")]
    #[builder(default)]
    pub custom_undeploy_recipes: Option<Vec<String>>,
    /// Whether to enable Elastic Load Balancing connection draining.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainElbOnShutdown")]
    #[builder(default)]
    pub drain_elb_on_shutdown: Option<bool>,
    /// ebs_volume blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsVolume")]
    #[builder(default)]
    pub ebs_volume: Option<Vec<RailsAppLayerInitProviderEbsVolume>>,
    /// Name of an Elastic Load Balancer to attach to this layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticLoadBalancer")]
    #[builder(default)]
    pub elastic_load_balancer: Option<String>,
    /// Whether to install OS and package updates on each instance when it boots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installUpdatesOnBoot")]
    #[builder(default)]
    pub install_updates_on_boot: Option<bool>,
    /// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceShutdownTimeout")]
    #[builder(default)]
    pub instance_shutdown_timeout: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBasedAutoScaling")]
    #[builder(default)]
    pub load_based_auto_scaling: Option<RailsAppLayerInitProviderLoadBasedAutoScaling>,
    /// Whether OpsWorks should manage bundler. On by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageBundler")]
    #[builder(default)]
    pub manage_bundler: Option<bool>,
    /// A human-readable name for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The version of Passenger to use. Defaults to "4.0.46".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passengerVersion")]
    #[builder(default)]
    pub passenger_version: Option<String>,
    /// The version of Ruby to use. Defaults to "2.0.0".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rubyVersion")]
    #[builder(default)]
    pub ruby_version: Option<String>,
    /// The version of RubyGems to use. Defaults to "2.2.2".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rubygemsVersion")]
    #[builder(default)]
    pub rubygems_version: Option<String>,
    /// ID of the stack the layer will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    #[builder(default)]
    pub stack_id: Option<String>,
    /// Reference to a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdRef")]
    #[builder(default)]
    pub stack_id_ref: Option<RailsAppLayerInitProviderStackIdRef>,
    /// Selector for a Stack in opsworks to populate stackId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackIdSelector")]
    #[builder(default)]
    pub stack_id_selector: Option<RailsAppLayerInitProviderStackIdSelector>,
    /// Names of a set of system packages to install on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemPackages")]
    #[builder(default)]
    pub system_packages: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Whether to use EBS-optimized instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useEbsOptimizedInstances")]
    #[builder(default)]
    pub use_ebs_optimized_instances: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderCloudwatchConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreams")]
    #[builder(default)]
    pub log_streams: Option<Vec<RailsAppLayerInitProviderCloudwatchConfigurationLogStreams>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderCloudwatchConfigurationLogStreams {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchCount")]
    #[builder(default)]
    pub batch_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    #[builder(default)]
    pub batch_size: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferDuration")]
    #[builder(default)]
    pub buffer_duration: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datetimeFormat")]
    #[builder(default)]
    pub datetime_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encoding: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileFingerprintLines")]
    #[builder(default)]
    pub file_fingerprint_lines: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialPosition")]
    #[builder(default)]
    pub initial_position: Option<String>,
    /// A human-readable name for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    #[builder(default)]
    pub log_group_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multilineStartPattern")]
    #[builder(default)]
    pub multiline_start_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    #[builder(default)]
    pub time_zone: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderCustomSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerInitProviderCustomSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderCustomSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerInitProviderCustomSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerInitProviderCustomSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerInitProviderCustomSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerInitProviderCustomSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderCustomSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerInitProviderCustomSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderCustomSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerInitProviderCustomSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerInitProviderCustomSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerInitProviderCustomSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerInitProviderCustomSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderEbsVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// For PIOPS volumes, the IOPS per disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The path to mount the EBS volume on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    #[builder(default)]
    pub mount_point: Option<String>,
    /// The number of disks to use for the EBS volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfDisks")]
    #[builder(default)]
    pub number_of_disks: Option<f64>,
    /// The RAID level to use for the volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "raidLevel")]
    #[builder(default)]
    pub raid_level: Option<String>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub size: Option<f64>,
    /// The type of volume to create. This may be standard (the default), io1 or gp2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderLoadBasedAutoScaling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub downscaling: Option<RailsAppLayerInitProviderLoadBasedAutoScalingDownscaling>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub upscaling: Option<RailsAppLayerInitProviderLoadBasedAutoScalingUpscaling>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderLoadBasedAutoScalingDownscaling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    #[builder(default)]
    pub cpu_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    #[builder(default)]
    pub ignore_metrics_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    #[builder(default)]
    pub instance_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    #[builder(default)]
    pub load_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    #[builder(default)]
    pub memory_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    #[builder(default)]
    pub thresholds_wait_time: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderLoadBasedAutoScalingUpscaling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    #[builder(default)]
    pub cpu_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    #[builder(default)]
    pub ignore_metrics_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    #[builder(default)]
    pub instance_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    #[builder(default)]
    pub load_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    #[builder(default)]
    pub memory_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    #[builder(default)]
    pub thresholds_wait_time: Option<f64>,
}

/// Reference to a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderStackIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerInitProviderStackIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderStackIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerInitProviderStackIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerInitProviderStackIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerInitProviderStackIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerInitProviderStackIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stack in opsworks to populate stackId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderStackIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerInitProviderStackIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerInitProviderStackIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerInitProviderStackIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerInitProviderStackIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerInitProviderStackIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerInitProviderStackIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<RailsAppLayerPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<RailsAppLayerPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<RailsAppLayerPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<RailsAppLayerPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<RailsAppLayerPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RailsAppLayerPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RailsAppLayerStatus defines the observed state of RailsAppLayer.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<RailsAppLayerStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerStatusAtProvider {
    /// Keyword for the app server to use. Defaults to "apache_passenger".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appServer")]
    #[builder(default)]
    pub app_server: Option<String>,
    /// The Amazon Resource Name(ARN) of the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Whether to automatically assign an elastic IP address to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignElasticIps")]
    #[builder(default)]
    pub auto_assign_elastic_ips: Option<bool>,
    /// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignPublicIps")]
    #[builder(default)]
    pub auto_assign_public_ips: Option<bool>,
    /// Whether to enable auto-healing for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHealing")]
    #[builder(default)]
    pub auto_healing: Option<bool>,
    /// When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bundlerVersion")]
    #[builder(default)]
    pub bundler_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchConfiguration")]
    #[builder(default)]
    pub cloudwatch_configuration: Option<RailsAppLayerStatusAtProviderCloudwatchConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customConfigureRecipes")]
    #[builder(default)]
    pub custom_configure_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customDeployRecipes")]
    #[builder(default)]
    pub custom_deploy_recipes: Option<Vec<String>>,
    /// The ARN of an IAM profile that will be used for the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInstanceProfileArn")]
    #[builder(default)]
    pub custom_instance_profile_arn: Option<String>,
    /// Custom JSON attributes to apply to the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customJson")]
    #[builder(default)]
    pub custom_json: Option<String>,
    /// Ids for a set of security groups to apply to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSecurityGroupIds")]
    #[builder(default)]
    pub custom_security_group_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSetupRecipes")]
    #[builder(default)]
    pub custom_setup_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customShutdownRecipes")]
    #[builder(default)]
    pub custom_shutdown_recipes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customUndeployRecipes")]
    #[builder(default)]
    pub custom_undeploy_recipes: Option<Vec<String>>,
    /// Whether to enable Elastic Load Balancing connection draining.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainElbOnShutdown")]
    #[builder(default)]
    pub drain_elb_on_shutdown: Option<bool>,
    /// ebs_volume blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsVolume")]
    #[builder(default)]
    pub ebs_volume: Option<Vec<RailsAppLayerStatusAtProviderEbsVolume>>,
    /// Name of an Elastic Load Balancer to attach to this layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticLoadBalancer")]
    #[builder(default)]
    pub elastic_load_balancer: Option<String>,
    /// The id of the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Whether to install OS and package updates on each instance when it boots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installUpdatesOnBoot")]
    #[builder(default)]
    pub install_updates_on_boot: Option<bool>,
    /// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceShutdownTimeout")]
    #[builder(default)]
    pub instance_shutdown_timeout: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBasedAutoScaling")]
    #[builder(default)]
    pub load_based_auto_scaling: Option<RailsAppLayerStatusAtProviderLoadBasedAutoScaling>,
    /// Whether OpsWorks should manage bundler. On by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageBundler")]
    #[builder(default)]
    pub manage_bundler: Option<bool>,
    /// A human-readable name for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The version of Passenger to use. Defaults to "4.0.46".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passengerVersion")]
    #[builder(default)]
    pub passenger_version: Option<String>,
    /// The version of Ruby to use. Defaults to "2.0.0".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rubyVersion")]
    #[builder(default)]
    pub ruby_version: Option<String>,
    /// The version of RubyGems to use. Defaults to "2.2.2".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rubygemsVersion")]
    #[builder(default)]
    pub rubygems_version: Option<String>,
    /// ID of the stack the layer will belong to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    #[builder(default)]
    pub stack_id: Option<String>,
    /// Names of a set of system packages to install on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemPackages")]
    #[builder(default)]
    pub system_packages: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Whether to use EBS-optimized instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useEbsOptimizedInstances")]
    #[builder(default)]
    pub use_ebs_optimized_instances: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerStatusAtProviderCloudwatchConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreams")]
    #[builder(default)]
    pub log_streams: Option<Vec<RailsAppLayerStatusAtProviderCloudwatchConfigurationLogStreams>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerStatusAtProviderCloudwatchConfigurationLogStreams {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchCount")]
    #[builder(default)]
    pub batch_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    #[builder(default)]
    pub batch_size: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferDuration")]
    #[builder(default)]
    pub buffer_duration: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datetimeFormat")]
    #[builder(default)]
    pub datetime_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encoding: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileFingerprintLines")]
    #[builder(default)]
    pub file_fingerprint_lines: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialPosition")]
    #[builder(default)]
    pub initial_position: Option<String>,
    /// A human-readable name for the layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    #[builder(default)]
    pub log_group_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multilineStartPattern")]
    #[builder(default)]
    pub multiline_start_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    #[builder(default)]
    pub time_zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerStatusAtProviderEbsVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// For PIOPS volumes, the IOPS per disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub iops: Option<f64>,
    /// The path to mount the EBS volume on the layer's instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    #[builder(default)]
    pub mount_point: Option<String>,
    /// The number of disks to use for the EBS volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfDisks")]
    #[builder(default)]
    pub number_of_disks: Option<f64>,
    /// The RAID level to use for the volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "raidLevel")]
    #[builder(default)]
    pub raid_level: Option<String>,
    /// The size of the volume in gigabytes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub size: Option<f64>,
    /// The type of volume to create. This may be standard (the default), io1 or gp2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerStatusAtProviderLoadBasedAutoScaling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub downscaling: Option<RailsAppLayerStatusAtProviderLoadBasedAutoScalingDownscaling>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub upscaling: Option<RailsAppLayerStatusAtProviderLoadBasedAutoScalingUpscaling>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerStatusAtProviderLoadBasedAutoScalingDownscaling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    #[builder(default)]
    pub cpu_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    #[builder(default)]
    pub ignore_metrics_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    #[builder(default)]
    pub instance_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    #[builder(default)]
    pub load_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    #[builder(default)]
    pub memory_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    #[builder(default)]
    pub thresholds_wait_time: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct RailsAppLayerStatusAtProviderLoadBasedAutoScalingUpscaling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuThreshold")]
    #[builder(default)]
    pub cpu_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMetricsTime")]
    #[builder(default)]
    pub ignore_metrics_time: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    #[builder(default)]
    pub instance_count: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadThreshold")]
    #[builder(default)]
    pub load_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryThreshold")]
    #[builder(default)]
    pub memory_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdsWaitTime")]
    #[builder(default)]
    pub thresholds_wait_time: Option<f64>,
}


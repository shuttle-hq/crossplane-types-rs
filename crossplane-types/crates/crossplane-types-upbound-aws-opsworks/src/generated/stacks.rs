// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// StackSpec defines the desired state of Stack
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "opsworks.aws.upbound.io", version = "v1beta2", kind = "Stack", plural = "stacks")]
#[kube(status = "StackStatus")]
pub struct StackSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<StackDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: StackForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<StackInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<StackProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<StackPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<StackWriteConnectionSecretToRef>,
}

/// StackSpec defines the desired state of Stack
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProvider {
    /// If set to "LATEST", OpsWorks will automatically install the latest version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentVersion")]
    #[builder(default)]
    pub agent_version: Option<String>,
    /// If manage_berkshelf is enabled, the version of Berkshelf to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "berkshelfVersion")]
    #[builder(default)]
    pub berkshelf_version: Option<String>,
    /// Color to paint next to the stack's resources in the OpsWorks console.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub color: Option<String>,
    /// Name of the configuration manager to use. Defaults to "Chef".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationManagerName")]
    #[builder(default)]
    pub configuration_manager_name: Option<String>,
    /// Version of the configuration manager to use. Defaults to "11.4".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationManagerVersion")]
    #[builder(default)]
    pub configuration_manager_version: Option<String>,
    /// When use_custom_cookbooks is set, provide this sub-object as described below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customCookbooksSource")]
    #[builder(default)]
    pub custom_cookbooks_source: Option<StackForProviderCustomCookbooksSource>,
    /// User defined JSON passed to "Chef". Use a "here doc" for multiline JSON.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customJson")]
    #[builder(default)]
    pub custom_json: Option<String>,
    /// Name of the availability zone where instances will be created by default.
    /// Cannot be set when vpc_id is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAvailabilityZone")]
    #[builder(default)]
    pub default_availability_zone: Option<String>,
    /// The ARN of an IAM Instance Profile that created instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultInstanceProfileArn")]
    #[builder(default)]
    pub default_instance_profile_arn: Option<String>,
    /// Reference to a InstanceProfile in iam to populate defaultInstanceProfileArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultInstanceProfileArnRef")]
    #[builder(default)]
    pub default_instance_profile_arn_ref: Option<StackForProviderDefaultInstanceProfileArnRef>,
    /// Selector for a InstanceProfile in iam to populate defaultInstanceProfileArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultInstanceProfileArnSelector")]
    #[builder(default)]
    pub default_instance_profile_arn_selector: Option<StackForProviderDefaultInstanceProfileArnSelector>,
    /// Name of OS that will be installed on instances by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultOs")]
    #[builder(default)]
    pub default_os: Option<String>,
    /// Name of the type of root device instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRootDeviceType")]
    #[builder(default)]
    pub default_root_device_type: Option<String>,
    /// Name of the SSH keypair that instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSshKeyName")]
    #[builder(default)]
    pub default_ssh_key_name: Option<String>,
    /// ID of the subnet in which instances will be created by default.
    /// Required if vpc_id is set to a VPC other than the default VPC, and forbidden if it isn't.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSubnetId")]
    #[builder(default)]
    pub default_subnet_id: Option<String>,
    /// Reference to a Subnet in ec2 to populate defaultSubnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSubnetIdRef")]
    #[builder(default)]
    pub default_subnet_id_ref: Option<StackForProviderDefaultSubnetIdRef>,
    /// Selector for a Subnet in ec2 to populate defaultSubnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSubnetIdSelector")]
    #[builder(default)]
    pub default_subnet_id_selector: Option<StackForProviderDefaultSubnetIdSelector>,
    /// Keyword representing the naming scheme that will be used for instance hostnames within this stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostnameTheme")]
    #[builder(default)]
    pub hostname_theme: Option<String>,
    /// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageBerkshelf")]
    #[builder(default)]
    pub manage_berkshelf: Option<bool>,
    /// The name of the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The name of the region where the stack will exist.
    pub region: String,
    /// The ARN of an IAM role that the OpsWorks service will act as.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    #[builder(default)]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnRef")]
    #[builder(default)]
    pub service_role_arn_ref: Option<StackForProviderServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnSelector")]
    #[builder(default)]
    pub service_role_arn_selector: Option<StackForProviderServiceRoleArnSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Boolean value controlling whether the custom cookbook settings are enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCustomCookbooks")]
    #[builder(default)]
    pub use_custom_cookbooks: Option<bool>,
    /// Boolean value controlling whether the standard OpsWorks security groups apply to created instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useOpsworksSecurityGroups")]
    #[builder(default)]
    pub use_opsworks_security_groups: Option<bool>,
    /// ID of the VPC that this stack belongs to.
    /// Defaults to the region's default VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
    /// Reference to a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdRef")]
    #[builder(default)]
    pub vpc_id_ref: Option<StackForProviderVpcIdRef>,
    /// Selector for a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdSelector")]
    #[builder(default)]
    pub vpc_id_selector: Option<StackForProviderVpcIdSelector>,
}

/// When use_custom_cookbooks is set, provide this sub-object as described below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderCustomCookbooksSource {
    /// Password to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    #[builder(default)]
    pub password_secret_ref: Option<StackForProviderCustomCookbooksSourcePasswordSecretRef>,
    /// For sources that are version-aware, the revision to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// SSH key to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshKeySecretRef")]
    #[builder(default)]
    pub ssh_key_secret_ref: Option<StackForProviderCustomCookbooksSourceSshKeySecretRef>,
    /// The type of source to use. For example, "archive".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The URL where the cookbooks resource can be found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
    /// Username to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Password to use when authenticating to the source.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderCustomCookbooksSourcePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SSH key to use when authenticating to the source.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderCustomCookbooksSourceSshKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a InstanceProfile in iam to populate defaultInstanceProfileArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderDefaultInstanceProfileArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackForProviderDefaultInstanceProfileArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderDefaultInstanceProfileArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackForProviderDefaultInstanceProfileArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackForProviderDefaultInstanceProfileArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderDefaultInstanceProfileArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderDefaultInstanceProfileArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InstanceProfile in iam to populate defaultInstanceProfileArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderDefaultInstanceProfileArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackForProviderDefaultInstanceProfileArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderDefaultInstanceProfileArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackForProviderDefaultInstanceProfileArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackForProviderDefaultInstanceProfileArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderDefaultInstanceProfileArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderDefaultInstanceProfileArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnet in ec2 to populate defaultSubnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderDefaultSubnetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackForProviderDefaultSubnetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderDefaultSubnetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackForProviderDefaultSubnetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackForProviderDefaultSubnetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderDefaultSubnetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderDefaultSubnetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnet in ec2 to populate defaultSubnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderDefaultSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackForProviderDefaultSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderDefaultSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackForProviderDefaultSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackForProviderDefaultSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderDefaultSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderDefaultSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackForProviderServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackForProviderServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackForProviderServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackForProviderServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackForProviderServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackForProviderServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderVpcIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackForProviderVpcIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderVpcIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackForProviderVpcIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackForProviderVpcIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderVpcIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderVpcIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderVpcIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackForProviderVpcIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackForProviderVpcIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackForProviderVpcIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackForProviderVpcIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderVpcIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackForProviderVpcIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProvider {
    /// If set to "LATEST", OpsWorks will automatically install the latest version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentVersion")]
    #[builder(default)]
    pub agent_version: Option<String>,
    /// If manage_berkshelf is enabled, the version of Berkshelf to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "berkshelfVersion")]
    #[builder(default)]
    pub berkshelf_version: Option<String>,
    /// Color to paint next to the stack's resources in the OpsWorks console.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub color: Option<String>,
    /// Name of the configuration manager to use. Defaults to "Chef".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationManagerName")]
    #[builder(default)]
    pub configuration_manager_name: Option<String>,
    /// Version of the configuration manager to use. Defaults to "11.4".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationManagerVersion")]
    #[builder(default)]
    pub configuration_manager_version: Option<String>,
    /// When use_custom_cookbooks is set, provide this sub-object as described below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customCookbooksSource")]
    #[builder(default)]
    pub custom_cookbooks_source: Option<StackInitProviderCustomCookbooksSource>,
    /// User defined JSON passed to "Chef". Use a "here doc" for multiline JSON.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customJson")]
    #[builder(default)]
    pub custom_json: Option<String>,
    /// Name of the availability zone where instances will be created by default.
    /// Cannot be set when vpc_id is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAvailabilityZone")]
    #[builder(default)]
    pub default_availability_zone: Option<String>,
    /// The ARN of an IAM Instance Profile that created instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultInstanceProfileArn")]
    #[builder(default)]
    pub default_instance_profile_arn: Option<String>,
    /// Reference to a InstanceProfile in iam to populate defaultInstanceProfileArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultInstanceProfileArnRef")]
    #[builder(default)]
    pub default_instance_profile_arn_ref: Option<StackInitProviderDefaultInstanceProfileArnRef>,
    /// Selector for a InstanceProfile in iam to populate defaultInstanceProfileArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultInstanceProfileArnSelector")]
    #[builder(default)]
    pub default_instance_profile_arn_selector: Option<StackInitProviderDefaultInstanceProfileArnSelector>,
    /// Name of OS that will be installed on instances by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultOs")]
    #[builder(default)]
    pub default_os: Option<String>,
    /// Name of the type of root device instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRootDeviceType")]
    #[builder(default)]
    pub default_root_device_type: Option<String>,
    /// Name of the SSH keypair that instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSshKeyName")]
    #[builder(default)]
    pub default_ssh_key_name: Option<String>,
    /// ID of the subnet in which instances will be created by default.
    /// Required if vpc_id is set to a VPC other than the default VPC, and forbidden if it isn't.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSubnetId")]
    #[builder(default)]
    pub default_subnet_id: Option<String>,
    /// Reference to a Subnet in ec2 to populate defaultSubnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSubnetIdRef")]
    #[builder(default)]
    pub default_subnet_id_ref: Option<StackInitProviderDefaultSubnetIdRef>,
    /// Selector for a Subnet in ec2 to populate defaultSubnetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSubnetIdSelector")]
    #[builder(default)]
    pub default_subnet_id_selector: Option<StackInitProviderDefaultSubnetIdSelector>,
    /// Keyword representing the naming scheme that will be used for instance hostnames within this stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostnameTheme")]
    #[builder(default)]
    pub hostname_theme: Option<String>,
    /// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageBerkshelf")]
    #[builder(default)]
    pub manage_berkshelf: Option<bool>,
    /// The name of the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The ARN of an IAM role that the OpsWorks service will act as.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    #[builder(default)]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnRef")]
    #[builder(default)]
    pub service_role_arn_ref: Option<StackInitProviderServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnSelector")]
    #[builder(default)]
    pub service_role_arn_selector: Option<StackInitProviderServiceRoleArnSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Boolean value controlling whether the custom cookbook settings are enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCustomCookbooks")]
    #[builder(default)]
    pub use_custom_cookbooks: Option<bool>,
    /// Boolean value controlling whether the standard OpsWorks security groups apply to created instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useOpsworksSecurityGroups")]
    #[builder(default)]
    pub use_opsworks_security_groups: Option<bool>,
    /// ID of the VPC that this stack belongs to.
    /// Defaults to the region's default VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
    /// Reference to a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdRef")]
    #[builder(default)]
    pub vpc_id_ref: Option<StackInitProviderVpcIdRef>,
    /// Selector for a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdSelector")]
    #[builder(default)]
    pub vpc_id_selector: Option<StackInitProviderVpcIdSelector>,
}

/// When use_custom_cookbooks is set, provide this sub-object as described below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderCustomCookbooksSource {
    /// Password to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    #[builder(default)]
    pub password_secret_ref: Option<StackInitProviderCustomCookbooksSourcePasswordSecretRef>,
    /// For sources that are version-aware, the revision to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// SSH key to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshKeySecretRef")]
    #[builder(default)]
    pub ssh_key_secret_ref: Option<StackInitProviderCustomCookbooksSourceSshKeySecretRef>,
    /// The type of source to use. For example, "archive".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The URL where the cookbooks resource can be found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
    /// Username to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}

/// Password to use when authenticating to the source.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderCustomCookbooksSourcePasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SSH key to use when authenticating to the source.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderCustomCookbooksSourceSshKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a InstanceProfile in iam to populate defaultInstanceProfileArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderDefaultInstanceProfileArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackInitProviderDefaultInstanceProfileArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderDefaultInstanceProfileArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackInitProviderDefaultInstanceProfileArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackInitProviderDefaultInstanceProfileArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderDefaultInstanceProfileArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderDefaultInstanceProfileArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InstanceProfile in iam to populate defaultInstanceProfileArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderDefaultInstanceProfileArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackInitProviderDefaultInstanceProfileArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderDefaultInstanceProfileArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackInitProviderDefaultInstanceProfileArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackInitProviderDefaultInstanceProfileArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderDefaultInstanceProfileArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderDefaultInstanceProfileArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnet in ec2 to populate defaultSubnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderDefaultSubnetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackInitProviderDefaultSubnetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderDefaultSubnetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackInitProviderDefaultSubnetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackInitProviderDefaultSubnetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderDefaultSubnetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderDefaultSubnetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnet in ec2 to populate defaultSubnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderDefaultSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackInitProviderDefaultSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderDefaultSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackInitProviderDefaultSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackInitProviderDefaultSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderDefaultSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderDefaultSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackInitProviderServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackInitProviderServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackInitProviderServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackInitProviderServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackInitProviderServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackInitProviderServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderVpcIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackInitProviderVpcIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderVpcIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackInitProviderVpcIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackInitProviderVpcIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderVpcIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderVpcIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderVpcIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackInitProviderVpcIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackInitProviderVpcIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackInitProviderVpcIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackInitProviderVpcIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderVpcIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackInitProviderVpcIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<StackPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<StackPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StackPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StackPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StackPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// StackStatus defines the observed state of Stack.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<StackStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackStatusAtProvider {
    /// If set to "LATEST", OpsWorks will automatically install the latest version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentVersion")]
    #[builder(default)]
    pub agent_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// If manage_berkshelf is enabled, the version of Berkshelf to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "berkshelfVersion")]
    #[builder(default)]
    pub berkshelf_version: Option<String>,
    /// Color to paint next to the stack's resources in the OpsWorks console.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub color: Option<String>,
    /// Name of the configuration manager to use. Defaults to "Chef".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationManagerName")]
    #[builder(default)]
    pub configuration_manager_name: Option<String>,
    /// Version of the configuration manager to use. Defaults to "11.4".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationManagerVersion")]
    #[builder(default)]
    pub configuration_manager_version: Option<String>,
    /// When use_custom_cookbooks is set, provide this sub-object as described below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customCookbooksSource")]
    #[builder(default)]
    pub custom_cookbooks_source: Option<StackStatusAtProviderCustomCookbooksSource>,
    /// User defined JSON passed to "Chef". Use a "here doc" for multiline JSON.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customJson")]
    #[builder(default)]
    pub custom_json: Option<String>,
    /// Name of the availability zone where instances will be created by default.
    /// Cannot be set when vpc_id is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAvailabilityZone")]
    #[builder(default)]
    pub default_availability_zone: Option<String>,
    /// The ARN of an IAM Instance Profile that created instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultInstanceProfileArn")]
    #[builder(default)]
    pub default_instance_profile_arn: Option<String>,
    /// Name of OS that will be installed on instances by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultOs")]
    #[builder(default)]
    pub default_os: Option<String>,
    /// Name of the type of root device instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRootDeviceType")]
    #[builder(default)]
    pub default_root_device_type: Option<String>,
    /// Name of the SSH keypair that instances will have by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSshKeyName")]
    #[builder(default)]
    pub default_ssh_key_name: Option<String>,
    /// ID of the subnet in which instances will be created by default.
    /// Required if vpc_id is set to a VPC other than the default VPC, and forbidden if it isn't.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSubnetId")]
    #[builder(default)]
    pub default_subnet_id: Option<String>,
    /// Keyword representing the naming scheme that will be used for instance hostnames within this stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostnameTheme")]
    #[builder(default)]
    pub hostname_theme: Option<String>,
    /// The id of the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageBerkshelf")]
    #[builder(default)]
    pub manage_berkshelf: Option<bool>,
    /// The name of the stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The name of the region where the stack will exist.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
    /// The ARN of an IAM role that the OpsWorks service will act as.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    #[builder(default)]
    pub service_role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackEndpoint")]
    #[builder(default)]
    pub stack_endpoint: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Boolean value controlling whether the custom cookbook settings are enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCustomCookbooks")]
    #[builder(default)]
    pub use_custom_cookbooks: Option<bool>,
    /// Boolean value controlling whether the standard OpsWorks security groups apply to created instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useOpsworksSecurityGroups")]
    #[builder(default)]
    pub use_opsworks_security_groups: Option<bool>,
    /// ID of the VPC that this stack belongs to.
    /// Defaults to the region's default VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
}

/// When use_custom_cookbooks is set, provide this sub-object as described below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StackStatusAtProviderCustomCookbooksSource {
    /// For sources that are version-aware, the revision to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// The type of source to use. For example, "archive".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The URL where the cookbooks resource can be found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
    /// Username to use when authenticating to the source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub username: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// StandardAppVersionSpec defines the desired state of StandardAppVersion
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "appengine.gcp.upbound.io", version = "v1beta2", kind = "StandardAppVersion", plural = "standardappversions")]
#[kube(status = "StandardAppVersionStatus")]
pub struct StandardAppVersionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<StandardAppVersionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: StandardAppVersionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<StandardAppVersionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<StandardAppVersionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<StandardAppVersionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<StandardAppVersionWriteConnectionSecretToRef>,
}

/// StandardAppVersionSpec defines the desired state of StandardAppVersion
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProvider {
    /// Allows App Engine second generation runtimes to access the legacy bundled services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineApis")]
    #[builder(default)]
    pub app_engine_apis: Option<bool>,
    /// Automatic scaling is based on request rate, response latencies, and other application metrics.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticScaling")]
    #[builder(default)]
    pub automatic_scaling: Option<StandardAppVersionForProviderAutomaticScaling>,
    /// Basic scaling creates instances when your application receives requests. Each instance will be shut down when the application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicScaling")]
    #[builder(default)]
    pub basic_scaling: Option<StandardAppVersionForProviderBasicScaling>,
    /// If set to true, the service will be deleted if it is the last version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteServiceOnDestroy")]
    #[builder(default)]
    pub delete_service_on_destroy: Option<bool>,
    /// Code and application artifacts that make up this version.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub deployment: Option<StandardAppVersionForProviderDeployment>,
    /// The entrypoint for the application.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub entrypoint: Option<StandardAppVersionForProviderEntrypoint>,
    /// Environment variables available to the application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envVariables")]
    #[builder(default)]
    pub env_variables: Option<HashMap<String, String>>,
    /// An ordered list of URL-matching patterns that should be applied to incoming requests.
    /// The first matching URL handles the request and other request handlers are not attempted.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub handlers: Option<Vec<StandardAppVersionForProviderHandlers>>,
    /// A list of the types of messages that this application is able to receive.
    /// Each value may be one of: INBOUND_SERVICE_MAIL, INBOUND_SERVICE_MAIL_BOUNCE, INBOUND_SERVICE_XMPP_ERROR, INBOUND_SERVICE_XMPP_MESSAGE, INBOUND_SERVICE_XMPP_SUBSCRIBE, INBOUND_SERVICE_XMPP_PRESENCE, INBOUND_SERVICE_CHANNEL_PRESENCE, INBOUND_SERVICE_WARMUP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inboundServices")]
    #[builder(default)]
    pub inbound_services: Option<Vec<String>>,
    /// Instance class that is used to run this version. Valid values are
    /// AutomaticScaling: F1, F2, F4, F4_1G
    /// BasicScaling or ManualScaling: B1, B2, B4, B4_1G, B8
    /// Defaults to F1 for AutomaticScaling and B2 for ManualScaling and BasicScaling. If no scaling is specified, AutomaticScaling is chosen.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceClass")]
    #[builder(default)]
    pub instance_class: Option<String>,
    /// Configuration for third-party Python runtime libraries that are required by the application.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub libraries: Option<Vec<StandardAppVersionForProviderLibraries>>,
    /// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manualScaling")]
    #[builder(default)]
    pub manual_scaling: Option<StandardAppVersionForProviderManualScaling>,
    /// If set to true, the application version will not be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noopOnDestroy")]
    #[builder(default)]
    pub noop_on_destroy: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Desired runtime. Example python27.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub runtime: Option<String>,
    /// The version of the API in the given runtime environment.
    /// Please see the app.yaml reference for valid values at https://cloud.google.com/appengine/docs/standard/<language>/config/appref
    /// Substitute <language> with python, java, php, ruby, go or nodejs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeApiVersion")]
    #[builder(default)]
    pub runtime_api_version: Option<String>,
    /// AppEngine service resource
    pub service: String,
    /// The identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default if this field is neither provided in app.yaml file nor through CLI flag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    #[builder(default)]
    pub service_account: Option<String>,
    /// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    #[builder(default)]
    pub service_account_ref: Option<StandardAppVersionForProviderServiceAccountRef>,
    /// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountSelector")]
    #[builder(default)]
    pub service_account_selector: Option<StandardAppVersionForProviderServiceAccountSelector>,
    /// Whether multiple requests can be dispatched to this version at once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub threadsafe: Option<bool>,
    /// Enables VPC connectivity for standard apps.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcAccessConnector")]
    #[builder(default)]
    pub vpc_access_connector: Option<StandardAppVersionForProviderVpcAccessConnector>,
}

/// Automatic scaling is based on request rate, response latencies, and other application metrics.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderAutomaticScaling {
    /// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
    /// Defaults to a runtime-specific value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentRequests")]
    #[builder(default)]
    pub max_concurrent_requests: Option<f64>,
    /// Maximum number of idle instances that should be maintained for this version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdleInstances")]
    #[builder(default)]
    pub max_idle_instances: Option<f64>,
    /// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingLatency")]
    #[builder(default)]
    pub max_pending_latency: Option<String>,
    /// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIdleInstances")]
    #[builder(default)]
    pub min_idle_instances: Option<f64>,
    /// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minPendingLatency")]
    #[builder(default)]
    pub min_pending_latency: Option<String>,
    /// Scheduler settings for standard environment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardSchedulerSettings")]
    #[builder(default)]
    pub standard_scheduler_settings: Option<StandardAppVersionForProviderAutomaticScalingStandardSchedulerSettings>,
}

/// Scheduler settings for standard environment.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderAutomaticScalingStandardSchedulerSettings {
    /// Maximum number of instances to run for this version. Set to zero to disable maxInstances configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstances")]
    #[builder(default)]
    pub max_instances: Option<f64>,
    /// Minimum number of instances to run for this version. Set to zero to disable minInstances configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minInstances")]
    #[builder(default)]
    pub min_instances: Option<f64>,
    /// Target CPU utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCpuUtilization")]
    #[builder(default)]
    pub target_cpu_utilization: Option<f64>,
    /// Target throughput utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetThroughputUtilization")]
    #[builder(default)]
    pub target_throughput_utilization: Option<f64>,
}

/// Basic scaling creates instances when your application receives requests. Each instance will be shut down when the application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderBasicScaling {
    /// Duration of time after the last request that an instance must wait before the instance is shut down.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    #[builder(default)]
    pub idle_timeout: Option<String>,
    /// Maximum number of instances to create for this version. Must be in the range [1.0, 200.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstances")]
    #[builder(default)]
    pub max_instances: Option<f64>,
}

/// Code and application artifacts that make up this version.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderDeployment {
    /// Manifest of the files stored in Google Cloud Storage that are included as part of this version.
    /// All files must be readable using the credentials supplied with this call.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub files: Option<Vec<StandardAppVersionForProviderDeploymentFiles>>,
    /// Zip File
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub zip: Option<StandardAppVersionForProviderDeploymentZip>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderDeploymentFiles {
    /// Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// SHA1 checksum of the file
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha1Sum")]
    #[builder(default)]
    pub sha1_sum: Option<String>,
    /// Source URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceUrl")]
    #[builder(default)]
    pub source_url: Option<String>,
}

/// Zip File
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderDeploymentZip {
    /// files count
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filesCount")]
    #[builder(default)]
    pub files_count: Option<f64>,
    /// Source URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceUrl")]
    #[builder(default)]
    pub source_url: Option<String>,
}

/// The entrypoint for the application.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderEntrypoint {
    /// The format should be a shell command that can be fed to bash -c.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub shell: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderHandlers {
    /// Actions to take when the user is not logged in.
    /// Possible values are: AUTH_FAIL_ACTION_REDIRECT, AUTH_FAIL_ACTION_UNAUTHORIZED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authFailAction")]
    #[builder(default)]
    pub auth_fail_action: Option<String>,
    /// Methods to restrict access to a URL based on login status.
    /// Possible values are: LOGIN_OPTIONAL, LOGIN_ADMIN, LOGIN_REQUIRED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub login: Option<String>,
    /// 30x code to use when performing redirects for the secure field.
    /// Possible values are: REDIRECT_HTTP_RESPONSE_CODE_301, REDIRECT_HTTP_RESPONSE_CODE_302, REDIRECT_HTTP_RESPONSE_CODE_303, REDIRECT_HTTP_RESPONSE_CODE_307.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectHttpResponseCode")]
    #[builder(default)]
    pub redirect_http_response_code: Option<String>,
    /// Executes a script to handle the requests that match this URL pattern.
    /// Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub script: Option<StandardAppVersionForProviderHandlersScript>,
    /// Security (HTTPS) enforcement for this URL.
    /// Possible values are: SECURE_DEFAULT, SECURE_NEVER, SECURE_OPTIONAL, SECURE_ALWAYS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityLevel")]
    #[builder(default)]
    pub security_level: Option<String>,
    /// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticFiles")]
    #[builder(default)]
    pub static_files: Option<StandardAppVersionForProviderHandlersStaticFiles>,
    /// URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
    /// All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlRegex")]
    #[builder(default)]
    pub url_regex: Option<String>,
}

/// Executes a script to handle the requests that match this URL pattern.
/// Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderHandlersScript {
    /// Path to the script from the application root directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptPath")]
    #[builder(default)]
    pub script_path: Option<String>,
}

/// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderHandlersStaticFiles {
    /// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as
    /// static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged
    /// against both your code and static data storage resource quotas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationReadable")]
    #[builder(default)]
    pub application_readable: Option<bool>,
    /// Time a static file served by this handler should be cached by web proxies and browsers.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expiration: Option<String>,
    /// HTTP headers to use for all responses from these URLs.
    /// An object containing a list of "key:value" value pairs.".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<HashMap<String, String>>,
    /// MIME type used to serve all files served by this handler.
    /// Defaults to file-specific MIME types, which are derived from each file's filename extension.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mimeType")]
    #[builder(default)]
    pub mime_type: Option<String>,
    /// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Whether this handler should match the request if the file referenced by the handler does not exist.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireMatchingFile")]
    #[builder(default)]
    pub require_matching_file: Option<bool>,
    /// Regular expression that matches the file paths for all files that should be referenced by this handler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uploadPathRegex")]
    #[builder(default)]
    pub upload_path_regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderLibraries {
    /// Name of the library. Example "django".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Version of the library to select, or "latest".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderManualScaling {
    /// Number of instances to assign to the service at the start.
    /// Note: When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2
    /// Modules API set_num_instances() you must use lifecycle.ignore_changes = ["manual_scaling"[0].instances] to prevent drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub instances: Option<f64>,
}

/// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderServiceAccountRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StandardAppVersionForProviderServiceAccountRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderServiceAccountRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StandardAppVersionForProviderServiceAccountRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StandardAppVersionForProviderServiceAccountRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionForProviderServiceAccountRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionForProviderServiceAccountRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderServiceAccountSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StandardAppVersionForProviderServiceAccountSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderServiceAccountSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StandardAppVersionForProviderServiceAccountSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StandardAppVersionForProviderServiceAccountSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionForProviderServiceAccountSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionForProviderServiceAccountSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Enables VPC connectivity for standard apps.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionForProviderVpcAccessConnector {
    /// The egress setting for the connector, controlling what traffic is diverted through it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressSetting")]
    #[builder(default)]
    pub egress_setting: Option<String>,
    /// Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProvider {
    /// Allows App Engine second generation runtimes to access the legacy bundled services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineApis")]
    #[builder(default)]
    pub app_engine_apis: Option<bool>,
    /// Automatic scaling is based on request rate, response latencies, and other application metrics.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticScaling")]
    #[builder(default)]
    pub automatic_scaling: Option<StandardAppVersionInitProviderAutomaticScaling>,
    /// Basic scaling creates instances when your application receives requests. Each instance will be shut down when the application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicScaling")]
    #[builder(default)]
    pub basic_scaling: Option<StandardAppVersionInitProviderBasicScaling>,
    /// If set to true, the service will be deleted if it is the last version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteServiceOnDestroy")]
    #[builder(default)]
    pub delete_service_on_destroy: Option<bool>,
    /// Code and application artifacts that make up this version.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub deployment: Option<StandardAppVersionInitProviderDeployment>,
    /// The entrypoint for the application.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub entrypoint: Option<StandardAppVersionInitProviderEntrypoint>,
    /// Environment variables available to the application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envVariables")]
    #[builder(default)]
    pub env_variables: Option<HashMap<String, String>>,
    /// An ordered list of URL-matching patterns that should be applied to incoming requests.
    /// The first matching URL handles the request and other request handlers are not attempted.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub handlers: Option<Vec<StandardAppVersionInitProviderHandlers>>,
    /// A list of the types of messages that this application is able to receive.
    /// Each value may be one of: INBOUND_SERVICE_MAIL, INBOUND_SERVICE_MAIL_BOUNCE, INBOUND_SERVICE_XMPP_ERROR, INBOUND_SERVICE_XMPP_MESSAGE, INBOUND_SERVICE_XMPP_SUBSCRIBE, INBOUND_SERVICE_XMPP_PRESENCE, INBOUND_SERVICE_CHANNEL_PRESENCE, INBOUND_SERVICE_WARMUP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inboundServices")]
    #[builder(default)]
    pub inbound_services: Option<Vec<String>>,
    /// Instance class that is used to run this version. Valid values are
    /// AutomaticScaling: F1, F2, F4, F4_1G
    /// BasicScaling or ManualScaling: B1, B2, B4, B4_1G, B8
    /// Defaults to F1 for AutomaticScaling and B2 for ManualScaling and BasicScaling. If no scaling is specified, AutomaticScaling is chosen.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceClass")]
    #[builder(default)]
    pub instance_class: Option<String>,
    /// Configuration for third-party Python runtime libraries that are required by the application.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub libraries: Option<Vec<StandardAppVersionInitProviderLibraries>>,
    /// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manualScaling")]
    #[builder(default)]
    pub manual_scaling: Option<StandardAppVersionInitProviderManualScaling>,
    /// If set to true, the application version will not be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noopOnDestroy")]
    #[builder(default)]
    pub noop_on_destroy: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Desired runtime. Example python27.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub runtime: Option<String>,
    /// The version of the API in the given runtime environment.
    /// Please see the app.yaml reference for valid values at https://cloud.google.com/appengine/docs/standard/<language>/config/appref
    /// Substitute <language> with python, java, php, ruby, go or nodejs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeApiVersion")]
    #[builder(default)]
    pub runtime_api_version: Option<String>,
    /// The identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default if this field is neither provided in app.yaml file nor through CLI flag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    #[builder(default)]
    pub service_account: Option<String>,
    /// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    #[builder(default)]
    pub service_account_ref: Option<StandardAppVersionInitProviderServiceAccountRef>,
    /// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountSelector")]
    #[builder(default)]
    pub service_account_selector: Option<StandardAppVersionInitProviderServiceAccountSelector>,
    /// Whether multiple requests can be dispatched to this version at once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub threadsafe: Option<bool>,
    /// Enables VPC connectivity for standard apps.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcAccessConnector")]
    #[builder(default)]
    pub vpc_access_connector: Option<StandardAppVersionInitProviderVpcAccessConnector>,
}

/// Automatic scaling is based on request rate, response latencies, and other application metrics.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderAutomaticScaling {
    /// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
    /// Defaults to a runtime-specific value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentRequests")]
    #[builder(default)]
    pub max_concurrent_requests: Option<f64>,
    /// Maximum number of idle instances that should be maintained for this version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdleInstances")]
    #[builder(default)]
    pub max_idle_instances: Option<f64>,
    /// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingLatency")]
    #[builder(default)]
    pub max_pending_latency: Option<String>,
    /// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIdleInstances")]
    #[builder(default)]
    pub min_idle_instances: Option<f64>,
    /// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minPendingLatency")]
    #[builder(default)]
    pub min_pending_latency: Option<String>,
    /// Scheduler settings for standard environment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardSchedulerSettings")]
    #[builder(default)]
    pub standard_scheduler_settings: Option<StandardAppVersionInitProviderAutomaticScalingStandardSchedulerSettings>,
}

/// Scheduler settings for standard environment.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderAutomaticScalingStandardSchedulerSettings {
    /// Maximum number of instances to run for this version. Set to zero to disable maxInstances configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstances")]
    #[builder(default)]
    pub max_instances: Option<f64>,
    /// Minimum number of instances to run for this version. Set to zero to disable minInstances configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minInstances")]
    #[builder(default)]
    pub min_instances: Option<f64>,
    /// Target CPU utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCpuUtilization")]
    #[builder(default)]
    pub target_cpu_utilization: Option<f64>,
    /// Target throughput utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetThroughputUtilization")]
    #[builder(default)]
    pub target_throughput_utilization: Option<f64>,
}

/// Basic scaling creates instances when your application receives requests. Each instance will be shut down when the application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderBasicScaling {
    /// Duration of time after the last request that an instance must wait before the instance is shut down.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    #[builder(default)]
    pub idle_timeout: Option<String>,
    /// Maximum number of instances to create for this version. Must be in the range [1.0, 200.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstances")]
    #[builder(default)]
    pub max_instances: Option<f64>,
}

/// Code and application artifacts that make up this version.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderDeployment {
    /// Manifest of the files stored in Google Cloud Storage that are included as part of this version.
    /// All files must be readable using the credentials supplied with this call.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub files: Option<Vec<StandardAppVersionInitProviderDeploymentFiles>>,
    /// Zip File
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub zip: Option<StandardAppVersionInitProviderDeploymentZip>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderDeploymentFiles {
    /// Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// SHA1 checksum of the file
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha1Sum")]
    #[builder(default)]
    pub sha1_sum: Option<String>,
    /// Source URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceUrl")]
    #[builder(default)]
    pub source_url: Option<String>,
}

/// Zip File
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderDeploymentZip {
    /// files count
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filesCount")]
    #[builder(default)]
    pub files_count: Option<f64>,
    /// Source URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceUrl")]
    #[builder(default)]
    pub source_url: Option<String>,
}

/// The entrypoint for the application.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderEntrypoint {
    /// The format should be a shell command that can be fed to bash -c.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub shell: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderHandlers {
    /// Actions to take when the user is not logged in.
    /// Possible values are: AUTH_FAIL_ACTION_REDIRECT, AUTH_FAIL_ACTION_UNAUTHORIZED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authFailAction")]
    #[builder(default)]
    pub auth_fail_action: Option<String>,
    /// Methods to restrict access to a URL based on login status.
    /// Possible values are: LOGIN_OPTIONAL, LOGIN_ADMIN, LOGIN_REQUIRED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub login: Option<String>,
    /// 30x code to use when performing redirects for the secure field.
    /// Possible values are: REDIRECT_HTTP_RESPONSE_CODE_301, REDIRECT_HTTP_RESPONSE_CODE_302, REDIRECT_HTTP_RESPONSE_CODE_303, REDIRECT_HTTP_RESPONSE_CODE_307.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectHttpResponseCode")]
    #[builder(default)]
    pub redirect_http_response_code: Option<String>,
    /// Executes a script to handle the requests that match this URL pattern.
    /// Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub script: Option<StandardAppVersionInitProviderHandlersScript>,
    /// Security (HTTPS) enforcement for this URL.
    /// Possible values are: SECURE_DEFAULT, SECURE_NEVER, SECURE_OPTIONAL, SECURE_ALWAYS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityLevel")]
    #[builder(default)]
    pub security_level: Option<String>,
    /// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticFiles")]
    #[builder(default)]
    pub static_files: Option<StandardAppVersionInitProviderHandlersStaticFiles>,
    /// URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
    /// All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlRegex")]
    #[builder(default)]
    pub url_regex: Option<String>,
}

/// Executes a script to handle the requests that match this URL pattern.
/// Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderHandlersScript {
    /// Path to the script from the application root directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptPath")]
    #[builder(default)]
    pub script_path: Option<String>,
}

/// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderHandlersStaticFiles {
    /// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as
    /// static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged
    /// against both your code and static data storage resource quotas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationReadable")]
    #[builder(default)]
    pub application_readable: Option<bool>,
    /// Time a static file served by this handler should be cached by web proxies and browsers.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expiration: Option<String>,
    /// HTTP headers to use for all responses from these URLs.
    /// An object containing a list of "key:value" value pairs.".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<HashMap<String, String>>,
    /// MIME type used to serve all files served by this handler.
    /// Defaults to file-specific MIME types, which are derived from each file's filename extension.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mimeType")]
    #[builder(default)]
    pub mime_type: Option<String>,
    /// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Whether this handler should match the request if the file referenced by the handler does not exist.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireMatchingFile")]
    #[builder(default)]
    pub require_matching_file: Option<bool>,
    /// Regular expression that matches the file paths for all files that should be referenced by this handler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uploadPathRegex")]
    #[builder(default)]
    pub upload_path_regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderLibraries {
    /// Name of the library. Example "django".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Version of the library to select, or "latest".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderManualScaling {
    /// Number of instances to assign to the service at the start.
    /// Note: When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2
    /// Modules API set_num_instances() you must use lifecycle.ignore_changes = ["manual_scaling"[0].instances] to prevent drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub instances: Option<f64>,
}

/// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderServiceAccountRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StandardAppVersionInitProviderServiceAccountRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderServiceAccountRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StandardAppVersionInitProviderServiceAccountRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StandardAppVersionInitProviderServiceAccountRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionInitProviderServiceAccountRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionInitProviderServiceAccountRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderServiceAccountSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StandardAppVersionInitProviderServiceAccountSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderServiceAccountSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StandardAppVersionInitProviderServiceAccountSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StandardAppVersionInitProviderServiceAccountSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionInitProviderServiceAccountSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionInitProviderServiceAccountSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Enables VPC connectivity for standard apps.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionInitProviderVpcAccessConnector {
    /// The egress setting for the connector, controlling what traffic is diverted through it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressSetting")]
    #[builder(default)]
    pub egress_setting: Option<String>,
    /// Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StandardAppVersionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StandardAppVersionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StandardAppVersionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<StandardAppVersionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<StandardAppVersionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<StandardAppVersionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<StandardAppVersionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<StandardAppVersionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StandardAppVersionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// StandardAppVersionStatus defines the observed state of StandardAppVersion.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<StandardAppVersionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProvider {
    /// Allows App Engine second generation runtimes to access the legacy bundled services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineApis")]
    #[builder(default)]
    pub app_engine_apis: Option<bool>,
    /// Automatic scaling is based on request rate, response latencies, and other application metrics.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticScaling")]
    #[builder(default)]
    pub automatic_scaling: Option<StandardAppVersionStatusAtProviderAutomaticScaling>,
    /// Basic scaling creates instances when your application receives requests. Each instance will be shut down when the application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicScaling")]
    #[builder(default)]
    pub basic_scaling: Option<StandardAppVersionStatusAtProviderBasicScaling>,
    /// If set to true, the service will be deleted if it is the last version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteServiceOnDestroy")]
    #[builder(default)]
    pub delete_service_on_destroy: Option<bool>,
    /// Code and application artifacts that make up this version.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub deployment: Option<StandardAppVersionStatusAtProviderDeployment>,
    /// The entrypoint for the application.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub entrypoint: Option<StandardAppVersionStatusAtProviderEntrypoint>,
    /// Environment variables available to the application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envVariables")]
    #[builder(default)]
    pub env_variables: Option<HashMap<String, String>>,
    /// An ordered list of URL-matching patterns that should be applied to incoming requests.
    /// The first matching URL handles the request and other request handlers are not attempted.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub handlers: Option<Vec<StandardAppVersionStatusAtProviderHandlers>>,
    /// an identifier for the resource with format apps/{{project}}/services/{{service}}/versions/{{version_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// A list of the types of messages that this application is able to receive.
    /// Each value may be one of: INBOUND_SERVICE_MAIL, INBOUND_SERVICE_MAIL_BOUNCE, INBOUND_SERVICE_XMPP_ERROR, INBOUND_SERVICE_XMPP_MESSAGE, INBOUND_SERVICE_XMPP_SUBSCRIBE, INBOUND_SERVICE_XMPP_PRESENCE, INBOUND_SERVICE_CHANNEL_PRESENCE, INBOUND_SERVICE_WARMUP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inboundServices")]
    #[builder(default)]
    pub inbound_services: Option<Vec<String>>,
    /// Instance class that is used to run this version. Valid values are
    /// AutomaticScaling: F1, F2, F4, F4_1G
    /// BasicScaling or ManualScaling: B1, B2, B4, B4_1G, B8
    /// Defaults to F1 for AutomaticScaling and B2 for ManualScaling and BasicScaling. If no scaling is specified, AutomaticScaling is chosen.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceClass")]
    #[builder(default)]
    pub instance_class: Option<String>,
    /// Configuration for third-party Python runtime libraries that are required by the application.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub libraries: Option<Vec<StandardAppVersionStatusAtProviderLibraries>>,
    /// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manualScaling")]
    #[builder(default)]
    pub manual_scaling: Option<StandardAppVersionStatusAtProviderManualScaling>,
    /// Full path to the Version resource in the API. Example, "v1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// If set to true, the application version will not be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noopOnDestroy")]
    #[builder(default)]
    pub noop_on_destroy: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Desired runtime. Example python27.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub runtime: Option<String>,
    /// The version of the API in the given runtime environment.
    /// Please see the app.yaml reference for valid values at https://cloud.google.com/appengine/docs/standard/<language>/config/appref
    /// Substitute <language> with python, java, php, ruby, go or nodejs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeApiVersion")]
    #[builder(default)]
    pub runtime_api_version: Option<String>,
    /// AppEngine service resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
    /// The identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default if this field is neither provided in app.yaml file nor through CLI flag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    #[builder(default)]
    pub service_account: Option<String>,
    /// Whether multiple requests can be dispatched to this version at once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub threadsafe: Option<bool>,
    /// Enables VPC connectivity for standard apps.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcAccessConnector")]
    #[builder(default)]
    pub vpc_access_connector: Option<StandardAppVersionStatusAtProviderVpcAccessConnector>,
}

/// Automatic scaling is based on request rate, response latencies, and other application metrics.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderAutomaticScaling {
    /// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
    /// Defaults to a runtime-specific value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentRequests")]
    #[builder(default)]
    pub max_concurrent_requests: Option<f64>,
    /// Maximum number of idle instances that should be maintained for this version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdleInstances")]
    #[builder(default)]
    pub max_idle_instances: Option<f64>,
    /// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingLatency")]
    #[builder(default)]
    pub max_pending_latency: Option<String>,
    /// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIdleInstances")]
    #[builder(default)]
    pub min_idle_instances: Option<f64>,
    /// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minPendingLatency")]
    #[builder(default)]
    pub min_pending_latency: Option<String>,
    /// Scheduler settings for standard environment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardSchedulerSettings")]
    #[builder(default)]
    pub standard_scheduler_settings: Option<StandardAppVersionStatusAtProviderAutomaticScalingStandardSchedulerSettings>,
}

/// Scheduler settings for standard environment.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderAutomaticScalingStandardSchedulerSettings {
    /// Maximum number of instances to run for this version. Set to zero to disable maxInstances configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstances")]
    #[builder(default)]
    pub max_instances: Option<f64>,
    /// Minimum number of instances to run for this version. Set to zero to disable minInstances configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minInstances")]
    #[builder(default)]
    pub min_instances: Option<f64>,
    /// Target CPU utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCpuUtilization")]
    #[builder(default)]
    pub target_cpu_utilization: Option<f64>,
    /// Target throughput utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetThroughputUtilization")]
    #[builder(default)]
    pub target_throughput_utilization: Option<f64>,
}

/// Basic scaling creates instances when your application receives requests. Each instance will be shut down when the application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderBasicScaling {
    /// Duration of time after the last request that an instance must wait before the instance is shut down.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    #[builder(default)]
    pub idle_timeout: Option<String>,
    /// Maximum number of instances to create for this version. Must be in the range [1.0, 200.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstances")]
    #[builder(default)]
    pub max_instances: Option<f64>,
}

/// Code and application artifacts that make up this version.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderDeployment {
    /// Manifest of the files stored in Google Cloud Storage that are included as part of this version.
    /// All files must be readable using the credentials supplied with this call.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub files: Option<Vec<StandardAppVersionStatusAtProviderDeploymentFiles>>,
    /// Zip File
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub zip: Option<StandardAppVersionStatusAtProviderDeploymentZip>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderDeploymentFiles {
    /// Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// SHA1 checksum of the file
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha1Sum")]
    #[builder(default)]
    pub sha1_sum: Option<String>,
    /// Source URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceUrl")]
    #[builder(default)]
    pub source_url: Option<String>,
}

/// Zip File
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderDeploymentZip {
    /// files count
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filesCount")]
    #[builder(default)]
    pub files_count: Option<f64>,
    /// Source URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceUrl")]
    #[builder(default)]
    pub source_url: Option<String>,
}

/// The entrypoint for the application.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderEntrypoint {
    /// The format should be a shell command that can be fed to bash -c.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub shell: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderHandlers {
    /// Actions to take when the user is not logged in.
    /// Possible values are: AUTH_FAIL_ACTION_REDIRECT, AUTH_FAIL_ACTION_UNAUTHORIZED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authFailAction")]
    #[builder(default)]
    pub auth_fail_action: Option<String>,
    /// Methods to restrict access to a URL based on login status.
    /// Possible values are: LOGIN_OPTIONAL, LOGIN_ADMIN, LOGIN_REQUIRED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub login: Option<String>,
    /// 30x code to use when performing redirects for the secure field.
    /// Possible values are: REDIRECT_HTTP_RESPONSE_CODE_301, REDIRECT_HTTP_RESPONSE_CODE_302, REDIRECT_HTTP_RESPONSE_CODE_303, REDIRECT_HTTP_RESPONSE_CODE_307.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectHttpResponseCode")]
    #[builder(default)]
    pub redirect_http_response_code: Option<String>,
    /// Executes a script to handle the requests that match this URL pattern.
    /// Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub script: Option<StandardAppVersionStatusAtProviderHandlersScript>,
    /// Security (HTTPS) enforcement for this URL.
    /// Possible values are: SECURE_DEFAULT, SECURE_NEVER, SECURE_OPTIONAL, SECURE_ALWAYS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityLevel")]
    #[builder(default)]
    pub security_level: Option<String>,
    /// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticFiles")]
    #[builder(default)]
    pub static_files: Option<StandardAppVersionStatusAtProviderHandlersStaticFiles>,
    /// URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
    /// All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlRegex")]
    #[builder(default)]
    pub url_regex: Option<String>,
}

/// Executes a script to handle the requests that match this URL pattern.
/// Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderHandlersScript {
    /// Path to the script from the application root directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptPath")]
    #[builder(default)]
    pub script_path: Option<String>,
}

/// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderHandlersStaticFiles {
    /// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as
    /// static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged
    /// against both your code and static data storage resource quotas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationReadable")]
    #[builder(default)]
    pub application_readable: Option<bool>,
    /// Time a static file served by this handler should be cached by web proxies and browsers.
    /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expiration: Option<String>,
    /// HTTP headers to use for all responses from these URLs.
    /// An object containing a list of "key:value" value pairs.".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<HashMap<String, String>>,
    /// MIME type used to serve all files served by this handler.
    /// Defaults to file-specific MIME types, which are derived from each file's filename extension.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mimeType")]
    #[builder(default)]
    pub mime_type: Option<String>,
    /// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Whether this handler should match the request if the file referenced by the handler does not exist.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireMatchingFile")]
    #[builder(default)]
    pub require_matching_file: Option<bool>,
    /// Regular expression that matches the file paths for all files that should be referenced by this handler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uploadPathRegex")]
    #[builder(default)]
    pub upload_path_regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderLibraries {
    /// Name of the library. Example "django".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Version of the library to select, or "latest".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderManualScaling {
    /// Number of instances to assign to the service at the start.
    /// Note: When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2
    /// Modules API set_num_instances() you must use lifecycle.ignore_changes = ["manual_scaling"[0].instances] to prevent drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub instances: Option<f64>,
}

/// Enables VPC connectivity for standard apps.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct StandardAppVersionStatusAtProviderVpcAccessConnector {
    /// The egress setting for the connector, controlling what traffic is diverted through it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressSetting")]
    #[builder(default)]
    pub egress_setting: Option<String>,
    /// Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}


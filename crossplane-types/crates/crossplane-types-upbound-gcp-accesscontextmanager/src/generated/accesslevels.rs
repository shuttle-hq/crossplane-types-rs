// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AccessLevelSpec defines the desired state of AccessLevel
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "accesscontextmanager.gcp.upbound.io",
    version = "v1beta2",
    kind = "AccessLevel",
    plural = "accesslevels"
)]
#[kube(status = "AccessLevelStatus")]
pub struct AccessLevelSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<AccessLevelDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AccessLevelForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<AccessLevelInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<AccessLevelProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<AccessLevelPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<AccessLevelWriteConnectionSecretToRef>,
}

/// AccessLevelSpec defines the desired state of AccessLevel
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AccessLevelDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelForProvider {
    /// A set of predefined conditions for the access level and a combining function.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub basic: Option<AccessLevelForProviderBasic>,
    /// Custom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request.
    /// See CEL spec at: https://github.com/google/cel-spec.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub custom: Option<AccessLevelForProviderCustom>,
    /// Description of the AccessLevel and its use. Does not affect behavior.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Resource name for the Access Level. The short_name component must begin
    /// with a letter and only include alphanumeric and '_'.
    /// Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The AccessPolicy this AccessLevel lives in.
    /// Format: accessPolicies/{policy_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parent: Option<String>,
    /// Human readable title. Must be unique within the Policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub title: Option<String>,
}

/// A set of predefined conditions for the access level and a combining function.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelForProviderBasic {
    /// How the conditions list should be combined to determine if a request
    /// is granted this AccessLevel. If AND is used, each Condition in
    /// conditions must be satisfied for the AccessLevel to be applied. If
    /// OR is used, at least one Condition in conditions must be satisfied
    /// for the AccessLevel to be applied.
    /// Default value is AND.
    /// Possible values are: AND, OR.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "combiningFunction"
    )]
    #[builder(default)]
    pub combining_function: Option<String>,
    /// A set of requirements for the AccessLevel to be granted.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<AccessLevelForProviderBasicConditions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelForProviderBasicConditions {
    /// Device specific restrictions, all restrictions must hold for
    /// the Condition to be true. If not specified, all devices are
    /// allowed.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "devicePolicy"
    )]
    #[builder(default)]
    pub device_policy: Option<AccessLevelForProviderBasicConditionsDevicePolicy>,
    /// A list of CIDR block IP subnetwork specification. May be IPv4
    /// or IPv6.
    /// Note that for a CIDR IP address block, the specified IP address
    /// portion must be properly truncated (i.e. all the host bits must
    /// be zero) or the input is considered malformed. For example,
    /// "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
    /// for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
    /// is not. The originating IP of a request must be in one of the
    /// listed subnets in order for this Condition to be true.
    /// If empty, all IP addresses are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipSubnetworks"
    )]
    #[builder(default)]
    pub ip_subnetworks: Option<Vec<String>>,
    /// An allowed list of members (users, service accounts).
    /// Using groups is not supported yet.
    /// The signed-in user originating the request must be a part of one
    /// of the provided members. If not specified, a request may come
    /// from any user (logged in/not logged in, not present in any
    /// groups, etc.).
    /// Formats: user:{emailid}, serviceAccount:{emailid}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub members: Option<Vec<String>>,
    /// Whether to negate the Condition. If true, the Condition becomes
    /// a NAND over its non-empty fields, each field must be false for
    /// the Condition overall to be satisfied. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub negate: Option<bool>,
    /// The request must originate from one of the provided
    /// countries/regions.
    /// Format: A valid ISO 3166-1 alpha-2 code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regions: Option<Vec<String>>,
    /// A list of other access levels defined in the same Policy,
    /// referenced by resource name. Referencing an AccessLevel which
    /// does not exist is an error. All access levels listed must be
    /// granted for the Condition to be true.
    /// Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredAccessLevels"
    )]
    #[builder(default)]
    pub required_access_levels: Option<Vec<String>>,
    /// The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with ip_subnetworks.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcNetworkSources"
    )]
    #[builder(default)]
    pub vpc_network_sources: Option<Vec<AccessLevelForProviderBasicConditionsVpcNetworkSources>>,
}

/// Device specific restrictions, all restrictions must hold for
/// the Condition to be true. If not specified, all devices are
/// allowed.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelForProviderBasicConditionsDevicePolicy {
    /// A list of allowed device management levels.
    /// An empty list allows all management levels.
    /// Each value may be one of: MANAGEMENT_UNSPECIFIED, NONE, BASIC, COMPLETE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedDeviceManagementLevels"
    )]
    #[builder(default)]
    pub allowed_device_management_levels: Option<Vec<String>>,
    /// A list of allowed encryptions statuses.
    /// An empty list allows all statuses.
    /// Each value may be one of: ENCRYPTION_UNSPECIFIED, ENCRYPTION_UNSUPPORTED, UNENCRYPTED, ENCRYPTED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedEncryptionStatuses"
    )]
    #[builder(default)]
    pub allowed_encryption_statuses: Option<Vec<String>>,
    /// A list of allowed OS versions.
    /// An empty list allows all types and all versions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "osConstraints"
    )]
    #[builder(default)]
    pub os_constraints: Option<Vec<AccessLevelForProviderBasicConditionsDevicePolicyOsConstraints>>,
    /// Whether the device needs to be approved by the customer admin.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAdminApproval"
    )]
    #[builder(default)]
    pub require_admin_approval: Option<bool>,
    /// Whether the device needs to be corp owned.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireCorpOwned"
    )]
    #[builder(default)]
    pub require_corp_owned: Option<bool>,
    /// Whether or not screenlock is required for the DevicePolicy
    /// to be true. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireScreenLock"
    )]
    #[builder(default)]
    pub require_screen_lock: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelForProviderBasicConditionsDevicePolicyOsConstraints {
    /// The minimum allowed OS version. If not set, any version
    /// of this OS satisfies the constraint.
    /// Format: "major.minor.patch" such as "10.5.301", "9.2.1".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minimumVersion"
    )]
    #[builder(default)]
    pub minimum_version: Option<String>,
    /// The operating system type of the device.
    /// Possible values are: OS_UNSPECIFIED, DESKTOP_MAC, DESKTOP_WINDOWS, DESKTOP_LINUX, DESKTOP_CHROME_OS, ANDROID, IOS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osType")]
    #[builder(default)]
    pub os_type: Option<String>,
    /// If you specify DESKTOP_CHROME_OS for osType, you can optionally include requireVerifiedChromeOs to require Chrome Verified Access.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireVerifiedChromeOs"
    )]
    #[builder(default)]
    pub require_verified_chrome_os: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelForProviderBasicConditionsVpcNetworkSources {
    /// Sub networks within a VPC network.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSubnetwork"
    )]
    #[builder(default)]
    pub vpc_subnetwork: Option<AccessLevelForProviderBasicConditionsVpcNetworkSourcesVpcSubnetwork>,
}

/// Sub networks within a VPC network.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelForProviderBasicConditionsVpcNetworkSourcesVpcSubnetwork {
    /// Required. Network name to be allowed by this Access Level. Networks of foreign organizations requires compute.network.get permission to be granted to caller.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// CIDR block IP subnetwork specification. Must be IPv4.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcIpSubnetworks"
    )]
    #[builder(default)]
    pub vpc_ip_subnetworks: Option<Vec<String>>,
}

/// Custom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request.
/// See CEL spec at: https://github.com/google/cel-spec.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelForProviderCustom {
    /// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
    /// This page details the objects and attributes that are used to the build the CEL expressions for
    /// custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expr: Option<AccessLevelForProviderCustomExpr>,
}

/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
/// This page details the objects and attributes that are used to the build the CEL expressions for
/// custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelForProviderCustomExpr {
    /// Description of the expression
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// String indicating the location of the expression for error reporting, e.g. a file name and a position in the file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// Title for the expression, i.e. a short string describing its purpose.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub title: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelInitProvider {
    /// A set of predefined conditions for the access level and a combining function.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub basic: Option<AccessLevelInitProviderBasic>,
    /// Custom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request.
    /// See CEL spec at: https://github.com/google/cel-spec.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub custom: Option<AccessLevelInitProviderCustom>,
    /// Description of the AccessLevel and its use. Does not affect behavior.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Resource name for the Access Level. The short_name component must begin
    /// with a letter and only include alphanumeric and '_'.
    /// Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The AccessPolicy this AccessLevel lives in.
    /// Format: accessPolicies/{policy_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parent: Option<String>,
    /// Human readable title. Must be unique within the Policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub title: Option<String>,
}

/// A set of predefined conditions for the access level and a combining function.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelInitProviderBasic {
    /// How the conditions list should be combined to determine if a request
    /// is granted this AccessLevel. If AND is used, each Condition in
    /// conditions must be satisfied for the AccessLevel to be applied. If
    /// OR is used, at least one Condition in conditions must be satisfied
    /// for the AccessLevel to be applied.
    /// Default value is AND.
    /// Possible values are: AND, OR.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "combiningFunction"
    )]
    #[builder(default)]
    pub combining_function: Option<String>,
    /// A set of requirements for the AccessLevel to be granted.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<AccessLevelInitProviderBasicConditions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelInitProviderBasicConditions {
    /// Device specific restrictions, all restrictions must hold for
    /// the Condition to be true. If not specified, all devices are
    /// allowed.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "devicePolicy"
    )]
    #[builder(default)]
    pub device_policy: Option<AccessLevelInitProviderBasicConditionsDevicePolicy>,
    /// A list of CIDR block IP subnetwork specification. May be IPv4
    /// or IPv6.
    /// Note that for a CIDR IP address block, the specified IP address
    /// portion must be properly truncated (i.e. all the host bits must
    /// be zero) or the input is considered malformed. For example,
    /// "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
    /// for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
    /// is not. The originating IP of a request must be in one of the
    /// listed subnets in order for this Condition to be true.
    /// If empty, all IP addresses are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipSubnetworks"
    )]
    #[builder(default)]
    pub ip_subnetworks: Option<Vec<String>>,
    /// An allowed list of members (users, service accounts).
    /// Using groups is not supported yet.
    /// The signed-in user originating the request must be a part of one
    /// of the provided members. If not specified, a request may come
    /// from any user (logged in/not logged in, not present in any
    /// groups, etc.).
    /// Formats: user:{emailid}, serviceAccount:{emailid}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub members: Option<Vec<String>>,
    /// Whether to negate the Condition. If true, the Condition becomes
    /// a NAND over its non-empty fields, each field must be false for
    /// the Condition overall to be satisfied. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub negate: Option<bool>,
    /// The request must originate from one of the provided
    /// countries/regions.
    /// Format: A valid ISO 3166-1 alpha-2 code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regions: Option<Vec<String>>,
    /// A list of other access levels defined in the same Policy,
    /// referenced by resource name. Referencing an AccessLevel which
    /// does not exist is an error. All access levels listed must be
    /// granted for the Condition to be true.
    /// Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredAccessLevels"
    )]
    #[builder(default)]
    pub required_access_levels: Option<Vec<String>>,
    /// The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with ip_subnetworks.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcNetworkSources"
    )]
    #[builder(default)]
    pub vpc_network_sources: Option<Vec<AccessLevelInitProviderBasicConditionsVpcNetworkSources>>,
}

/// Device specific restrictions, all restrictions must hold for
/// the Condition to be true. If not specified, all devices are
/// allowed.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelInitProviderBasicConditionsDevicePolicy {
    /// A list of allowed device management levels.
    /// An empty list allows all management levels.
    /// Each value may be one of: MANAGEMENT_UNSPECIFIED, NONE, BASIC, COMPLETE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedDeviceManagementLevels"
    )]
    #[builder(default)]
    pub allowed_device_management_levels: Option<Vec<String>>,
    /// A list of allowed encryptions statuses.
    /// An empty list allows all statuses.
    /// Each value may be one of: ENCRYPTION_UNSPECIFIED, ENCRYPTION_UNSUPPORTED, UNENCRYPTED, ENCRYPTED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedEncryptionStatuses"
    )]
    #[builder(default)]
    pub allowed_encryption_statuses: Option<Vec<String>>,
    /// A list of allowed OS versions.
    /// An empty list allows all types and all versions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "osConstraints"
    )]
    #[builder(default)]
    pub os_constraints:
        Option<Vec<AccessLevelInitProviderBasicConditionsDevicePolicyOsConstraints>>,
    /// Whether the device needs to be approved by the customer admin.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAdminApproval"
    )]
    #[builder(default)]
    pub require_admin_approval: Option<bool>,
    /// Whether the device needs to be corp owned.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireCorpOwned"
    )]
    #[builder(default)]
    pub require_corp_owned: Option<bool>,
    /// Whether or not screenlock is required for the DevicePolicy
    /// to be true. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireScreenLock"
    )]
    #[builder(default)]
    pub require_screen_lock: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelInitProviderBasicConditionsDevicePolicyOsConstraints {
    /// The minimum allowed OS version. If not set, any version
    /// of this OS satisfies the constraint.
    /// Format: "major.minor.patch" such as "10.5.301", "9.2.1".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minimumVersion"
    )]
    #[builder(default)]
    pub minimum_version: Option<String>,
    /// The operating system type of the device.
    /// Possible values are: OS_UNSPECIFIED, DESKTOP_MAC, DESKTOP_WINDOWS, DESKTOP_LINUX, DESKTOP_CHROME_OS, ANDROID, IOS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osType")]
    #[builder(default)]
    pub os_type: Option<String>,
    /// If you specify DESKTOP_CHROME_OS for osType, you can optionally include requireVerifiedChromeOs to require Chrome Verified Access.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireVerifiedChromeOs"
    )]
    #[builder(default)]
    pub require_verified_chrome_os: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelInitProviderBasicConditionsVpcNetworkSources {
    /// Sub networks within a VPC network.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSubnetwork"
    )]
    #[builder(default)]
    pub vpc_subnetwork:
        Option<AccessLevelInitProviderBasicConditionsVpcNetworkSourcesVpcSubnetwork>,
}

/// Sub networks within a VPC network.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelInitProviderBasicConditionsVpcNetworkSourcesVpcSubnetwork {
    /// Required. Network name to be allowed by this Access Level. Networks of foreign organizations requires compute.network.get permission to be granted to caller.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// CIDR block IP subnetwork specification. Must be IPv4.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcIpSubnetworks"
    )]
    #[builder(default)]
    pub vpc_ip_subnetworks: Option<Vec<String>>,
}

/// Custom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request.
/// See CEL spec at: https://github.com/google/cel-spec.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelInitProviderCustom {
    /// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
    /// This page details the objects and attributes that are used to the build the CEL expressions for
    /// custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expr: Option<AccessLevelInitProviderCustomExpr>,
}

/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
/// This page details the objects and attributes that are used to the build the CEL expressions for
/// custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelInitProviderCustomExpr {
    /// Description of the expression
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// String indicating the location of the expression for error reporting, e.g. a file name and a position in the file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// Title for the expression, i.e. a short string describing its purpose.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub title: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AccessLevelProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AccessLevelProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AccessLevelProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AccessLevelProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AccessLevelProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<AccessLevelPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<AccessLevelPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AccessLevelPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AccessLevelPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AccessLevelPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AccessLevelPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AccessLevelPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AccessLevelStatus defines the observed state of AccessLevel.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<AccessLevelStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatusAtProvider {
    /// A set of predefined conditions for the access level and a combining function.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub basic: Option<AccessLevelStatusAtProviderBasic>,
    /// Custom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request.
    /// See CEL spec at: https://github.com/google/cel-spec.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub custom: Option<AccessLevelStatusAtProviderCustom>,
    /// Description of the AccessLevel and its use. Does not affect behavior.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// an identifier for the resource with format {{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Resource name for the Access Level. The short_name component must begin
    /// with a letter and only include alphanumeric and '_'.
    /// Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The AccessPolicy this AccessLevel lives in.
    /// Format: accessPolicies/{policy_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parent: Option<String>,
    /// Human readable title. Must be unique within the Policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub title: Option<String>,
}

/// A set of predefined conditions for the access level and a combining function.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatusAtProviderBasic {
    /// How the conditions list should be combined to determine if a request
    /// is granted this AccessLevel. If AND is used, each Condition in
    /// conditions must be satisfied for the AccessLevel to be applied. If
    /// OR is used, at least one Condition in conditions must be satisfied
    /// for the AccessLevel to be applied.
    /// Default value is AND.
    /// Possible values are: AND, OR.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "combiningFunction"
    )]
    #[builder(default)]
    pub combining_function: Option<String>,
    /// A set of requirements for the AccessLevel to be granted.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<AccessLevelStatusAtProviderBasicConditions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatusAtProviderBasicConditions {
    /// Device specific restrictions, all restrictions must hold for
    /// the Condition to be true. If not specified, all devices are
    /// allowed.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "devicePolicy"
    )]
    #[builder(default)]
    pub device_policy: Option<AccessLevelStatusAtProviderBasicConditionsDevicePolicy>,
    /// A list of CIDR block IP subnetwork specification. May be IPv4
    /// or IPv6.
    /// Note that for a CIDR IP address block, the specified IP address
    /// portion must be properly truncated (i.e. all the host bits must
    /// be zero) or the input is considered malformed. For example,
    /// "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
    /// for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
    /// is not. The originating IP of a request must be in one of the
    /// listed subnets in order for this Condition to be true.
    /// If empty, all IP addresses are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipSubnetworks"
    )]
    #[builder(default)]
    pub ip_subnetworks: Option<Vec<String>>,
    /// An allowed list of members (users, service accounts).
    /// Using groups is not supported yet.
    /// The signed-in user originating the request must be a part of one
    /// of the provided members. If not specified, a request may come
    /// from any user (logged in/not logged in, not present in any
    /// groups, etc.).
    /// Formats: user:{emailid}, serviceAccount:{emailid}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub members: Option<Vec<String>>,
    /// Whether to negate the Condition. If true, the Condition becomes
    /// a NAND over its non-empty fields, each field must be false for
    /// the Condition overall to be satisfied. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub negate: Option<bool>,
    /// The request must originate from one of the provided
    /// countries/regions.
    /// Format: A valid ISO 3166-1 alpha-2 code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub regions: Option<Vec<String>>,
    /// A list of other access levels defined in the same Policy,
    /// referenced by resource name. Referencing an AccessLevel which
    /// does not exist is an error. All access levels listed must be
    /// granted for the Condition to be true.
    /// Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredAccessLevels"
    )]
    #[builder(default)]
    pub required_access_levels: Option<Vec<String>>,
    /// The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with ip_subnetworks.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcNetworkSources"
    )]
    #[builder(default)]
    pub vpc_network_sources:
        Option<Vec<AccessLevelStatusAtProviderBasicConditionsVpcNetworkSources>>,
}

/// Device specific restrictions, all restrictions must hold for
/// the Condition to be true. If not specified, all devices are
/// allowed.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatusAtProviderBasicConditionsDevicePolicy {
    /// A list of allowed device management levels.
    /// An empty list allows all management levels.
    /// Each value may be one of: MANAGEMENT_UNSPECIFIED, NONE, BASIC, COMPLETE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedDeviceManagementLevels"
    )]
    #[builder(default)]
    pub allowed_device_management_levels: Option<Vec<String>>,
    /// A list of allowed encryptions statuses.
    /// An empty list allows all statuses.
    /// Each value may be one of: ENCRYPTION_UNSPECIFIED, ENCRYPTION_UNSUPPORTED, UNENCRYPTED, ENCRYPTED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedEncryptionStatuses"
    )]
    #[builder(default)]
    pub allowed_encryption_statuses: Option<Vec<String>>,
    /// A list of allowed OS versions.
    /// An empty list allows all types and all versions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "osConstraints"
    )]
    #[builder(default)]
    pub os_constraints:
        Option<Vec<AccessLevelStatusAtProviderBasicConditionsDevicePolicyOsConstraints>>,
    /// Whether the device needs to be approved by the customer admin.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAdminApproval"
    )]
    #[builder(default)]
    pub require_admin_approval: Option<bool>,
    /// Whether the device needs to be corp owned.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireCorpOwned"
    )]
    #[builder(default)]
    pub require_corp_owned: Option<bool>,
    /// Whether or not screenlock is required for the DevicePolicy
    /// to be true. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireScreenLock"
    )]
    #[builder(default)]
    pub require_screen_lock: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatusAtProviderBasicConditionsDevicePolicyOsConstraints {
    /// The minimum allowed OS version. If not set, any version
    /// of this OS satisfies the constraint.
    /// Format: "major.minor.patch" such as "10.5.301", "9.2.1".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minimumVersion"
    )]
    #[builder(default)]
    pub minimum_version: Option<String>,
    /// The operating system type of the device.
    /// Possible values are: OS_UNSPECIFIED, DESKTOP_MAC, DESKTOP_WINDOWS, DESKTOP_LINUX, DESKTOP_CHROME_OS, ANDROID, IOS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osType")]
    #[builder(default)]
    pub os_type: Option<String>,
    /// If you specify DESKTOP_CHROME_OS for osType, you can optionally include requireVerifiedChromeOs to require Chrome Verified Access.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireVerifiedChromeOs"
    )]
    #[builder(default)]
    pub require_verified_chrome_os: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatusAtProviderBasicConditionsVpcNetworkSources {
    /// Sub networks within a VPC network.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSubnetwork"
    )]
    #[builder(default)]
    pub vpc_subnetwork:
        Option<AccessLevelStatusAtProviderBasicConditionsVpcNetworkSourcesVpcSubnetwork>,
}

/// Sub networks within a VPC network.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatusAtProviderBasicConditionsVpcNetworkSourcesVpcSubnetwork {
    /// Required. Network name to be allowed by this Access Level. Networks of foreign organizations requires compute.network.get permission to be granted to caller.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// CIDR block IP subnetwork specification. Must be IPv4.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcIpSubnetworks"
    )]
    #[builder(default)]
    pub vpc_ip_subnetworks: Option<Vec<String>>,
}

/// Custom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request.
/// See CEL spec at: https://github.com/google/cel-spec.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatusAtProviderCustom {
    /// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
    /// This page details the objects and attributes that are used to the build the CEL expressions for
    /// custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expr: Option<AccessLevelStatusAtProviderCustomExpr>,
}

/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
/// This page details the objects and attributes that are used to the build the CEL expressions for
/// custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AccessLevelStatusAtProviderCustomExpr {
    /// Description of the expression
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub expression: Option<String>,
    /// String indicating the location of the expression for error reporting, e.g. a file name and a position in the file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// Title for the expression, i.e. a short string describing its purpose.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub title: Option<String>,
}

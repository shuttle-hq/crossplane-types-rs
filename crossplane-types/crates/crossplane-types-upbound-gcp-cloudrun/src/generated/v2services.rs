// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// V2ServiceSpec defines the desired state of V2Service
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "cloudrun.gcp.upbound.io", version = "v1beta2", kind = "V2Service", plural = "v2services")]
#[kube(status = "V2ServiceStatus")]
pub struct V2ServiceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<V2ServiceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: V2ServiceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<V2ServiceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<V2ServiceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<V2ServicePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<V2ServiceWriteConnectionSecretToRef>,
}

/// V2ServiceSpec defines the desired state of V2Service
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProvider {
    /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
    /// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system annotations in v1 now have a corresponding field in v2 RevisionTemplate.
    /// This field follows Kubernetes annotations' namespacing, limits, and rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Settings for the Binary Authorization feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "binaryAuthorization")]
    #[builder(default)]
    pub binary_authorization: Option<V2ServiceForProviderBinaryAuthorization>,
    /// Arbitrary identifier for the API client.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub client: Option<String>,
    /// Arbitrary version identifier for the API client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientVersion")]
    #[builder(default)]
    pub client_version: Option<String>,
    /// One or more custom audiences that you want this service to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
    /// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAudiences")]
    #[builder(default)]
    pub custom_audiences: Option<Vec<String>>,
    /// User-provided description of the Service. This field currently has a 512-character limit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
    /// Possible values are: INGRESS_TRAFFIC_ALL, INGRESS_TRAFFIC_INTERNAL_ONLY, INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ingress: Option<String>,
    /// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc.
    /// For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
    /// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system labels in v1 now have a corresponding field in v2 RevisionTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA.
    /// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
    /// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
    /// Possible values are: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchStage")]
    #[builder(default)]
    pub launch_stage: Option<String>,
    /// The location of the cloud run service
    pub location: String,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The template used to create revisions for this Service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub template: Option<V2ServiceForProviderTemplate>,
    /// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub traffic: Option<Vec<V2ServiceForProviderTraffic>>,
}

/// Settings for the Binary Authorization feature.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderBinaryAuthorization {
    /// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "breakglassJustification")]
    #[builder(default)]
    pub breakglass_justification: Option<String>,
    /// The path to a binary authorization policy. Format: projects/{project}/platforms/cloudRun/{policy-name}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<String>,
    /// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDefault")]
    #[builder(default)]
    pub use_default: Option<bool>,
}

/// The template used to create revisions for this Service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplate {
    /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
    /// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system annotations in v1 now have a corresponding field in v2 RevisionTemplate.
    /// This field follows Kubernetes annotations' namespacing, limits, and rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Holds the containers that define the unit of execution for this Service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub containers: Option<Vec<V2ServiceForProviderTemplateContainers>>,
    /// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKey")]
    #[builder(default)]
    pub encryption_key: Option<String>,
    /// The sandbox environment to host this Revision.
    /// Possible values are: EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionEnvironment")]
    #[builder(default)]
    pub execution_environment: Option<String>,
    /// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc.
    /// For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
    /// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system labels in v1 now have a corresponding field in v2 RevisionTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Sets the maximum number of requests that each serving instance can receive.
    /// If not specified or 0, defaults to 80 when requested CPU >= 1 and defaults to 1 when requested CPU < 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstanceRequestConcurrency")]
    #[builder(default)]
    pub max_instance_request_concurrency: Option<f64>,
    /// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// Scaling settings for this Revision.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub scaling: Option<V2ServiceForProviderTemplateScaling>,
    /// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    #[builder(default)]
    pub service_account: Option<String>,
    /// Enables session affinity. For more information, go to https://cloud.google.com/run/docs/configuring/session-affinity
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    #[builder(default)]
    pub session_affinity: Option<bool>,
    /// Max allowed time for an instance to respond to a request.
    /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub timeout: Option<String>,
    /// A list of Volumes to make available to containers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub volumes: Option<Vec<V2ServiceForProviderTemplateVolumes>>,
    /// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcAccess")]
    #[builder(default)]
    pub vpc_access: Option<V2ServiceForProviderTemplateVpcAccess>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainers {
    /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub command: Option<Vec<String>>,
    /// Containers which should be started before this container. If specified the container will wait to start until all containers with the listed names are healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dependsOn")]
    #[builder(default)]
    pub depends_on: Option<Vec<String>>,
    /// List of environment variables to set in the container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub env: Option<Vec<V2ServiceForProviderTemplateContainersEnv>>,
    /// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub image: Option<String>,
    /// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    #[builder(default)]
    pub liveness_probe: Option<V2ServiceForProviderTemplateContainersLivenessProbe>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
    /// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ports: Option<V2ServiceForProviderTemplateContainersPorts>,
    /// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resources: Option<V2ServiceForProviderTemplateContainersResources>,
    /// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    #[builder(default)]
    pub startup_probe: Option<V2ServiceForProviderTemplateContainersStartupProbe>,
    /// Volume to mount into the container's filesystem.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    #[builder(default)]
    pub volume_mounts: Option<Vec<V2ServiceForProviderTemplateContainersVolumeMounts>>,
    /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    #[builder(default)]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersEnv {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
    /// Source for the environment variable's value.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSource")]
    #[builder(default)]
    pub value_source: Option<V2ServiceForProviderTemplateContainersEnvValueSource>,
}

/// Source for the environment variable's value.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersEnvValueSource {
    /// Selects a secret and a specific version from Cloud Secret Manager.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    #[builder(default)]
    pub secret_key_ref: Option<V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRef>,
}

/// Selects a secret and a specific version from Cloud Secret Manager.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRef {
    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<String>,
    /// Reference to a Secret in secretmanager to populate secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    #[builder(default)]
    pub secret_ref: Option<V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRef>,
    /// Selector for a Secret in secretmanager to populate secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretSelector")]
    #[builder(default)]
    pub secret_selector: Option<V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelector>,
    /// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Reference to a Secret in secretmanager to populate secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretmanager to populate secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersLivenessProbe {
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<V2ServiceForProviderTemplateContainersLivenessProbeGrpc>,
    /// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<V2ServiceForProviderTemplateContainersLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    #[builder(default)]
    pub tcp_socket: Option<V2ServiceForProviderTemplateContainersLivenessProbeTcpSocket>,
    /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersLivenessProbeGrpc {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersLivenessProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<V2ServiceForProviderTemplateContainersLivenessProbeHttpGetHttpHeaders>>,
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersLivenessProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersLivenessProbeTcpSocket {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

/// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
/// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersPorts {
    /// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerPort")]
    #[builder(default)]
    pub container_port: Option<f64>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersResources {
    /// Determines whether CPU is only allocated during requests. True by default if the parent resources field is not set. However, if
    /// resources is set, this field must be explicitly set to true to preserve the default behavior.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuIdle")]
    #[builder(default)]
    pub cpu_idle: Option<bool>,
    /// Only memory and CPU are supported. Use key cpu for CPU limit and memory for memory limit. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limits: Option<HashMap<String, String>>,
    /// Determines whether CPU should be boosted on startup of a new container instance above the requested CPU threshold, this can help reduce cold-start latency.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupCpuBoost")]
    #[builder(default)]
    pub startup_cpu_boost: Option<bool>,
}

/// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersStartupProbe {
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<V2ServiceForProviderTemplateContainersStartupProbeGrpc>,
    /// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<V2ServiceForProviderTemplateContainersStartupProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    #[builder(default)]
    pub tcp_socket: Option<V2ServiceForProviderTemplateContainersStartupProbeTcpSocket>,
    /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersStartupProbeGrpc {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersStartupProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<V2ServiceForProviderTemplateContainersStartupProbeHttpGetHttpHeaders>>,
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersStartupProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersStartupProbeTcpSocket {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateContainersVolumeMounts {
    /// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Scaling settings for this Revision.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateScaling {
    /// Maximum number of serving instances that this resource should have.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstanceCount")]
    #[builder(default)]
    pub max_instance_count: Option<f64>,
    /// Minimum number of serving instances that this resource should have.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minInstanceCount")]
    #[builder(default)]
    pub min_instance_count: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumes {
    /// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSqlInstance")]
    #[builder(default)]
    pub cloud_sql_instance: Option<V2ServiceForProviderTemplateVolumesCloudSqlInstance>,
    /// Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment and requires launch-stage to be set to ALPHA or BETA.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gcs: Option<V2ServiceForProviderTemplateVolumesGcs>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Represents an NFS mount.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nfs: Option<V2ServiceForProviderTemplateVolumesNfs>,
    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<V2ServiceForProviderTemplateVolumesSecret>,
}

/// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesCloudSqlInstance {
    /// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub instances: Option<Vec<String>>,
    /// References to DatabaseInstance in sql to populate instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancesRefs")]
    #[builder(default)]
    pub instances_refs: Option<Vec<V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesRefs>>,
    /// Selector for a list of DatabaseInstance in sql to populate instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancesSelector")]
    #[builder(default)]
    pub instances_selector: Option<V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of DatabaseInstance in sql to populate instances.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment and requires launch-stage to be set to ALPHA or BETA.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesGcs {
    /// GCS Bucket name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// Reference to a Bucket in storage to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    #[builder(default)]
    pub bucket_ref: Option<V2ServiceForProviderTemplateVolumesGcsBucketRef>,
    /// Selector for a Bucket in storage to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketSelector")]
    #[builder(default)]
    pub bucket_selector: Option<V2ServiceForProviderTemplateVolumesGcsBucketSelector>,
    /// If true, mount the NFS volume as read only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    #[builder(default)]
    pub read_only: Option<bool>,
}

/// Reference to a Bucket in storage to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesGcsBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceForProviderTemplateVolumesGcsBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesGcsBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceForProviderTemplateVolumesGcsBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceForProviderTemplateVolumesGcsBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesGcsBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesGcsBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in storage to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesGcsBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceForProviderTemplateVolumesGcsBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesGcsBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceForProviderTemplateVolumesGcsBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceForProviderTemplateVolumesGcsBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesGcsBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesGcsBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Represents an NFS mount.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesNfs {
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// If true, mount the NFS volume as read only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    #[builder(default)]
    pub read_only: Option<bool>,
    /// Hostname or IP address of the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub server: Option<String>,
}

/// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesSecret {
    /// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    #[builder(default)]
    pub default_mode: Option<f64>,
    /// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub items: Option<Vec<V2ServiceForProviderTemplateVolumesSecretItems>>,
    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<String>,
    /// Reference to a Secret in secretmanager to populate secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    #[builder(default)]
    pub secret_ref: Option<V2ServiceForProviderTemplateVolumesSecretSecretRef>,
    /// Selector for a Secret in secretmanager to populate secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretSelector")]
    #[builder(default)]
    pub secret_selector: Option<V2ServiceForProviderTemplateVolumesSecretSecretSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesSecretItems {
    /// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<f64>,
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Reference to a Secret in secretmanager to populate secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesSecretSecretRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceForProviderTemplateVolumesSecretSecretRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesSecretSecretRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceForProviderTemplateVolumesSecretSecretRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceForProviderTemplateVolumesSecretSecretRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesSecretSecretRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesSecretSecretRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretmanager to populate secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesSecretSecretSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceForProviderTemplateVolumesSecretSecretSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVolumesSecretSecretSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceForProviderTemplateVolumesSecretSecretSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceForProviderTemplateVolumesSecretSecretSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesSecretSecretSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceForProviderTemplateVolumesSecretSecretSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVpcAccess {
    /// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub connector: Option<String>,
    /// Traffic VPC egress settings.
    /// Possible values are: ALL_TRAFFIC, PRIVATE_RANGES_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub egress: Option<String>,
    /// Direct VPC egress settings. Currently only single network interface is supported.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaces")]
    #[builder(default)]
    pub network_interfaces: Option<Vec<V2ServiceForProviderTemplateVpcAccessNetworkInterfaces>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTemplateVpcAccessNetworkInterfaces {
    /// The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both
    /// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be
    /// looked up from the subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both
    /// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the
    /// subnetwork with the same name with the network will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subnetwork: Option<String>,
    /// Network tags applied to this Cloud Run service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceForProviderTraffic {
    /// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub percent: Option<f64>,
    /// Revision to which to send this portion of traffic, if traffic allocation is by revision.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// Indicates a string to be part of the URI to exclusively reference this target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
    /// The allocation type for this traffic target.
    /// Possible values are: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST, TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProvider {
    /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
    /// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system annotations in v1 now have a corresponding field in v2 RevisionTemplate.
    /// This field follows Kubernetes annotations' namespacing, limits, and rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Settings for the Binary Authorization feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "binaryAuthorization")]
    #[builder(default)]
    pub binary_authorization: Option<V2ServiceInitProviderBinaryAuthorization>,
    /// Arbitrary identifier for the API client.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub client: Option<String>,
    /// Arbitrary version identifier for the API client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientVersion")]
    #[builder(default)]
    pub client_version: Option<String>,
    /// One or more custom audiences that you want this service to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
    /// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAudiences")]
    #[builder(default)]
    pub custom_audiences: Option<Vec<String>>,
    /// User-provided description of the Service. This field currently has a 512-character limit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
    /// Possible values are: INGRESS_TRAFFIC_ALL, INGRESS_TRAFFIC_INTERNAL_ONLY, INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ingress: Option<String>,
    /// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc.
    /// For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
    /// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system labels in v1 now have a corresponding field in v2 RevisionTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA.
    /// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
    /// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
    /// Possible values are: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchStage")]
    #[builder(default)]
    pub launch_stage: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The template used to create revisions for this Service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub template: Option<V2ServiceInitProviderTemplate>,
    /// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub traffic: Option<Vec<V2ServiceInitProviderTraffic>>,
}

/// Settings for the Binary Authorization feature.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderBinaryAuthorization {
    /// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "breakglassJustification")]
    #[builder(default)]
    pub breakglass_justification: Option<String>,
    /// The path to a binary authorization policy. Format: projects/{project}/platforms/cloudRun/{policy-name}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<String>,
    /// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDefault")]
    #[builder(default)]
    pub use_default: Option<bool>,
}

/// The template used to create revisions for this Service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplate {
    /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
    /// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system annotations in v1 now have a corresponding field in v2 RevisionTemplate.
    /// This field follows Kubernetes annotations' namespacing, limits, and rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Holds the containers that define the unit of execution for this Service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub containers: Option<Vec<V2ServiceInitProviderTemplateContainers>>,
    /// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKey")]
    #[builder(default)]
    pub encryption_key: Option<String>,
    /// The sandbox environment to host this Revision.
    /// Possible values are: EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionEnvironment")]
    #[builder(default)]
    pub execution_environment: Option<String>,
    /// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc.
    /// For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
    /// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system labels in v1 now have a corresponding field in v2 RevisionTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Sets the maximum number of requests that each serving instance can receive.
    /// If not specified or 0, defaults to 80 when requested CPU >= 1 and defaults to 1 when requested CPU < 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstanceRequestConcurrency")]
    #[builder(default)]
    pub max_instance_request_concurrency: Option<f64>,
    /// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// Scaling settings for this Revision.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub scaling: Option<V2ServiceInitProviderTemplateScaling>,
    /// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    #[builder(default)]
    pub service_account: Option<String>,
    /// Enables session affinity. For more information, go to https://cloud.google.com/run/docs/configuring/session-affinity
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    #[builder(default)]
    pub session_affinity: Option<bool>,
    /// Max allowed time for an instance to respond to a request.
    /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub timeout: Option<String>,
    /// A list of Volumes to make available to containers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub volumes: Option<Vec<V2ServiceInitProviderTemplateVolumes>>,
    /// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcAccess")]
    #[builder(default)]
    pub vpc_access: Option<V2ServiceInitProviderTemplateVpcAccess>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainers {
    /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub command: Option<Vec<String>>,
    /// Containers which should be started before this container. If specified the container will wait to start until all containers with the listed names are healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dependsOn")]
    #[builder(default)]
    pub depends_on: Option<Vec<String>>,
    /// List of environment variables to set in the container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub env: Option<Vec<V2ServiceInitProviderTemplateContainersEnv>>,
    /// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub image: Option<String>,
    /// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    #[builder(default)]
    pub liveness_probe: Option<V2ServiceInitProviderTemplateContainersLivenessProbe>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
    /// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ports: Option<V2ServiceInitProviderTemplateContainersPorts>,
    /// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resources: Option<V2ServiceInitProviderTemplateContainersResources>,
    /// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    #[builder(default)]
    pub startup_probe: Option<V2ServiceInitProviderTemplateContainersStartupProbe>,
    /// Volume to mount into the container's filesystem.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    #[builder(default)]
    pub volume_mounts: Option<Vec<V2ServiceInitProviderTemplateContainersVolumeMounts>>,
    /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    #[builder(default)]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersEnv {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
    /// Source for the environment variable's value.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSource")]
    #[builder(default)]
    pub value_source: Option<V2ServiceInitProviderTemplateContainersEnvValueSource>,
}

/// Source for the environment variable's value.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersEnvValueSource {
    /// Selects a secret and a specific version from Cloud Secret Manager.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    #[builder(default)]
    pub secret_key_ref: Option<V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRef>,
}

/// Selects a secret and a specific version from Cloud Secret Manager.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRef {
    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<String>,
    /// Reference to a Secret in secretmanager to populate secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    #[builder(default)]
    pub secret_ref: Option<V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRef>,
    /// Selector for a Secret in secretmanager to populate secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretSelector")]
    #[builder(default)]
    pub secret_selector: Option<V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelector>,
    /// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Reference to a Secret in secretmanager to populate secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretmanager to populate secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateContainersEnvValueSourceSecretKeyRefSecretSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersLivenessProbe {
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<V2ServiceInitProviderTemplateContainersLivenessProbeGrpc>,
    /// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<V2ServiceInitProviderTemplateContainersLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    #[builder(default)]
    pub tcp_socket: Option<V2ServiceInitProviderTemplateContainersLivenessProbeTcpSocket>,
    /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersLivenessProbeGrpc {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersLivenessProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<V2ServiceInitProviderTemplateContainersLivenessProbeHttpGetHttpHeaders>>,
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersLivenessProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersLivenessProbeTcpSocket {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

/// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
/// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersPorts {
    /// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerPort")]
    #[builder(default)]
    pub container_port: Option<f64>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersResources {
    /// Determines whether CPU is only allocated during requests. True by default if the parent resources field is not set. However, if
    /// resources is set, this field must be explicitly set to true to preserve the default behavior.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuIdle")]
    #[builder(default)]
    pub cpu_idle: Option<bool>,
    /// Only memory and CPU are supported. Use key cpu for CPU limit and memory for memory limit. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limits: Option<HashMap<String, String>>,
    /// Determines whether CPU should be boosted on startup of a new container instance above the requested CPU threshold, this can help reduce cold-start latency.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupCpuBoost")]
    #[builder(default)]
    pub startup_cpu_boost: Option<bool>,
}

/// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersStartupProbe {
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<V2ServiceInitProviderTemplateContainersStartupProbeGrpc>,
    /// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<V2ServiceInitProviderTemplateContainersStartupProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    #[builder(default)]
    pub tcp_socket: Option<V2ServiceInitProviderTemplateContainersStartupProbeTcpSocket>,
    /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersStartupProbeGrpc {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersStartupProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<V2ServiceInitProviderTemplateContainersStartupProbeHttpGetHttpHeaders>>,
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersStartupProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersStartupProbeTcpSocket {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateContainersVolumeMounts {
    /// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Scaling settings for this Revision.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateScaling {
    /// Maximum number of serving instances that this resource should have.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstanceCount")]
    #[builder(default)]
    pub max_instance_count: Option<f64>,
    /// Minimum number of serving instances that this resource should have.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minInstanceCount")]
    #[builder(default)]
    pub min_instance_count: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumes {
    /// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSqlInstance")]
    #[builder(default)]
    pub cloud_sql_instance: Option<V2ServiceInitProviderTemplateVolumesCloudSqlInstance>,
    /// Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment and requires launch-stage to be set to ALPHA or BETA.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gcs: Option<V2ServiceInitProviderTemplateVolumesGcs>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Represents an NFS mount.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nfs: Option<V2ServiceInitProviderTemplateVolumesNfs>,
    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<V2ServiceInitProviderTemplateVolumesSecret>,
}

/// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesCloudSqlInstance {
    /// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub instances: Option<Vec<String>>,
    /// References to DatabaseInstance in sql to populate instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancesRefs")]
    #[builder(default)]
    pub instances_refs: Option<Vec<V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesRefs>>,
    /// Selector for a list of DatabaseInstance in sql to populate instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancesSelector")]
    #[builder(default)]
    pub instances_selector: Option<V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of DatabaseInstance in sql to populate instances.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesCloudSqlInstanceInstancesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment and requires launch-stage to be set to ALPHA or BETA.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesGcs {
    /// GCS Bucket name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// Reference to a Bucket in storage to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    #[builder(default)]
    pub bucket_ref: Option<V2ServiceInitProviderTemplateVolumesGcsBucketRef>,
    /// Selector for a Bucket in storage to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketSelector")]
    #[builder(default)]
    pub bucket_selector: Option<V2ServiceInitProviderTemplateVolumesGcsBucketSelector>,
    /// If true, mount the NFS volume as read only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    #[builder(default)]
    pub read_only: Option<bool>,
}

/// Reference to a Bucket in storage to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesGcsBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceInitProviderTemplateVolumesGcsBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesGcsBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceInitProviderTemplateVolumesGcsBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceInitProviderTemplateVolumesGcsBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesGcsBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesGcsBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in storage to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesGcsBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceInitProviderTemplateVolumesGcsBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesGcsBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceInitProviderTemplateVolumesGcsBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceInitProviderTemplateVolumesGcsBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesGcsBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesGcsBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Represents an NFS mount.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesNfs {
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// If true, mount the NFS volume as read only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    #[builder(default)]
    pub read_only: Option<bool>,
    /// Hostname or IP address of the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub server: Option<String>,
}

/// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesSecret {
    /// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    #[builder(default)]
    pub default_mode: Option<f64>,
    /// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub items: Option<Vec<V2ServiceInitProviderTemplateVolumesSecretItems>>,
    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<String>,
    /// Reference to a Secret in secretmanager to populate secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    #[builder(default)]
    pub secret_ref: Option<V2ServiceInitProviderTemplateVolumesSecretSecretRef>,
    /// Selector for a Secret in secretmanager to populate secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretSelector")]
    #[builder(default)]
    pub secret_selector: Option<V2ServiceInitProviderTemplateVolumesSecretSecretSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesSecretItems {
    /// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<f64>,
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Reference to a Secret in secretmanager to populate secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesSecretSecretRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceInitProviderTemplateVolumesSecretSecretRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesSecretSecretRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceInitProviderTemplateVolumesSecretSecretRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceInitProviderTemplateVolumesSecretSecretRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesSecretSecretRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesSecretSecretRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretmanager to populate secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesSecretSecretSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceInitProviderTemplateVolumesSecretSecretSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVolumesSecretSecretSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceInitProviderTemplateVolumesSecretSecretSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceInitProviderTemplateVolumesSecretSecretSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesSecretSecretSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceInitProviderTemplateVolumesSecretSecretSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVpcAccess {
    /// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub connector: Option<String>,
    /// Traffic VPC egress settings.
    /// Possible values are: ALL_TRAFFIC, PRIVATE_RANGES_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub egress: Option<String>,
    /// Direct VPC egress settings. Currently only single network interface is supported.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaces")]
    #[builder(default)]
    pub network_interfaces: Option<Vec<V2ServiceInitProviderTemplateVpcAccessNetworkInterfaces>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTemplateVpcAccessNetworkInterfaces {
    /// The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both
    /// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be
    /// looked up from the subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both
    /// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the
    /// subnetwork with the same name with the network will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subnetwork: Option<String>,
    /// Network tags applied to this Cloud Run service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceInitProviderTraffic {
    /// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub percent: Option<f64>,
    /// Revision to which to send this portion of traffic, if traffic allocation is by revision.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// Indicates a string to be part of the URI to exclusively reference this target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
    /// The allocation type for this traffic target.
    /// Possible values are: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST, TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServiceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServiceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServiceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServiceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServicePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<V2ServicePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<V2ServicePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServicePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<V2ServicePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServicePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<V2ServicePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<V2ServicePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServicePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum V2ServicePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServicePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// V2ServiceStatus defines the observed state of V2Service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<V2ServiceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProvider {
    /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
    /// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system annotations in v1 now have a corresponding field in v2 RevisionTemplate.
    /// This field follows Kubernetes annotations' namespacing, limits, and rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Settings for the Binary Authorization feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "binaryAuthorization")]
    #[builder(default)]
    pub binary_authorization: Option<V2ServiceStatusAtProviderBinaryAuthorization>,
    /// Arbitrary identifier for the API client.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub client: Option<String>,
    /// Arbitrary version identifier for the API client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientVersion")]
    #[builder(default)]
    pub client_version: Option<String>,
    /// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<V2ServiceStatusAtProviderConditions>>,
    /// The creation time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    #[builder(default)]
    pub create_time: Option<String>,
    /// Email address of the authenticated creator.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub creator: Option<String>,
    /// One or more custom audiences that you want this service to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
    /// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAudiences")]
    #[builder(default)]
    pub custom_audiences: Option<Vec<String>>,
    /// The deletion time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteTime")]
    #[builder(default)]
    pub delete_time: Option<String>,
    /// User-provided description of the Service. This field currently has a 512-character limit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveAnnotations")]
    #[builder(default)]
    pub effective_annotations: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub etag: Option<String>,
    /// For a deleted resource, the time after which it will be permamently deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expireTime")]
    #[builder(default)]
    pub expire_time: Option<String>,
    /// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub generation: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/services/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
    /// Possible values are: INGRESS_TRAFFIC_ALL, INGRESS_TRAFFIC_INTERNAL_ONLY, INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ingress: Option<String>,
    /// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc.
    /// For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
    /// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system labels in v1 now have a corresponding field in v2 RevisionTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Email address of the last authenticated modifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastModifier")]
    #[builder(default)]
    pub last_modifier: Option<String>,
    /// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestCreatedRevision")]
    #[builder(default)]
    pub latest_created_revision: Option<String>,
    /// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestReadyRevision")]
    #[builder(default)]
    pub latest_ready_revision: Option<String>,
    /// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA.
    /// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
    /// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
    /// Possible values are: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchStage")]
    #[builder(default)]
    pub launch_stage: Option<String>,
    /// The location of the cloud run service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// The generation of this Service currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Returns true if the Service is currently being acted upon by the system to bring it into the desired state.
    /// When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
    /// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
    /// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in terminalCondition and conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub reconciling: Option<bool>,
    /// The template used to create revisions for this Service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub template: Option<V2ServiceStatusAtProviderTemplate>,
    /// The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminalCondition")]
    #[builder(default)]
    pub terminal_condition: Option<Vec<V2ServiceStatusAtProviderTerminalCondition>>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub traffic: Option<Vec<V2ServiceStatusAtProviderTraffic>>,
    /// Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on reconciliation process in Cloud Run.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trafficStatuses")]
    #[builder(default)]
    pub traffic_statuses: Option<Vec<V2ServiceStatusAtProviderTrafficStatuses>>,
    /// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<String>,
    /// The last-modified time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    #[builder(default)]
    pub update_time: Option<String>,
    /// The main URI in which this Service is serving traffic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}

/// Settings for the Binary Authorization feature.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderBinaryAuthorization {
    /// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "breakglassJustification")]
    #[builder(default)]
    pub breakglass_justification: Option<String>,
    /// The path to a binary authorization policy. Format: projects/{project}/platforms/cloudRun/{policy-name}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<String>,
    /// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDefault")]
    #[builder(default)]
    pub use_default: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderConditions {
    /// (Output)
    /// A reason for the execution condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionReason")]
    #[builder(default)]
    pub execution_reason: Option<String>,
    /// (Output)
    /// Last time the condition transitioned from one status to another.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    #[builder(default)]
    pub last_transition_time: Option<String>,
    /// (Output)
    /// Human readable message indicating details about the current status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<String>,
    /// (Output)
    /// A common (service-level) reason for this condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub reason: Option<String>,
    /// (Output)
    /// A reason for the revision condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionReason")]
    #[builder(default)]
    pub revision_reason: Option<String>,
    /// (Output)
    /// How to interpret failures of this condition, one of Error, Warning, Info
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub severity: Option<String>,
    /// (Output)
    /// State of the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// (Output)
    /// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// The template used to create revisions for this Service.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplate {
    /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
    /// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system annotations in v1 now have a corresponding field in v2 RevisionTemplate.
    /// This field follows Kubernetes annotations' namespacing, limits, and rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Holds the containers that define the unit of execution for this Service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub containers: Option<Vec<V2ServiceStatusAtProviderTemplateContainers>>,
    /// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKey")]
    #[builder(default)]
    pub encryption_key: Option<String>,
    /// The sandbox environment to host this Revision.
    /// Possible values are: EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionEnvironment")]
    #[builder(default)]
    pub execution_environment: Option<String>,
    /// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc.
    /// For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
    /// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
    /// All system labels in v1 now have a corresponding field in v2 RevisionTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Sets the maximum number of requests that each serving instance can receive.
    /// If not specified or 0, defaults to 80 when requested CPU >= 1 and defaults to 1 when requested CPU < 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstanceRequestConcurrency")]
    #[builder(default)]
    pub max_instance_request_concurrency: Option<f64>,
    /// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// Scaling settings for this Revision.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub scaling: Option<V2ServiceStatusAtProviderTemplateScaling>,
    /// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    #[builder(default)]
    pub service_account: Option<String>,
    /// Enables session affinity. For more information, go to https://cloud.google.com/run/docs/configuring/session-affinity
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    #[builder(default)]
    pub session_affinity: Option<bool>,
    /// Max allowed time for an instance to respond to a request.
    /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub timeout: Option<String>,
    /// A list of Volumes to make available to containers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub volumes: Option<Vec<V2ServiceStatusAtProviderTemplateVolumes>>,
    /// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcAccess")]
    #[builder(default)]
    pub vpc_access: Option<V2ServiceStatusAtProviderTemplateVpcAccess>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainers {
    /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub command: Option<Vec<String>>,
    /// Containers which should be started before this container. If specified the container will wait to start until all containers with the listed names are healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dependsOn")]
    #[builder(default)]
    pub depends_on: Option<Vec<String>>,
    /// List of environment variables to set in the container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub env: Option<Vec<V2ServiceStatusAtProviderTemplateContainersEnv>>,
    /// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub image: Option<String>,
    /// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    #[builder(default)]
    pub liveness_probe: Option<V2ServiceStatusAtProviderTemplateContainersLivenessProbe>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
    /// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ports: Option<V2ServiceStatusAtProviderTemplateContainersPorts>,
    /// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resources: Option<V2ServiceStatusAtProviderTemplateContainersResources>,
    /// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    #[builder(default)]
    pub startup_probe: Option<V2ServiceStatusAtProviderTemplateContainersStartupProbe>,
    /// Volume to mount into the container's filesystem.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    #[builder(default)]
    pub volume_mounts: Option<Vec<V2ServiceStatusAtProviderTemplateContainersVolumeMounts>>,
    /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    #[builder(default)]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersEnv {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
    /// Source for the environment variable's value.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSource")]
    #[builder(default)]
    pub value_source: Option<V2ServiceStatusAtProviderTemplateContainersEnvValueSource>,
}

/// Source for the environment variable's value.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersEnvValueSource {
    /// Selects a secret and a specific version from Cloud Secret Manager.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    #[builder(default)]
    pub secret_key_ref: Option<V2ServiceStatusAtProviderTemplateContainersEnvValueSourceSecretKeyRef>,
}

/// Selects a secret and a specific version from Cloud Secret Manager.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersEnvValueSourceSecretKeyRef {
    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<String>,
    /// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersLivenessProbe {
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<V2ServiceStatusAtProviderTemplateContainersLivenessProbeGrpc>,
    /// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<V2ServiceStatusAtProviderTemplateContainersLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    #[builder(default)]
    pub tcp_socket: Option<V2ServiceStatusAtProviderTemplateContainersLivenessProbeTcpSocket>,
    /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersLivenessProbeGrpc {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersLivenessProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<V2ServiceStatusAtProviderTemplateContainersLivenessProbeHttpGetHttpHeaders>>,
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersLivenessProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersLivenessProbeTcpSocket {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

/// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
/// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersPorts {
    /// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerPort")]
    #[builder(default)]
    pub container_port: Option<f64>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersResources {
    /// Determines whether CPU is only allocated during requests. True by default if the parent resources field is not set. However, if
    /// resources is set, this field must be explicitly set to true to preserve the default behavior.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuIdle")]
    #[builder(default)]
    pub cpu_idle: Option<bool>,
    /// Only memory and CPU are supported. Use key cpu for CPU limit and memory for memory limit. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limits: Option<HashMap<String, String>>,
    /// Determines whether CPU should be boosted on startup of a new container instance above the requested CPU threshold, this can help reduce cold-start latency.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupCpuBoost")]
    #[builder(default)]
    pub startup_cpu_boost: Option<bool>,
}

/// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersStartupProbe {
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<V2ServiceStatusAtProviderTemplateContainersStartupProbeGrpc>,
    /// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<V2ServiceStatusAtProviderTemplateContainersStartupProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    #[builder(default)]
    pub tcp_socket: Option<V2ServiceStatusAtProviderTemplateContainersStartupProbeTcpSocket>,
    /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersStartupProbeGrpc {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersStartupProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<V2ServiceStatusAtProviderTemplateContainersStartupProbeHttpGetHttpHeaders>>,
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersStartupProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersStartupProbeTcpSocket {
    /// Port number to access on the container. Must be in the range 1 to 65535.
    /// If not specified, defaults to the exposed port of the container, which
    /// is the value of container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateContainersVolumeMounts {
    /// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Scaling settings for this Revision.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateScaling {
    /// Maximum number of serving instances that this resource should have.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstanceCount")]
    #[builder(default)]
    pub max_instance_count: Option<f64>,
    /// Minimum number of serving instances that this resource should have.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minInstanceCount")]
    #[builder(default)]
    pub min_instance_count: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateVolumes {
    /// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSqlInstance")]
    #[builder(default)]
    pub cloud_sql_instance: Option<V2ServiceStatusAtProviderTemplateVolumesCloudSqlInstance>,
    /// Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment and requires launch-stage to be set to ALPHA or BETA.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gcs: Option<V2ServiceStatusAtProviderTemplateVolumesGcs>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Represents an NFS mount.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub nfs: Option<V2ServiceStatusAtProviderTemplateVolumesNfs>,
    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<V2ServiceStatusAtProviderTemplateVolumesSecret>,
}

/// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateVolumesCloudSqlInstance {
    /// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub instances: Option<Vec<String>>,
}

/// Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment and requires launch-stage to be set to ALPHA or BETA.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateVolumesGcs {
    /// GCS Bucket name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub bucket: Option<String>,
    /// If true, mount the NFS volume as read only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    #[builder(default)]
    pub read_only: Option<bool>,
}

/// Represents an NFS mount.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateVolumesNfs {
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// If true, mount the NFS volume as read only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    #[builder(default)]
    pub read_only: Option<bool>,
    /// Hostname or IP address of the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub server: Option<String>,
}

/// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateVolumesSecret {
    /// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    #[builder(default)]
    pub default_mode: Option<f64>,
    /// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub items: Option<Vec<V2ServiceStatusAtProviderTemplateVolumesSecretItems>>,
    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateVolumesSecretItems {
    /// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<f64>,
    /// Path that is exported by the NFS server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
}

/// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateVpcAccess {
    /// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub connector: Option<String>,
    /// Traffic VPC egress settings.
    /// Possible values are: ALL_TRAFFIC, PRIVATE_RANGES_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub egress: Option<String>,
    /// Direct VPC egress settings. Currently only single network interface is supported.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaces")]
    #[builder(default)]
    pub network_interfaces: Option<Vec<V2ServiceStatusAtProviderTemplateVpcAccessNetworkInterfaces>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTemplateVpcAccessNetworkInterfaces {
    /// The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both
    /// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be
    /// looked up from the subnetwork.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub network: Option<String>,
    /// The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both
    /// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the
    /// subnetwork with the same name with the network will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub subnetwork: Option<String>,
    /// Network tags applied to this Cloud Run service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTerminalCondition {
    /// (Output)
    /// A reason for the execution condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionReason")]
    #[builder(default)]
    pub execution_reason: Option<String>,
    /// (Output)
    /// Last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    #[builder(default)]
    pub last_transition_time: Option<String>,
    /// (Output)
    /// Human readable message indicating details about the current status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<String>,
    /// (Output)
    /// A common (service-level) reason for this condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub reason: Option<String>,
    /// (Output)
    /// A reason for the revision condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionReason")]
    #[builder(default)]
    pub revision_reason: Option<String>,
    /// (Output)
    /// How to interpret failures of this condition, one of Error, Warning, Info
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub severity: Option<String>,
    /// (Output)
    /// State of the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// (Output)
    /// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTraffic {
    /// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub percent: Option<f64>,
    /// Revision to which to send this portion of traffic, if traffic allocation is by revision.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// Indicates a string to be part of the URI to exclusively reference this target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
    /// The allocation type for this traffic target.
    /// Possible values are: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST, TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct V2ServiceStatusAtProviderTrafficStatuses {
    /// (Output)
    /// Specifies percent of the traffic to this Revision.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub percent: Option<f64>,
    /// (Output)
    /// Revision to which this traffic is sent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub revision: Option<String>,
    /// (Output)
    /// Indicates the string used in the URI to exclusively reference this target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
    /// (Output)
    /// The allocation type for this traffic target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// (Output)
    /// Displays the target URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uri: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use k8s_openapi::api::core::v1::ObjectReference;
}
use self::prelude::*;

/// ServiceSpec defines the desired state of Service
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "cloudrun.gcp.upbound.io", version = "v1beta2", kind = "Service", plural = "services")]
#[kube(status = "ServiceStatus")]
pub struct ServiceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<ServiceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ServiceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<ServiceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<ServiceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<ServicePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ServiceWriteConnectionSecretToRef>,
}

/// ServiceSpec defines the desired state of Service
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProvider {
    /// If set to true, the revision name (template.metadata.name) will be omitted and
    /// autogenerated by Cloud Run. This cannot be set to true while template.metadata.name
    /// is also set.
    /// (For legacy support, if template.metadata.name is unset in state while
    /// this field is set to false, the revision name will still autogenerate.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autogenerateRevisionName")]
    #[builder(default)]
    pub autogenerate_revision_name: Option<bool>,
    /// The location of the cloud run instance. eg us-central1
    pub location: String,
    /// Optional metadata for this Revision, including labels and annotations.
    /// Name will be generated by the Configuration. To set minimum instances
    /// for this revision, use the "autoscaling.knative.dev/minScale" annotation
    /// key. To set maximum instances for this revision, use the
    /// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
    /// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
    /// annotation key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ServiceForProviderMetadata>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// template holds the latest specification for the Revision to
    /// be stamped out. The template references the container image, and may also
    /// include labels and annotations that should be attached to the Revision.
    /// To correlate a Revision, and/or to force a Revision to be created when the
    /// spec doesn't otherwise change, a nonce label may be provided in the
    /// template metadata. For more details, see:
    /// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
    /// Cloud Run does not currently support referencing a build that is
    /// responsible for materializing the container image from source.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub template: Option<ServiceForProviderTemplate>,
    /// (Output)
    /// Traffic specifies how to distribute traffic over a collection of Knative Revisions
    /// and Configurations
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub traffic: Option<Vec<ServiceForProviderTraffic>>,
}

/// Optional metadata for this Revision, including labels and annotations.
/// Name will be generated by the Configuration. To set minimum instances
/// for this revision, use the "autoscaling.knative.dev/minScale" annotation
/// key. To set maximum instances for this revision, use the
/// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
/// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
/// annotation key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderMetadata {
    /// Annotations is a key value map stored with a resource that
    /// may be set by external tools to store and retrieve arbitrary metadata.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    /// Note: The Cloud Run API may add additional annotations that were not provided in your config.ignore_changes rule to the metadata.0.annotations field.
    /// Annotations with run.googleapis.com/ and autoscaling.knative.dev are restricted. Use the following annotation
    /// keys to configure features on a Revision template:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// In Cloud Run the namespace must be equal to either the
    /// project ID or project number. It will default to the resource's project.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
    /// Reference to a Project in cloudplatform to populate namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceRef")]
    #[builder(default)]
    pub namespace_ref: Option<ServiceForProviderMetadataNamespaceRef>,
    /// Selector for a Project in cloudplatform to populate namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    #[builder(default)]
    pub namespace_selector: Option<ServiceForProviderMetadataNamespaceSelector>,
}

/// Reference to a Project in cloudplatform to populate namespace.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderMetadataNamespaceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceForProviderMetadataNamespaceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderMetadataNamespaceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceForProviderMetadataNamespaceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceForProviderMetadataNamespaceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderMetadataNamespaceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderMetadataNamespaceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate namespace.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderMetadataNamespaceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceForProviderMetadataNamespaceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderMetadataNamespaceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceForProviderMetadataNamespaceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceForProviderMetadataNamespaceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderMetadataNamespaceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderMetadataNamespaceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// template holds the latest specification for the Revision to
/// be stamped out. The template references the container image, and may also
/// include labels and annotations that should be attached to the Revision.
/// To correlate a Revision, and/or to force a Revision to be created when the
/// spec doesn't otherwise change, a nonce label may be provided in the
/// template metadata. For more details, see:
/// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
/// Cloud Run does not currently support referencing a build that is
/// responsible for materializing the container image from source.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplate {
    /// Optional metadata for this Revision, including labels and annotations.
    /// Name will be generated by the Configuration. To set minimum instances
    /// for this revision, use the "autoscaling.knative.dev/minScale" annotation
    /// key. To set maximum instances for this revision, use the
    /// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
    /// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
    /// annotation key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ServiceForProviderTemplateMetadata>,
    /// RevisionSpec holds the desired state of the Revision (from the client).
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub spec: Option<ServiceForProviderTemplateSpec>,
}

/// Optional metadata for this Revision, including labels and annotations.
/// Name will be generated by the Configuration. To set minimum instances
/// for this revision, use the "autoscaling.knative.dev/minScale" annotation
/// key. To set maximum instances for this revision, use the
/// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
/// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
/// annotation key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateMetadata {
    /// Annotations is a key value map stored with a resource that
    /// may be set by external tools to store and retrieve arbitrary metadata.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    /// Note: The Cloud Run API may add additional annotations that were not provided in your config.ignore_changes rule to the metadata.0.annotations field.
    /// Annotations with run.googleapis.com/ and autoscaling.knative.dev are restricted. Use the following annotation
    /// keys to configure features on a Revision template:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// In Cloud Run the namespace must be equal to either the
    /// project ID or project number. It will default to the resource's project.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

/// RevisionSpec holds the desired state of the Revision (from the client).
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpec {
    /// ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
    /// requests per container of the Revision. If not specified or 0, defaults to 80 when
    /// requested CPU >= 1 and defaults to 1 when requested CPU < 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerConcurrency")]
    #[builder(default)]
    pub container_concurrency: Option<f64>,
    /// Containers defines the unit of execution for this Revision.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub containers: Option<Vec<ServiceForProviderTemplateSpecContainers>>,
    /// Email address of the IAM service account associated with the revision of the
    /// service. The service account represents the identity of the running revision,
    /// and determines what permissions the revision has. If not provided, the revision
    /// will use the project's default service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    #[builder(default)]
    pub service_account_name: Option<String>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
    /// Must be smaller than periodSeconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
    /// Volume represents a named volume in a container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub volumes: Option<Vec<ServiceForProviderTemplateSpecVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainers {
    /// Arguments to the entrypoint.
    /// The docker image's CMD is used if this is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell.
    /// The docker image's ENTRYPOINT is used if this is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub command: Option<Vec<String>>,
    /// List of environment variables to set in the container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub env: Option<Vec<ServiceForProviderTemplateSpecContainersEnv>>,
    /// List of sources to populate environment variables in the container.
    /// All invalid keys will be reported as an event when the container is starting.
    /// When a key exists in multiple sources, the value associated with the last source will
    /// take precedence. Values defined by an Env with a duplicate key will take
    /// precedence.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    #[builder(default)]
    pub env_from: Option<Vec<ServiceForProviderTemplateSpecContainersEnvFrom>>,
    /// Docker image name. This is most often a reference to a container located
    /// in the container registry, such as gcr.io/cloudrun/hello
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub image: Option<String>,
    /// Periodic probe of container liveness. Container will be restarted if the probe fails.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    #[builder(default)]
    pub liveness_probe: Option<ServiceForProviderTemplateSpecContainersLivenessProbe>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// List of open ports in the container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ports: Option<Vec<ServiceForProviderTemplateSpecContainersPorts>>,
    /// Compute Resources required by this container. Used to set values such as max memory
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resources: Option<ServiceForProviderTemplateSpecContainersResources>,
    /// Startup probe of application within the container.
    /// All other probes are disabled if a startup probe is provided, until it
    /// succeeds. Container will not be added to service endpoints if the probe fails.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    #[builder(default)]
    pub startup_probe: Option<ServiceForProviderTemplateSpecContainersStartupProbe>,
    /// Volume to mount into the container's filesystem.
    /// Only supports SecretVolumeSources.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    #[builder(default)]
    pub volume_mounts: Option<Vec<ServiceForProviderTemplateSpecContainersVolumeMounts>>,
    /// Container's working directory.
    /// If not specified, the container runtime's default will be used, which
    /// might be configured in the container image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    #[builder(default)]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnv {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
    /// Source for the environment variable's value. Only supports secret_key_ref.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    #[builder(default)]
    pub value_from: Option<ServiceForProviderTemplateSpecContainersEnvValueFrom>,
}

/// Source for the environment variable's value. Only supports secret_key_ref.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvValueFrom {
    /// Selects a key (version) of a secret in Secret Manager.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    #[builder(default)]
    pub secret_key_ref: Option<ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRef>,
}

/// Selects a key (version) of a secret in Secret Manager.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRef {
    /// A Cloud Secret Manager secret version. Must be 'latest' for the latest
    /// version or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Reference to a Secret in secretmanager to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default)]
    pub name_ref: Option<ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRef>,
    /// Selector for a Secret in secretmanager to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSelector")]
    #[builder(default)]
    pub name_selector: Option<ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelector>,
}

/// Reference to a Secret in secretmanager to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretmanager to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvFrom {
    /// The ConfigMap to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    #[builder(default)]
    pub config_map_ref: Option<ServiceForProviderTemplateSpecContainersEnvFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prefix: Option<String>,
    /// The Secret to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    #[builder(default)]
    pub secret_ref: Option<ServiceForProviderTemplateSpecContainersEnvFromSecretRef>,
}

/// The ConfigMap to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvFromConfigMapRef {
    /// The Secret to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    #[builder(default)]
    pub local_object_reference: Option<ServiceForProviderTemplateSpecContainersEnvFromConfigMapRefLocalObjectReference>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub optional: Option<bool>,
}

/// The Secret to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvFromConfigMapRefLocalObjectReference {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// The Secret to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvFromSecretRef {
    /// The Secret to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    #[builder(default)]
    pub local_object_reference: Option<ServiceForProviderTemplateSpecContainersEnvFromSecretRefLocalObjectReference>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub optional: Option<bool>,
}

/// The Secret to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersEnvFromSecretRefLocalObjectReference {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Periodic probe of container liveness. Container will be restarted if the probe fails.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersLivenessProbe {
    /// Minimum consecutive failures for the probe to be considered failed after
    /// having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<ServiceForProviderTemplateSpecContainersLivenessProbeGrpc>,
    /// HttpGet specifies the http request to perform.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<ServiceForProviderTemplateSpecContainersLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is
    /// initiated.
    /// Defaults to 0 seconds. Minimum value is 0. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
    /// Must be smaller than periodSeconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersLivenessProbeGrpc {
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HttpGet specifies the http request to perform.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersLivenessProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<ServiceForProviderTemplateSpecContainersLivenessProbeHttpGetHttpHeaders>>,
    /// Path exported by the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersPorts {
    /// Port number the container listens on. This must be a valid port number (between 1 and 65535). Defaults to "8080".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerPort")]
    #[builder(default)]
    pub container_port: Option<f64>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Protocol for port. Must be "TCP". Defaults to "TCP".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
}

/// Compute Resources required by this container. Used to set values such as max memory
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersResources {
    /// Limits describes the maximum amount of compute resources allowed.
    /// The values of the map is string form of the 'quantity' k8s type:
    /// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limits: Option<HashMap<String, String>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is
    /// explicitly specified, otherwise to an implementation-defined value.
    /// The values of the map is string form of the 'quantity' k8s type:
    /// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub requests: Option<HashMap<String, String>>,
}

/// Startup probe of application within the container.
/// All other probes are disabled if a startup probe is provided, until it
/// succeeds. Container will not be added to service endpoints if the probe fails.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersStartupProbe {
    /// Minimum consecutive failures for the probe to be considered failed after
    /// having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<ServiceForProviderTemplateSpecContainersStartupProbeGrpc>,
    /// HttpGet specifies the http request to perform.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<ServiceForProviderTemplateSpecContainersStartupProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is
    /// initiated.
    /// Defaults to 0 seconds. Minimum value is 0. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// TcpSocket specifies an action involving a TCP port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    #[builder(default)]
    pub tcp_socket: Option<ServiceForProviderTemplateSpecContainersStartupProbeTcpSocket>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
    /// Must be smaller than periodSeconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersStartupProbeGrpc {
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HttpGet specifies the http request to perform.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersStartupProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<ServiceForProviderTemplateSpecContainersStartupProbeHttpGetHttpHeaders>>,
    /// Path exported by the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// TcpSocket specifies an action involving a TCP port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersStartupProbeTcpSocket {
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecContainersVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecVolumes {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The secret's value will be presented as the content of a file whose
    /// name is defined in the item path. If no items are defined, the name of
    /// the file is the secret_name.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<ServiceForProviderTemplateSpecVolumesSecret>,
}

/// The secret's value will be presented as the content of a file whose
/// name is defined in the item path. If no items are defined, the name of
/// the file is the secret_name.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecVolumesSecret {
    /// Mode bits to use on created files by default. Must be a value between 0000
    /// and 0777. Defaults to 0644. Directories within the path are not affected by
    /// this setting. This might be in conflict with other options that affect the
    /// file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    #[builder(default)]
    pub default_mode: Option<f64>,
    /// If unspecified, the volume will expose a file whose name is the
    /// secret_name.
    /// If specified, the key will be used as the version to fetch from Cloud
    /// Secret Manager and the path will be the name of the file exposed in the
    /// volume. When items are defined, they must specify a key and a path.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub items: Option<Vec<ServiceForProviderTemplateSpecVolumesSecretItems>>,
    /// The name of the secret in Cloud Secret Manager. By default, the secret
    /// is assumed to be in the same project.
    /// If the secret is in another project, you must define an alias.
    /// An alias definition has the form:
    /// {alias}:projects/{project-id|project-number}/secrets/{secret-name}.
    /// If multiple alias definitions are needed, they must be separated by
    /// commas.
    /// The alias definitions must be set on the run.googleapis.com/secrets
    /// annotation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    #[builder(default)]
    pub secret_name: Option<String>,
    /// Reference to a Secret in secretmanager to populate secretName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretNameRef")]
    #[builder(default)]
    pub secret_name_ref: Option<ServiceForProviderTemplateSpecVolumesSecretSecretNameRef>,
    /// Selector for a Secret in secretmanager to populate secretName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretNameSelector")]
    #[builder(default)]
    pub secret_name_selector: Option<ServiceForProviderTemplateSpecVolumesSecretSecretNameSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecVolumesSecretItems {
    /// A Cloud Secret Manager secret version. Must be 'latest' for the latest
    /// version or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// Mode bits to use on this file, must be a value between 0000 and 0777. If
    /// not specified, the volume defaultMode will be used. This might be in
    /// conflict with other options that affect the file mode, like fsGroup, and
    /// the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<f64>,
    /// Path exported by the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Reference to a Secret in secretmanager to populate secretName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecVolumesSecretSecretNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceForProviderTemplateSpecVolumesSecretSecretNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecVolumesSecretSecretNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceForProviderTemplateSpecVolumesSecretSecretNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceForProviderTemplateSpecVolumesSecretSecretNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderTemplateSpecVolumesSecretSecretNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderTemplateSpecVolumesSecretSecretNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretmanager to populate secretName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecVolumesSecretSecretNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceForProviderTemplateSpecVolumesSecretSecretNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTemplateSpecVolumesSecretSecretNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceForProviderTemplateSpecVolumesSecretSecretNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceForProviderTemplateSpecVolumesSecretSecretNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderTemplateSpecVolumesSecretSecretNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderTemplateSpecVolumesSecretSecretNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceForProviderTraffic {
    /// LatestRevision may be optionally provided to indicate that the latest ready
    /// Revision of the Configuration should be used for this traffic target. When
    /// provided LatestRevision must be true if RevisionName is empty; it must be
    /// false when RevisionName is non-empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestRevision")]
    #[builder(default)]
    pub latest_revision: Option<bool>,
    /// Percent specifies percent of the traffic to this Revision or Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub percent: Option<f64>,
    /// RevisionName of a specific revision to which to send this portion of traffic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionName")]
    #[builder(default)]
    pub revision_name: Option<String>,
    /// Tag is optionally used to expose a dedicated url for referencing this target exclusively.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProvider {
    /// If set to true, the revision name (template.metadata.name) will be omitted and
    /// autogenerated by Cloud Run. This cannot be set to true while template.metadata.name
    /// is also set.
    /// (For legacy support, if template.metadata.name is unset in state while
    /// this field is set to false, the revision name will still autogenerate.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autogenerateRevisionName")]
    #[builder(default)]
    pub autogenerate_revision_name: Option<bool>,
    /// Optional metadata for this Revision, including labels and annotations.
    /// Name will be generated by the Configuration. To set minimum instances
    /// for this revision, use the "autoscaling.knative.dev/minScale" annotation
    /// key. To set maximum instances for this revision, use the
    /// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
    /// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
    /// annotation key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ServiceInitProviderMetadata>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// template holds the latest specification for the Revision to
    /// be stamped out. The template references the container image, and may also
    /// include labels and annotations that should be attached to the Revision.
    /// To correlate a Revision, and/or to force a Revision to be created when the
    /// spec doesn't otherwise change, a nonce label may be provided in the
    /// template metadata. For more details, see:
    /// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
    /// Cloud Run does not currently support referencing a build that is
    /// responsible for materializing the container image from source.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub template: Option<ServiceInitProviderTemplate>,
    /// (Output)
    /// Traffic specifies how to distribute traffic over a collection of Knative Revisions
    /// and Configurations
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub traffic: Option<Vec<ServiceInitProviderTraffic>>,
}

/// Optional metadata for this Revision, including labels and annotations.
/// Name will be generated by the Configuration. To set minimum instances
/// for this revision, use the "autoscaling.knative.dev/minScale" annotation
/// key. To set maximum instances for this revision, use the
/// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
/// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
/// annotation key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderMetadata {
    /// Annotations is a key value map stored with a resource that
    /// may be set by external tools to store and retrieve arbitrary metadata.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    /// Note: The Cloud Run API may add additional annotations that were not provided in your config.ignore_changes rule to the metadata.0.annotations field.
    /// Annotations with run.googleapis.com/ and autoscaling.knative.dev are restricted. Use the following annotation
    /// keys to configure features on a Revision template:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// In Cloud Run the namespace must be equal to either the
    /// project ID or project number. It will default to the resource's project.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
    /// Reference to a Project in cloudplatform to populate namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceRef")]
    #[builder(default)]
    pub namespace_ref: Option<ServiceInitProviderMetadataNamespaceRef>,
    /// Selector for a Project in cloudplatform to populate namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    #[builder(default)]
    pub namespace_selector: Option<ServiceInitProviderMetadataNamespaceSelector>,
}

/// Reference to a Project in cloudplatform to populate namespace.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderMetadataNamespaceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceInitProviderMetadataNamespaceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderMetadataNamespaceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceInitProviderMetadataNamespaceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceInitProviderMetadataNamespaceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderMetadataNamespaceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderMetadataNamespaceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate namespace.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderMetadataNamespaceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceInitProviderMetadataNamespaceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderMetadataNamespaceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceInitProviderMetadataNamespaceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceInitProviderMetadataNamespaceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderMetadataNamespaceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderMetadataNamespaceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// template holds the latest specification for the Revision to
/// be stamped out. The template references the container image, and may also
/// include labels and annotations that should be attached to the Revision.
/// To correlate a Revision, and/or to force a Revision to be created when the
/// spec doesn't otherwise change, a nonce label may be provided in the
/// template metadata. For more details, see:
/// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
/// Cloud Run does not currently support referencing a build that is
/// responsible for materializing the container image from source.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplate {
    /// Optional metadata for this Revision, including labels and annotations.
    /// Name will be generated by the Configuration. To set minimum instances
    /// for this revision, use the "autoscaling.knative.dev/minScale" annotation
    /// key. To set maximum instances for this revision, use the
    /// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
    /// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
    /// annotation key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ServiceInitProviderTemplateMetadata>,
    /// RevisionSpec holds the desired state of the Revision (from the client).
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub spec: Option<ServiceInitProviderTemplateSpec>,
}

/// Optional metadata for this Revision, including labels and annotations.
/// Name will be generated by the Configuration. To set minimum instances
/// for this revision, use the "autoscaling.knative.dev/minScale" annotation
/// key. To set maximum instances for this revision, use the
/// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
/// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
/// annotation key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateMetadata {
    /// Annotations is a key value map stored with a resource that
    /// may be set by external tools to store and retrieve arbitrary metadata.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    /// Note: The Cloud Run API may add additional annotations that were not provided in your config.ignore_changes rule to the metadata.0.annotations field.
    /// Annotations with run.googleapis.com/ and autoscaling.knative.dev are restricted. Use the following annotation
    /// keys to configure features on a Revision template:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// In Cloud Run the namespace must be equal to either the
    /// project ID or project number. It will default to the resource's project.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
}

/// RevisionSpec holds the desired state of the Revision (from the client).
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpec {
    /// ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
    /// requests per container of the Revision. If not specified or 0, defaults to 80 when
    /// requested CPU >= 1 and defaults to 1 when requested CPU < 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerConcurrency")]
    #[builder(default)]
    pub container_concurrency: Option<f64>,
    /// Containers defines the unit of execution for this Revision.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub containers: Option<Vec<ServiceInitProviderTemplateSpecContainers>>,
    /// Email address of the IAM service account associated with the revision of the
    /// service. The service account represents the identity of the running revision,
    /// and determines what permissions the revision has. If not provided, the revision
    /// will use the project's default service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    #[builder(default)]
    pub service_account_name: Option<String>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
    /// Must be smaller than periodSeconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
    /// Volume represents a named volume in a container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub volumes: Option<Vec<ServiceInitProviderTemplateSpecVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainers {
    /// Arguments to the entrypoint.
    /// The docker image's CMD is used if this is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell.
    /// The docker image's ENTRYPOINT is used if this is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub command: Option<Vec<String>>,
    /// List of environment variables to set in the container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub env: Option<Vec<ServiceInitProviderTemplateSpecContainersEnv>>,
    /// List of sources to populate environment variables in the container.
    /// All invalid keys will be reported as an event when the container is starting.
    /// When a key exists in multiple sources, the value associated with the last source will
    /// take precedence. Values defined by an Env with a duplicate key will take
    /// precedence.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    #[builder(default)]
    pub env_from: Option<Vec<ServiceInitProviderTemplateSpecContainersEnvFrom>>,
    /// Docker image name. This is most often a reference to a container located
    /// in the container registry, such as gcr.io/cloudrun/hello
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub image: Option<String>,
    /// Periodic probe of container liveness. Container will be restarted if the probe fails.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    #[builder(default)]
    pub liveness_probe: Option<ServiceInitProviderTemplateSpecContainersLivenessProbe>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// List of open ports in the container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ports: Option<Vec<ServiceInitProviderTemplateSpecContainersPorts>>,
    /// Compute Resources required by this container. Used to set values such as max memory
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resources: Option<ServiceInitProviderTemplateSpecContainersResources>,
    /// Startup probe of application within the container.
    /// All other probes are disabled if a startup probe is provided, until it
    /// succeeds. Container will not be added to service endpoints if the probe fails.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    #[builder(default)]
    pub startup_probe: Option<ServiceInitProviderTemplateSpecContainersStartupProbe>,
    /// Volume to mount into the container's filesystem.
    /// Only supports SecretVolumeSources.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    #[builder(default)]
    pub volume_mounts: Option<Vec<ServiceInitProviderTemplateSpecContainersVolumeMounts>>,
    /// Container's working directory.
    /// If not specified, the container runtime's default will be used, which
    /// might be configured in the container image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    #[builder(default)]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnv {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
    /// Source for the environment variable's value. Only supports secret_key_ref.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    #[builder(default)]
    pub value_from: Option<ServiceInitProviderTemplateSpecContainersEnvValueFrom>,
}

/// Source for the environment variable's value. Only supports secret_key_ref.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvValueFrom {
    /// Selects a key (version) of a secret in Secret Manager.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    #[builder(default)]
    pub secret_key_ref: Option<ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRef>,
}

/// Selects a key (version) of a secret in Secret Manager.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRef {
    /// A Cloud Secret Manager secret version. Must be 'latest' for the latest
    /// version or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Reference to a Secret in secretmanager to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default)]
    pub name_ref: Option<ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRef>,
    /// Selector for a Secret in secretmanager to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSelector")]
    #[builder(default)]
    pub name_selector: Option<ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelector>,
}

/// Reference to a Secret in secretmanager to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretmanager to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderTemplateSpecContainersEnvValueFromSecretKeyRefNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvFrom {
    /// The ConfigMap to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    #[builder(default)]
    pub config_map_ref: Option<ServiceInitProviderTemplateSpecContainersEnvFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prefix: Option<String>,
    /// The Secret to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    #[builder(default)]
    pub secret_ref: Option<ServiceInitProviderTemplateSpecContainersEnvFromSecretRef>,
}

/// The ConfigMap to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvFromConfigMapRef {
    /// The Secret to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    #[builder(default)]
    pub local_object_reference: Option<ServiceInitProviderTemplateSpecContainersEnvFromConfigMapRefLocalObjectReference>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub optional: Option<bool>,
}

/// The Secret to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvFromConfigMapRefLocalObjectReference {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// The Secret to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvFromSecretRef {
    /// The Secret to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    #[builder(default)]
    pub local_object_reference: Option<ServiceInitProviderTemplateSpecContainersEnvFromSecretRefLocalObjectReference>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub optional: Option<bool>,
}

/// The Secret to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersEnvFromSecretRefLocalObjectReference {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Periodic probe of container liveness. Container will be restarted if the probe fails.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersLivenessProbe {
    /// Minimum consecutive failures for the probe to be considered failed after
    /// having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<ServiceInitProviderTemplateSpecContainersLivenessProbeGrpc>,
    /// HttpGet specifies the http request to perform.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<ServiceInitProviderTemplateSpecContainersLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is
    /// initiated.
    /// Defaults to 0 seconds. Minimum value is 0. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
    /// Must be smaller than periodSeconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersLivenessProbeGrpc {
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HttpGet specifies the http request to perform.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersLivenessProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<ServiceInitProviderTemplateSpecContainersLivenessProbeHttpGetHttpHeaders>>,
    /// Path exported by the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersPorts {
    /// Port number the container listens on. This must be a valid port number (between 1 and 65535). Defaults to "8080".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerPort")]
    #[builder(default)]
    pub container_port: Option<f64>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Protocol for port. Must be "TCP". Defaults to "TCP".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
}

/// Compute Resources required by this container. Used to set values such as max memory
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersResources {
    /// Limits describes the maximum amount of compute resources allowed.
    /// The values of the map is string form of the 'quantity' k8s type:
    /// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limits: Option<HashMap<String, String>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is
    /// explicitly specified, otherwise to an implementation-defined value.
    /// The values of the map is string form of the 'quantity' k8s type:
    /// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub requests: Option<HashMap<String, String>>,
}

/// Startup probe of application within the container.
/// All other probes are disabled if a startup probe is provided, until it
/// succeeds. Container will not be added to service endpoints if the probe fails.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersStartupProbe {
    /// Minimum consecutive failures for the probe to be considered failed after
    /// having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<ServiceInitProviderTemplateSpecContainersStartupProbeGrpc>,
    /// HttpGet specifies the http request to perform.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<ServiceInitProviderTemplateSpecContainersStartupProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is
    /// initiated.
    /// Defaults to 0 seconds. Minimum value is 0. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// TcpSocket specifies an action involving a TCP port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    #[builder(default)]
    pub tcp_socket: Option<ServiceInitProviderTemplateSpecContainersStartupProbeTcpSocket>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
    /// Must be smaller than periodSeconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersStartupProbeGrpc {
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HttpGet specifies the http request to perform.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersStartupProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<ServiceInitProviderTemplateSpecContainersStartupProbeHttpGetHttpHeaders>>,
    /// Path exported by the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// TcpSocket specifies an action involving a TCP port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersStartupProbeTcpSocket {
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecContainersVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecVolumes {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The secret's value will be presented as the content of a file whose
    /// name is defined in the item path. If no items are defined, the name of
    /// the file is the secret_name.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<ServiceInitProviderTemplateSpecVolumesSecret>,
}

/// The secret's value will be presented as the content of a file whose
/// name is defined in the item path. If no items are defined, the name of
/// the file is the secret_name.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecVolumesSecret {
    /// Mode bits to use on created files by default. Must be a value between 0000
    /// and 0777. Defaults to 0644. Directories within the path are not affected by
    /// this setting. This might be in conflict with other options that affect the
    /// file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    #[builder(default)]
    pub default_mode: Option<f64>,
    /// If unspecified, the volume will expose a file whose name is the
    /// secret_name.
    /// If specified, the key will be used as the version to fetch from Cloud
    /// Secret Manager and the path will be the name of the file exposed in the
    /// volume. When items are defined, they must specify a key and a path.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub items: Option<Vec<ServiceInitProviderTemplateSpecVolumesSecretItems>>,
    /// The name of the secret in Cloud Secret Manager. By default, the secret
    /// is assumed to be in the same project.
    /// If the secret is in another project, you must define an alias.
    /// An alias definition has the form:
    /// {alias}:projects/{project-id|project-number}/secrets/{secret-name}.
    /// If multiple alias definitions are needed, they must be separated by
    /// commas.
    /// The alias definitions must be set on the run.googleapis.com/secrets
    /// annotation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    #[builder(default)]
    pub secret_name: Option<String>,
    /// Reference to a Secret in secretmanager to populate secretName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretNameRef")]
    #[builder(default)]
    pub secret_name_ref: Option<ServiceInitProviderTemplateSpecVolumesSecretSecretNameRef>,
    /// Selector for a Secret in secretmanager to populate secretName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretNameSelector")]
    #[builder(default)]
    pub secret_name_selector: Option<ServiceInitProviderTemplateSpecVolumesSecretSecretNameSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecVolumesSecretItems {
    /// A Cloud Secret Manager secret version. Must be 'latest' for the latest
    /// version or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// Mode bits to use on this file, must be a value between 0000 and 0777. If
    /// not specified, the volume defaultMode will be used. This might be in
    /// conflict with other options that affect the file mode, like fsGroup, and
    /// the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<f64>,
    /// Path exported by the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

/// Reference to a Secret in secretmanager to populate secretName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecVolumesSecretSecretNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceInitProviderTemplateSpecVolumesSecretSecretNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecVolumesSecretSecretNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceInitProviderTemplateSpecVolumesSecretSecretNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceInitProviderTemplateSpecVolumesSecretSecretNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderTemplateSpecVolumesSecretSecretNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderTemplateSpecVolumesSecretSecretNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretmanager to populate secretName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecVolumesSecretSecretNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceInitProviderTemplateSpecVolumesSecretSecretNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTemplateSpecVolumesSecretSecretNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceInitProviderTemplateSpecVolumesSecretSecretNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceInitProviderTemplateSpecVolumesSecretSecretNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderTemplateSpecVolumesSecretSecretNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderTemplateSpecVolumesSecretSecretNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceInitProviderTraffic {
    /// LatestRevision may be optionally provided to indicate that the latest ready
    /// Revision of the Configuration should be used for this traffic target. When
    /// provided LatestRevision must be true if RevisionName is empty; it must be
    /// false when RevisionName is non-empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestRevision")]
    #[builder(default)]
    pub latest_revision: Option<bool>,
    /// Percent specifies percent of the traffic to this Revision or Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub percent: Option<f64>,
    /// RevisionName of a specific revision to which to send this portion of traffic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionName")]
    #[builder(default)]
    pub revision_name: Option<String>,
    /// Tag is optionally used to expose a dedicated url for referencing this target exclusively.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServiceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServiceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServiceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServicePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ServicePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ServicePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServicePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ServicePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServicePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ServicePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ServicePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServicePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServicePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServicePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ServiceStatus defines the observed state of Service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<ServiceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProvider {
    /// If set to true, the revision name (template.metadata.name) will be omitted and
    /// autogenerated by Cloud Run. This cannot be set to true while template.metadata.name
    /// is also set.
    /// (For legacy support, if template.metadata.name is unset in state while
    /// this field is set to false, the revision name will still autogenerate.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autogenerateRevisionName")]
    #[builder(default)]
    pub autogenerate_revision_name: Option<bool>,
    /// an identifier for the resource with format locations/{{location}}/namespaces/{{project}}/services/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The location of the cloud run instance. eg us-central1
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// Optional metadata for this Revision, including labels and annotations.
    /// Name will be generated by the Configuration. To set minimum instances
    /// for this revision, use the "autoscaling.knative.dev/minScale" annotation
    /// key. To set maximum instances for this revision, use the
    /// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
    /// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
    /// annotation key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ServiceStatusAtProviderMetadata>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The current status of the Service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<Vec<ServiceStatusAtProviderStatus>>,
    /// template holds the latest specification for the Revision to
    /// be stamped out. The template references the container image, and may also
    /// include labels and annotations that should be attached to the Revision.
    /// To correlate a Revision, and/or to force a Revision to be created when the
    /// spec doesn't otherwise change, a nonce label may be provided in the
    /// template metadata. For more details, see:
    /// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
    /// Cloud Run does not currently support referencing a build that is
    /// responsible for materializing the container image from source.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub template: Option<ServiceStatusAtProviderTemplate>,
    /// (Output)
    /// Traffic specifies how to distribute traffic over a collection of Knative Revisions
    /// and Configurations
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub traffic: Option<Vec<ServiceStatusAtProviderTraffic>>,
}

/// Optional metadata for this Revision, including labels and annotations.
/// Name will be generated by the Configuration. To set minimum instances
/// for this revision, use the "autoscaling.knative.dev/minScale" annotation
/// key. To set maximum instances for this revision, use the
/// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
/// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
/// annotation key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderMetadata {
    /// Annotations is a key value map stored with a resource that
    /// may be set by external tools to store and retrieve arbitrary metadata.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    /// Note: The Cloud Run API may add additional annotations that were not provided in your config.ignore_changes rule to the metadata.0.annotations field.
    /// Annotations with run.googleapis.com/ and autoscaling.knative.dev are restricted. Use the following annotation
    /// keys to configure features on a Revision template:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveAnnotations")]
    #[builder(default)]
    pub effective_annotations: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// (Output)
    /// A sequence number representing a specific generation of the desired state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub generation: Option<f64>,
    /// Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// In Cloud Run the namespace must be equal to either the
    /// project ID or project number. It will default to the resource's project.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
    /// (Output)
    /// An opaque value that represents the internal version of this object that
    /// can be used by clients to determine when objects have changed. May be used
    /// for optimistic concurrency, change detection, and the watch operation on a
    /// resource or set of resources. They may only be valid for a
    /// particular resource or set of resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    #[builder(default)]
    pub resource_version: Option<String>,
    /// (Output)
    /// SelfLink is a URL representing this object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    #[builder(default)]
    pub self_link: Option<String>,
    /// (Output)
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// (Output)
    /// UID is a unique id generated by the server on successful creation of a resource and is not
    /// allowed to change on PUT operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderStatus {
    /// (Output)
    /// Array of observed Service Conditions, indicating the current ready state of the service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<ServiceStatusAtProviderStatusConditions>>,
    /// (Output)
    /// From ConfigurationStatus. LatestCreatedRevisionName is the last revision that was created
    /// from this Service's Configuration. It might not be ready yet, for that use
    /// LatestReadyRevisionName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestCreatedRevisionName")]
    #[builder(default)]
    pub latest_created_revision_name: Option<String>,
    /// (Output)
    /// From ConfigurationStatus. LatestReadyRevisionName holds the name of the latest Revision
    /// stamped out from this Service's Configuration that has had its "Ready" condition become
    /// "True".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestReadyRevisionName")]
    #[builder(default)]
    pub latest_ready_revision_name: Option<String>,
    /// (Output)
    /// ObservedGeneration is the 'Generation' of the Route that was last processed by the
    /// controller.
    /// Clients polling for completed reconciliation should poll until observedGeneration =
    /// metadata.generation and the Ready condition's status is True or False.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<f64>,
    /// (Output)
    /// Traffic specifies how to distribute traffic over a collection of Knative Revisions
    /// and Configurations
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub traffic: Option<Vec<ServiceStatusAtProviderStatusTraffic>>,
    /// (Output)
    /// From RouteStatus. URL holds the url that will distribute traffic over the provided traffic
    /// targets. It generally has the form
    /// https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderStatusConditions {
    /// (Output)
    /// Human readable message indicating details about the current status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub message: Option<String>,
    /// (Output)
    /// One-word CamelCase reason for the condition's current status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub reason: Option<String>,
    /// The current status of the Service.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
    /// (Output)
    /// Type of domain mapping condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderStatusTraffic {
    /// LatestRevision may be optionally provided to indicate that the latest ready
    /// Revision of the Configuration should be used for this traffic target. When
    /// provided LatestRevision must be true if RevisionName is empty; it must be
    /// false when RevisionName is non-empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestRevision")]
    #[builder(default)]
    pub latest_revision: Option<bool>,
    /// Percent specifies percent of the traffic to this Revision or Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub percent: Option<f64>,
    /// RevisionName of a specific revision to which to send this portion of traffic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionName")]
    #[builder(default)]
    pub revision_name: Option<String>,
    /// Tag is optionally used to expose a dedicated url for referencing this target exclusively.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
    /// (Output)
    /// URL displays the URL for accessing tagged traffic targets. URL is displayed in status,
    /// and is disallowed on spec. URL must contain a scheme (e.g. http://) and a hostname,
    /// but may not contain anything else (e.g. basic auth, url path, etc.)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
}

/// template holds the latest specification for the Revision to
/// be stamped out. The template references the container image, and may also
/// include labels and annotations that should be attached to the Revision.
/// To correlate a Revision, and/or to force a Revision to be created when the
/// spec doesn't otherwise change, a nonce label may be provided in the
/// template metadata. For more details, see:
/// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
/// Cloud Run does not currently support referencing a build that is
/// responsible for materializing the container image from source.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplate {
    /// Optional metadata for this Revision, including labels and annotations.
    /// Name will be generated by the Configuration. To set minimum instances
    /// for this revision, use the "autoscaling.knative.dev/minScale" annotation
    /// key. To set maximum instances for this revision, use the
    /// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
    /// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
    /// annotation key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ServiceStatusAtProviderTemplateMetadata>,
    /// RevisionSpec holds the desired state of the Revision (from the client).
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub spec: Option<ServiceStatusAtProviderTemplateSpec>,
}

/// Optional metadata for this Revision, including labels and annotations.
/// Name will be generated by the Configuration. To set minimum instances
/// for this revision, use the "autoscaling.knative.dev/minScale" annotation
/// key. To set maximum instances for this revision, use the
/// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
/// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
/// annotation key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateMetadata {
    /// Annotations is a key value map stored with a resource that
    /// may be set by external tools to store and retrieve arbitrary metadata.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    /// Note: The Cloud Run API may add additional annotations that were not provided in your config.ignore_changes rule to the metadata.0.annotations field.
    /// Annotations with run.googleapis.com/ and autoscaling.knative.dev are restricted. Use the following annotation
    /// keys to configure features on a Revision template:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// (Output)
    /// A sequence number representing a specific generation of the desired state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub generation: Option<f64>,
    /// Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// In Cloud Run the namespace must be equal to either the
    /// project ID or project number. It will default to the resource's project.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub namespace: Option<String>,
    /// (Output)
    /// An opaque value that represents the internal version of this object that
    /// can be used by clients to determine when objects have changed. May be used
    /// for optimistic concurrency, change detection, and the watch operation on a
    /// resource or set of resources. They may only be valid for a
    /// particular resource or set of resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    #[builder(default)]
    pub resource_version: Option<String>,
    /// (Output)
    /// SelfLink is a URL representing this object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    #[builder(default)]
    pub self_link: Option<String>,
    /// (Output)
    /// UID is a unique id generated by the server on successful creation of a resource and is not
    /// allowed to change on PUT operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<String>,
}

/// RevisionSpec holds the desired state of the Revision (from the client).
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpec {
    /// ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
    /// requests per container of the Revision. If not specified or 0, defaults to 80 when
    /// requested CPU >= 1 and defaults to 1 when requested CPU < 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerConcurrency")]
    #[builder(default)]
    pub container_concurrency: Option<f64>,
    /// Containers defines the unit of execution for this Revision.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub containers: Option<Vec<ServiceStatusAtProviderTemplateSpecContainers>>,
    /// Email address of the IAM service account associated with the revision of the
    /// service. The service account represents the identity of the running revision,
    /// and determines what permissions the revision has. If not provided, the revision
    /// will use the project's default service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    #[builder(default)]
    pub service_account_name: Option<String>,
    /// (Output, Deprecated)
    /// ServingState holds a value describing the state the resources
    /// are in for this Revision.
    /// It is expected
    /// that the system will manipulate this based on routability and load.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servingState")]
    #[builder(default)]
    pub serving_state: Option<String>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
    /// Must be smaller than periodSeconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
    /// Volume represents a named volume in a container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub volumes: Option<Vec<ServiceStatusAtProviderTemplateSpecVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainers {
    /// Arguments to the entrypoint.
    /// The docker image's CMD is used if this is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell.
    /// The docker image's ENTRYPOINT is used if this is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub command: Option<Vec<String>>,
    /// List of environment variables to set in the container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub env: Option<Vec<ServiceStatusAtProviderTemplateSpecContainersEnv>>,
    /// List of sources to populate environment variables in the container.
    /// All invalid keys will be reported as an event when the container is starting.
    /// When a key exists in multiple sources, the value associated with the last source will
    /// take precedence. Values defined by an Env with a duplicate key will take
    /// precedence.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    #[builder(default)]
    pub env_from: Option<Vec<ServiceStatusAtProviderTemplateSpecContainersEnvFrom>>,
    /// Docker image name. This is most often a reference to a container located
    /// in the container registry, such as gcr.io/cloudrun/hello
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub image: Option<String>,
    /// Periodic probe of container liveness. Container will be restarted if the probe fails.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    #[builder(default)]
    pub liveness_probe: Option<ServiceStatusAtProviderTemplateSpecContainersLivenessProbe>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// List of open ports in the container.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub ports: Option<Vec<ServiceStatusAtProviderTemplateSpecContainersPorts>>,
    /// Compute Resources required by this container. Used to set values such as max memory
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resources: Option<ServiceStatusAtProviderTemplateSpecContainersResources>,
    /// Startup probe of application within the container.
    /// All other probes are disabled if a startup probe is provided, until it
    /// succeeds. Container will not be added to service endpoints if the probe fails.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    #[builder(default)]
    pub startup_probe: Option<ServiceStatusAtProviderTemplateSpecContainersStartupProbe>,
    /// Volume to mount into the container's filesystem.
    /// Only supports SecretVolumeSources.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    #[builder(default)]
    pub volume_mounts: Option<Vec<ServiceStatusAtProviderTemplateSpecContainersVolumeMounts>>,
    /// Container's working directory.
    /// If not specified, the container runtime's default will be used, which
    /// might be configured in the container image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    #[builder(default)]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersEnv {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
    /// Source for the environment variable's value. Only supports secret_key_ref.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    #[builder(default)]
    pub value_from: Option<ServiceStatusAtProviderTemplateSpecContainersEnvValueFrom>,
}

/// Source for the environment variable's value. Only supports secret_key_ref.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersEnvValueFrom {
    /// Selects a key (version) of a secret in Secret Manager.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    #[builder(default)]
    pub secret_key_ref: Option<ServiceStatusAtProviderTemplateSpecContainersEnvValueFromSecretKeyRef>,
}

/// Selects a key (version) of a secret in Secret Manager.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersEnvValueFromSecretKeyRef {
    /// A Cloud Secret Manager secret version. Must be 'latest' for the latest
    /// version or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersEnvFrom {
    /// The ConfigMap to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    #[builder(default)]
    pub config_map_ref: Option<ServiceStatusAtProviderTemplateSpecContainersEnvFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub prefix: Option<String>,
    /// The Secret to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    #[builder(default)]
    pub secret_ref: Option<ServiceStatusAtProviderTemplateSpecContainersEnvFromSecretRef>,
}

/// The ConfigMap to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersEnvFromConfigMapRef {
    /// The Secret to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    #[builder(default)]
    pub local_object_reference: Option<ServiceStatusAtProviderTemplateSpecContainersEnvFromConfigMapRefLocalObjectReference>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub optional: Option<bool>,
}

/// The Secret to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersEnvFromConfigMapRefLocalObjectReference {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// The Secret to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersEnvFromSecretRef {
    /// The Secret to select from.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    #[builder(default)]
    pub local_object_reference: Option<ServiceStatusAtProviderTemplateSpecContainersEnvFromSecretRefLocalObjectReference>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub optional: Option<bool>,
}

/// The Secret to select from.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersEnvFromSecretRefLocalObjectReference {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// Periodic probe of container liveness. Container will be restarted if the probe fails.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersLivenessProbe {
    /// Minimum consecutive failures for the probe to be considered failed after
    /// having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<ServiceStatusAtProviderTemplateSpecContainersLivenessProbeGrpc>,
    /// HttpGet specifies the http request to perform.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<ServiceStatusAtProviderTemplateSpecContainersLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is
    /// initiated.
    /// Defaults to 0 seconds. Minimum value is 0. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
    /// Must be smaller than periodSeconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersLivenessProbeGrpc {
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HttpGet specifies the http request to perform.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersLivenessProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<ServiceStatusAtProviderTemplateSpecContainersLivenessProbeHttpGetHttpHeaders>>,
    /// Path exported by the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersPorts {
    /// Port number the container listens on. This must be a valid port number (between 1 and 65535). Defaults to "8080".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerPort")]
    #[builder(default)]
    pub container_port: Option<f64>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Protocol for port. Must be "TCP". Defaults to "TCP".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub protocol: Option<String>,
}

/// Compute Resources required by this container. Used to set values such as max memory
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersResources {
    /// Limits describes the maximum amount of compute resources allowed.
    /// The values of the map is string form of the 'quantity' k8s type:
    /// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub limits: Option<HashMap<String, String>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is
    /// explicitly specified, otherwise to an implementation-defined value.
    /// The values of the map is string form of the 'quantity' k8s type:
    /// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub requests: Option<HashMap<String, String>>,
}

/// Startup probe of application within the container.
/// All other probes are disabled if a startup probe is provided, until it
/// succeeds. Container will not be added to service endpoints if the probe fails.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersStartupProbe {
    /// Minimum consecutive failures for the probe to be considered failed after
    /// having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    #[builder(default)]
    pub failure_threshold: Option<f64>,
    /// GRPC specifies an action involving a GRPC port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub grpc: Option<ServiceStatusAtProviderTemplateSpecContainersStartupProbeGrpc>,
    /// HttpGet specifies the http request to perform.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    #[builder(default)]
    pub http_get: Option<ServiceStatusAtProviderTemplateSpecContainersStartupProbeHttpGet>,
    /// Number of seconds after the container has started before the probe is
    /// initiated.
    /// Defaults to 0 seconds. Minimum value is 0. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    #[builder(default)]
    pub initial_delay_seconds: Option<f64>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1. Maximum value is 240.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    #[builder(default)]
    pub period_seconds: Option<f64>,
    /// TcpSocket specifies an action involving a TCP port.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    #[builder(default)]
    pub tcp_socket: Option<ServiceStatusAtProviderTemplateSpecContainersStartupProbeTcpSocket>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
    /// Must be smaller than periodSeconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default)]
    pub timeout_seconds: Option<f64>,
}

/// GRPC specifies an action involving a GRPC port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersStartupProbeGrpc {
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
    /// The name of the service to place in the gRPC HealthCheckRequest
    /// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub service: Option<String>,
}

/// HttpGet specifies the http request to perform.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersStartupProbeHttpGet {
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    #[builder(default)]
    pub http_headers: Option<Vec<ServiceStatusAtProviderTemplateSpecContainersStartupProbeHttpGetHttpHeaders>>,
    /// Path exported by the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The header field value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// TcpSocket specifies an action involving a TCP port.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersStartupProbeTcpSocket {
    /// Port number to access on the container. Number must be in the range 1 to 65535.
    /// If not specified, defaults to the same value as container.ports[0].containerPort.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecContainersVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecVolumes {
    /// Volume's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The secret's value will be presented as the content of a file whose
    /// name is defined in the item path. If no items are defined, the name of
    /// the file is the secret_name.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub secret: Option<ServiceStatusAtProviderTemplateSpecVolumesSecret>,
}

/// The secret's value will be presented as the content of a file whose
/// name is defined in the item path. If no items are defined, the name of
/// the file is the secret_name.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecVolumesSecret {
    /// Mode bits to use on created files by default. Must be a value between 0000
    /// and 0777. Defaults to 0644. Directories within the path are not affected by
    /// this setting. This might be in conflict with other options that affect the
    /// file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    #[builder(default)]
    pub default_mode: Option<f64>,
    /// If unspecified, the volume will expose a file whose name is the
    /// secret_name.
    /// If specified, the key will be used as the version to fetch from Cloud
    /// Secret Manager and the path will be the name of the file exposed in the
    /// volume. When items are defined, they must specify a key and a path.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub items: Option<Vec<ServiceStatusAtProviderTemplateSpecVolumesSecretItems>>,
    /// The name of the secret in Cloud Secret Manager. By default, the secret
    /// is assumed to be in the same project.
    /// If the secret is in another project, you must define an alias.
    /// An alias definition has the form:
    /// {alias}:projects/{project-id|project-number}/secrets/{secret-name}.
    /// If multiple alias definitions are needed, they must be separated by
    /// commas.
    /// The alias definitions must be set on the run.googleapis.com/secrets
    /// annotation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    #[builder(default)]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTemplateSpecVolumesSecretItems {
    /// A Cloud Secret Manager secret version. Must be 'latest' for the latest
    /// version or an integer for a specific version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub key: Option<String>,
    /// Mode bits to use on this file, must be a value between 0000 and 0777. If
    /// not specified, the volume defaultMode will be used. This might be in
    /// conflict with other options that affect the file mode, like fsGroup, and
    /// the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub mode: Option<f64>,
    /// Path exported by the NFS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ServiceStatusAtProviderTraffic {
    /// LatestRevision may be optionally provided to indicate that the latest ready
    /// Revision of the Configuration should be used for this traffic target. When
    /// provided LatestRevision must be true if RevisionName is empty; it must be
    /// false when RevisionName is non-empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestRevision")]
    #[builder(default)]
    pub latest_revision: Option<bool>,
    /// Percent specifies percent of the traffic to this Revision or Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub percent: Option<f64>,
    /// RevisionName of a specific revision to which to send this portion of traffic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionName")]
    #[builder(default)]
    pub revision_name: Option<String>,
    /// Tag is optionally used to expose a dedicated url for referencing this target exclusively.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tag: Option<String>,
    /// (Output)
    /// URL displays the URL for accessing tagged traffic targets. URL is displayed in status,
    /// and is disallowed on spec. URL must contain a scheme (e.g. http://) and a hostname,
    /// but may not contain anything else (e.g. basic auth, url path, etc.)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
}


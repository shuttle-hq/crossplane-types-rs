// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// CryptoKeySpec defines the desired state of CryptoKey
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "kms.gcp.upbound.io",
    version = "v1beta2",
    kind = "CryptoKey",
    plural = "cryptokeys"
)]
#[kube(status = "CryptoKeyStatus")]
pub struct CryptoKeySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<CryptoKeyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CryptoKeyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<CryptoKeyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<CryptoKeyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<CryptoKeyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<CryptoKeyWriteConnectionSecretToRef>,
}

/// CryptoKeySpec defines the desired state of CryptoKey
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CryptoKeyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyForProvider {
    /// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
    /// The resource name is in the format "projects//locations//ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cryptoKeyBackend"
    )]
    #[builder(default)]
    pub crypto_key_backend: Option<String>,
    /// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
    /// If not specified at creation time, the default duration is 30 days.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destroyScheduledDuration"
    )]
    #[builder(default)]
    pub destroy_scheduled_duration: Option<String>,
    /// Whether this key may contain imported versions only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "importOnly"
    )]
    #[builder(default)]
    pub import_only: Option<bool>,
    /// The KeyRing that this key belongs to.
    /// Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyRing")]
    #[builder(default)]
    pub key_ring: Option<String>,
    /// Reference to a KeyRing in kms to populate keyRing.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyRingRef"
    )]
    #[builder(default)]
    pub key_ring_ref: Option<CryptoKeyForProviderKeyRingRef>,
    /// Selector for a KeyRing in kms to populate keyRing.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyRingSelector"
    )]
    #[builder(default)]
    pub key_ring_selector: Option<CryptoKeyForProviderKeyRingSelector>,
    /// Labels with user-defined metadata to apply to this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The immutable purpose of this CryptoKey. See the
    /// purpose reference
    /// for possible inputs.
    /// Default value is "ENCRYPT_DECRYPT".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub purpose: Option<String>,
    /// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
    /// The first rotation will take place after the specified period. The rotation period has
    /// the format of a decimal number with up to 9 fractional digits, followed by the
    /// letter s (seconds). It must be greater than a day (ie, 86400).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rotationPeriod"
    )]
    #[builder(default)]
    pub rotation_period: Option<String>,
    /// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
    /// You must use the google_kms_crypto_key_version resource to create a new CryptoKeyVersion
    /// or google_kms_key_ring_import_job resource to import the CryptoKeyVersion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipInitialVersionCreation"
    )]
    #[builder(default)]
    pub skip_initial_version_creation: Option<bool>,
    /// A template describing settings for new crypto key versions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "versionTemplate"
    )]
    #[builder(default)]
    pub version_template: Option<CryptoKeyForProviderVersionTemplate>,
}

/// Reference to a KeyRing in kms to populate keyRing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyForProviderKeyRingRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CryptoKeyForProviderKeyRingRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyForProviderKeyRingRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CryptoKeyForProviderKeyRingRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CryptoKeyForProviderKeyRingRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CryptoKeyForProviderKeyRingRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CryptoKeyForProviderKeyRingRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a KeyRing in kms to populate keyRing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyForProviderKeyRingSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CryptoKeyForProviderKeyRingSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyForProviderKeyRingSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CryptoKeyForProviderKeyRingSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CryptoKeyForProviderKeyRingSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CryptoKeyForProviderKeyRingSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CryptoKeyForProviderKeyRingSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A template describing settings for new crypto key versions.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyForProviderVersionTemplate {
    /// The algorithm to use when creating a version based on this template.
    /// See the algorithm reference for possible inputs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub algorithm: Option<String>,
    /// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "protectionLevel"
    )]
    #[builder(default)]
    pub protection_level: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyInitProvider {
    /// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
    /// The resource name is in the format "projects//locations//ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cryptoKeyBackend"
    )]
    #[builder(default)]
    pub crypto_key_backend: Option<String>,
    /// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
    /// If not specified at creation time, the default duration is 30 days.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destroyScheduledDuration"
    )]
    #[builder(default)]
    pub destroy_scheduled_duration: Option<String>,
    /// Whether this key may contain imported versions only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "importOnly"
    )]
    #[builder(default)]
    pub import_only: Option<bool>,
    /// Labels with user-defined metadata to apply to this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The immutable purpose of this CryptoKey. See the
    /// purpose reference
    /// for possible inputs.
    /// Default value is "ENCRYPT_DECRYPT".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub purpose: Option<String>,
    /// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
    /// The first rotation will take place after the specified period. The rotation period has
    /// the format of a decimal number with up to 9 fractional digits, followed by the
    /// letter s (seconds). It must be greater than a day (ie, 86400).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rotationPeriod"
    )]
    #[builder(default)]
    pub rotation_period: Option<String>,
    /// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
    /// You must use the google_kms_crypto_key_version resource to create a new CryptoKeyVersion
    /// or google_kms_key_ring_import_job resource to import the CryptoKeyVersion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipInitialVersionCreation"
    )]
    #[builder(default)]
    pub skip_initial_version_creation: Option<bool>,
    /// A template describing settings for new crypto key versions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "versionTemplate"
    )]
    #[builder(default)]
    pub version_template: Option<CryptoKeyInitProviderVersionTemplate>,
}

/// A template describing settings for new crypto key versions.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyInitProviderVersionTemplate {
    /// The algorithm to use when creating a version based on this template.
    /// See the algorithm reference for possible inputs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub algorithm: Option<String>,
    /// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "protectionLevel"
    )]
    #[builder(default)]
    pub protection_level: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CryptoKeyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CryptoKeyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CryptoKeyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CryptoKeyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CryptoKeyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<CryptoKeyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<CryptoKeyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<CryptoKeyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<CryptoKeyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<CryptoKeyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CryptoKeyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CryptoKeyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CryptoKeyStatus defines the observed state of CryptoKey.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<CryptoKeyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyStatusAtProvider {
    /// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
    /// The resource name is in the format "projects//locations//ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cryptoKeyBackend"
    )]
    #[builder(default)]
    pub crypto_key_backend: Option<String>,
    /// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
    /// If not specified at creation time, the default duration is 30 days.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destroyScheduledDuration"
    )]
    #[builder(default)]
    pub destroy_scheduled_duration: Option<String>,
    /// for all of the labels present on the resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "effectiveLabels"
    )]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format {{key_ring}}/cryptoKeys/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Whether this key may contain imported versions only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "importOnly"
    )]
    #[builder(default)]
    pub import_only: Option<bool>,
    /// The KeyRing that this key belongs to.
    /// Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyRing")]
    #[builder(default)]
    pub key_ring: Option<String>,
    /// Labels with user-defined metadata to apply to this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
    /// Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub primary: Option<Vec<CryptoKeyStatusAtProviderPrimary>>,
    /// The immutable purpose of this CryptoKey. See the
    /// purpose reference
    /// for possible inputs.
    /// Default value is "ENCRYPT_DECRYPT".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub purpose: Option<String>,
    /// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
    /// The first rotation will take place after the specified period. The rotation period has
    /// the format of a decimal number with up to 9 fractional digits, followed by the
    /// letter s (seconds). It must be greater than a day (ie, 86400).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rotationPeriod"
    )]
    #[builder(default)]
    pub rotation_period: Option<String>,
    /// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
    /// You must use the google_kms_crypto_key_version resource to create a new CryptoKeyVersion
    /// or google_kms_key_ring_import_job resource to import the CryptoKeyVersion.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipInitialVersionCreation"
    )]
    #[builder(default)]
    pub skip_initial_version_creation: Option<bool>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terraformLabels"
    )]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// A template describing settings for new crypto key versions.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "versionTemplate"
    )]
    #[builder(default)]
    pub version_template: Option<CryptoKeyStatusAtProviderVersionTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyStatusAtProviderPrimary {
    /// (Output)
    /// The resource name for this CryptoKeyVersion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// (Output)
    /// The current state of the CryptoKeyVersion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
}

/// A template describing settings for new crypto key versions.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct CryptoKeyStatusAtProviderVersionTemplate {
    /// The algorithm to use when creating a version based on this template.
    /// See the algorithm reference for possible inputs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub algorithm: Option<String>,
    /// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "protectionLevel"
    )]
    #[builder(default)]
    pub protection_level: Option<String>,
}

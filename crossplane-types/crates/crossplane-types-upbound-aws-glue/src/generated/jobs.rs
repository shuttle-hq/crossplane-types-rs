// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// JobSpec defines the desired state of Job
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "glue.aws.upbound.io", version = "v1beta2", kind = "Job", plural = "jobs")]
#[kube(status = "JobStatus")]
pub struct JobSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<JobDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: JobForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<JobInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<JobProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<JobPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<JobWriteConnectionSecretToRef>,
}

/// JobSpec defines the desired state of Job
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProvider {
    /// –  The command of the job. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub command: Option<JobForProviderCommand>,
    /// –  The list of connections used for this job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub connections: Option<Vec<String>>,
    /// execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the Calling AWS Glue APIs in Python topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the Special Parameters Used by AWS Glue topic in the developer guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultArguments")]
    #[builder(default)]
    pub default_arguments: Option<HashMap<String, String>>,
    /// –  Description of the job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: FLEX, STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionClass")]
    #[builder(default)]
    pub execution_class: Option<String>,
    /// –  Execution property of the job. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionProperty")]
    #[builder(default)]
    pub execution_property: Option<JobForProviderExecutionProperty>,
    /// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the AWS Glue Release Notes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "glueVersion")]
    #[builder(default)]
    pub glue_version: Option<String>,
    /// Specifies whether job run queuing is enabled for the job runs for this job. A value of true means job run queuing is enabled for the job runs. If false or not populated, the job runs will not be considered for queueing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobRunQueuingEnabled")]
    #[builder(default)]
    pub job_run_queuing_enabled: Option<bool>,
    /// –  Specifies the day of the week and hour for the maintenance window for streaming jobs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    #[builder(default)]
    pub maintenance_window: Option<String>,
    /// –  The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. Required when pythonshell is set, accept either 0.0625 or 1.0. Use number_of_workers and worker_type arguments instead with glue_version 2.0 and above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacity")]
    #[builder(default)]
    pub max_capacity: Option<f64>,
    /// –  The maximum number of times to retry this job if it fails.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    #[builder(default)]
    pub max_retries: Option<f64>,
    /// overridable arguments for this job, specified as name-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonOverridableArguments")]
    #[builder(default)]
    pub non_overridable_arguments: Option<HashMap<String, String>>,
    /// Notification property of the job. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationProperty")]
    #[builder(default)]
    pub notification_property: Option<JobForProviderNotificationProperty>,
    /// The number of workers of a defined workerType that are allocated when a job runs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfWorkers")]
    #[builder(default)]
    pub number_of_workers: Option<f64>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// –  The ARN of the IAM role associated with this job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    #[builder(default)]
    pub role_arn_ref: Option<JobForProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    #[builder(default)]
    pub role_arn_selector: Option<JobForProviderRoleArnSelector>,
    /// The name of the Security Configuration to be associated with the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityConfiguration")]
    #[builder(default)]
    pub security_configuration: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// –  The job timeout in minutes. The default is 2880 minutes (48 hours) for glueetl and pythonshell jobs, and null (unlimited) for gluestreaming jobs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub timeout: Option<f64>,
    /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workerType")]
    #[builder(default)]
    pub worker_type: Option<String>,
}

/// –  The command of the job. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderCommand {
    /// –  The name you assign to this job. It must be unique in your account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The Python version being used to execute a Python shell job. Allowed values are 2, 3 or 3.9. Version 3 refers to Python 3.6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pythonVersion")]
    #[builder(default)]
    pub python_version: Option<String>,
    /// In Ray jobs, runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see Working with Ray jobs in the Glue Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub runtime: Option<String>,
    /// Specifies the S3 path to a script that executes a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptLocation")]
    #[builder(default)]
    pub script_location: Option<String>,
}

/// –  Execution property of the job. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderExecutionProperty {
    /// The maximum number of concurrent runs allowed for a job. The default is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentRuns")]
    #[builder(default)]
    pub max_concurrent_runs: Option<f64>,
}

/// Notification property of the job. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderNotificationProperty {
    /// After a job run starts, the number of minutes to wait before sending a job run delay notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifyDelayAfter")]
    #[builder(default)]
    pub notify_delay_after: Option<f64>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobForProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobForProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobForProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobForProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobForProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobForProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobForProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobForProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobForProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobForProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobForProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProvider {
    /// –  The command of the job. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub command: Option<JobInitProviderCommand>,
    /// –  The list of connections used for this job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub connections: Option<Vec<String>>,
    /// execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the Calling AWS Glue APIs in Python topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the Special Parameters Used by AWS Glue topic in the developer guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultArguments")]
    #[builder(default)]
    pub default_arguments: Option<HashMap<String, String>>,
    /// –  Description of the job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: FLEX, STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionClass")]
    #[builder(default)]
    pub execution_class: Option<String>,
    /// –  Execution property of the job. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionProperty")]
    #[builder(default)]
    pub execution_property: Option<JobInitProviderExecutionProperty>,
    /// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the AWS Glue Release Notes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "glueVersion")]
    #[builder(default)]
    pub glue_version: Option<String>,
    /// Specifies whether job run queuing is enabled for the job runs for this job. A value of true means job run queuing is enabled for the job runs. If false or not populated, the job runs will not be considered for queueing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobRunQueuingEnabled")]
    #[builder(default)]
    pub job_run_queuing_enabled: Option<bool>,
    /// –  Specifies the day of the week and hour for the maintenance window for streaming jobs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    #[builder(default)]
    pub maintenance_window: Option<String>,
    /// –  The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. Required when pythonshell is set, accept either 0.0625 or 1.0. Use number_of_workers and worker_type arguments instead with glue_version 2.0 and above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacity")]
    #[builder(default)]
    pub max_capacity: Option<f64>,
    /// –  The maximum number of times to retry this job if it fails.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    #[builder(default)]
    pub max_retries: Option<f64>,
    /// overridable arguments for this job, specified as name-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonOverridableArguments")]
    #[builder(default)]
    pub non_overridable_arguments: Option<HashMap<String, String>>,
    /// Notification property of the job. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationProperty")]
    #[builder(default)]
    pub notification_property: Option<JobInitProviderNotificationProperty>,
    /// The number of workers of a defined workerType that are allocated when a job runs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfWorkers")]
    #[builder(default)]
    pub number_of_workers: Option<f64>,
    /// –  The ARN of the IAM role associated with this job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    #[builder(default)]
    pub role_arn_ref: Option<JobInitProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    #[builder(default)]
    pub role_arn_selector: Option<JobInitProviderRoleArnSelector>,
    /// The name of the Security Configuration to be associated with the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityConfiguration")]
    #[builder(default)]
    pub security_configuration: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// –  The job timeout in minutes. The default is 2880 minutes (48 hours) for glueetl and pythonshell jobs, and null (unlimited) for gluestreaming jobs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub timeout: Option<f64>,
    /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workerType")]
    #[builder(default)]
    pub worker_type: Option<String>,
}

/// –  The command of the job. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderCommand {
    /// –  The name you assign to this job. It must be unique in your account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The Python version being used to execute a Python shell job. Allowed values are 2, 3 or 3.9. Version 3 refers to Python 3.6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pythonVersion")]
    #[builder(default)]
    pub python_version: Option<String>,
    /// In Ray jobs, runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see Working with Ray jobs in the Glue Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub runtime: Option<String>,
    /// Specifies the S3 path to a script that executes a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptLocation")]
    #[builder(default)]
    pub script_location: Option<String>,
}

/// –  Execution property of the job. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderExecutionProperty {
    /// The maximum number of concurrent runs allowed for a job. The default is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentRuns")]
    #[builder(default)]
    pub max_concurrent_runs: Option<f64>,
}

/// Notification property of the job. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderNotificationProperty {
    /// After a job run starts, the number of minutes to wait before sending a job run delay notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifyDelayAfter")]
    #[builder(default)]
    pub notify_delay_after: Option<f64>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobInitProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobInitProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobInitProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobInitProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobInitProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobInitProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobInitProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobInitProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobInitProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobInitProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobInitProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<JobPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<JobPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<JobPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<JobPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<JobPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// JobStatus defines the observed state of Job.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<JobStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProvider {
    /// Amazon Resource Name (ARN) of Glue Job
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// –  The command of the job. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub command: Option<JobStatusAtProviderCommand>,
    /// –  The list of connections used for this job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub connections: Option<Vec<String>>,
    /// execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the Calling AWS Glue APIs in Python topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the Special Parameters Used by AWS Glue topic in the developer guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultArguments")]
    #[builder(default)]
    pub default_arguments: Option<HashMap<String, String>>,
    /// –  Description of the job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: FLEX, STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionClass")]
    #[builder(default)]
    pub execution_class: Option<String>,
    /// –  Execution property of the job. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionProperty")]
    #[builder(default)]
    pub execution_property: Option<JobStatusAtProviderExecutionProperty>,
    /// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the AWS Glue Release Notes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "glueVersion")]
    #[builder(default)]
    pub glue_version: Option<String>,
    /// Job name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Specifies whether job run queuing is enabled for the job runs for this job. A value of true means job run queuing is enabled for the job runs. If false or not populated, the job runs will not be considered for queueing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobRunQueuingEnabled")]
    #[builder(default)]
    pub job_run_queuing_enabled: Option<bool>,
    /// –  Specifies the day of the week and hour for the maintenance window for streaming jobs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    #[builder(default)]
    pub maintenance_window: Option<String>,
    /// –  The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. Required when pythonshell is set, accept either 0.0625 or 1.0. Use number_of_workers and worker_type arguments instead with glue_version 2.0 and above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacity")]
    #[builder(default)]
    pub max_capacity: Option<f64>,
    /// –  The maximum number of times to retry this job if it fails.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    #[builder(default)]
    pub max_retries: Option<f64>,
    /// overridable arguments for this job, specified as name-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonOverridableArguments")]
    #[builder(default)]
    pub non_overridable_arguments: Option<HashMap<String, String>>,
    /// Notification property of the job. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationProperty")]
    #[builder(default)]
    pub notification_property: Option<JobStatusAtProviderNotificationProperty>,
    /// The number of workers of a defined workerType that are allocated when a job runs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfWorkers")]
    #[builder(default)]
    pub number_of_workers: Option<f64>,
    /// –  The ARN of the IAM role associated with this job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// The name of the Security Configuration to be associated with the job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityConfiguration")]
    #[builder(default)]
    pub security_configuration: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// –  The job timeout in minutes. The default is 2880 minutes (48 hours) for glueetl and pythonshell jobs, and null (unlimited) for gluestreaming jobs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub timeout: Option<f64>,
    /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workerType")]
    #[builder(default)]
    pub worker_type: Option<String>,
}

/// –  The command of the job. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderCommand {
    /// –  The name you assign to this job. It must be unique in your account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The Python version being used to execute a Python shell job. Allowed values are 2, 3 or 3.9. Version 3 refers to Python 3.6.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pythonVersion")]
    #[builder(default)]
    pub python_version: Option<String>,
    /// In Ray jobs, runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see Working with Ray jobs in the Glue Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub runtime: Option<String>,
    /// Specifies the S3 path to a script that executes a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptLocation")]
    #[builder(default)]
    pub script_location: Option<String>,
}

/// –  Execution property of the job. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderExecutionProperty {
    /// The maximum number of concurrent runs allowed for a job. The default is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentRuns")]
    #[builder(default)]
    pub max_concurrent_runs: Option<f64>,
}

/// Notification property of the job. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct JobStatusAtProviderNotificationProperty {
    /// After a job run starts, the number of minutes to wait before sending a job run delay notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifyDelayAfter")]
    #[builder(default)]
    pub notify_delay_after: Option<f64>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ClassifierSpec defines the desired state of Classifier
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "glue.aws.upbound.io",
    version = "v1beta2",
    kind = "Classifier",
    plural = "classifiers"
)]
#[kube(status = "ClassifierStatus")]
pub struct ClassifierSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<ClassifierDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ClassifierForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<ClassifierInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<ClassifierProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<ClassifierPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ClassifierWriteConnectionSecretToRef>,
}

/// ClassifierSpec defines the desired state of Classifier
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassifierDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierForProvider {
    /// A classifier for CSV content. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "csvClassifier"
    )]
    #[builder(default)]
    pub csv_classifier: Option<ClassifierForProviderCsvClassifier>,
    /// –  A classifier that uses grok patterns. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "grokClassifier"
    )]
    #[builder(default)]
    pub grok_classifier: Option<ClassifierForProviderGrokClassifier>,
    /// –  A classifier for JSON content. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jsonClassifier"
    )]
    #[builder(default)]
    pub json_classifier: Option<ClassifierForProviderJsonClassifier>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// –  A classifier for XML content. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xmlClassifier"
    )]
    #[builder(default)]
    pub xml_classifier: Option<ClassifierForProviderXmlClassifier>,
}

/// A classifier for CSV content. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierForProviderCsvClassifier {
    /// Enables the processing of files that contain only one column.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSingleColumn"
    )]
    #[builder(default)]
    pub allow_single_column: Option<bool>,
    /// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containsHeader"
    )]
    #[builder(default)]
    pub contains_header: Option<String>,
    /// Enables the custom datatype to be configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customDatatypeConfigured"
    )]
    #[builder(default)]
    pub custom_datatype_configured: Option<bool>,
    /// A list of supported custom datatypes. Valid values are BINARY, BOOLEAN, DATE, DECIMAL, DOUBLE, FLOAT, INT, LONG, SHORT, STRING, TIMESTAMP.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customDatatypes"
    )]
    #[builder(default)]
    pub custom_datatypes: Option<Vec<String>>,
    /// The delimiter used in the CSV to separate columns.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub delimiter: Option<String>,
    /// Specifies whether to trim column values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableValueTrimming"
    )]
    #[builder(default)]
    pub disable_value_trimming: Option<bool>,
    /// A list of strings representing column names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub header: Option<Vec<String>>,
    /// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "quoteSymbol"
    )]
    #[builder(default)]
    pub quote_symbol: Option<String>,
    /// –  The SerDe for processing CSV. Valid values are OpenCSVSerDe, LazySimpleSerDe, None.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub serde: Option<String>,
}

/// –  A classifier that uses grok patterns. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierForProviderGrokClassifier {
    /// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub classification: Option<String>,
    /// Custom grok patterns used by this classifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPatterns"
    )]
    #[builder(default)]
    pub custom_patterns: Option<String>,
    /// The grok pattern used by this classifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "grokPattern"
    )]
    #[builder(default)]
    pub grok_pattern: Option<String>,
}

/// –  A classifier for JSON content. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierForProviderJsonClassifier {
    /// A JsonPath string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in Writing JsonPath Custom Classifiers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    #[builder(default)]
    pub json_path: Option<String>,
}

/// –  A classifier for XML content. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierForProviderXmlClassifier {
    /// An identifier of the data format that the classifier matches.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub classification: Option<String>,
    /// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by />). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <row item_a="A" item_b="B"></row> is okay, but <row item_a="A" item_b="B" /> is not).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowTag")]
    #[builder(default)]
    pub row_tag: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierInitProvider {
    /// A classifier for CSV content. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "csvClassifier"
    )]
    #[builder(default)]
    pub csv_classifier: Option<ClassifierInitProviderCsvClassifier>,
    /// –  A classifier that uses grok patterns. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "grokClassifier"
    )]
    #[builder(default)]
    pub grok_classifier: Option<ClassifierInitProviderGrokClassifier>,
    /// –  A classifier for JSON content. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jsonClassifier"
    )]
    #[builder(default)]
    pub json_classifier: Option<ClassifierInitProviderJsonClassifier>,
    /// –  A classifier for XML content. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xmlClassifier"
    )]
    #[builder(default)]
    pub xml_classifier: Option<ClassifierInitProviderXmlClassifier>,
}

/// A classifier for CSV content. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierInitProviderCsvClassifier {
    /// Enables the processing of files that contain only one column.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSingleColumn"
    )]
    #[builder(default)]
    pub allow_single_column: Option<bool>,
    /// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containsHeader"
    )]
    #[builder(default)]
    pub contains_header: Option<String>,
    /// Enables the custom datatype to be configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customDatatypeConfigured"
    )]
    #[builder(default)]
    pub custom_datatype_configured: Option<bool>,
    /// A list of supported custom datatypes. Valid values are BINARY, BOOLEAN, DATE, DECIMAL, DOUBLE, FLOAT, INT, LONG, SHORT, STRING, TIMESTAMP.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customDatatypes"
    )]
    #[builder(default)]
    pub custom_datatypes: Option<Vec<String>>,
    /// The delimiter used in the CSV to separate columns.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub delimiter: Option<String>,
    /// Specifies whether to trim column values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableValueTrimming"
    )]
    #[builder(default)]
    pub disable_value_trimming: Option<bool>,
    /// A list of strings representing column names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub header: Option<Vec<String>>,
    /// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "quoteSymbol"
    )]
    #[builder(default)]
    pub quote_symbol: Option<String>,
    /// –  The SerDe for processing CSV. Valid values are OpenCSVSerDe, LazySimpleSerDe, None.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub serde: Option<String>,
}

/// –  A classifier that uses grok patterns. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierInitProviderGrokClassifier {
    /// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub classification: Option<String>,
    /// Custom grok patterns used by this classifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPatterns"
    )]
    #[builder(default)]
    pub custom_patterns: Option<String>,
    /// The grok pattern used by this classifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "grokPattern"
    )]
    #[builder(default)]
    pub grok_pattern: Option<String>,
}

/// –  A classifier for JSON content. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierInitProviderJsonClassifier {
    /// A JsonPath string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in Writing JsonPath Custom Classifiers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    #[builder(default)]
    pub json_path: Option<String>,
}

/// –  A classifier for XML content. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierInitProviderXmlClassifier {
    /// An identifier of the data format that the classifier matches.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub classification: Option<String>,
    /// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by />). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <row item_a="A" item_b="B"></row> is okay, but <row item_a="A" item_b="B" /> is not).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowTag")]
    #[builder(default)]
    pub row_tag: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClassifierProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClassifierProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClassifierProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassifierProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassifierProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ClassifierPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ClassifierPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ClassifierPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ClassifierPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ClassifierPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassifierPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClassifierPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ClassifierStatus defines the observed state of Classifier.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<ClassifierStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierStatusAtProvider {
    /// A classifier for CSV content. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "csvClassifier"
    )]
    #[builder(default)]
    pub csv_classifier: Option<ClassifierStatusAtProviderCsvClassifier>,
    /// –  A classifier that uses grok patterns. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "grokClassifier"
    )]
    #[builder(default)]
    pub grok_classifier: Option<ClassifierStatusAtProviderGrokClassifier>,
    /// Name of the classifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// –  A classifier for JSON content. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jsonClassifier"
    )]
    #[builder(default)]
    pub json_classifier: Option<ClassifierStatusAtProviderJsonClassifier>,
    /// –  A classifier for XML content. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xmlClassifier"
    )]
    #[builder(default)]
    pub xml_classifier: Option<ClassifierStatusAtProviderXmlClassifier>,
}

/// A classifier for CSV content. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierStatusAtProviderCsvClassifier {
    /// Enables the processing of files that contain only one column.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSingleColumn"
    )]
    #[builder(default)]
    pub allow_single_column: Option<bool>,
    /// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containsHeader"
    )]
    #[builder(default)]
    pub contains_header: Option<String>,
    /// Enables the custom datatype to be configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customDatatypeConfigured"
    )]
    #[builder(default)]
    pub custom_datatype_configured: Option<bool>,
    /// A list of supported custom datatypes. Valid values are BINARY, BOOLEAN, DATE, DECIMAL, DOUBLE, FLOAT, INT, LONG, SHORT, STRING, TIMESTAMP.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customDatatypes"
    )]
    #[builder(default)]
    pub custom_datatypes: Option<Vec<String>>,
    /// The delimiter used in the CSV to separate columns.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub delimiter: Option<String>,
    /// Specifies whether to trim column values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableValueTrimming"
    )]
    #[builder(default)]
    pub disable_value_trimming: Option<bool>,
    /// A list of strings representing column names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub header: Option<Vec<String>>,
    /// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "quoteSymbol"
    )]
    #[builder(default)]
    pub quote_symbol: Option<String>,
    /// –  The SerDe for processing CSV. Valid values are OpenCSVSerDe, LazySimpleSerDe, None.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub serde: Option<String>,
}

/// –  A classifier that uses grok patterns. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierStatusAtProviderGrokClassifier {
    /// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub classification: Option<String>,
    /// Custom grok patterns used by this classifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPatterns"
    )]
    #[builder(default)]
    pub custom_patterns: Option<String>,
    /// The grok pattern used by this classifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "grokPattern"
    )]
    #[builder(default)]
    pub grok_pattern: Option<String>,
}

/// –  A classifier for JSON content. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierStatusAtProviderJsonClassifier {
    /// A JsonPath string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in Writing JsonPath Custom Classifiers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    #[builder(default)]
    pub json_path: Option<String>,
}

/// –  A classifier for XML content. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ClassifierStatusAtProviderXmlClassifier {
    /// An identifier of the data format that the classifier matches.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub classification: Option<String>,
    /// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by />). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <row item_a="A" item_b="B"></row> is okay, but <row item_a="A" item_b="B" /> is not).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowTag")]
    #[builder(default)]
    pub row_tag: Option<String>,
}

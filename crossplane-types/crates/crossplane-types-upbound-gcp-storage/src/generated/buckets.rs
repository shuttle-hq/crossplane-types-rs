// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// BucketSpec defines the desired state of Bucket
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "storage.gcp.upbound.io",
    version = "v1beta2",
    kind = "Bucket",
    plural = "buckets"
)]
#[kube(status = "BucketStatus")]
pub struct BucketSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<BucketDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BucketForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<BucketInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<BucketProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<BucketPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<BucketWriteConnectionSecretToRef>,
}

/// BucketSpec defines the desired state of Bucket
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProvider {
    /// The bucket's Autoclass configuration.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub autoclass: Option<BucketForProviderAutoclass>,
    /// The bucket's Cross-Origin Resource Sharing (CORS) configuration. Multiple blocks of this type are permitted. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cors: Option<Vec<BucketForProviderCors>>,
    /// The bucket's custom location configuration, which specifies the individual regions that comprise a dual-region bucket. If the bucket is designated a single or multi-region, the parameters are empty. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPlacementConfig"
    )]
    #[builder(default)]
    pub custom_placement_config: Option<BucketForProviderCustomPlacementConfig>,
    /// Whether or not to automatically apply an eventBasedHold to new objects added to the bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEventBasedHold"
    )]
    #[builder(default)]
    pub default_event_based_hold: Option<bool>,
    /// Enables object retention on a storage bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableObjectRetention"
    )]
    #[builder(default)]
    pub enable_object_retention: Option<bool>,
    /// The bucket's encryption configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encryption: Option<BucketForProviderEncryption>,
    /// When deleting a bucket, this
    /// boolean option will delete all contained objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDestroy"
    )]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// A map of key/value label pairs to assign to the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The bucket's Lifecycle Rules configuration. Multiple blocks of this type are permitted. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleRule"
    )]
    #[builder(default)]
    pub lifecycle_rule: Option<Vec<BucketForProviderLifecycleRule>>,
    /// The GCS location.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// The bucket's Access & Storage Logs configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub logging: Option<BucketForProviderLogging>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Prevents public access to a bucket. Acceptable values are "inherited" or "enforced". If "inherited", the bucket uses public access prevention. only if the bucket is subject to the public access prevention organization policy constraint. Defaults to "inherited".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicAccessPrevention"
    )]
    #[builder(default)]
    pub public_access_prevention: Option<String>,
    /// Enables Requester Pays on a storage bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requesterPays"
    )]
    #[builder(default)]
    pub requester_pays: Option<bool>,
    /// Configuration of the bucket's data retention policy for how long objects in the bucket should be retained. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPolicy"
    )]
    #[builder(default)]
    pub retention_policy: Option<BucketForProviderRetentionPolicy>,
    /// The recovery point objective for cross-region replication of the bucket. Applicable only for dual and multi-region buckets. "DEFAULT" sets default replication. "ASYNC_TURBO" value enables turbo replication, valid for dual-region buckets only. See Turbo Replication for more information. If rpo is not specified at bucket creation, it defaults to "DEFAULT" for dual and multi-region buckets. NOTE If used with single-region bucket, It will throw an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub rpo: Option<String>,
    /// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "softDeletePolicy"
    )]
    #[builder(default)]
    pub soft_delete_policy: Option<BucketForProviderSoftDeletePolicy>,
    /// The Storage Class of the new bucket. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageClass"
    )]
    #[builder(default)]
    pub storage_class: Option<String>,
    /// Enables Uniform bucket-level access access to a bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "uniformBucketLevelAccess"
    )]
    #[builder(default)]
    pub uniform_bucket_level_access: Option<bool>,
    /// The bucket's Versioning configuration.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub versioning: Option<BucketForProviderVersioning>,
    /// Configuration if the bucket acts as a website. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub website: Option<BucketForProviderWebsite>,
}

/// The bucket's Autoclass configuration.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderAutoclass {
    /// While set to true, autoclass automatically transitions objects in your bucket to appropriate storage classes based on each object's access pattern.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// The storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Supported values include: NEARLINE, ARCHIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminalStorageClass"
    )]
    #[builder(default)]
    pub terminal_storage_class: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderCors {
    /// The value, in seconds, to return in the Access-Control-Max-Age header used in preflight responses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxAgeSeconds"
    )]
    #[builder(default)]
    pub max_age_seconds: Option<f64>,
    /// The list of HTTP methods on which to include CORS response headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means "any method".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub method: Option<Vec<String>>,
    /// The list of Origins eligible to receive CORS response headers. Note: "*" is permitted in the list of origins, and means "any Origin".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub origin: Option<Vec<String>>,
    /// The list of HTTP headers other than the simple response headers to give permission for the user-agent to share across domains.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseHeader"
    )]
    #[builder(default)]
    pub response_header: Option<Vec<String>>,
}

/// The bucket's custom location configuration, which specifies the individual regions that comprise a dual-region bucket. If the bucket is designated a single or multi-region, the parameters are empty. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderCustomPlacementConfig {
    /// The list of individual regions that comprise a dual-region bucket. See Cloud Storage bucket locations for a list of acceptable regions. Note: If any of the data_locations changes, it will recreate the bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataLocations"
    )]
    #[builder(default)]
    pub data_locations: Option<Vec<String>>,
}

/// The bucket's encryption configuration. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderEncryption {
    /// : The id of a Cloud KMS key that will be used to encrypt objects inserted into this bucket, if no encryption method is specified.
    /// You must pay attention to whether the crypto key is available in the location that this bucket is created in.
    /// See the docs for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultKmsKeyName"
    )]
    #[builder(default)]
    pub default_kms_key_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderLifecycleRule {
    /// The Lifecycle Rule's action configuration. A single block of this type is supported. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<BucketForProviderLifecycleRuleAction>,
    /// The Lifecycle Rule's condition configuration. A single block of this type is supported. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub condition: Option<BucketForProviderLifecycleRuleCondition>,
}

/// The Lifecycle Rule's action configuration. A single block of this type is supported. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderLifecycleRuleAction {
    /// The Storage Class of the new bucket. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageClass"
    )]
    #[builder(default)]
    pub storage_class: Option<String>,
    /// The type of the action of this Lifecycle Rule. Supported values include: Delete, SetStorageClass and AbortIncompleteMultipartUpload.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// The Lifecycle Rule's condition configuration. A single block of this type is supported. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderLifecycleRuleCondition {
    /// Minimum age of an object in days to satisfy this condition. If not supplied alongside another condition and without setting no_age to true, a default age of 0 will be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub age: Option<f64>,
    /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when an object is created before midnight of the specified date in UTC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdBefore"
    )]
    #[builder(default)]
    pub created_before: Option<String>,
    /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when the customTime metadata for the object is set to an earlier date than the date used in this lifecycle condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTimeBefore"
    )]
    #[builder(default)]
    pub custom_time_before: Option<String>,
    /// Days since the date set in the customTime metadata for the object. This condition is satisfied when the current date and time is at least the specified number of days after the customTime. When set to 0 it will be ignored, and your state will treat it as though you supplied no days_since_custom_time condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "daysSinceCustomTime"
    )]
    #[builder(default)]
    pub days_since_custom_time: Option<f64>,
    /// Relevant only for versioned objects. Number of days elapsed since the noncurrent timestamp of an object. When set to 0 it will be ignored, and your state will treat it as though you supplied no days_since_noncurrent_time condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "daysSinceNoncurrentTime"
    )]
    #[builder(default)]
    pub days_since_noncurrent_time: Option<f64>,
    /// One or more matching name prefixes to satisfy this condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchesPrefix"
    )]
    #[builder(default)]
    pub matches_prefix: Option<Vec<String>>,
    /// Storage Class of objects to satisfy this condition. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, DURABLE_REDUCED_AVAILABILITY.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchesStorageClass"
    )]
    #[builder(default)]
    pub matches_storage_class: Option<Vec<String>>,
    /// One or more matching name suffixes to satisfy this condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchesSuffix"
    )]
    #[builder(default)]
    pub matches_suffix: Option<Vec<String>>,
    /// While set true, age value will be omitted from requests. This prevents a default age of 0 from being applied, and if you do not have an age value set, setting this to true is strongly recommended. When unset and other conditions are set to zero values, this can result in a rule that applies your action to all files in the bucket. no_age is deprecated and will be removed in a future major release. Use send_age_if_zero instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noAge")]
    #[builder(default)]
    pub no_age: Option<bool>,
    /// Relevant only for versioned objects. The date in RFC 3339 (e.g. 2017-06-13) when the object became nonconcurrent. When set to 0 it will be ignored, and your state will treat it as though you supplied no noncurrent_time_before condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noncurrentTimeBefore"
    )]
    #[builder(default)]
    pub noncurrent_time_before: Option<String>,
    /// Relevant only for versioned objects. The number of newer versions of an object to satisfy this condition. When set to 0 it will be ignored and your state will treat it as though you supplied no num_newer_versions condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numNewerVersions"
    )]
    #[builder(default)]
    pub num_newer_versions: Option<f64>,
    /// While set true, age value will be sent in the request even for zero value of the field. This field is only useful and required for setting 0 value to the age field. It can be used alone or together with age attribute. NOTE age attibute with 0 value will be ommitted from the API request if send_age_if_zero field is having false value.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendAgeIfZero"
    )]
    #[builder(default)]
    pub send_age_if_zero: Option<bool>,
    /// While set true, days_since_custom_time value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the days_since_custom_time field. It can be used alone or together with days_since_custom_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendDaysSinceCustomTimeIfZero"
    )]
    #[builder(default)]
    pub send_days_since_custom_time_if_zero: Option<bool>,
    /// While set true, days_since_noncurrent_time value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the days_since_noncurrent_time field. It can be used alone or together with days_since_noncurrent_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendDaysSinceNoncurrentTimeIfZero"
    )]
    #[builder(default)]
    pub send_days_since_noncurrent_time_if_zero: Option<bool>,
    /// While set true, num_newer_versions value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the num_newer_versions field. It can be used alone or together with num_newer_versions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendNumNewerVersionsIfZero"
    )]
    #[builder(default)]
    pub send_num_newer_versions_if_zero: Option<bool>,
    /// Match to live and/or archived objects. Unversioned buckets have only live objects. Supported values include: "LIVE", "ARCHIVED", "ANY".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withState")]
    #[builder(default)]
    pub with_state: Option<String>,
}

/// The bucket's Access & Storage Logs configuration. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderLogging {
    /// The bucket that will receive log objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logBucket")]
    #[builder(default)]
    pub log_bucket: Option<String>,
    /// The object prefix for log objects. If it's not provided,
    /// by default GCS sets this to this bucket's name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logObjectPrefix"
    )]
    #[builder(default)]
    pub log_object_prefix: Option<String>,
}

/// Configuration of the bucket's data retention policy for how long objects in the bucket should be retained. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderRetentionPolicy {
    /// If set to true, the bucket will be locked and permanently restrict edits to the bucket's retention policy.  Caution: Locking a bucket is an irreversible action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isLocked")]
    #[builder(default)]
    pub is_locked: Option<bool>,
    /// The period of time, in seconds, that objects in the bucket must be retained and cannot be deleted, overwritten, or archived. The value must be less than 2,147,483,647 seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPeriod"
    )]
    #[builder(default)]
    pub retention_period: Option<f64>,
}

/// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderSoftDeletePolicy {
    /// The duration in seconds that soft-deleted objects in the bucket will be retained and cannot be permanently deleted. Default value is 604800. The value must be in between 604800(7 days) and 7776000(90 days). Note: To disable the soft delete policy on a bucket, This field must be set to 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionDurationSeconds"
    )]
    #[builder(default)]
    pub retention_duration_seconds: Option<f64>,
}

/// The bucket's Versioning configuration.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderVersioning {
    /// While set to true, versioning is fully enabled for this bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Configuration if the bucket acts as a website. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketForProviderWebsite {
    /// Behaves as the bucket's directory index where
    /// missing objects are treated as potential directories.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainPageSuffix"
    )]
    #[builder(default)]
    pub main_page_suffix: Option<String>,
    /// The custom object to return when a requested
    /// resource is not found.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notFoundPage"
    )]
    #[builder(default)]
    pub not_found_page: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProvider {
    /// The bucket's Autoclass configuration.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub autoclass: Option<BucketInitProviderAutoclass>,
    /// The bucket's Cross-Origin Resource Sharing (CORS) configuration. Multiple blocks of this type are permitted. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cors: Option<Vec<BucketInitProviderCors>>,
    /// The bucket's custom location configuration, which specifies the individual regions that comprise a dual-region bucket. If the bucket is designated a single or multi-region, the parameters are empty. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPlacementConfig"
    )]
    #[builder(default)]
    pub custom_placement_config: Option<BucketInitProviderCustomPlacementConfig>,
    /// Whether or not to automatically apply an eventBasedHold to new objects added to the bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEventBasedHold"
    )]
    #[builder(default)]
    pub default_event_based_hold: Option<bool>,
    /// Enables object retention on a storage bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableObjectRetention"
    )]
    #[builder(default)]
    pub enable_object_retention: Option<bool>,
    /// The bucket's encryption configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encryption: Option<BucketInitProviderEncryption>,
    /// When deleting a bucket, this
    /// boolean option will delete all contained objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDestroy"
    )]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    /// A map of key/value label pairs to assign to the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The bucket's Lifecycle Rules configuration. Multiple blocks of this type are permitted. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleRule"
    )]
    #[builder(default)]
    pub lifecycle_rule: Option<Vec<BucketInitProviderLifecycleRule>>,
    /// The GCS location.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// The bucket's Access & Storage Logs configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub logging: Option<BucketInitProviderLogging>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Prevents public access to a bucket. Acceptable values are "inherited" or "enforced". If "inherited", the bucket uses public access prevention. only if the bucket is subject to the public access prevention organization policy constraint. Defaults to "inherited".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicAccessPrevention"
    )]
    #[builder(default)]
    pub public_access_prevention: Option<String>,
    /// Enables Requester Pays on a storage bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requesterPays"
    )]
    #[builder(default)]
    pub requester_pays: Option<bool>,
    /// Configuration of the bucket's data retention policy for how long objects in the bucket should be retained. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPolicy"
    )]
    #[builder(default)]
    pub retention_policy: Option<BucketInitProviderRetentionPolicy>,
    /// The recovery point objective for cross-region replication of the bucket. Applicable only for dual and multi-region buckets. "DEFAULT" sets default replication. "ASYNC_TURBO" value enables turbo replication, valid for dual-region buckets only. See Turbo Replication for more information. If rpo is not specified at bucket creation, it defaults to "DEFAULT" for dual and multi-region buckets. NOTE If used with single-region bucket, It will throw an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub rpo: Option<String>,
    /// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "softDeletePolicy"
    )]
    #[builder(default)]
    pub soft_delete_policy: Option<BucketInitProviderSoftDeletePolicy>,
    /// The Storage Class of the new bucket. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageClass"
    )]
    #[builder(default)]
    pub storage_class: Option<String>,
    /// Enables Uniform bucket-level access access to a bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "uniformBucketLevelAccess"
    )]
    #[builder(default)]
    pub uniform_bucket_level_access: Option<bool>,
    /// The bucket's Versioning configuration.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub versioning: Option<BucketInitProviderVersioning>,
    /// Configuration if the bucket acts as a website. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub website: Option<BucketInitProviderWebsite>,
}

/// The bucket's Autoclass configuration.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderAutoclass {
    /// While set to true, autoclass automatically transitions objects in your bucket to appropriate storage classes based on each object's access pattern.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// The storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Supported values include: NEARLINE, ARCHIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminalStorageClass"
    )]
    #[builder(default)]
    pub terminal_storage_class: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderCors {
    /// The value, in seconds, to return in the Access-Control-Max-Age header used in preflight responses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxAgeSeconds"
    )]
    #[builder(default)]
    pub max_age_seconds: Option<f64>,
    /// The list of HTTP methods on which to include CORS response headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means "any method".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub method: Option<Vec<String>>,
    /// The list of Origins eligible to receive CORS response headers. Note: "*" is permitted in the list of origins, and means "any Origin".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub origin: Option<Vec<String>>,
    /// The list of HTTP headers other than the simple response headers to give permission for the user-agent to share across domains.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseHeader"
    )]
    #[builder(default)]
    pub response_header: Option<Vec<String>>,
}

/// The bucket's custom location configuration, which specifies the individual regions that comprise a dual-region bucket. If the bucket is designated a single or multi-region, the parameters are empty. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderCustomPlacementConfig {
    /// The list of individual regions that comprise a dual-region bucket. See Cloud Storage bucket locations for a list of acceptable regions. Note: If any of the data_locations changes, it will recreate the bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataLocations"
    )]
    #[builder(default)]
    pub data_locations: Option<Vec<String>>,
}

/// The bucket's encryption configuration. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderEncryption {
    /// : The id of a Cloud KMS key that will be used to encrypt objects inserted into this bucket, if no encryption method is specified.
    /// You must pay attention to whether the crypto key is available in the location that this bucket is created in.
    /// See the docs for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultKmsKeyName"
    )]
    #[builder(default)]
    pub default_kms_key_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderLifecycleRule {
    /// The Lifecycle Rule's action configuration. A single block of this type is supported. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<BucketInitProviderLifecycleRuleAction>,
    /// The Lifecycle Rule's condition configuration. A single block of this type is supported. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub condition: Option<BucketInitProviderLifecycleRuleCondition>,
}

/// The Lifecycle Rule's action configuration. A single block of this type is supported. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderLifecycleRuleAction {
    /// The Storage Class of the new bucket. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageClass"
    )]
    #[builder(default)]
    pub storage_class: Option<String>,
    /// The type of the action of this Lifecycle Rule. Supported values include: Delete, SetStorageClass and AbortIncompleteMultipartUpload.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// The Lifecycle Rule's condition configuration. A single block of this type is supported. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderLifecycleRuleCondition {
    /// Minimum age of an object in days to satisfy this condition. If not supplied alongside another condition and without setting no_age to true, a default age of 0 will be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub age: Option<f64>,
    /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when an object is created before midnight of the specified date in UTC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdBefore"
    )]
    #[builder(default)]
    pub created_before: Option<String>,
    /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when the customTime metadata for the object is set to an earlier date than the date used in this lifecycle condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTimeBefore"
    )]
    #[builder(default)]
    pub custom_time_before: Option<String>,
    /// Days since the date set in the customTime metadata for the object. This condition is satisfied when the current date and time is at least the specified number of days after the customTime. When set to 0 it will be ignored, and your state will treat it as though you supplied no days_since_custom_time condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "daysSinceCustomTime"
    )]
    #[builder(default)]
    pub days_since_custom_time: Option<f64>,
    /// Relevant only for versioned objects. Number of days elapsed since the noncurrent timestamp of an object. When set to 0 it will be ignored, and your state will treat it as though you supplied no days_since_noncurrent_time condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "daysSinceNoncurrentTime"
    )]
    #[builder(default)]
    pub days_since_noncurrent_time: Option<f64>,
    /// One or more matching name prefixes to satisfy this condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchesPrefix"
    )]
    #[builder(default)]
    pub matches_prefix: Option<Vec<String>>,
    /// Storage Class of objects to satisfy this condition. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, DURABLE_REDUCED_AVAILABILITY.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchesStorageClass"
    )]
    #[builder(default)]
    pub matches_storage_class: Option<Vec<String>>,
    /// One or more matching name suffixes to satisfy this condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchesSuffix"
    )]
    #[builder(default)]
    pub matches_suffix: Option<Vec<String>>,
    /// While set true, age value will be omitted from requests. This prevents a default age of 0 from being applied, and if you do not have an age value set, setting this to true is strongly recommended. When unset and other conditions are set to zero values, this can result in a rule that applies your action to all files in the bucket. no_age is deprecated and will be removed in a future major release. Use send_age_if_zero instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noAge")]
    #[builder(default)]
    pub no_age: Option<bool>,
    /// Relevant only for versioned objects. The date in RFC 3339 (e.g. 2017-06-13) when the object became nonconcurrent. When set to 0 it will be ignored, and your state will treat it as though you supplied no noncurrent_time_before condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noncurrentTimeBefore"
    )]
    #[builder(default)]
    pub noncurrent_time_before: Option<String>,
    /// Relevant only for versioned objects. The number of newer versions of an object to satisfy this condition. When set to 0 it will be ignored and your state will treat it as though you supplied no num_newer_versions condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numNewerVersions"
    )]
    #[builder(default)]
    pub num_newer_versions: Option<f64>,
    /// While set true, age value will be sent in the request even for zero value of the field. This field is only useful and required for setting 0 value to the age field. It can be used alone or together with age attribute. NOTE age attibute with 0 value will be ommitted from the API request if send_age_if_zero field is having false value.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendAgeIfZero"
    )]
    #[builder(default)]
    pub send_age_if_zero: Option<bool>,
    /// While set true, days_since_custom_time value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the days_since_custom_time field. It can be used alone or together with days_since_custom_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendDaysSinceCustomTimeIfZero"
    )]
    #[builder(default)]
    pub send_days_since_custom_time_if_zero: Option<bool>,
    /// While set true, days_since_noncurrent_time value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the days_since_noncurrent_time field. It can be used alone or together with days_since_noncurrent_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendDaysSinceNoncurrentTimeIfZero"
    )]
    #[builder(default)]
    pub send_days_since_noncurrent_time_if_zero: Option<bool>,
    /// While set true, num_newer_versions value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the num_newer_versions field. It can be used alone or together with num_newer_versions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendNumNewerVersionsIfZero"
    )]
    #[builder(default)]
    pub send_num_newer_versions_if_zero: Option<bool>,
    /// Match to live and/or archived objects. Unversioned buckets have only live objects. Supported values include: "LIVE", "ARCHIVED", "ANY".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withState")]
    #[builder(default)]
    pub with_state: Option<String>,
}

/// The bucket's Access & Storage Logs configuration. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderLogging {
    /// The bucket that will receive log objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logBucket")]
    #[builder(default)]
    pub log_bucket: Option<String>,
    /// The object prefix for log objects. If it's not provided,
    /// by default GCS sets this to this bucket's name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logObjectPrefix"
    )]
    #[builder(default)]
    pub log_object_prefix: Option<String>,
}

/// Configuration of the bucket's data retention policy for how long objects in the bucket should be retained. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderRetentionPolicy {
    /// If set to true, the bucket will be locked and permanently restrict edits to the bucket's retention policy.  Caution: Locking a bucket is an irreversible action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isLocked")]
    #[builder(default)]
    pub is_locked: Option<bool>,
    /// The period of time, in seconds, that objects in the bucket must be retained and cannot be deleted, overwritten, or archived. The value must be less than 2,147,483,647 seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPeriod"
    )]
    #[builder(default)]
    pub retention_period: Option<f64>,
}

/// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderSoftDeletePolicy {
    /// The duration in seconds that soft-deleted objects in the bucket will be retained and cannot be permanently deleted. Default value is 604800. The value must be in between 604800(7 days) and 7776000(90 days). Note: To disable the soft delete policy on a bucket, This field must be set to 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionDurationSeconds"
    )]
    #[builder(default)]
    pub retention_duration_seconds: Option<f64>,
}

/// The bucket's Versioning configuration.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderVersioning {
    /// While set to true, versioning is fully enabled for this bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Configuration if the bucket acts as a website. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketInitProviderWebsite {
    /// Behaves as the bucket's directory index where
    /// missing objects are treated as potential directories.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainPageSuffix"
    )]
    #[builder(default)]
    pub main_page_suffix: Option<String>,
    /// The custom object to return when a requested
    /// resource is not found.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notFoundPage"
    )]
    #[builder(default)]
    pub not_found_page: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BucketProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<BucketProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BucketProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<BucketPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<BucketPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<BucketPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<BucketPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<BucketPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BucketStatus defines the observed state of Bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<BucketStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProvider {
    /// The bucket's Autoclass configuration.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub autoclass: Option<BucketStatusAtProviderAutoclass>,
    /// The bucket's Cross-Origin Resource Sharing (CORS) configuration. Multiple blocks of this type are permitted. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub cors: Option<Vec<BucketStatusAtProviderCors>>,
    /// The bucket's custom location configuration, which specifies the individual regions that comprise a dual-region bucket. If the bucket is designated a single or multi-region, the parameters are empty. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPlacementConfig"
    )]
    #[builder(default)]
    pub custom_placement_config: Option<BucketStatusAtProviderCustomPlacementConfig>,
    /// Whether or not to automatically apply an eventBasedHold to new objects added to the bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEventBasedHold"
    )]
    #[builder(default)]
    pub default_event_based_hold: Option<bool>,
    /// A map of key/value label pairs to assign to the bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "effectiveLabels"
    )]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Enables object retention on a storage bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableObjectRetention"
    )]
    #[builder(default)]
    pub enable_object_retention: Option<bool>,
    /// The bucket's encryption configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encryption: Option<BucketStatusAtProviderEncryption>,
    /// When deleting a bucket, this
    /// boolean option will delete all contained objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDestroy"
    )]
    #[builder(default)]
    pub force_destroy: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// A map of key/value label pairs to assign to the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The bucket's Lifecycle Rules configuration. Multiple blocks of this type are permitted. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleRule"
    )]
    #[builder(default)]
    pub lifecycle_rule: Option<Vec<BucketStatusAtProviderLifecycleRule>>,
    /// The GCS location.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// The bucket's Access & Storage Logs configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub logging: Option<BucketStatusAtProviderLogging>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "projectNumber"
    )]
    #[builder(default)]
    pub project_number: Option<f64>,
    /// Prevents public access to a bucket. Acceptable values are "inherited" or "enforced". If "inherited", the bucket uses public access prevention. only if the bucket is subject to the public access prevention organization policy constraint. Defaults to "inherited".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicAccessPrevention"
    )]
    #[builder(default)]
    pub public_access_prevention: Option<String>,
    /// Enables Requester Pays on a storage bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requesterPays"
    )]
    #[builder(default)]
    pub requester_pays: Option<bool>,
    /// Configuration of the bucket's data retention policy for how long objects in the bucket should be retained. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPolicy"
    )]
    #[builder(default)]
    pub retention_policy: Option<BucketStatusAtProviderRetentionPolicy>,
    /// The recovery point objective for cross-region replication of the bucket. Applicable only for dual and multi-region buckets. "DEFAULT" sets default replication. "ASYNC_TURBO" value enables turbo replication, valid for dual-region buckets only. See Turbo Replication for more information. If rpo is not specified at bucket creation, it defaults to "DEFAULT" for dual and multi-region buckets. NOTE If used with single-region bucket, It will throw an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub rpo: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    #[builder(default)]
    pub self_link: Option<String>,
    /// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted. Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "softDeletePolicy"
    )]
    #[builder(default)]
    pub soft_delete_policy: Option<BucketStatusAtProviderSoftDeletePolicy>,
    /// The Storage Class of the new bucket. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageClass"
    )]
    #[builder(default)]
    pub storage_class: Option<String>,
    /// A map of key/value label pairs to assign to the bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terraformLabels"
    )]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Enables Uniform bucket-level access access to a bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "uniformBucketLevelAccess"
    )]
    #[builder(default)]
    pub uniform_bucket_level_access: Option<bool>,
    /// The base URL of the bucket, in the format gs://<bucket-name>.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
    /// The bucket's Versioning configuration.  Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub versioning: Option<BucketStatusAtProviderVersioning>,
    /// Configuration if the bucket acts as a website. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub website: Option<BucketStatusAtProviderWebsite>,
}

/// The bucket's Autoclass configuration.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderAutoclass {
    /// While set to true, autoclass automatically transitions objects in your bucket to appropriate storage classes based on each object's access pattern.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
    /// The storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Supported values include: NEARLINE, ARCHIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminalStorageClass"
    )]
    #[builder(default)]
    pub terminal_storage_class: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderCors {
    /// The value, in seconds, to return in the Access-Control-Max-Age header used in preflight responses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxAgeSeconds"
    )]
    #[builder(default)]
    pub max_age_seconds: Option<f64>,
    /// The list of HTTP methods on which to include CORS response headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means "any method".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub method: Option<Vec<String>>,
    /// The list of Origins eligible to receive CORS response headers. Note: "*" is permitted in the list of origins, and means "any Origin".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub origin: Option<Vec<String>>,
    /// The list of HTTP headers other than the simple response headers to give permission for the user-agent to share across domains.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseHeader"
    )]
    #[builder(default)]
    pub response_header: Option<Vec<String>>,
}

/// The bucket's custom location configuration, which specifies the individual regions that comprise a dual-region bucket. If the bucket is designated a single or multi-region, the parameters are empty. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderCustomPlacementConfig {
    /// The list of individual regions that comprise a dual-region bucket. See Cloud Storage bucket locations for a list of acceptable regions. Note: If any of the data_locations changes, it will recreate the bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataLocations"
    )]
    #[builder(default)]
    pub data_locations: Option<Vec<String>>,
}

/// The bucket's encryption configuration. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderEncryption {
    /// : The id of a Cloud KMS key that will be used to encrypt objects inserted into this bucket, if no encryption method is specified.
    /// You must pay attention to whether the crypto key is available in the location that this bucket is created in.
    /// See the docs for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultKmsKeyName"
    )]
    #[builder(default)]
    pub default_kms_key_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderLifecycleRule {
    /// The Lifecycle Rule's action configuration. A single block of this type is supported. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<BucketStatusAtProviderLifecycleRuleAction>,
    /// The Lifecycle Rule's condition configuration. A single block of this type is supported. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub condition: Option<BucketStatusAtProviderLifecycleRuleCondition>,
}

/// The Lifecycle Rule's action configuration. A single block of this type is supported. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderLifecycleRuleAction {
    /// The Storage Class of the new bucket. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageClass"
    )]
    #[builder(default)]
    pub storage_class: Option<String>,
    /// The type of the action of this Lifecycle Rule. Supported values include: Delete, SetStorageClass and AbortIncompleteMultipartUpload.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// The Lifecycle Rule's condition configuration. A single block of this type is supported. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderLifecycleRuleCondition {
    /// Minimum age of an object in days to satisfy this condition. If not supplied alongside another condition and without setting no_age to true, a default age of 0 will be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub age: Option<f64>,
    /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when an object is created before midnight of the specified date in UTC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdBefore"
    )]
    #[builder(default)]
    pub created_before: Option<String>,
    /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when the customTime metadata for the object is set to an earlier date than the date used in this lifecycle condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTimeBefore"
    )]
    #[builder(default)]
    pub custom_time_before: Option<String>,
    /// Days since the date set in the customTime metadata for the object. This condition is satisfied when the current date and time is at least the specified number of days after the customTime. When set to 0 it will be ignored, and your state will treat it as though you supplied no days_since_custom_time condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "daysSinceCustomTime"
    )]
    #[builder(default)]
    pub days_since_custom_time: Option<f64>,
    /// Relevant only for versioned objects. Number of days elapsed since the noncurrent timestamp of an object. When set to 0 it will be ignored, and your state will treat it as though you supplied no days_since_noncurrent_time condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "daysSinceNoncurrentTime"
    )]
    #[builder(default)]
    pub days_since_noncurrent_time: Option<f64>,
    /// One or more matching name prefixes to satisfy this condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchesPrefix"
    )]
    #[builder(default)]
    pub matches_prefix: Option<Vec<String>>,
    /// Storage Class of objects to satisfy this condition. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, DURABLE_REDUCED_AVAILABILITY.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchesStorageClass"
    )]
    #[builder(default)]
    pub matches_storage_class: Option<Vec<String>>,
    /// One or more matching name suffixes to satisfy this condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchesSuffix"
    )]
    #[builder(default)]
    pub matches_suffix: Option<Vec<String>>,
    /// While set true, age value will be omitted from requests. This prevents a default age of 0 from being applied, and if you do not have an age value set, setting this to true is strongly recommended. When unset and other conditions are set to zero values, this can result in a rule that applies your action to all files in the bucket. no_age is deprecated and will be removed in a future major release. Use send_age_if_zero instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noAge")]
    #[builder(default)]
    pub no_age: Option<bool>,
    /// Relevant only for versioned objects. The date in RFC 3339 (e.g. 2017-06-13) when the object became nonconcurrent. When set to 0 it will be ignored, and your state will treat it as though you supplied no noncurrent_time_before condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noncurrentTimeBefore"
    )]
    #[builder(default)]
    pub noncurrent_time_before: Option<String>,
    /// Relevant only for versioned objects. The number of newer versions of an object to satisfy this condition. When set to 0 it will be ignored and your state will treat it as though you supplied no num_newer_versions condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numNewerVersions"
    )]
    #[builder(default)]
    pub num_newer_versions: Option<f64>,
    /// While set true, age value will be sent in the request even for zero value of the field. This field is only useful and required for setting 0 value to the age field. It can be used alone or together with age attribute. NOTE age attibute with 0 value will be ommitted from the API request if send_age_if_zero field is having false value.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendAgeIfZero"
    )]
    #[builder(default)]
    pub send_age_if_zero: Option<bool>,
    /// While set true, days_since_custom_time value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the days_since_custom_time field. It can be used alone or together with days_since_custom_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendDaysSinceCustomTimeIfZero"
    )]
    #[builder(default)]
    pub send_days_since_custom_time_if_zero: Option<bool>,
    /// While set true, days_since_noncurrent_time value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the days_since_noncurrent_time field. It can be used alone or together with days_since_noncurrent_time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendDaysSinceNoncurrentTimeIfZero"
    )]
    #[builder(default)]
    pub send_days_since_noncurrent_time_if_zero: Option<bool>,
    /// While set true, num_newer_versions value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the num_newer_versions field. It can be used alone or together with num_newer_versions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendNumNewerVersionsIfZero"
    )]
    #[builder(default)]
    pub send_num_newer_versions_if_zero: Option<bool>,
    /// Match to live and/or archived objects. Unversioned buckets have only live objects. Supported values include: "LIVE", "ARCHIVED", "ANY".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withState")]
    #[builder(default)]
    pub with_state: Option<String>,
}

/// The bucket's Access & Storage Logs configuration. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderLogging {
    /// The bucket that will receive log objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logBucket")]
    #[builder(default)]
    pub log_bucket: Option<String>,
    /// The object prefix for log objects. If it's not provided,
    /// by default GCS sets this to this bucket's name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logObjectPrefix"
    )]
    #[builder(default)]
    pub log_object_prefix: Option<String>,
}

/// Configuration of the bucket's data retention policy for how long objects in the bucket should be retained. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderRetentionPolicy {
    /// If set to true, the bucket will be locked and permanently restrict edits to the bucket's retention policy.  Caution: Locking a bucket is an irreversible action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isLocked")]
    #[builder(default)]
    pub is_locked: Option<bool>,
    /// The period of time, in seconds, that objects in the bucket must be retained and cannot be deleted, overwritten, or archived. The value must be less than 2,147,483,647 seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPeriod"
    )]
    #[builder(default)]
    pub retention_period: Option<f64>,
}

/// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderSoftDeletePolicy {
    /// (Computed) Server-determined value that indicates the time from which the policy, or one with a greater retention, was effective. This value is in RFC 3339 format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "effectiveTime"
    )]
    #[builder(default)]
    pub effective_time: Option<String>,
    /// The duration in seconds that soft-deleted objects in the bucket will be retained and cannot be permanently deleted. Default value is 604800. The value must be in between 604800(7 days) and 7776000(90 days). Note: To disable the soft delete policy on a bucket, This field must be set to 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionDurationSeconds"
    )]
    #[builder(default)]
    pub retention_duration_seconds: Option<f64>,
}

/// The bucket's Versioning configuration.  Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderVersioning {
    /// While set to true, versioning is fully enabled for this bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enabled: Option<bool>,
}

/// Configuration if the bucket acts as a website. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct BucketStatusAtProviderWebsite {
    /// Behaves as the bucket's directory index where
    /// missing objects are treated as potential directories.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainPageSuffix"
    )]
    #[builder(default)]
    pub main_page_suffix: Option<String>,
    /// The custom object to return when a requested
    /// resource is not found.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notFoundPage"
    )]
    #[builder(default)]
    pub not_found_page: Option<String>,
}

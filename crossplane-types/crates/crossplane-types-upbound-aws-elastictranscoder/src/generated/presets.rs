// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PresetSpec defines the desired state of Preset
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "elastictranscoder.aws.upbound.io", version = "v1beta2", kind = "Preset", plural = "presets")]
#[kube(status = "PresetStatus")]
pub struct PresetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<PresetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PresetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<PresetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<PresetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<PresetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<PresetWriteConnectionSecretToRef>,
}

/// PresetSpec defines the desired state of Preset
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PresetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetForProvider {
    /// Audio parameters object (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub audio: Option<PresetForProviderAudio>,
    /// Codec options for the audio parameters (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioCodecOptions")]
    #[builder(default)]
    pub audio_codec_options: Option<PresetForProviderAudioCodecOptions>,
    /// The container type for the output file. Valid values are flac, flv, fmp4, gif, mp3, mp4, mpg, mxf, oga, ogg, ts, and webm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub container: Option<String>,
    /// A description of the preset (maximum 255 characters)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The name of the preset. (maximum 40 characters)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Thumbnail parameters object (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub thumbnails: Option<PresetForProviderThumbnails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Video parameters object (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub video: Option<PresetForProviderVideo>,
    /// Codec options for the video parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoCodecOptions")]
    #[builder(default)]
    pub video_codec_options: Option<HashMap<String, String>>,
    /// Watermark parameters for the video parameters (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoWatermarks")]
    #[builder(default)]
    pub video_watermarks: Option<Vec<PresetForProviderVideoWatermarks>>,
}

/// Audio parameters object (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetForProviderAudio {
    /// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPackingMode")]
    #[builder(default)]
    pub audio_packing_mode: Option<String>,
    /// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitRate")]
    #[builder(default)]
    pub bit_rate: Option<String>,
    /// The number of audio channels in the output file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub channels: Option<String>,
    /// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub codec: Option<String>,
    /// The sample rate of the audio stream in the output file, in hertz. Valid values are: auto, 22050, 32000, 44100, 48000, 96000
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    #[builder(default)]
    pub sample_rate: Option<String>,
}

/// Codec options for the audio parameters (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetForProviderAudioCodecOptions {
    /// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are 16 and 24. (FLAC/PCM Only)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitDepth")]
    #[builder(default)]
    pub bit_depth: Option<String>,
    /// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitOrder")]
    #[builder(default)]
    pub bit_order: Option<String>,
    /// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub signed: Option<String>,
}

/// Thumbnail parameters object (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetForProviderThumbnails {
    /// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aspectRatio")]
    #[builder(default)]
    pub aspect_ratio: Option<String>,
    /// The format of thumbnails, if any. Valid formats are jpg and png.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<String>,
    /// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeight")]
    #[builder(default)]
    pub max_height: Option<String>,
    /// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWidth")]
    #[builder(default)]
    pub max_width: Option<String>,
    /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "paddingPolicy")]
    #[builder(default)]
    pub padding_policy: Option<String>,
    /// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<String>,
    /// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizingPolicy")]
    #[builder(default)]
    pub sizing_policy: Option<String>,
}

/// Video parameters object (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetForProviderVideo {
    /// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aspectRatio")]
    #[builder(default)]
    pub aspect_ratio: Option<String>,
    /// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitRate")]
    #[builder(default)]
    pub bit_rate: Option<String>,
    /// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub codec: Option<String>,
    /// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayAspectRatio")]
    #[builder(default)]
    pub display_aspect_ratio: Option<String>,
    /// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedGop")]
    #[builder(default)]
    pub fixed_gop: Option<String>,
    /// The frames per second for the video stream in the output file. The following values are valid: auto, 10, 15, 23.97, 24, 25, 29.97, 30, 50, 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameRate")]
    #[builder(default)]
    pub frame_rate: Option<String>,
    /// The maximum number of frames between key frames. Not applicable for containers of type gif.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyframesMaxDist")]
    #[builder(default)]
    pub keyframes_max_dist: Option<String>,
    /// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFrameRate")]
    #[builder(default)]
    pub max_frame_rate: Option<String>,
    /// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeight")]
    #[builder(default)]
    pub max_height: Option<String>,
    /// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWidth")]
    #[builder(default)]
    pub max_width: Option<String>,
    /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "paddingPolicy")]
    #[builder(default)]
    pub padding_policy: Option<String>,
    /// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<String>,
    /// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizingPolicy")]
    #[builder(default)]
    pub sizing_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetForProviderVideoWatermarks {
    /// The horizontal position of the watermark unless you specify a nonzero value for horzontal_offset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "horizontalAlign")]
    #[builder(default)]
    pub horizontal_align: Option<String>,
    /// The amount by which you want the horizontal position of the watermark to be offset from the position specified by horizontal_align.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "horizontalOffset")]
    #[builder(default)]
    pub horizontal_offset: Option<String>,
    /// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeight")]
    #[builder(default)]
    pub max_height: Option<String>,
    /// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWidth")]
    #[builder(default)]
    pub max_width: Option<String>,
    /// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub opacity: Option<String>,
    /// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizingPolicy")]
    #[builder(default)]
    pub sizing_policy: Option<String>,
    /// A value that determines how Elastic Transcoder interprets values that you specified for video_watermarks.horizontal_offset, video_watermarks.vertical_offset, video_watermarks.max_width, and video_watermarks.max_height. Valid values are Content and Frame.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
    /// The vertical position of the watermark unless you specify a nonzero value for vertical_align. Valid values are Top, Bottom, Center.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verticalAlign")]
    #[builder(default)]
    pub vertical_align: Option<String>,
    /// The amount by which you want the vertical position of the watermark to be offset from the position specified by vertical_align
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verticalOffset")]
    #[builder(default)]
    pub vertical_offset: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetInitProvider {
    /// Audio parameters object (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub audio: Option<PresetInitProviderAudio>,
    /// Codec options for the audio parameters (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioCodecOptions")]
    #[builder(default)]
    pub audio_codec_options: Option<PresetInitProviderAudioCodecOptions>,
    /// The container type for the output file. Valid values are flac, flv, fmp4, gif, mp3, mp4, mpg, mxf, oga, ogg, ts, and webm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub container: Option<String>,
    /// A description of the preset (maximum 255 characters)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The name of the preset. (maximum 40 characters)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Thumbnail parameters object (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub thumbnails: Option<PresetInitProviderThumbnails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Video parameters object (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub video: Option<PresetInitProviderVideo>,
    /// Codec options for the video parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoCodecOptions")]
    #[builder(default)]
    pub video_codec_options: Option<HashMap<String, String>>,
    /// Watermark parameters for the video parameters (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoWatermarks")]
    #[builder(default)]
    pub video_watermarks: Option<Vec<PresetInitProviderVideoWatermarks>>,
}

/// Audio parameters object (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetInitProviderAudio {
    /// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPackingMode")]
    #[builder(default)]
    pub audio_packing_mode: Option<String>,
    /// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitRate")]
    #[builder(default)]
    pub bit_rate: Option<String>,
    /// The number of audio channels in the output file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub channels: Option<String>,
    /// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub codec: Option<String>,
    /// The sample rate of the audio stream in the output file, in hertz. Valid values are: auto, 22050, 32000, 44100, 48000, 96000
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    #[builder(default)]
    pub sample_rate: Option<String>,
}

/// Codec options for the audio parameters (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetInitProviderAudioCodecOptions {
    /// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are 16 and 24. (FLAC/PCM Only)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitDepth")]
    #[builder(default)]
    pub bit_depth: Option<String>,
    /// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitOrder")]
    #[builder(default)]
    pub bit_order: Option<String>,
    /// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub signed: Option<String>,
}

/// Thumbnail parameters object (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetInitProviderThumbnails {
    /// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aspectRatio")]
    #[builder(default)]
    pub aspect_ratio: Option<String>,
    /// The format of thumbnails, if any. Valid formats are jpg and png.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<String>,
    /// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeight")]
    #[builder(default)]
    pub max_height: Option<String>,
    /// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWidth")]
    #[builder(default)]
    pub max_width: Option<String>,
    /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "paddingPolicy")]
    #[builder(default)]
    pub padding_policy: Option<String>,
    /// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<String>,
    /// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizingPolicy")]
    #[builder(default)]
    pub sizing_policy: Option<String>,
}

/// Video parameters object (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetInitProviderVideo {
    /// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aspectRatio")]
    #[builder(default)]
    pub aspect_ratio: Option<String>,
    /// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitRate")]
    #[builder(default)]
    pub bit_rate: Option<String>,
    /// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub codec: Option<String>,
    /// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayAspectRatio")]
    #[builder(default)]
    pub display_aspect_ratio: Option<String>,
    /// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedGop")]
    #[builder(default)]
    pub fixed_gop: Option<String>,
    /// The frames per second for the video stream in the output file. The following values are valid: auto, 10, 15, 23.97, 24, 25, 29.97, 30, 50, 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameRate")]
    #[builder(default)]
    pub frame_rate: Option<String>,
    /// The maximum number of frames between key frames. Not applicable for containers of type gif.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyframesMaxDist")]
    #[builder(default)]
    pub keyframes_max_dist: Option<String>,
    /// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFrameRate")]
    #[builder(default)]
    pub max_frame_rate: Option<String>,
    /// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeight")]
    #[builder(default)]
    pub max_height: Option<String>,
    /// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWidth")]
    #[builder(default)]
    pub max_width: Option<String>,
    /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "paddingPolicy")]
    #[builder(default)]
    pub padding_policy: Option<String>,
    /// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<String>,
    /// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizingPolicy")]
    #[builder(default)]
    pub sizing_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetInitProviderVideoWatermarks {
    /// The horizontal position of the watermark unless you specify a nonzero value for horzontal_offset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "horizontalAlign")]
    #[builder(default)]
    pub horizontal_align: Option<String>,
    /// The amount by which you want the horizontal position of the watermark to be offset from the position specified by horizontal_align.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "horizontalOffset")]
    #[builder(default)]
    pub horizontal_offset: Option<String>,
    /// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeight")]
    #[builder(default)]
    pub max_height: Option<String>,
    /// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWidth")]
    #[builder(default)]
    pub max_width: Option<String>,
    /// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub opacity: Option<String>,
    /// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizingPolicy")]
    #[builder(default)]
    pub sizing_policy: Option<String>,
    /// A value that determines how Elastic Transcoder interprets values that you specified for video_watermarks.horizontal_offset, video_watermarks.vertical_offset, video_watermarks.max_width, and video_watermarks.max_height. Valid values are Content and Frame.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
    /// The vertical position of the watermark unless you specify a nonzero value for vertical_align. Valid values are Top, Bottom, Center.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verticalAlign")]
    #[builder(default)]
    pub vertical_align: Option<String>,
    /// The amount by which you want the vertical position of the watermark to be offset from the position specified by vertical_align
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verticalOffset")]
    #[builder(default)]
    pub vertical_offset: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<PresetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<PresetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<PresetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PresetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PresetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<PresetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<PresetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<PresetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<PresetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<PresetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PresetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PresetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PresetStatus defines the observed state of Preset.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<PresetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetStatusAtProvider {
    /// Amazon Resource Name (ARN) of the Elastic Transcoder Preset.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Audio parameters object (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub audio: Option<PresetStatusAtProviderAudio>,
    /// Codec options for the audio parameters (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioCodecOptions")]
    #[builder(default)]
    pub audio_codec_options: Option<PresetStatusAtProviderAudioCodecOptions>,
    /// The container type for the output file. Valid values are flac, flv, fmp4, gif, mp3, mp4, mpg, mxf, oga, ogg, ts, and webm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub container: Option<String>,
    /// A description of the preset (maximum 255 characters)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The name of the preset. (maximum 40 characters)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Thumbnail parameters object (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub thumbnails: Option<PresetStatusAtProviderThumbnails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Video parameters object (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub video: Option<PresetStatusAtProviderVideo>,
    /// Codec options for the video parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoCodecOptions")]
    #[builder(default)]
    pub video_codec_options: Option<HashMap<String, String>>,
    /// Watermark parameters for the video parameters (documented below)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "videoWatermarks")]
    #[builder(default)]
    pub video_watermarks: Option<Vec<PresetStatusAtProviderVideoWatermarks>>,
}

/// Audio parameters object (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetStatusAtProviderAudio {
    /// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "audioPackingMode")]
    #[builder(default)]
    pub audio_packing_mode: Option<String>,
    /// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitRate")]
    #[builder(default)]
    pub bit_rate: Option<String>,
    /// The number of audio channels in the output file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub channels: Option<String>,
    /// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub codec: Option<String>,
    /// The sample rate of the audio stream in the output file, in hertz. Valid values are: auto, 22050, 32000, 44100, 48000, 96000
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    #[builder(default)]
    pub sample_rate: Option<String>,
}

/// Codec options for the audio parameters (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetStatusAtProviderAudioCodecOptions {
    /// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are 16 and 24. (FLAC/PCM Only)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitDepth")]
    #[builder(default)]
    pub bit_depth: Option<String>,
    /// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitOrder")]
    #[builder(default)]
    pub bit_order: Option<String>,
    /// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub profile: Option<String>,
    /// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub signed: Option<String>,
}

/// Thumbnail parameters object (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetStatusAtProviderThumbnails {
    /// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aspectRatio")]
    #[builder(default)]
    pub aspect_ratio: Option<String>,
    /// The format of thumbnails, if any. Valid formats are jpg and png.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub format: Option<String>,
    /// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<String>,
    /// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeight")]
    #[builder(default)]
    pub max_height: Option<String>,
    /// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWidth")]
    #[builder(default)]
    pub max_width: Option<String>,
    /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "paddingPolicy")]
    #[builder(default)]
    pub padding_policy: Option<String>,
    /// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<String>,
    /// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizingPolicy")]
    #[builder(default)]
    pub sizing_policy: Option<String>,
}

/// Video parameters object (documented below)
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetStatusAtProviderVideo {
    /// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aspectRatio")]
    #[builder(default)]
    pub aspect_ratio: Option<String>,
    /// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitRate")]
    #[builder(default)]
    pub bit_rate: Option<String>,
    /// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub codec: Option<String>,
    /// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayAspectRatio")]
    #[builder(default)]
    pub display_aspect_ratio: Option<String>,
    /// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedGop")]
    #[builder(default)]
    pub fixed_gop: Option<String>,
    /// The frames per second for the video stream in the output file. The following values are valid: auto, 10, 15, 23.97, 24, 25, 29.97, 30, 50, 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameRate")]
    #[builder(default)]
    pub frame_rate: Option<String>,
    /// The maximum number of frames between key frames. Not applicable for containers of type gif.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyframesMaxDist")]
    #[builder(default)]
    pub keyframes_max_dist: Option<String>,
    /// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFrameRate")]
    #[builder(default)]
    pub max_frame_rate: Option<String>,
    /// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeight")]
    #[builder(default)]
    pub max_height: Option<String>,
    /// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWidth")]
    #[builder(default)]
    pub max_width: Option<String>,
    /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "paddingPolicy")]
    #[builder(default)]
    pub padding_policy: Option<String>,
    /// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<String>,
    /// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizingPolicy")]
    #[builder(default)]
    pub sizing_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct PresetStatusAtProviderVideoWatermarks {
    /// The horizontal position of the watermark unless you specify a nonzero value for horzontal_offset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "horizontalAlign")]
    #[builder(default)]
    pub horizontal_align: Option<String>,
    /// The amount by which you want the horizontal position of the watermark to be offset from the position specified by horizontal_align.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "horizontalOffset")]
    #[builder(default)]
    pub horizontal_offset: Option<String>,
    /// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeight")]
    #[builder(default)]
    pub max_height: Option<String>,
    /// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWidth")]
    #[builder(default)]
    pub max_width: Option<String>,
    /// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub opacity: Option<String>,
    /// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizingPolicy")]
    #[builder(default)]
    pub sizing_policy: Option<String>,
    /// A value that determines how Elastic Transcoder interprets values that you specified for video_watermarks.horizontal_offset, video_watermarks.vertical_offset, video_watermarks.max_width, and video_watermarks.max_height. Valid values are Content and Frame.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
    /// The vertical position of the watermark unless you specify a nonzero value for vertical_align. Valid values are Top, Bottom, Center.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verticalAlign")]
    #[builder(default)]
    pub vertical_align: Option<String>,
    /// The amount by which you want the vertical position of the watermark to be offset from the position specified by vertical_align
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verticalOffset")]
    #[builder(default)]
    pub vertical_offset: Option<String>,
}


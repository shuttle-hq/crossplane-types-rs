// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// DetectorSpec defines the desired state of Detector
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "guardduty.aws.upbound.io",
    version = "v1beta2",
    kind = "Detector",
    plural = "detectors"
)]
#[kube(status = "DetectorStatus")]
pub struct DetectorSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<DetectorDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DetectorForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<DetectorInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<DetectorProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<DetectorPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<DetectorWriteConnectionSecretToRef>,
}

/// DetectorSpec defines the desired state of Detector
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DetectorDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorForProvider {
    /// Describes which data sources will be enabled for the detector. See Data Sources below for more details. Deprecated in favor of aws_guardduty_detector_feature resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub datasources: Option<DetectorForProviderDatasources>,
    /// Enable monitoring and feedback reporting. Setting to false is equivalent to "suspending" GuardDuty. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// Specifies the frequency of notifications sent for subsequent finding occurrences. If the detector is a GuardDuty member account, the value is determined by the GuardDuty primary account and cannot be modified, otherwise defaults to SIX_HOURS. Valid values for standalone and primary accounts: FIFTEEN_MINUTES, ONE_HOUR, SIX_HOURS. See AWS Documentation for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "findingPublishingFrequency"
    )]
    #[builder(default)]
    pub finding_publishing_frequency: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Describes which data sources will be enabled for the detector. See Data Sources below for more details. Deprecated in favor of aws_guardduty_detector_feature resources.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorForProviderDatasources {
    /// Configures Kubernetes protection.
    /// See Kubernetes and Kubernetes Audit Logs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub kubernetes: Option<DetectorForProviderDatasourcesKubernetes>,
    /// Configures Malware Protection.
    /// See Malware Protection, Scan EC2 instance with findings and EBS volumes below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "malwareProtection"
    )]
    #[builder(default)]
    pub malware_protection: Option<DetectorForProviderDatasourcesMalwareProtection>,
    /// Configures S3 protection.
    /// See S3 Logs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Logs")]
    #[builder(default)]
    pub s3_logs: Option<DetectorForProviderDatasourcesS3Logs>,
}

/// Configures Kubernetes protection.
/// See Kubernetes and Kubernetes Audit Logs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorForProviderDatasourcesKubernetes {
    /// Configures Kubernetes audit logs as a data source for Kubernetes protection.
    /// See Kubernetes Audit Logs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogs")]
    #[builder(default)]
    pub audit_logs: Option<DetectorForProviderDatasourcesKubernetesAuditLogs>,
}

/// Configures Kubernetes audit logs as a data source for Kubernetes protection.
/// See Kubernetes Audit Logs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorForProviderDatasourcesKubernetesAuditLogs {
    /// If true, enables Malware Protection as data source for the detector.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
}

/// Configures Malware Protection.
/// See Malware Protection, Scan EC2 instance with findings and EBS volumes below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorForProviderDatasourcesMalwareProtection {
    /// Configure whether Malware Protection is enabled as data source for EC2 instances with findings for the detector.
    /// See Scan EC2 instance with findings below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scanEc2InstanceWithFindings"
    )]
    #[builder(default)]
    pub scan_ec2_instance_with_findings:
        Option<DetectorForProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindings>,
}

/// Configure whether Malware Protection is enabled as data source for EC2 instances with findings for the detector.
/// See Scan EC2 instance with findings below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorForProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindings {
    /// Configure whether scanning EBS volumes is enabled as data source for the detector for instances with findings.
    /// See EBS volumes below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsVolumes"
    )]
    #[builder(default)]
    pub ebs_volumes: Option<
        DetectorForProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes,
    >,
}

/// Configure whether scanning EBS volumes is enabled as data source for the detector for instances with findings.
/// See EBS volumes below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorForProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes {
    /// If true, enables Malware Protection as data source for the detector.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
}

/// Configures S3 protection.
/// See S3 Logs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorForProviderDatasourcesS3Logs {
    /// If true, enables S3 protection.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorInitProvider {
    /// Describes which data sources will be enabled for the detector. See Data Sources below for more details. Deprecated in favor of aws_guardduty_detector_feature resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub datasources: Option<DetectorInitProviderDatasources>,
    /// Enable monitoring and feedback reporting. Setting to false is equivalent to "suspending" GuardDuty. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// Specifies the frequency of notifications sent for subsequent finding occurrences. If the detector is a GuardDuty member account, the value is determined by the GuardDuty primary account and cannot be modified, otherwise defaults to SIX_HOURS. Valid values for standalone and primary accounts: FIFTEEN_MINUTES, ONE_HOUR, SIX_HOURS. See AWS Documentation for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "findingPublishingFrequency"
    )]
    #[builder(default)]
    pub finding_publishing_frequency: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Describes which data sources will be enabled for the detector. See Data Sources below for more details. Deprecated in favor of aws_guardduty_detector_feature resources.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorInitProviderDatasources {
    /// Configures Kubernetes protection.
    /// See Kubernetes and Kubernetes Audit Logs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub kubernetes: Option<DetectorInitProviderDatasourcesKubernetes>,
    /// Configures Malware Protection.
    /// See Malware Protection, Scan EC2 instance with findings and EBS volumes below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "malwareProtection"
    )]
    #[builder(default)]
    pub malware_protection: Option<DetectorInitProviderDatasourcesMalwareProtection>,
    /// Configures S3 protection.
    /// See S3 Logs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Logs")]
    #[builder(default)]
    pub s3_logs: Option<DetectorInitProviderDatasourcesS3Logs>,
}

/// Configures Kubernetes protection.
/// See Kubernetes and Kubernetes Audit Logs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorInitProviderDatasourcesKubernetes {
    /// Configures Kubernetes audit logs as a data source for Kubernetes protection.
    /// See Kubernetes Audit Logs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogs")]
    #[builder(default)]
    pub audit_logs: Option<DetectorInitProviderDatasourcesKubernetesAuditLogs>,
}

/// Configures Kubernetes audit logs as a data source for Kubernetes protection.
/// See Kubernetes Audit Logs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorInitProviderDatasourcesKubernetesAuditLogs {
    /// If true, enables Malware Protection as data source for the detector.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
}

/// Configures Malware Protection.
/// See Malware Protection, Scan EC2 instance with findings and EBS volumes below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorInitProviderDatasourcesMalwareProtection {
    /// Configure whether Malware Protection is enabled as data source for EC2 instances with findings for the detector.
    /// See Scan EC2 instance with findings below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scanEc2InstanceWithFindings"
    )]
    #[builder(default)]
    pub scan_ec2_instance_with_findings:
        Option<DetectorInitProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindings>,
}

/// Configure whether Malware Protection is enabled as data source for EC2 instances with findings for the detector.
/// See Scan EC2 instance with findings below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorInitProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindings {
    /// Configure whether scanning EBS volumes is enabled as data source for the detector for instances with findings.
    /// See EBS volumes below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsVolumes"
    )]
    #[builder(default)]
    pub ebs_volumes: Option<
        DetectorInitProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes,
    >,
}

/// Configure whether scanning EBS volumes is enabled as data source for the detector for instances with findings.
/// See EBS volumes below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorInitProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes {
    /// If true, enables Malware Protection as data source for the detector.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
}

/// Configures S3 protection.
/// See S3 Logs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorInitProviderDatasourcesS3Logs {
    /// If true, enables S3 protection.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DetectorProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DetectorProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DetectorProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DetectorProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DetectorProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<DetectorPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<DetectorPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DetectorPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DetectorPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DetectorPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DetectorPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DetectorPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DetectorStatus defines the observed state of Detector.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<DetectorStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorStatusAtProvider {
    /// The AWS account ID of the GuardDuty detector
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// Amazon Resource Name (ARN) of the GuardDuty detector
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Describes which data sources will be enabled for the detector. See Data Sources below for more details. Deprecated in favor of aws_guardduty_detector_feature resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub datasources: Option<DetectorStatusAtProviderDatasources>,
    /// Enable monitoring and feedback reporting. Setting to false is equivalent to "suspending" GuardDuty. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
    /// Specifies the frequency of notifications sent for subsequent finding occurrences. If the detector is a GuardDuty member account, the value is determined by the GuardDuty primary account and cannot be modified, otherwise defaults to SIX_HOURS. Valid values for standalone and primary accounts: FIFTEEN_MINUTES, ONE_HOUR, SIX_HOURS. See AWS Documentation for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "findingPublishingFrequency"
    )]
    #[builder(default)]
    pub finding_publishing_frequency: Option<String>,
    /// The ID of the GuardDuty detector
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

/// Describes which data sources will be enabled for the detector. See Data Sources below for more details. Deprecated in favor of aws_guardduty_detector_feature resources.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorStatusAtProviderDatasources {
    /// Configures Kubernetes protection.
    /// See Kubernetes and Kubernetes Audit Logs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub kubernetes: Option<DetectorStatusAtProviderDatasourcesKubernetes>,
    /// Configures Malware Protection.
    /// See Malware Protection, Scan EC2 instance with findings and EBS volumes below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "malwareProtection"
    )]
    #[builder(default)]
    pub malware_protection: Option<DetectorStatusAtProviderDatasourcesMalwareProtection>,
    /// Configures S3 protection.
    /// See S3 Logs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Logs")]
    #[builder(default)]
    pub s3_logs: Option<DetectorStatusAtProviderDatasourcesS3Logs>,
}

/// Configures Kubernetes protection.
/// See Kubernetes and Kubernetes Audit Logs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorStatusAtProviderDatasourcesKubernetes {
    /// Configures Kubernetes audit logs as a data source for Kubernetes protection.
    /// See Kubernetes Audit Logs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogs")]
    #[builder(default)]
    pub audit_logs: Option<DetectorStatusAtProviderDatasourcesKubernetesAuditLogs>,
}

/// Configures Kubernetes audit logs as a data source for Kubernetes protection.
/// See Kubernetes Audit Logs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorStatusAtProviderDatasourcesKubernetesAuditLogs {
    /// If true, enables Malware Protection as data source for the detector.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
}

/// Configures Malware Protection.
/// See Malware Protection, Scan EC2 instance with findings and EBS volumes below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorStatusAtProviderDatasourcesMalwareProtection {
    /// Configure whether Malware Protection is enabled as data source for EC2 instances with findings for the detector.
    /// See Scan EC2 instance with findings below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scanEc2InstanceWithFindings"
    )]
    #[builder(default)]
    pub scan_ec2_instance_with_findings:
        Option<DetectorStatusAtProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindings>,
}

/// Configure whether Malware Protection is enabled as data source for EC2 instances with findings for the detector.
/// See Scan EC2 instance with findings below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorStatusAtProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindings {
    /// Configure whether scanning EBS volumes is enabled as data source for the detector for instances with findings.
    /// See EBS volumes below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsVolumes"
    )]
    #[builder(default)]
    pub ebs_volumes: Option<
        DetectorStatusAtProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes,
    >,
}

/// Configure whether scanning EBS volumes is enabled as data source for the detector for instances with findings.
/// See EBS volumes below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorStatusAtProviderDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes
{
    /// If true, enables Malware Protection as data source for the detector.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
}

/// Configures S3 protection.
/// See S3 Logs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DetectorStatusAtProviderDatasourcesS3Logs {
    /// If true, enables S3 protection.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub enable: Option<bool>,
}

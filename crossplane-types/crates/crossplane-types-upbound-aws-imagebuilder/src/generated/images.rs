// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ImageSpec defines the desired state of Image
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "imagebuilder.aws.upbound.io", version = "v1beta2", kind = "Image", plural = "images")]
#[kube(status = "ImageStatus")]
pub struct ImageSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<ImageDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ImageForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<ImageInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<ImageProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<ImagePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ImageWriteConnectionSecretToRef>,
}

/// ImageSpec defines the desired state of Image
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProvider {
    /// - Amazon Resource Name (ARN) of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerRecipeArn")]
    #[builder(default)]
    pub container_recipe_arn: Option<String>,
    /// Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArn")]
    #[builder(default)]
    pub distribution_configuration_arn: Option<String>,
    /// Reference to a DistributionConfiguration in imagebuilder to populate distributionConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArnRef")]
    #[builder(default)]
    pub distribution_configuration_arn_ref: Option<ImageForProviderDistributionConfigurationArnRef>,
    /// Selector for a DistributionConfiguration in imagebuilder to populate distributionConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArnSelector")]
    #[builder(default)]
    pub distribution_configuration_arn_selector: Option<ImageForProviderDistributionConfigurationArnSelector>,
    /// Whether additional information about the image being created is collected. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedImageMetadataEnabled")]
    #[builder(default)]
    pub enhanced_image_metadata_enabled: Option<bool>,
    /// Amazon Resource Name (ARN) of the service-linked role to be used by Image Builder to execute workflows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// Amazon Resource Name (ARN) of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArn")]
    #[builder(default)]
    pub image_recipe_arn: Option<String>,
    /// Reference to a ImageRecipe in imagebuilder to populate imageRecipeArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArnRef")]
    #[builder(default)]
    pub image_recipe_arn_ref: Option<ImageForProviderImageRecipeArnRef>,
    /// Selector for a ImageRecipe in imagebuilder to populate imageRecipeArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArnSelector")]
    #[builder(default)]
    pub image_recipe_arn_selector: Option<ImageForProviderImageRecipeArnSelector>,
    /// Configuration block with image scanning configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningConfiguration")]
    #[builder(default)]
    pub image_scanning_configuration: Option<ImageForProviderImageScanningConfiguration>,
    /// Configuration block with image tests configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsConfiguration")]
    #[builder(default)]
    pub image_tests_configuration: Option<ImageForProviderImageTestsConfiguration>,
    /// Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArn")]
    #[builder(default)]
    pub infrastructure_configuration_arn: Option<String>,
    /// Reference to a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArnRef")]
    #[builder(default)]
    pub infrastructure_configuration_arn_ref: Option<ImageForProviderInfrastructureConfigurationArnRef>,
    /// Selector for a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArnSelector")]
    #[builder(default)]
    pub infrastructure_configuration_arn_selector: Option<ImageForProviderInfrastructureConfigurationArnSelector>,
    /// Region of the AMI.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block with the workflow configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub workflow: Option<Vec<ImageForProviderWorkflow>>,
}

/// Reference to a DistributionConfiguration in imagebuilder to populate distributionConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderDistributionConfigurationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageForProviderDistributionConfigurationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderDistributionConfigurationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageForProviderDistributionConfigurationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageForProviderDistributionConfigurationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderDistributionConfigurationArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderDistributionConfigurationArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DistributionConfiguration in imagebuilder to populate distributionConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderDistributionConfigurationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageForProviderDistributionConfigurationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderDistributionConfigurationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageForProviderDistributionConfigurationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageForProviderDistributionConfigurationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderDistributionConfigurationArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderDistributionConfigurationArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ImageRecipe in imagebuilder to populate imageRecipeArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderImageRecipeArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageForProviderImageRecipeArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderImageRecipeArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageForProviderImageRecipeArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageForProviderImageRecipeArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderImageRecipeArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderImageRecipeArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ImageRecipe in imagebuilder to populate imageRecipeArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderImageRecipeArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageForProviderImageRecipeArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderImageRecipeArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageForProviderImageRecipeArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageForProviderImageRecipeArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderImageRecipeArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderImageRecipeArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with image scanning configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderImageScanningConfiguration {
    /// Configuration block with ECR configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecrConfiguration")]
    #[builder(default)]
    pub ecr_configuration: Option<ImageForProviderImageScanningConfigurationEcrConfiguration>,
    /// Indicates whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningEnabled")]
    #[builder(default)]
    pub image_scanning_enabled: Option<bool>,
}

/// Configuration block with ECR configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderImageScanningConfigurationEcrConfiguration {
    /// Set of tags for Image Builder to apply to the output container image that that Amazon Inspector scans.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerTags")]
    #[builder(default)]
    pub container_tags: Option<Vec<String>>,
    /// The name of the container repository that Amazon Inspector scans to identify findings for your container images.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryName")]
    #[builder(default)]
    pub repository_name: Option<String>,
}

/// Configuration block with image tests configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderImageTestsConfiguration {
    /// Whether image tests are enabled. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsEnabled")]
    #[builder(default)]
    pub image_tests_enabled: Option<bool>,
    /// Number of minutes before image tests time out. Valid values are between 60 and 1440. Defaults to 720.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMinutes")]
    #[builder(default)]
    pub timeout_minutes: Option<f64>,
}

/// Reference to a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderInfrastructureConfigurationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageForProviderInfrastructureConfigurationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderInfrastructureConfigurationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageForProviderInfrastructureConfigurationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageForProviderInfrastructureConfigurationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderInfrastructureConfigurationArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderInfrastructureConfigurationArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderInfrastructureConfigurationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageForProviderInfrastructureConfigurationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderInfrastructureConfigurationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageForProviderInfrastructureConfigurationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageForProviderInfrastructureConfigurationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderInfrastructureConfigurationArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageForProviderInfrastructureConfigurationArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderWorkflow {
    /// The action to take if the workflow fails. Must be one of CONTINUE or ABORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onFailure")]
    #[builder(default)]
    pub on_failure: Option<String>,
    /// The parallel group in which to run a test Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parallelGroup")]
    #[builder(default)]
    pub parallel_group: Option<String>,
    /// Configuration block for the workflow parameters. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameter: Option<Vec<ImageForProviderWorkflowParameter>>,
    /// Amazon Resource Name (ARN) of the Image Builder Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowArn")]
    #[builder(default)]
    pub workflow_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageForProviderWorkflowParameter {
    /// The name of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The value of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProvider {
    /// - Amazon Resource Name (ARN) of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerRecipeArn")]
    #[builder(default)]
    pub container_recipe_arn: Option<String>,
    /// Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArn")]
    #[builder(default)]
    pub distribution_configuration_arn: Option<String>,
    /// Reference to a DistributionConfiguration in imagebuilder to populate distributionConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArnRef")]
    #[builder(default)]
    pub distribution_configuration_arn_ref: Option<ImageInitProviderDistributionConfigurationArnRef>,
    /// Selector for a DistributionConfiguration in imagebuilder to populate distributionConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArnSelector")]
    #[builder(default)]
    pub distribution_configuration_arn_selector: Option<ImageInitProviderDistributionConfigurationArnSelector>,
    /// Whether additional information about the image being created is collected. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedImageMetadataEnabled")]
    #[builder(default)]
    pub enhanced_image_metadata_enabled: Option<bool>,
    /// Amazon Resource Name (ARN) of the service-linked role to be used by Image Builder to execute workflows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// Amazon Resource Name (ARN) of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArn")]
    #[builder(default)]
    pub image_recipe_arn: Option<String>,
    /// Reference to a ImageRecipe in imagebuilder to populate imageRecipeArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArnRef")]
    #[builder(default)]
    pub image_recipe_arn_ref: Option<ImageInitProviderImageRecipeArnRef>,
    /// Selector for a ImageRecipe in imagebuilder to populate imageRecipeArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArnSelector")]
    #[builder(default)]
    pub image_recipe_arn_selector: Option<ImageInitProviderImageRecipeArnSelector>,
    /// Configuration block with image scanning configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningConfiguration")]
    #[builder(default)]
    pub image_scanning_configuration: Option<ImageInitProviderImageScanningConfiguration>,
    /// Configuration block with image tests configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsConfiguration")]
    #[builder(default)]
    pub image_tests_configuration: Option<ImageInitProviderImageTestsConfiguration>,
    /// Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArn")]
    #[builder(default)]
    pub infrastructure_configuration_arn: Option<String>,
    /// Reference to a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArnRef")]
    #[builder(default)]
    pub infrastructure_configuration_arn_ref: Option<ImageInitProviderInfrastructureConfigurationArnRef>,
    /// Selector for a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArnSelector")]
    #[builder(default)]
    pub infrastructure_configuration_arn_selector: Option<ImageInitProviderInfrastructureConfigurationArnSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block with the workflow configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub workflow: Option<Vec<ImageInitProviderWorkflow>>,
}

/// Reference to a DistributionConfiguration in imagebuilder to populate distributionConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderDistributionConfigurationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageInitProviderDistributionConfigurationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderDistributionConfigurationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageInitProviderDistributionConfigurationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageInitProviderDistributionConfigurationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderDistributionConfigurationArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderDistributionConfigurationArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DistributionConfiguration in imagebuilder to populate distributionConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderDistributionConfigurationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageInitProviderDistributionConfigurationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderDistributionConfigurationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageInitProviderDistributionConfigurationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageInitProviderDistributionConfigurationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderDistributionConfigurationArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderDistributionConfigurationArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ImageRecipe in imagebuilder to populate imageRecipeArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderImageRecipeArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageInitProviderImageRecipeArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderImageRecipeArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageInitProviderImageRecipeArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageInitProviderImageRecipeArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderImageRecipeArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderImageRecipeArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ImageRecipe in imagebuilder to populate imageRecipeArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderImageRecipeArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageInitProviderImageRecipeArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderImageRecipeArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageInitProviderImageRecipeArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageInitProviderImageRecipeArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderImageRecipeArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderImageRecipeArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with image scanning configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderImageScanningConfiguration {
    /// Configuration block with ECR configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecrConfiguration")]
    #[builder(default)]
    pub ecr_configuration: Option<ImageInitProviderImageScanningConfigurationEcrConfiguration>,
    /// Indicates whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningEnabled")]
    #[builder(default)]
    pub image_scanning_enabled: Option<bool>,
}

/// Configuration block with ECR configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderImageScanningConfigurationEcrConfiguration {
    /// Set of tags for Image Builder to apply to the output container image that that Amazon Inspector scans.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerTags")]
    #[builder(default)]
    pub container_tags: Option<Vec<String>>,
    /// The name of the container repository that Amazon Inspector scans to identify findings for your container images.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryName")]
    #[builder(default)]
    pub repository_name: Option<String>,
}

/// Configuration block with image tests configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderImageTestsConfiguration {
    /// Whether image tests are enabled. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsEnabled")]
    #[builder(default)]
    pub image_tests_enabled: Option<bool>,
    /// Number of minutes before image tests time out. Valid values are between 60 and 1440. Defaults to 720.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMinutes")]
    #[builder(default)]
    pub timeout_minutes: Option<f64>,
}

/// Reference to a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderInfrastructureConfigurationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageInitProviderInfrastructureConfigurationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderInfrastructureConfigurationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageInitProviderInfrastructureConfigurationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageInitProviderInfrastructureConfigurationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderInfrastructureConfigurationArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderInfrastructureConfigurationArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderInfrastructureConfigurationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageInitProviderInfrastructureConfigurationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderInfrastructureConfigurationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageInitProviderInfrastructureConfigurationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageInitProviderInfrastructureConfigurationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderInfrastructureConfigurationArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageInitProviderInfrastructureConfigurationArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderWorkflow {
    /// The action to take if the workflow fails. Must be one of CONTINUE or ABORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onFailure")]
    #[builder(default)]
    pub on_failure: Option<String>,
    /// The parallel group in which to run a test Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parallelGroup")]
    #[builder(default)]
    pub parallel_group: Option<String>,
    /// Configuration block for the workflow parameters. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameter: Option<Vec<ImageInitProviderWorkflowParameter>>,
    /// Amazon Resource Name (ARN) of the Image Builder Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowArn")]
    #[builder(default)]
    pub workflow_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageInitProviderWorkflowParameter {
    /// The name of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The value of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImagePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ImagePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ImagePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImagePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImagePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImagePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImagePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImagePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImagePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ImageStatus defines the observed state of Image.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<ImageStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProvider {
    /// Amazon Resource Name (ARN) of the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// - Amazon Resource Name (ARN) of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerRecipeArn")]
    #[builder(default)]
    pub container_recipe_arn: Option<String>,
    /// Date the image was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateCreated")]
    #[builder(default)]
    pub date_created: Option<String>,
    /// Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArn")]
    #[builder(default)]
    pub distribution_configuration_arn: Option<String>,
    /// Whether additional information about the image being created is collected. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedImageMetadataEnabled")]
    #[builder(default)]
    pub enhanced_image_metadata_enabled: Option<bool>,
    /// Amazon Resource Name (ARN) of the service-linked role to be used by Image Builder to execute workflows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    #[builder(default)]
    pub execution_role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Amazon Resource Name (ARN) of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArn")]
    #[builder(default)]
    pub image_recipe_arn: Option<String>,
    /// Configuration block with image scanning configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningConfiguration")]
    #[builder(default)]
    pub image_scanning_configuration: Option<ImageStatusAtProviderImageScanningConfiguration>,
    /// Configuration block with image tests configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsConfiguration")]
    #[builder(default)]
    pub image_tests_configuration: Option<ImageStatusAtProviderImageTestsConfiguration>,
    /// Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArn")]
    #[builder(default)]
    pub infrastructure_configuration_arn: Option<String>,
    /// Name of the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Operating System version of the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osVersion")]
    #[builder(default)]
    pub os_version: Option<String>,
    /// List of objects with resources created by the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputResources")]
    #[builder(default)]
    pub output_resources: Option<Vec<ImageStatusAtProviderOutputResources>>,
    /// Platform of the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub platform: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Version of the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub version: Option<String>,
    /// Configuration block with the workflow configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub workflow: Option<Vec<ImageStatusAtProviderWorkflow>>,
}

/// Configuration block with image scanning configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderImageScanningConfiguration {
    /// Configuration block with ECR configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecrConfiguration")]
    #[builder(default)]
    pub ecr_configuration: Option<ImageStatusAtProviderImageScanningConfigurationEcrConfiguration>,
    /// Indicates whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningEnabled")]
    #[builder(default)]
    pub image_scanning_enabled: Option<bool>,
}

/// Configuration block with ECR configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderImageScanningConfigurationEcrConfiguration {
    /// Set of tags for Image Builder to apply to the output container image that that Amazon Inspector scans.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerTags")]
    #[builder(default)]
    pub container_tags: Option<Vec<String>>,
    /// The name of the container repository that Amazon Inspector scans to identify findings for your container images.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryName")]
    #[builder(default)]
    pub repository_name: Option<String>,
}

/// Configuration block with image tests configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderImageTestsConfiguration {
    /// Whether image tests are enabled. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsEnabled")]
    #[builder(default)]
    pub image_tests_enabled: Option<bool>,
    /// Number of minutes before image tests time out. Valid values are between 60 and 1440. Defaults to 720.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMinutes")]
    #[builder(default)]
    pub timeout_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderOutputResources {
    /// Set of objects with each Amazon Machine Image (AMI) created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub amis: Option<Vec<ImageStatusAtProviderOutputResourcesAmis>>,
    /// Set of objects with each container image created and stored in the output repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub containers: Option<Vec<ImageStatusAtProviderOutputResourcesContainers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderOutputResourcesAmis {
    /// Account identifier of the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default)]
    pub account_id: Option<String>,
    /// Description of the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Identifier of the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub image: Option<String>,
    /// The name of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Region of the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderOutputResourcesContainers {
    /// Set of URIs for created containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageUris")]
    #[builder(default)]
    pub image_uris: Option<Vec<String>>,
    /// Region of the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderWorkflow {
    /// The action to take if the workflow fails. Must be one of CONTINUE or ABORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onFailure")]
    #[builder(default)]
    pub on_failure: Option<String>,
    /// The parallel group in which to run a test Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parallelGroup")]
    #[builder(default)]
    pub parallel_group: Option<String>,
    /// Configuration block for the workflow parameters. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameter: Option<Vec<ImageStatusAtProviderWorkflowParameter>>,
    /// Amazon Resource Name (ARN) of the Image Builder Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowArn")]
    #[builder(default)]
    pub workflow_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageStatusAtProviderWorkflowParameter {
    /// The name of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// The value of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// EndpointSpec defines the desired state of Endpoint
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "sagemaker.aws.upbound.io",
    version = "v1beta2",
    kind = "Endpoint",
    plural = "endpoints"
)]
#[kube(status = "EndpointStatus")]
pub struct EndpointSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<EndpointDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: EndpointForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<EndpointInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<EndpointProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<EndpointPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<EndpointWriteConnectionSecretToRef>,
}

/// EndpointSpec defines the desired state of Endpoint
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProvider {
    /// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations. See Deployment Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentConfig"
    )]
    #[builder(default)]
    pub deployment_config: Option<EndpointForProviderDeploymentConfig>,
    /// The name of the endpoint configuration to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointConfigName"
    )]
    #[builder(default)]
    pub endpoint_config_name: Option<String>,
    /// Reference to a EndpointConfiguration in sagemaker to populate endpointConfigName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointConfigNameRef"
    )]
    #[builder(default)]
    pub endpoint_config_name_ref: Option<EndpointForProviderEndpointConfigNameRef>,
    /// Selector for a EndpointConfiguration in sagemaker to populate endpointConfigName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointConfigNameSelector"
    )]
    #[builder(default)]
    pub endpoint_config_name_selector: Option<EndpointForProviderEndpointConfigNameSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations. See Deployment Config.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfig {
    /// Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRollbackConfiguration"
    )]
    #[builder(default)]
    pub auto_rollback_configuration:
        Option<EndpointForProviderDeploymentConfigAutoRollbackConfiguration>,
    /// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blueGreenUpdatePolicy"
    )]
    #[builder(default)]
    pub blue_green_update_policy: Option<EndpointForProviderDeploymentConfigBlueGreenUpdatePolicy>,
    /// Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollingUpdatePolicy"
    )]
    #[builder(default)]
    pub rolling_update_policy: Option<EndpointForProviderDeploymentConfigRollingUpdatePolicy>,
}

/// Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfigAutoRollbackConfiguration {
    /// List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment. See Alarms.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<EndpointForProviderDeploymentConfigAutoRollbackConfigurationAlarms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfigAutoRollbackConfigurationAlarms {
    /// The name of a CloudWatch alarm in your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmName")]
    #[builder(default)]
    pub alarm_name: Option<String>,
}

/// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfigBlueGreenUpdatePolicy {
    /// Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in termination_wait_in_seconds and wait_interval_in_seconds. Valid values are between 600 and 14400.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumExecutionTimeoutInSeconds"
    )]
    #[builder(default)]
    pub maximum_execution_timeout_in_seconds: Option<f64>,
    /// Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0. Valid values are between 0 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationWaitInSeconds"
    )]
    #[builder(default)]
    pub termination_wait_in_seconds: Option<f64>,
    /// Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trafficRoutingConfiguration"
    )]
    #[builder(default)]
    pub traffic_routing_configuration:
        Option<EndpointForProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration>,
}

/// Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration {
    /// Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "canarySize")]
    #[builder(default)]
    pub canary_size: Option<EndpointForProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize>,
    /// Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linearStepSize")]
    #[builder(default)]
    pub linear_step_size: Option<EndpointForProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize>,
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between 0 and 3600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitIntervalInSeconds")]
    #[builder(default)]
    pub wait_interval_in_seconds: Option<f64>,
}

/// Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize
{
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize
{
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfigRollingUpdatePolicy {
    /// Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumBatchSize"
    )]
    #[builder(default)]
    pub maximum_batch_size:
        Option<EndpointForProviderDeploymentConfigRollingUpdatePolicyMaximumBatchSize>,
    /// Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in termination_wait_in_seconds and wait_interval_in_seconds. Valid values are between 600 and 14400.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumExecutionTimeoutInSeconds"
    )]
    #[builder(default)]
    pub maximum_execution_timeout_in_seconds: Option<f64>,
    /// Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollbackMaximumBatchSize"
    )]
    #[builder(default)]
    pub rollback_maximum_batch_size:
        Option<EndpointForProviderDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize>,
    /// The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between 0 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitIntervalInSeconds"
    )]
    #[builder(default)]
    pub wait_interval_in_seconds: Option<f64>,
}

/// Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfigRollingUpdatePolicyMaximumBatchSize {
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize {
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Reference to a EndpointConfiguration in sagemaker to populate endpointConfigName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderEndpointConfigNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EndpointForProviderEndpointConfigNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderEndpointConfigNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EndpointForProviderEndpointConfigNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EndpointForProviderEndpointConfigNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderEndpointConfigNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderEndpointConfigNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a EndpointConfiguration in sagemaker to populate endpointConfigName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderEndpointConfigNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EndpointForProviderEndpointConfigNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointForProviderEndpointConfigNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EndpointForProviderEndpointConfigNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EndpointForProviderEndpointConfigNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderEndpointConfigNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderEndpointConfigNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProvider {
    /// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations. See Deployment Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentConfig"
    )]
    #[builder(default)]
    pub deployment_config: Option<EndpointInitProviderDeploymentConfig>,
    /// The name of the endpoint configuration to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointConfigName"
    )]
    #[builder(default)]
    pub endpoint_config_name: Option<String>,
    /// Reference to a EndpointConfiguration in sagemaker to populate endpointConfigName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointConfigNameRef"
    )]
    #[builder(default)]
    pub endpoint_config_name_ref: Option<EndpointInitProviderEndpointConfigNameRef>,
    /// Selector for a EndpointConfiguration in sagemaker to populate endpointConfigName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointConfigNameSelector"
    )]
    #[builder(default)]
    pub endpoint_config_name_selector: Option<EndpointInitProviderEndpointConfigNameSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations. See Deployment Config.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfig {
    /// Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRollbackConfiguration"
    )]
    #[builder(default)]
    pub auto_rollback_configuration:
        Option<EndpointInitProviderDeploymentConfigAutoRollbackConfiguration>,
    /// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blueGreenUpdatePolicy"
    )]
    #[builder(default)]
    pub blue_green_update_policy: Option<EndpointInitProviderDeploymentConfigBlueGreenUpdatePolicy>,
    /// Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollingUpdatePolicy"
    )]
    #[builder(default)]
    pub rolling_update_policy: Option<EndpointInitProviderDeploymentConfigRollingUpdatePolicy>,
}

/// Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfigAutoRollbackConfiguration {
    /// List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment. See Alarms.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms: Option<Vec<EndpointInitProviderDeploymentConfigAutoRollbackConfigurationAlarms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfigAutoRollbackConfigurationAlarms {
    /// The name of a CloudWatch alarm in your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmName")]
    #[builder(default)]
    pub alarm_name: Option<String>,
}

/// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfigBlueGreenUpdatePolicy {
    /// Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in termination_wait_in_seconds and wait_interval_in_seconds. Valid values are between 600 and 14400.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumExecutionTimeoutInSeconds"
    )]
    #[builder(default)]
    pub maximum_execution_timeout_in_seconds: Option<f64>,
    /// Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0. Valid values are between 0 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationWaitInSeconds"
    )]
    #[builder(default)]
    pub termination_wait_in_seconds: Option<f64>,
    /// Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trafficRoutingConfiguration"
    )]
    #[builder(default)]
    pub traffic_routing_configuration: Option<
        EndpointInitProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration,
    >,
}

/// Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration {
    /// Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "canarySize")]
    #[builder(default)]
    pub canary_size: Option<EndpointInitProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize>,
    /// Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linearStepSize")]
    #[builder(default)]
    pub linear_step_size: Option<EndpointInitProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize>,
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between 0 and 3600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitIntervalInSeconds")]
    #[builder(default)]
    pub wait_interval_in_seconds: Option<f64>,
}

/// Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize
{
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize
{
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfigRollingUpdatePolicy {
    /// Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumBatchSize"
    )]
    #[builder(default)]
    pub maximum_batch_size:
        Option<EndpointInitProviderDeploymentConfigRollingUpdatePolicyMaximumBatchSize>,
    /// Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in termination_wait_in_seconds and wait_interval_in_seconds. Valid values are between 600 and 14400.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumExecutionTimeoutInSeconds"
    )]
    #[builder(default)]
    pub maximum_execution_timeout_in_seconds: Option<f64>,
    /// Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollbackMaximumBatchSize"
    )]
    #[builder(default)]
    pub rollback_maximum_batch_size:
        Option<EndpointInitProviderDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize>,
    /// The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between 0 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitIntervalInSeconds"
    )]
    #[builder(default)]
    pub wait_interval_in_seconds: Option<f64>,
}

/// Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfigRollingUpdatePolicyMaximumBatchSize {
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize {
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Reference to a EndpointConfiguration in sagemaker to populate endpointConfigName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderEndpointConfigNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EndpointInitProviderEndpointConfigNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderEndpointConfigNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EndpointInitProviderEndpointConfigNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EndpointInitProviderEndpointConfigNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderEndpointConfigNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderEndpointConfigNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a EndpointConfiguration in sagemaker to populate endpointConfigName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderEndpointConfigNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EndpointInitProviderEndpointConfigNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointInitProviderEndpointConfigNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EndpointInitProviderEndpointConfigNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EndpointInitProviderEndpointConfigNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderEndpointConfigNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderEndpointConfigNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EndpointProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EndpointProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EndpointProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<EndpointPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<EndpointPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<EndpointPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<EndpointPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<EndpointPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// EndpointStatus defines the observed state of Endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<EndpointStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProvider {
    /// The Amazon Resource Name (ARN) assigned by AWS to this endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations. See Deployment Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentConfig"
    )]
    #[builder(default)]
    pub deployment_config: Option<EndpointStatusAtProviderDeploymentConfig>,
    /// The name of the endpoint configuration to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointConfigName"
    )]
    #[builder(default)]
    pub endpoint_config_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

/// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations. See Deployment Config.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfig {
    /// Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRollbackConfiguration"
    )]
    #[builder(default)]
    pub auto_rollback_configuration:
        Option<EndpointStatusAtProviderDeploymentConfigAutoRollbackConfiguration>,
    /// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blueGreenUpdatePolicy"
    )]
    #[builder(default)]
    pub blue_green_update_policy:
        Option<EndpointStatusAtProviderDeploymentConfigBlueGreenUpdatePolicy>,
    /// Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollingUpdatePolicy"
    )]
    #[builder(default)]
    pub rolling_update_policy: Option<EndpointStatusAtProviderDeploymentConfigRollingUpdatePolicy>,
}

/// Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfigAutoRollbackConfiguration {
    /// List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment. See Alarms.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub alarms:
        Option<Vec<EndpointStatusAtProviderDeploymentConfigAutoRollbackConfigurationAlarms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfigAutoRollbackConfigurationAlarms {
    /// The name of a CloudWatch alarm in your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmName")]
    #[builder(default)]
    pub alarm_name: Option<String>,
}

/// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfigBlueGreenUpdatePolicy {
    /// Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in termination_wait_in_seconds and wait_interval_in_seconds. Valid values are between 600 and 14400.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumExecutionTimeoutInSeconds"
    )]
    #[builder(default)]
    pub maximum_execution_timeout_in_seconds: Option<f64>,
    /// Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0. Valid values are between 0 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationWaitInSeconds"
    )]
    #[builder(default)]
    pub termination_wait_in_seconds: Option<f64>,
    /// Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trafficRoutingConfiguration"
    )]
    #[builder(default)]
    pub traffic_routing_configuration: Option<
        EndpointStatusAtProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration,
    >,
}

/// Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration {
    /// Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "canarySize")]
    #[builder(default)]
    pub canary_size: Option<EndpointStatusAtProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize>,
    /// Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linearStepSize")]
    #[builder(default)]
    pub linear_step_size: Option<EndpointStatusAtProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize>,
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between 0 and 3600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitIntervalInSeconds")]
    #[builder(default)]
    pub wait_interval_in_seconds: Option<f64>,
}

/// Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize
{
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize
{
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfigRollingUpdatePolicy {
    /// Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumBatchSize"
    )]
    #[builder(default)]
    pub maximum_batch_size:
        Option<EndpointStatusAtProviderDeploymentConfigRollingUpdatePolicyMaximumBatchSize>,
    /// Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in termination_wait_in_seconds and wait_interval_in_seconds. Valid values are between 600 and 14400.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumExecutionTimeoutInSeconds"
    )]
    #[builder(default)]
    pub maximum_execution_timeout_in_seconds: Option<f64>,
    /// Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollbackMaximumBatchSize"
    )]
    #[builder(default)]
    pub rollback_maximum_batch_size:
        Option<EndpointStatusAtProviderDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize>,
    /// The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between 0 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitIntervalInSeconds"
    )]
    #[builder(default)]
    pub wait_interval_in_seconds: Option<f64>,
}

/// Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfigRollingUpdatePolicyMaximumBatchSize {
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct EndpointStatusAtProviderDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize {
    /// Traffic routing strategy type. Valid values are: ALL_AT_ONCE, CANARY, and LINEAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
    /// Defines the capacity size, either as a number of instances or a capacity percentage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AppImageConfigSpec defines the desired state of AppImageConfig
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "sagemaker.aws.upbound.io",
    version = "v1beta2",
    kind = "AppImageConfig",
    plural = "appimageconfigs"
)]
#[kube(status = "AppImageConfigStatus")]
pub struct AppImageConfigSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<AppImageConfigDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AppImageConfigForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<AppImageConfigInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<AppImageConfigProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<AppImageConfigPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<AppImageConfigWriteConnectionSecretToRef>,
}

/// AppImageConfigSpec defines the desired state of AppImageConfig
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppImageConfigDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProvider {
    /// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeEditorAppImageConfig"
    )]
    #[builder(default)]
    pub code_editor_app_image_config: Option<AppImageConfigForProviderCodeEditorAppImageConfig>,
    /// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabImageConfig"
    )]
    #[builder(default)]
    pub jupyter_lab_image_config: Option<AppImageConfigForProviderJupyterLabImageConfig>,
    /// The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app. See Kernel Gateway Image Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayImageConfig"
    )]
    #[builder(default)]
    pub kernel_gateway_image_config: Option<AppImageConfigForProviderKernelGatewayImageConfig>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProviderCodeEditorAppImageConfig {
    /// The configuration used to run the application image container. See Container Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerConfig"
    )]
    #[builder(default)]
    pub container_config: Option<AppImageConfigForProviderCodeEditorAppImageConfigContainerConfig>,
    /// The URL where the Git repository is located. See File System Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemConfig"
    )]
    #[builder(default)]
    pub file_system_config:
        Option<AppImageConfigForProviderCodeEditorAppImageConfigFileSystemConfig>,
}

/// The configuration used to run the application image container. See Container Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProviderCodeEditorAppImageConfigContainerConfig {
    /// The arguments for the container when you're running the application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerArguments"
    )]
    #[builder(default)]
    pub container_arguments: Option<Vec<String>>,
    /// The entrypoint used to run the application in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEntrypoint"
    )]
    #[builder(default)]
    pub container_entrypoint: Option<Vec<String>>,
    /// The environment variables to set in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEnvironmentVariables"
    )]
    #[builder(default)]
    pub container_environment_variables: Option<HashMap<String, String>>,
}

/// The URL where the Git repository is located. See File System Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProviderCodeEditorAppImageConfigFileSystemConfig {
    /// The default POSIX group ID (GID). If not specified, defaults to 100. Valid values are 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultGid"
    )]
    #[builder(default)]
    pub default_gid: Option<f64>,
    /// The default POSIX user ID (UID). If not specified, defaults to 1000. Valid values are 0 and 1000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUid"
    )]
    #[builder(default)]
    pub default_uid: Option<f64>,
    /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
}

/// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProviderJupyterLabImageConfig {
    /// The configuration used to run the application image container. See Container Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerConfig"
    )]
    #[builder(default)]
    pub container_config: Option<AppImageConfigForProviderJupyterLabImageConfigContainerConfig>,
    /// The URL where the Git repository is located. See File System Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemConfig"
    )]
    #[builder(default)]
    pub file_system_config: Option<AppImageConfigForProviderJupyterLabImageConfigFileSystemConfig>,
}

/// The configuration used to run the application image container. See Container Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProviderJupyterLabImageConfigContainerConfig {
    /// The arguments for the container when you're running the application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerArguments"
    )]
    #[builder(default)]
    pub container_arguments: Option<Vec<String>>,
    /// The entrypoint used to run the application in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEntrypoint"
    )]
    #[builder(default)]
    pub container_entrypoint: Option<Vec<String>>,
    /// The environment variables to set in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEnvironmentVariables"
    )]
    #[builder(default)]
    pub container_environment_variables: Option<HashMap<String, String>>,
}

/// The URL where the Git repository is located. See File System Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProviderJupyterLabImageConfigFileSystemConfig {
    /// The default POSIX group ID (GID). If not specified, defaults to 100. Valid values are 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultGid"
    )]
    #[builder(default)]
    pub default_gid: Option<f64>,
    /// The default POSIX user ID (UID). If not specified, defaults to 1000. Valid values are 0 and 1000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUid"
    )]
    #[builder(default)]
    pub default_uid: Option<f64>,
    /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
}

/// The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app. See Kernel Gateway Image Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProviderKernelGatewayImageConfig {
    /// The URL where the Git repository is located. See File System Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemConfig"
    )]
    #[builder(default)]
    pub file_system_config:
        Option<AppImageConfigForProviderKernelGatewayImageConfigFileSystemConfig>,
    /// The default branch for the Git repository. See Kernel Spec details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelSpec"
    )]
    #[builder(default)]
    pub kernel_spec: Option<Vec<AppImageConfigForProviderKernelGatewayImageConfigKernelSpec>>,
}

/// The URL where the Git repository is located. See File System Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProviderKernelGatewayImageConfigFileSystemConfig {
    /// The default POSIX group ID (GID). If not specified, defaults to 100. Valid values are 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultGid"
    )]
    #[builder(default)]
    pub default_gid: Option<f64>,
    /// The default POSIX user ID (UID). If not specified, defaults to 1000. Valid values are 0 and 1000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUid"
    )]
    #[builder(default)]
    pub default_uid: Option<f64>,
    /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigForProviderKernelGatewayImageConfigKernelSpec {
    /// The display name of the kernel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default)]
    pub display_name: Option<String>,
    /// The name of the kernel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProvider {
    /// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeEditorAppImageConfig"
    )]
    #[builder(default)]
    pub code_editor_app_image_config: Option<AppImageConfigInitProviderCodeEditorAppImageConfig>,
    /// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabImageConfig"
    )]
    #[builder(default)]
    pub jupyter_lab_image_config: Option<AppImageConfigInitProviderJupyterLabImageConfig>,
    /// The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app. See Kernel Gateway Image Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayImageConfig"
    )]
    #[builder(default)]
    pub kernel_gateway_image_config: Option<AppImageConfigInitProviderKernelGatewayImageConfig>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProviderCodeEditorAppImageConfig {
    /// The configuration used to run the application image container. See Container Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerConfig"
    )]
    #[builder(default)]
    pub container_config: Option<AppImageConfigInitProviderCodeEditorAppImageConfigContainerConfig>,
    /// The URL where the Git repository is located. See File System Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemConfig"
    )]
    #[builder(default)]
    pub file_system_config:
        Option<AppImageConfigInitProviderCodeEditorAppImageConfigFileSystemConfig>,
}

/// The configuration used to run the application image container. See Container Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProviderCodeEditorAppImageConfigContainerConfig {
    /// The arguments for the container when you're running the application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerArguments"
    )]
    #[builder(default)]
    pub container_arguments: Option<Vec<String>>,
    /// The entrypoint used to run the application in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEntrypoint"
    )]
    #[builder(default)]
    pub container_entrypoint: Option<Vec<String>>,
    /// The environment variables to set in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEnvironmentVariables"
    )]
    #[builder(default)]
    pub container_environment_variables: Option<HashMap<String, String>>,
}

/// The URL where the Git repository is located. See File System Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProviderCodeEditorAppImageConfigFileSystemConfig {
    /// The default POSIX group ID (GID). If not specified, defaults to 100. Valid values are 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultGid"
    )]
    #[builder(default)]
    pub default_gid: Option<f64>,
    /// The default POSIX user ID (UID). If not specified, defaults to 1000. Valid values are 0 and 1000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUid"
    )]
    #[builder(default)]
    pub default_uid: Option<f64>,
    /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
}

/// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProviderJupyterLabImageConfig {
    /// The configuration used to run the application image container. See Container Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerConfig"
    )]
    #[builder(default)]
    pub container_config: Option<AppImageConfigInitProviderJupyterLabImageConfigContainerConfig>,
    /// The URL where the Git repository is located. See File System Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemConfig"
    )]
    #[builder(default)]
    pub file_system_config: Option<AppImageConfigInitProviderJupyterLabImageConfigFileSystemConfig>,
}

/// The configuration used to run the application image container. See Container Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProviderJupyterLabImageConfigContainerConfig {
    /// The arguments for the container when you're running the application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerArguments"
    )]
    #[builder(default)]
    pub container_arguments: Option<Vec<String>>,
    /// The entrypoint used to run the application in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEntrypoint"
    )]
    #[builder(default)]
    pub container_entrypoint: Option<Vec<String>>,
    /// The environment variables to set in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEnvironmentVariables"
    )]
    #[builder(default)]
    pub container_environment_variables: Option<HashMap<String, String>>,
}

/// The URL where the Git repository is located. See File System Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProviderJupyterLabImageConfigFileSystemConfig {
    /// The default POSIX group ID (GID). If not specified, defaults to 100. Valid values are 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultGid"
    )]
    #[builder(default)]
    pub default_gid: Option<f64>,
    /// The default POSIX user ID (UID). If not specified, defaults to 1000. Valid values are 0 and 1000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUid"
    )]
    #[builder(default)]
    pub default_uid: Option<f64>,
    /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
}

/// The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app. See Kernel Gateway Image Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProviderKernelGatewayImageConfig {
    /// The URL where the Git repository is located. See File System Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemConfig"
    )]
    #[builder(default)]
    pub file_system_config:
        Option<AppImageConfigInitProviderKernelGatewayImageConfigFileSystemConfig>,
    /// The default branch for the Git repository. See Kernel Spec details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelSpec"
    )]
    #[builder(default)]
    pub kernel_spec: Option<Vec<AppImageConfigInitProviderKernelGatewayImageConfigKernelSpec>>,
}

/// The URL where the Git repository is located. See File System Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProviderKernelGatewayImageConfigFileSystemConfig {
    /// The default POSIX group ID (GID). If not specified, defaults to 100. Valid values are 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultGid"
    )]
    #[builder(default)]
    pub default_gid: Option<f64>,
    /// The default POSIX user ID (UID). If not specified, defaults to 1000. Valid values are 0 and 1000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUid"
    )]
    #[builder(default)]
    pub default_uid: Option<f64>,
    /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigInitProviderKernelGatewayImageConfigKernelSpec {
    /// The display name of the kernel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default)]
    pub display_name: Option<String>,
    /// The name of the kernel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AppImageConfigProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AppImageConfigProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AppImageConfigProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppImageConfigProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppImageConfigProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<AppImageConfigPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<AppImageConfigPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<AppImageConfigPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<AppImageConfigPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<AppImageConfigPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppImageConfigPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppImageConfigPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AppImageConfigStatus defines the observed state of AppImageConfig.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<AppImageConfigStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProvider {
    /// The Amazon Resource Name (ARN) assigned by AWS to this App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeEditorAppImageConfig"
    )]
    #[builder(default)]
    pub code_editor_app_image_config:
        Option<AppImageConfigStatusAtProviderCodeEditorAppImageConfig>,
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabImageConfig"
    )]
    #[builder(default)]
    pub jupyter_lab_image_config: Option<AppImageConfigStatusAtProviderJupyterLabImageConfig>,
    /// The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app. See Kernel Gateway Image Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayImageConfig"
    )]
    #[builder(default)]
    pub kernel_gateway_image_config: Option<AppImageConfigStatusAtProviderKernelGatewayImageConfig>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

/// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProviderCodeEditorAppImageConfig {
    /// The configuration used to run the application image container. See Container Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerConfig"
    )]
    #[builder(default)]
    pub container_config:
        Option<AppImageConfigStatusAtProviderCodeEditorAppImageConfigContainerConfig>,
    /// The URL where the Git repository is located. See File System Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemConfig"
    )]
    #[builder(default)]
    pub file_system_config:
        Option<AppImageConfigStatusAtProviderCodeEditorAppImageConfigFileSystemConfig>,
}

/// The configuration used to run the application image container. See Container Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProviderCodeEditorAppImageConfigContainerConfig {
    /// The arguments for the container when you're running the application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerArguments"
    )]
    #[builder(default)]
    pub container_arguments: Option<Vec<String>>,
    /// The entrypoint used to run the application in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEntrypoint"
    )]
    #[builder(default)]
    pub container_entrypoint: Option<Vec<String>>,
    /// The environment variables to set in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEnvironmentVariables"
    )]
    #[builder(default)]
    pub container_environment_variables: Option<HashMap<String, String>>,
}

/// The URL where the Git repository is located. See File System Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProviderCodeEditorAppImageConfigFileSystemConfig {
    /// The default POSIX group ID (GID). If not specified, defaults to 100. Valid values are 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultGid"
    )]
    #[builder(default)]
    pub default_gid: Option<f64>,
    /// The default POSIX user ID (UID). If not specified, defaults to 1000. Valid values are 0 and 1000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUid"
    )]
    #[builder(default)]
    pub default_uid: Option<f64>,
    /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
}

/// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProviderJupyterLabImageConfig {
    /// The configuration used to run the application image container. See Container Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerConfig"
    )]
    #[builder(default)]
    pub container_config:
        Option<AppImageConfigStatusAtProviderJupyterLabImageConfigContainerConfig>,
    /// The URL where the Git repository is located. See File System Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemConfig"
    )]
    #[builder(default)]
    pub file_system_config:
        Option<AppImageConfigStatusAtProviderJupyterLabImageConfigFileSystemConfig>,
}

/// The configuration used to run the application image container. See Container Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProviderJupyterLabImageConfigContainerConfig {
    /// The arguments for the container when you're running the application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerArguments"
    )]
    #[builder(default)]
    pub container_arguments: Option<Vec<String>>,
    /// The entrypoint used to run the application in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEntrypoint"
    )]
    #[builder(default)]
    pub container_entrypoint: Option<Vec<String>>,
    /// The environment variables to set in the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerEnvironmentVariables"
    )]
    #[builder(default)]
    pub container_environment_variables: Option<HashMap<String, String>>,
}

/// The URL where the Git repository is located. See File System Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProviderJupyterLabImageConfigFileSystemConfig {
    /// The default POSIX group ID (GID). If not specified, defaults to 100. Valid values are 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultGid"
    )]
    #[builder(default)]
    pub default_gid: Option<f64>,
    /// The default POSIX user ID (UID). If not specified, defaults to 1000. Valid values are 0 and 1000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUid"
    )]
    #[builder(default)]
    pub default_uid: Option<f64>,
    /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
}

/// The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app. See Kernel Gateway Image Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProviderKernelGatewayImageConfig {
    /// The URL where the Git repository is located. See File System Config details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemConfig"
    )]
    #[builder(default)]
    pub file_system_config:
        Option<AppImageConfigStatusAtProviderKernelGatewayImageConfigFileSystemConfig>,
    /// The default branch for the Git repository. See Kernel Spec details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelSpec"
    )]
    #[builder(default)]
    pub kernel_spec: Option<Vec<AppImageConfigStatusAtProviderKernelGatewayImageConfigKernelSpec>>,
}

/// The URL where the Git repository is located. See File System Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProviderKernelGatewayImageConfigFileSystemConfig {
    /// The default POSIX group ID (GID). If not specified, defaults to 100. Valid values are 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultGid"
    )]
    #[builder(default)]
    pub default_gid: Option<f64>,
    /// The default POSIX user ID (UID). If not specified, defaults to 1000. Valid values are 0 and 1000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUid"
    )]
    #[builder(default)]
    pub default_uid: Option<f64>,
    /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    #[builder(default)]
    pub mount_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct AppImageConfigStatusAtProviderKernelGatewayImageConfigKernelSpec {
    /// The display name of the kernel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default)]
    pub display_name: Option<String>,
    /// The name of the kernel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FeatureGroupSpec defines the desired state of FeatureGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "sagemaker.aws.upbound.io", version = "v1beta2", kind = "FeatureGroup", plural = "featuregroups")]
#[kube(status = "FeatureGroupStatus")]
pub struct FeatureGroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<FeatureGroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FeatureGroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<FeatureGroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<FeatureGroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<FeatureGroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<FeatureGroupWriteConnectionSecretToRef>,
}

/// FeatureGroupSpec defines the desired state of FeatureGroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProvider {
    /// A free-form description of a Feature Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The name of the feature that stores the EventTime of a Record in a Feature Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventTimeFeatureName")]
    #[builder(default)]
    pub event_time_feature_name: Option<String>,
    /// A list of Feature names and types. See Feature Definition Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureDefinition")]
    #[builder(default)]
    pub feature_definition: Option<Vec<FeatureGroupForProviderFeatureDefinition>>,
    /// The Offline Feature Store Configuration. See Offline Store Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "offlineStoreConfig")]
    #[builder(default)]
    pub offline_store_config: Option<FeatureGroupForProviderOfflineStoreConfig>,
    /// The Online Feature Store Configuration. See Online Store Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onlineStoreConfig")]
    #[builder(default)]
    pub online_store_config: Option<FeatureGroupForProviderOnlineStoreConfig>,
    /// The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordIdentifierFeatureName")]
    #[builder(default)]
    pub record_identifier_feature_name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an offline_store_config is provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    #[builder(default)]
    pub role_arn_ref: Option<FeatureGroupForProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    #[builder(default)]
    pub role_arn_selector: Option<FeatureGroupForProviderRoleArnSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throughputConfig")]
    #[builder(default)]
    pub throughput_config: Option<FeatureGroupForProviderThroughputConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderFeatureDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionConfig")]
    #[builder(default)]
    pub collection_config: Option<FeatureGroupForProviderFeatureDefinitionCollectionConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionType")]
    #[builder(default)]
    pub collection_type: Option<String>,
    /// The name of a feature. feature_name cannot be any of the following: is_deleted, write_time, api_invocation_time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureName")]
    #[builder(default)]
    pub feature_name: Option<String>,
    /// The value type of a feature. Valid values are Integral, Fractional, or String.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureType")]
    #[builder(default)]
    pub feature_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderFeatureDefinitionCollectionConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vectorConfig")]
    #[builder(default)]
    pub vector_config: Option<FeatureGroupForProviderFeatureDefinitionCollectionConfigVectorConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderFeatureDefinitionCollectionConfigVectorConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimension: Option<f64>,
}

/// The Offline Feature Store Configuration. See Offline Store Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderOfflineStoreConfig {
    /// The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCatalogConfig")]
    #[builder(default)]
    pub data_catalog_config: Option<FeatureGroupForProviderOfflineStoreConfigDataCatalogConfig>,
    /// Set to true to turn Online Store On.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableGlueTableCreation")]
    #[builder(default)]
    pub disable_glue_table_creation: Option<bool>,
    /// The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3StorageConfig")]
    #[builder(default)]
    pub s3_storage_config: Option<FeatureGroupForProviderOfflineStoreConfigS3StorageConfig>,
    /// Format for the offline store table. Supported formats are Glue (Default) and Apache Iceberg (https://iceberg.apache.org/).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableFormat")]
    #[builder(default)]
    pub table_format: Option<String>,
}

/// The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderOfflineStoreConfigDataCatalogConfig {
    /// The name of the Glue table catalog.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub catalog: Option<String>,
    /// The name of the Glue table database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub database: Option<String>,
    /// The name of the Glue table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    #[builder(default)]
    pub table_name: Option<String>,
}

/// The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderOfflineStoreConfigS3StorageConfig {
    /// The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// The S3 path where offline records are written.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolvedOutputS3Uri")]
    #[builder(default)]
    pub resolved_output_s3_uri: Option<String>,
    /// The S3 URI, or location in Amazon S3, of OfflineStore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Uri")]
    #[builder(default)]
    pub s3_uri: Option<String>,
}

/// The Online Feature Store Configuration. See Online Store Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderOnlineStoreConfig {
    /// Set to true to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableOnlineStore")]
    #[builder(default)]
    pub enable_online_store: Option<bool>,
    /// Security config for at-rest encryption of your OnlineStore. See Security Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityConfig")]
    #[builder(default)]
    pub security_config: Option<FeatureGroupForProviderOnlineStoreConfigSecurityConfig>,
    /// Option for different tiers of low latency storage for real-time data retrieval. Valid values are Standard, or InMemory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageType")]
    #[builder(default)]
    pub storage_type: Option<String>,
    /// Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttlDuration")]
    #[builder(default)]
    pub ttl_duration: Option<FeatureGroupForProviderOnlineStoreConfigTtlDuration>,
}

/// Security config for at-rest encryption of your OnlineStore. See Security Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderOnlineStoreConfigSecurityConfig {
    /// The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
}

/// Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderOnlineStoreConfigTtlDuration {
    /// TtlDuration time unit. Valid values are Seconds, Minutes, Hours, Days, or Weeks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// TtlDuration time value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FeatureGroupForProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FeatureGroupForProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FeatureGroupForProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupForProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupForProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FeatureGroupForProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FeatureGroupForProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FeatureGroupForProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupForProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupForProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupForProviderThroughputConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedReadCapacityUnits")]
    #[builder(default)]
    pub provisioned_read_capacity_units: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedWriteCapacityUnits")]
    #[builder(default)]
    pub provisioned_write_capacity_units: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throughputMode")]
    #[builder(default)]
    pub throughput_mode: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProvider {
    /// A free-form description of a Feature Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The name of the feature that stores the EventTime of a Record in a Feature Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventTimeFeatureName")]
    #[builder(default)]
    pub event_time_feature_name: Option<String>,
    /// A list of Feature names and types. See Feature Definition Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureDefinition")]
    #[builder(default)]
    pub feature_definition: Option<Vec<FeatureGroupInitProviderFeatureDefinition>>,
    /// The Offline Feature Store Configuration. See Offline Store Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "offlineStoreConfig")]
    #[builder(default)]
    pub offline_store_config: Option<FeatureGroupInitProviderOfflineStoreConfig>,
    /// The Online Feature Store Configuration. See Online Store Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onlineStoreConfig")]
    #[builder(default)]
    pub online_store_config: Option<FeatureGroupInitProviderOnlineStoreConfig>,
    /// The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordIdentifierFeatureName")]
    #[builder(default)]
    pub record_identifier_feature_name: Option<String>,
    /// The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an offline_store_config is provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    #[builder(default)]
    pub role_arn_ref: Option<FeatureGroupInitProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    #[builder(default)]
    pub role_arn_selector: Option<FeatureGroupInitProviderRoleArnSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throughputConfig")]
    #[builder(default)]
    pub throughput_config: Option<FeatureGroupInitProviderThroughputConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderFeatureDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionConfig")]
    #[builder(default)]
    pub collection_config: Option<FeatureGroupInitProviderFeatureDefinitionCollectionConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionType")]
    #[builder(default)]
    pub collection_type: Option<String>,
    /// The name of a feature. feature_name cannot be any of the following: is_deleted, write_time, api_invocation_time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureName")]
    #[builder(default)]
    pub feature_name: Option<String>,
    /// The value type of a feature. Valid values are Integral, Fractional, or String.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureType")]
    #[builder(default)]
    pub feature_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderFeatureDefinitionCollectionConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vectorConfig")]
    #[builder(default)]
    pub vector_config: Option<FeatureGroupInitProviderFeatureDefinitionCollectionConfigVectorConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderFeatureDefinitionCollectionConfigVectorConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimension: Option<f64>,
}

/// The Offline Feature Store Configuration. See Offline Store Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderOfflineStoreConfig {
    /// The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCatalogConfig")]
    #[builder(default)]
    pub data_catalog_config: Option<FeatureGroupInitProviderOfflineStoreConfigDataCatalogConfig>,
    /// Set to true to turn Online Store On.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableGlueTableCreation")]
    #[builder(default)]
    pub disable_glue_table_creation: Option<bool>,
    /// The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3StorageConfig")]
    #[builder(default)]
    pub s3_storage_config: Option<FeatureGroupInitProviderOfflineStoreConfigS3StorageConfig>,
    /// Format for the offline store table. Supported formats are Glue (Default) and Apache Iceberg (https://iceberg.apache.org/).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableFormat")]
    #[builder(default)]
    pub table_format: Option<String>,
}

/// The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderOfflineStoreConfigDataCatalogConfig {
    /// The name of the Glue table catalog.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub catalog: Option<String>,
    /// The name of the Glue table database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub database: Option<String>,
    /// The name of the Glue table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    #[builder(default)]
    pub table_name: Option<String>,
}

/// The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderOfflineStoreConfigS3StorageConfig {
    /// The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// The S3 path where offline records are written.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolvedOutputS3Uri")]
    #[builder(default)]
    pub resolved_output_s3_uri: Option<String>,
    /// The S3 URI, or location in Amazon S3, of OfflineStore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Uri")]
    #[builder(default)]
    pub s3_uri: Option<String>,
}

/// The Online Feature Store Configuration. See Online Store Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderOnlineStoreConfig {
    /// Set to true to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableOnlineStore")]
    #[builder(default)]
    pub enable_online_store: Option<bool>,
    /// Security config for at-rest encryption of your OnlineStore. See Security Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityConfig")]
    #[builder(default)]
    pub security_config: Option<FeatureGroupInitProviderOnlineStoreConfigSecurityConfig>,
    /// Option for different tiers of low latency storage for real-time data retrieval. Valid values are Standard, or InMemory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageType")]
    #[builder(default)]
    pub storage_type: Option<String>,
    /// Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttlDuration")]
    #[builder(default)]
    pub ttl_duration: Option<FeatureGroupInitProviderOnlineStoreConfigTtlDuration>,
}

/// Security config for at-rest encryption of your OnlineStore. See Security Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderOnlineStoreConfigSecurityConfig {
    /// The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
}

/// Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderOnlineStoreConfigTtlDuration {
    /// TtlDuration time unit. Valid values are Seconds, Minutes, Hours, Days, or Weeks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// TtlDuration time value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FeatureGroupInitProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FeatureGroupInitProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FeatureGroupInitProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupInitProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupInitProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FeatureGroupInitProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FeatureGroupInitProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FeatureGroupInitProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupInitProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupInitProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupInitProviderThroughputConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedReadCapacityUnits")]
    #[builder(default)]
    pub provisioned_read_capacity_units: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedWriteCapacityUnits")]
    #[builder(default)]
    pub provisioned_write_capacity_units: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throughputMode")]
    #[builder(default)]
    pub throughput_mode: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FeatureGroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FeatureGroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FeatureGroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<FeatureGroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<FeatureGroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FeatureGroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FeatureGroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FeatureGroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureGroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FeatureGroupStatus defines the observed state of FeatureGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<FeatureGroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProvider {
    /// The Amazon Resource Name (ARN) assigned by AWS to this feature_group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// A free-form description of a Feature Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The name of the feature that stores the EventTime of a Record in a Feature Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventTimeFeatureName")]
    #[builder(default)]
    pub event_time_feature_name: Option<String>,
    /// A list of Feature names and types. See Feature Definition Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureDefinition")]
    #[builder(default)]
    pub feature_definition: Option<Vec<FeatureGroupStatusAtProviderFeatureDefinition>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The Offline Feature Store Configuration. See Offline Store Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "offlineStoreConfig")]
    #[builder(default)]
    pub offline_store_config: Option<FeatureGroupStatusAtProviderOfflineStoreConfig>,
    /// The Online Feature Store Configuration. See Online Store Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onlineStoreConfig")]
    #[builder(default)]
    pub online_store_config: Option<FeatureGroupStatusAtProviderOnlineStoreConfig>,
    /// The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordIdentifierFeatureName")]
    #[builder(default)]
    pub record_identifier_feature_name: Option<String>,
    /// The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an offline_store_config is provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default)]
    pub role_arn: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throughputConfig")]
    #[builder(default)]
    pub throughput_config: Option<FeatureGroupStatusAtProviderThroughputConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderFeatureDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionConfig")]
    #[builder(default)]
    pub collection_config: Option<FeatureGroupStatusAtProviderFeatureDefinitionCollectionConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionType")]
    #[builder(default)]
    pub collection_type: Option<String>,
    /// The name of a feature. feature_name cannot be any of the following: is_deleted, write_time, api_invocation_time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureName")]
    #[builder(default)]
    pub feature_name: Option<String>,
    /// The value type of a feature. Valid values are Integral, Fractional, or String.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureType")]
    #[builder(default)]
    pub feature_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderFeatureDefinitionCollectionConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vectorConfig")]
    #[builder(default)]
    pub vector_config: Option<FeatureGroupStatusAtProviderFeatureDefinitionCollectionConfigVectorConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderFeatureDefinitionCollectionConfigVectorConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub dimension: Option<f64>,
}

/// The Offline Feature Store Configuration. See Offline Store Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderOfflineStoreConfig {
    /// The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCatalogConfig")]
    #[builder(default)]
    pub data_catalog_config: Option<FeatureGroupStatusAtProviderOfflineStoreConfigDataCatalogConfig>,
    /// Set to true to turn Online Store On.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableGlueTableCreation")]
    #[builder(default)]
    pub disable_glue_table_creation: Option<bool>,
    /// The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3StorageConfig")]
    #[builder(default)]
    pub s3_storage_config: Option<FeatureGroupStatusAtProviderOfflineStoreConfigS3StorageConfig>,
    /// Format for the offline store table. Supported formats are Glue (Default) and Apache Iceberg (https://iceberg.apache.org/).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableFormat")]
    #[builder(default)]
    pub table_format: Option<String>,
}

/// The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderOfflineStoreConfigDataCatalogConfig {
    /// The name of the Glue table catalog.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub catalog: Option<String>,
    /// The name of the Glue table database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub database: Option<String>,
    /// The name of the Glue table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    #[builder(default)]
    pub table_name: Option<String>,
}

/// The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderOfflineStoreConfigS3StorageConfig {
    /// The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// The S3 path where offline records are written.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolvedOutputS3Uri")]
    #[builder(default)]
    pub resolved_output_s3_uri: Option<String>,
    /// The S3 URI, or location in Amazon S3, of OfflineStore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Uri")]
    #[builder(default)]
    pub s3_uri: Option<String>,
}

/// The Online Feature Store Configuration. See Online Store Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderOnlineStoreConfig {
    /// Set to true to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableOnlineStore")]
    #[builder(default)]
    pub enable_online_store: Option<bool>,
    /// Security config for at-rest encryption of your OnlineStore. See Security Config Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityConfig")]
    #[builder(default)]
    pub security_config: Option<FeatureGroupStatusAtProviderOnlineStoreConfigSecurityConfig>,
    /// Option for different tiers of low latency storage for real-time data retrieval. Valid values are Standard, or InMemory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageType")]
    #[builder(default)]
    pub storage_type: Option<String>,
    /// Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttlDuration")]
    #[builder(default)]
    pub ttl_duration: Option<FeatureGroupStatusAtProviderOnlineStoreConfigTtlDuration>,
}

/// Security config for at-rest encryption of your OnlineStore. See Security Config Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderOnlineStoreConfigSecurityConfig {
    /// The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
}

/// Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderOnlineStoreConfigTtlDuration {
    /// TtlDuration time unit. Valid values are Seconds, Minutes, Hours, Days, or Weeks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub unit: Option<String>,
    /// TtlDuration time value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FeatureGroupStatusAtProviderThroughputConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedReadCapacityUnits")]
    #[builder(default)]
    pub provisioned_read_capacity_units: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedWriteCapacityUnits")]
    #[builder(default)]
    pub provisioned_write_capacity_units: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throughputMode")]
    #[builder(default)]
    pub throughput_mode: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// UserProfileSpec defines the desired state of UserProfile
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "sagemaker.aws.upbound.io", version = "v1beta2", kind = "UserProfile", plural = "userprofiles")]
#[kube(status = "UserProfileStatus")]
pub struct UserProfileSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<UserProfileDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: UserProfileForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<UserProfileInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<UserProfileProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<UserProfilePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<UserProfileWriteConnectionSecretToRef>,
}

/// UserProfileSpec defines the desired state of UserProfile
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProvider {
    /// The ID of the associated Domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    #[builder(default)]
    pub domain_id: Option<String>,
    /// Reference to a Domain in sagemaker to populate domainId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIdRef")]
    #[builder(default)]
    pub domain_id_ref: Option<UserProfileForProviderDomainIdRef>,
    /// Selector for a Domain in sagemaker to populate domainId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIdSelector")]
    #[builder(default)]
    pub domain_id_selector: Option<UserProfileForProviderDomainIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A specifier for the type of value specified in single_sign_on_user_value. Currently, the only supported value is UserName. If the Domain's AuthMode is SSO, this field is required. If the Domain's AuthMode is not SSO, this field cannot be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleSignOnUserIdentifier")]
    #[builder(default)]
    pub single_sign_on_user_identifier: Option<String>,
    /// The username of the associated AWS Single Sign-On User for this User Profile. If the Domain's AuthMode is SSO, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not SSO, this field cannot be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleSignOnUserValue")]
    #[builder(default)]
    pub single_sign_on_user_value: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The name for the User Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileName")]
    #[builder(default)]
    pub user_profile_name: Option<String>,
    /// The user settings. See User Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userSettings")]
    #[builder(default)]
    pub user_settings: Option<UserProfileForProviderUserSettings>,
}

/// Reference to a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderDomainIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UserProfileForProviderDomainIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderDomainIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UserProfileForProviderDomainIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UserProfileForProviderDomainIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileForProviderDomainIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileForProviderDomainIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderDomainIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UserProfileForProviderDomainIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderDomainIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UserProfileForProviderDomainIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UserProfileForProviderDomainIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileForProviderDomainIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileForProviderDomainIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The user settings. See User Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettings {
    /// Indicates whether auto-mounting of an EFS volume is supported for the user profile. The DefaultAsDomain value is only supported for user profiles. Do not use the DefaultAsDomain value when setting this parameter for a domain. Valid values are: Enabled, Disabled, and DefaultAsDomain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMountHomeEfs")]
    #[builder(default)]
    pub auto_mount_home_efs: Option<String>,
    /// The Canvas app settings. See Canvas App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "canvasAppSettings")]
    #[builder(default)]
    pub canvas_app_settings: Option<UserProfileForProviderUserSettingsCanvasAppSettings>,
    /// The Code Editor application settings. See Code Editor App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeEditorAppSettings")]
    #[builder(default)]
    pub code_editor_app_settings: Option<UserProfileForProviderUserSettingsCodeEditorAppSettings>,
    /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See Custom File System Config below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customFileSystemConfig")]
    #[builder(default)]
    pub custom_file_system_config: Option<Vec<UserProfileForProviderUserSettingsCustomFileSystemConfig>>,
    /// Details about the POSIX identity that is used for file system operations. See Custom Posix User Config below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customPosixUserConfig")]
    #[builder(default)]
    pub custom_posix_user_config: Option<UserProfileForProviderUserSettingsCustomPosixUserConfig>,
    /// The default experience that the user is directed to when accessing the domain. The supported values are: studio::: Indicates that Studio is the default experience. This value can only be passed if StudioWebPortal is set to ENABLED. app:JupyterServer:: Indicates that Studio Classic is the default experience.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultLandingUri")]
    #[builder(default)]
    pub default_landing_uri: Option<String>,
    /// The execution role ARN for the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// The settings for the JupyterLab application. See Jupyter Lab App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jupyterLabAppSettings")]
    #[builder(default)]
    pub jupyter_lab_app_settings: Option<UserProfileForProviderUserSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See Jupyter Server App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jupyterServerAppSettings")]
    #[builder(default)]
    pub jupyter_server_app_settings: Option<UserProfileForProviderUserSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See Kernel Gateway App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelGatewayAppSettings")]
    #[builder(default)]
    pub kernel_gateway_app_settings: Option<UserProfileForProviderUserSettingsKernelGatewayAppSettings>,
    /// The RSession app settings. See RSession App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rSessionAppSettings")]
    #[builder(default)]
    pub r_session_app_settings: Option<UserProfileForProviderUserSettingsRSessionAppSettings>,
    /// A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rStudioServerProAppSettings")]
    #[builder(default)]
    pub r_studio_server_pro_app_settings: Option<UserProfileForProviderUserSettingsRStudioServerProAppSettings>,
    /// A list of security group IDs that will be attached to the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The sharing settings. See Sharing Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharingSettings")]
    #[builder(default)]
    pub sharing_settings: Option<UserProfileForProviderUserSettingsSharingSettings>,
    /// The storage settings for a private space. See Space Storage Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spaceStorageSettings")]
    #[builder(default)]
    pub space_storage_settings: Option<UserProfileForProviderUserSettingsSpaceStorageSettings>,
    /// Whether the user can access Studio. If this value is set to DISABLED, the user cannot access Studio, even if that is the default experience for the domain. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "studioWebPortal")]
    #[builder(default)]
    pub studio_web_portal: Option<String>,
    /// The Studio Web Portal settings. See studio_web_portal_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "studioWebPortalSettings")]
    #[builder(default)]
    pub studio_web_portal_settings: Option<UserProfileForProviderUserSettingsStudioWebPortalSettings>,
    /// The TensorBoard app settings. See TensorBoard App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tensorBoardAppSettings")]
    #[builder(default)]
    pub tensor_board_app_settings: Option<UserProfileForProviderUserSettingsTensorBoardAppSettings>,
}

/// The Canvas app settings. See Canvas App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCanvasAppSettings {
    /// The model deployment settings for the SageMaker Canvas application. See Direct Deploy Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directDeploySettings")]
    #[builder(default)]
    pub direct_deploy_settings: Option<UserProfileForProviderUserSettingsCanvasAppSettingsDirectDeploySettings>,
    /// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emrServerlessSettings")]
    #[builder(default)]
    pub emr_serverless_settings: Option<UserProfileForProviderUserSettingsCanvasAppSettingsEmrServerlessSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generativeAiSettings")]
    #[builder(default)]
    pub generative_ai_settings: Option<UserProfileForProviderUserSettingsCanvasAppSettingsGenerativeAiSettings>,
    /// The settings for connecting to an external data source with OAuth. See Identity Provider OAuth Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityProviderOauthSettings")]
    #[builder(default)]
    pub identity_provider_oauth_settings: Option<Vec<UserProfileForProviderUserSettingsCanvasAppSettingsIdentityProviderOauthSettings>>,
    /// The settings for document querying. See Kendra Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kendraSettings")]
    #[builder(default)]
    pub kendra_settings: Option<UserProfileForProviderUserSettingsCanvasAppSettingsKendraSettings>,
    /// The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelRegisterSettings")]
    #[builder(default)]
    pub model_register_settings: Option<UserProfileForProviderUserSettingsCanvasAppSettingsModelRegisterSettings>,
    /// Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeSeriesForecastingSettings")]
    #[builder(default)]
    pub time_series_forecasting_settings: Option<UserProfileForProviderUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings>,
    /// The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workspaceSettings")]
    #[builder(default)]
    pub workspace_settings: Option<UserProfileForProviderUserSettingsCanvasAppSettingsWorkspaceSettings>,
}

/// The model deployment settings for the SageMaker Canvas application. See Direct Deploy Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCanvasAppSettingsDirectDeploySettings {
    /// Describes whether model deployment permissions are enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCanvasAppSettingsEmrServerlessSettings {
    /// The Amazon Resource Name (ARN) of the AWS IAM role that is assumed for running Amazon EMR Serverless jobs in SageMaker Canvas. This role should have the necessary permissions to read and write data attached and a trust relationship with EMR Serverless.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    #[builder(default)]
    pub execution_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCanvasAppSettingsGenerativeAiSettings {
    /// The user profile Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonBedrockRoleArn")]
    #[builder(default)]
    pub amazon_bedrock_role_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCanvasAppSettingsIdentityProviderOauthSettings {
    /// The name of the data source that you're connecting to. Canvas currently supports OAuth for Snowflake and Salesforce Data Cloud. Valid values are SalesforceGenie and Snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceName")]
    #[builder(default)]
    pub data_source_name: Option<String>,
    /// The ARN of an Amazon Web Services Secrets Manager secret that stores the credentials from your identity provider, such as the client ID and secret, authorization URL, and token URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    #[builder(default)]
    pub secret_arn: Option<String>,
    /// Describes whether OAuth for a data source is enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for document querying. See Kendra Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCanvasAppSettingsKendraSettings {
    /// Describes whether the document querying feature is enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCanvasAppSettingsModelRegisterSettings {
    /// The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossAccountModelRegisterRoleArn")]
    #[builder(default)]
    pub cross_account_model_register_role_arn: Option<String>,
    /// Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings {
    /// The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the AmazonSageMakerCanvasForecastAccess policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonForecastRoleArn")]
    #[builder(default)]
    pub amazon_forecast_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCanvasAppSettingsWorkspaceSettings {
    /// The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3ArtifactPath")]
    #[builder(default)]
    pub s3_artifact_path: Option<String>,
    /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3KmsKeyId")]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
}

/// The Code Editor application settings. See Code Editor App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCodeEditorAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLifecycleManagement")]
    #[builder(default)]
    pub app_lifecycle_management: Option<UserProfileForProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "builtInLifecycleConfigArn")]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of custom SageMaker images that are configured to run as a CodeEditor app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileForProviderUserSettingsCodeEditorAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileForProviderUserSettingsCodeEditorAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<UserProfileForProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeoutInMinutes")]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleManagement")]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdleTimeoutInMinutes")]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIdleTimeoutInMinutes")]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCodeEditorAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCodeEditorAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCustomFileSystemConfig {
    /// The default EBS storage settings for a private space. See EFS File System Config below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileSystemConfig")]
    #[builder(default)]
    pub efs_file_system_config: Option<Vec<UserProfileForProviderUserSettingsCustomFileSystemConfigEfsFileSystemConfig>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCustomFileSystemConfigEfsFileSystemConfig {
    /// The ID of your Amazon EFS file system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemPath")]
    #[builder(default)]
    pub file_system_path: Option<String>,
}

/// Details about the POSIX identity that is used for file system operations. See Custom Posix User Config below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsCustomPosixUserConfig {
    /// The POSIX group ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gid: Option<f64>,
    /// The POSIX user ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<f64>,
}

/// The settings for the JupyterLab application. See Jupyter Lab App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterLabAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLifecycleManagement")]
    #[builder(default)]
    pub app_lifecycle_management: Option<UserProfileForProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "builtInLifecycleConfigArn")]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeRepository")]
    #[builder(default)]
    pub code_repository: Option<Vec<UserProfileForProviderUserSettingsJupyterLabAppSettingsCodeRepository>>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileForProviderUserSettingsJupyterLabAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileForProviderUserSettingsJupyterLabAppSettingsDefaultResourceSpec>,
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emrSettings")]
    #[builder(default)]
    pub emr_settings: Option<UserProfileForProviderUserSettingsJupyterLabAppSettingsEmrSettings>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<UserProfileForProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeoutInMinutes")]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleManagement")]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdleTimeoutInMinutes")]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIdleTimeoutInMinutes")]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryUrl")]
    #[builder(default)]
    pub repository_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterLabAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterLabAppSettingsEmrSettings {
    /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different AWS account than the SageMaker domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assumableRoleArns")]
    #[builder(default)]
    pub assumable_role_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other AWS services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other AWS services based on the particular workload requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArns")]
    #[builder(default)]
    pub execution_role_arns: Option<Vec<String>>,
}

/// The Jupyter server's app settings. See Jupyter Server App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeRepository")]
    #[builder(default)]
    pub code_repository: Option<Vec<UserProfileForProviderUserSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileForProviderUserSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryUrl")]
    #[builder(default)]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See Kernel Gateway App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileForProviderUserSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileForProviderUserSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The RSession app settings. See RSession App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsRSessionAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileForProviderUserSettingsRSessionAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileForProviderUserSettingsRSessionAppSettingsDefaultResourceSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsRSessionAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsRSessionAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsRStudioServerProAppSettings {
    /// Indicates whether the current user has access to the RStudioServerPro app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessStatus")]
    #[builder(default)]
    pub access_status: Option<String>,
    /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to R_STUDIO_USER. The R_STUDIO_ADMIN value allows the user access to the RStudio Administrative Dashboard. Valid values are R_STUDIO_USER and R_STUDIO_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroup")]
    #[builder(default)]
    pub user_group: Option<String>,
}

/// The sharing settings. See Sharing Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsSharingSettings {
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled. Valid values are Allowed and Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notebookOutputOption")]
    #[builder(default)]
    pub notebook_output_option: Option<String>,
    /// When notebook_output_option is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3KmsKeyId")]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
    /// When notebook_output_option is Allowed, the Amazon S3 bucket used to save the notebook cell output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3OutputPath")]
    #[builder(default)]
    pub s3_output_path: Option<String>,
}

/// The storage settings for a private space. See Space Storage Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsSpaceStorageSettings {
    /// The default EBS storage settings for a private space. See Default EBS Storage Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultEbsStorageSettings")]
    #[builder(default)]
    pub default_ebs_storage_settings: Option<UserProfileForProviderUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings>,
}

/// The default EBS storage settings for a private space. See Default EBS Storage Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings {
    /// The default size of the EBS storage volume for a private space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultEbsVolumeSizeInGb")]
    #[builder(default)]
    pub default_ebs_volume_size_in_gb: Option<f64>,
    /// The maximum size of the EBS storage volume for a private space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumEbsVolumeSizeInGb")]
    #[builder(default)]
    pub maximum_ebs_volume_size_in_gb: Option<f64>,
}

/// The Studio Web Portal settings. See studio_web_portal_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsStudioWebPortalSettings {
    /// The Applications supported in Studio that are hidden from the Studio left navigation pane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiddenAppTypes")]
    #[builder(default)]
    pub hidden_app_types: Option<Vec<String>>,
    /// The instance types you are hiding from the Studio user interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiddenInstanceTypes")]
    #[builder(default)]
    pub hidden_instance_types: Option<Vec<String>>,
    /// The machine learning tools that are hidden from the Studio left navigation pane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiddenMlTools")]
    #[builder(default)]
    pub hidden_ml_tools: Option<Vec<String>>,
}

/// The TensorBoard app settings. See TensorBoard App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsTensorBoardAppSettings {
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileForProviderUserSettingsTensorBoardAppSettingsDefaultResourceSpec>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileForProviderUserSettingsTensorBoardAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProvider {
    /// The ID of the associated Domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    #[builder(default)]
    pub domain_id: Option<String>,
    /// Reference to a Domain in sagemaker to populate domainId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIdRef")]
    #[builder(default)]
    pub domain_id_ref: Option<UserProfileInitProviderDomainIdRef>,
    /// Selector for a Domain in sagemaker to populate domainId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIdSelector")]
    #[builder(default)]
    pub domain_id_selector: Option<UserProfileInitProviderDomainIdSelector>,
    /// A specifier for the type of value specified in single_sign_on_user_value. Currently, the only supported value is UserName. If the Domain's AuthMode is SSO, this field is required. If the Domain's AuthMode is not SSO, this field cannot be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleSignOnUserIdentifier")]
    #[builder(default)]
    pub single_sign_on_user_identifier: Option<String>,
    /// The username of the associated AWS Single Sign-On User for this User Profile. If the Domain's AuthMode is SSO, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not SSO, this field cannot be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleSignOnUserValue")]
    #[builder(default)]
    pub single_sign_on_user_value: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The name for the User Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileName")]
    #[builder(default)]
    pub user_profile_name: Option<String>,
    /// The user settings. See User Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userSettings")]
    #[builder(default)]
    pub user_settings: Option<UserProfileInitProviderUserSettings>,
}

/// Reference to a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderDomainIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UserProfileInitProviderDomainIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderDomainIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UserProfileInitProviderDomainIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UserProfileInitProviderDomainIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileInitProviderDomainIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileInitProviderDomainIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderDomainIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UserProfileInitProviderDomainIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderDomainIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UserProfileInitProviderDomainIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UserProfileInitProviderDomainIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileInitProviderDomainIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileInitProviderDomainIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The user settings. See User Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettings {
    /// Indicates whether auto-mounting of an EFS volume is supported for the user profile. The DefaultAsDomain value is only supported for user profiles. Do not use the DefaultAsDomain value when setting this parameter for a domain. Valid values are: Enabled, Disabled, and DefaultAsDomain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMountHomeEfs")]
    #[builder(default)]
    pub auto_mount_home_efs: Option<String>,
    /// The Canvas app settings. See Canvas App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "canvasAppSettings")]
    #[builder(default)]
    pub canvas_app_settings: Option<UserProfileInitProviderUserSettingsCanvasAppSettings>,
    /// The Code Editor application settings. See Code Editor App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeEditorAppSettings")]
    #[builder(default)]
    pub code_editor_app_settings: Option<UserProfileInitProviderUserSettingsCodeEditorAppSettings>,
    /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See Custom File System Config below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customFileSystemConfig")]
    #[builder(default)]
    pub custom_file_system_config: Option<Vec<UserProfileInitProviderUserSettingsCustomFileSystemConfig>>,
    /// Details about the POSIX identity that is used for file system operations. See Custom Posix User Config below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customPosixUserConfig")]
    #[builder(default)]
    pub custom_posix_user_config: Option<UserProfileInitProviderUserSettingsCustomPosixUserConfig>,
    /// The default experience that the user is directed to when accessing the domain. The supported values are: studio::: Indicates that Studio is the default experience. This value can only be passed if StudioWebPortal is set to ENABLED. app:JupyterServer:: Indicates that Studio Classic is the default experience.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultLandingUri")]
    #[builder(default)]
    pub default_landing_uri: Option<String>,
    /// The execution role ARN for the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// The settings for the JupyterLab application. See Jupyter Lab App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jupyterLabAppSettings")]
    #[builder(default)]
    pub jupyter_lab_app_settings: Option<UserProfileInitProviderUserSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See Jupyter Server App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jupyterServerAppSettings")]
    #[builder(default)]
    pub jupyter_server_app_settings: Option<UserProfileInitProviderUserSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See Kernel Gateway App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelGatewayAppSettings")]
    #[builder(default)]
    pub kernel_gateway_app_settings: Option<UserProfileInitProviderUserSettingsKernelGatewayAppSettings>,
    /// The RSession app settings. See RSession App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rSessionAppSettings")]
    #[builder(default)]
    pub r_session_app_settings: Option<UserProfileInitProviderUserSettingsRSessionAppSettings>,
    /// A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rStudioServerProAppSettings")]
    #[builder(default)]
    pub r_studio_server_pro_app_settings: Option<UserProfileInitProviderUserSettingsRStudioServerProAppSettings>,
    /// A list of security group IDs that will be attached to the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The sharing settings. See Sharing Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharingSettings")]
    #[builder(default)]
    pub sharing_settings: Option<UserProfileInitProviderUserSettingsSharingSettings>,
    /// The storage settings for a private space. See Space Storage Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spaceStorageSettings")]
    #[builder(default)]
    pub space_storage_settings: Option<UserProfileInitProviderUserSettingsSpaceStorageSettings>,
    /// Whether the user can access Studio. If this value is set to DISABLED, the user cannot access Studio, even if that is the default experience for the domain. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "studioWebPortal")]
    #[builder(default)]
    pub studio_web_portal: Option<String>,
    /// The Studio Web Portal settings. See studio_web_portal_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "studioWebPortalSettings")]
    #[builder(default)]
    pub studio_web_portal_settings: Option<UserProfileInitProviderUserSettingsStudioWebPortalSettings>,
    /// The TensorBoard app settings. See TensorBoard App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tensorBoardAppSettings")]
    #[builder(default)]
    pub tensor_board_app_settings: Option<UserProfileInitProviderUserSettingsTensorBoardAppSettings>,
}

/// The Canvas app settings. See Canvas App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCanvasAppSettings {
    /// The model deployment settings for the SageMaker Canvas application. See Direct Deploy Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directDeploySettings")]
    #[builder(default)]
    pub direct_deploy_settings: Option<UserProfileInitProviderUserSettingsCanvasAppSettingsDirectDeploySettings>,
    /// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emrServerlessSettings")]
    #[builder(default)]
    pub emr_serverless_settings: Option<UserProfileInitProviderUserSettingsCanvasAppSettingsEmrServerlessSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generativeAiSettings")]
    #[builder(default)]
    pub generative_ai_settings: Option<UserProfileInitProviderUserSettingsCanvasAppSettingsGenerativeAiSettings>,
    /// The settings for connecting to an external data source with OAuth. See Identity Provider OAuth Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityProviderOauthSettings")]
    #[builder(default)]
    pub identity_provider_oauth_settings: Option<Vec<UserProfileInitProviderUserSettingsCanvasAppSettingsIdentityProviderOauthSettings>>,
    /// The settings for document querying. See Kendra Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kendraSettings")]
    #[builder(default)]
    pub kendra_settings: Option<UserProfileInitProviderUserSettingsCanvasAppSettingsKendraSettings>,
    /// The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelRegisterSettings")]
    #[builder(default)]
    pub model_register_settings: Option<UserProfileInitProviderUserSettingsCanvasAppSettingsModelRegisterSettings>,
    /// Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeSeriesForecastingSettings")]
    #[builder(default)]
    pub time_series_forecasting_settings: Option<UserProfileInitProviderUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings>,
    /// The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workspaceSettings")]
    #[builder(default)]
    pub workspace_settings: Option<UserProfileInitProviderUserSettingsCanvasAppSettingsWorkspaceSettings>,
}

/// The model deployment settings for the SageMaker Canvas application. See Direct Deploy Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCanvasAppSettingsDirectDeploySettings {
    /// Describes whether model deployment permissions are enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCanvasAppSettingsEmrServerlessSettings {
    /// The Amazon Resource Name (ARN) of the AWS IAM role that is assumed for running Amazon EMR Serverless jobs in SageMaker Canvas. This role should have the necessary permissions to read and write data attached and a trust relationship with EMR Serverless.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    #[builder(default)]
    pub execution_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCanvasAppSettingsGenerativeAiSettings {
    /// The user profile Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonBedrockRoleArn")]
    #[builder(default)]
    pub amazon_bedrock_role_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCanvasAppSettingsIdentityProviderOauthSettings {
    /// The name of the data source that you're connecting to. Canvas currently supports OAuth for Snowflake and Salesforce Data Cloud. Valid values are SalesforceGenie and Snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceName")]
    #[builder(default)]
    pub data_source_name: Option<String>,
    /// The ARN of an Amazon Web Services Secrets Manager secret that stores the credentials from your identity provider, such as the client ID and secret, authorization URL, and token URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    #[builder(default)]
    pub secret_arn: Option<String>,
    /// Describes whether OAuth for a data source is enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for document querying. See Kendra Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCanvasAppSettingsKendraSettings {
    /// Describes whether the document querying feature is enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCanvasAppSettingsModelRegisterSettings {
    /// The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossAccountModelRegisterRoleArn")]
    #[builder(default)]
    pub cross_account_model_register_role_arn: Option<String>,
    /// Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings {
    /// The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the AmazonSageMakerCanvasForecastAccess policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonForecastRoleArn")]
    #[builder(default)]
    pub amazon_forecast_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCanvasAppSettingsWorkspaceSettings {
    /// The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3ArtifactPath")]
    #[builder(default)]
    pub s3_artifact_path: Option<String>,
    /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3KmsKeyId")]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
}

/// The Code Editor application settings. See Code Editor App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCodeEditorAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLifecycleManagement")]
    #[builder(default)]
    pub app_lifecycle_management: Option<UserProfileInitProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "builtInLifecycleConfigArn")]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of custom SageMaker images that are configured to run as a CodeEditor app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileInitProviderUserSettingsCodeEditorAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileInitProviderUserSettingsCodeEditorAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<UserProfileInitProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeoutInMinutes")]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleManagement")]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdleTimeoutInMinutes")]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIdleTimeoutInMinutes")]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCodeEditorAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCodeEditorAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCustomFileSystemConfig {
    /// The default EBS storage settings for a private space. See EFS File System Config below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileSystemConfig")]
    #[builder(default)]
    pub efs_file_system_config: Option<Vec<UserProfileInitProviderUserSettingsCustomFileSystemConfigEfsFileSystemConfig>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCustomFileSystemConfigEfsFileSystemConfig {
    /// The ID of your Amazon EFS file system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemPath")]
    #[builder(default)]
    pub file_system_path: Option<String>,
}

/// Details about the POSIX identity that is used for file system operations. See Custom Posix User Config below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsCustomPosixUserConfig {
    /// The POSIX group ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gid: Option<f64>,
    /// The POSIX user ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<f64>,
}

/// The settings for the JupyterLab application. See Jupyter Lab App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterLabAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLifecycleManagement")]
    #[builder(default)]
    pub app_lifecycle_management: Option<UserProfileInitProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "builtInLifecycleConfigArn")]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeRepository")]
    #[builder(default)]
    pub code_repository: Option<Vec<UserProfileInitProviderUserSettingsJupyterLabAppSettingsCodeRepository>>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileInitProviderUserSettingsJupyterLabAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileInitProviderUserSettingsJupyterLabAppSettingsDefaultResourceSpec>,
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emrSettings")]
    #[builder(default)]
    pub emr_settings: Option<UserProfileInitProviderUserSettingsJupyterLabAppSettingsEmrSettings>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<UserProfileInitProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeoutInMinutes")]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleManagement")]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdleTimeoutInMinutes")]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIdleTimeoutInMinutes")]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryUrl")]
    #[builder(default)]
    pub repository_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterLabAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterLabAppSettingsEmrSettings {
    /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different AWS account than the SageMaker domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assumableRoleArns")]
    #[builder(default)]
    pub assumable_role_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other AWS services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other AWS services based on the particular workload requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArns")]
    #[builder(default)]
    pub execution_role_arns: Option<Vec<String>>,
}

/// The Jupyter server's app settings. See Jupyter Server App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeRepository")]
    #[builder(default)]
    pub code_repository: Option<Vec<UserProfileInitProviderUserSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileInitProviderUserSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryUrl")]
    #[builder(default)]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See Kernel Gateway App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileInitProviderUserSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileInitProviderUserSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The RSession app settings. See RSession App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsRSessionAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileInitProviderUserSettingsRSessionAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileInitProviderUserSettingsRSessionAppSettingsDefaultResourceSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsRSessionAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsRSessionAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsRStudioServerProAppSettings {
    /// Indicates whether the current user has access to the RStudioServerPro app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessStatus")]
    #[builder(default)]
    pub access_status: Option<String>,
    /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to R_STUDIO_USER. The R_STUDIO_ADMIN value allows the user access to the RStudio Administrative Dashboard. Valid values are R_STUDIO_USER and R_STUDIO_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroup")]
    #[builder(default)]
    pub user_group: Option<String>,
}

/// The sharing settings. See Sharing Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsSharingSettings {
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled. Valid values are Allowed and Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notebookOutputOption")]
    #[builder(default)]
    pub notebook_output_option: Option<String>,
    /// When notebook_output_option is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3KmsKeyId")]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
    /// When notebook_output_option is Allowed, the Amazon S3 bucket used to save the notebook cell output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3OutputPath")]
    #[builder(default)]
    pub s3_output_path: Option<String>,
}

/// The storage settings for a private space. See Space Storage Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsSpaceStorageSettings {
    /// The default EBS storage settings for a private space. See Default EBS Storage Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultEbsStorageSettings")]
    #[builder(default)]
    pub default_ebs_storage_settings: Option<UserProfileInitProviderUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings>,
}

/// The default EBS storage settings for a private space. See Default EBS Storage Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings {
    /// The default size of the EBS storage volume for a private space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultEbsVolumeSizeInGb")]
    #[builder(default)]
    pub default_ebs_volume_size_in_gb: Option<f64>,
    /// The maximum size of the EBS storage volume for a private space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumEbsVolumeSizeInGb")]
    #[builder(default)]
    pub maximum_ebs_volume_size_in_gb: Option<f64>,
}

/// The Studio Web Portal settings. See studio_web_portal_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsStudioWebPortalSettings {
    /// The Applications supported in Studio that are hidden from the Studio left navigation pane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiddenAppTypes")]
    #[builder(default)]
    pub hidden_app_types: Option<Vec<String>>,
    /// The instance types you are hiding from the Studio user interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiddenInstanceTypes")]
    #[builder(default)]
    pub hidden_instance_types: Option<Vec<String>>,
    /// The machine learning tools that are hidden from the Studio left navigation pane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiddenMlTools")]
    #[builder(default)]
    pub hidden_ml_tools: Option<Vec<String>>,
}

/// The TensorBoard app settings. See TensorBoard App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsTensorBoardAppSettings {
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileInitProviderUserSettingsTensorBoardAppSettingsDefaultResourceSpec>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileInitProviderUserSettingsTensorBoardAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UserProfileProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UserProfileProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UserProfileProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfileProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfilePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<UserProfilePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<UserProfilePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfilePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<UserProfilePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfilePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<UserProfilePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<UserProfilePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfilePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProfilePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfilePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// UserProfileStatus defines the observed state of UserProfile.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<UserProfileStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProvider {
    /// The user profile Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// The ID of the associated Domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    #[builder(default)]
    pub domain_id: Option<String>,
    /// The ID of the user's profile in the Amazon Elastic File System (EFS) volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "homeEfsFileSystemUid")]
    #[builder(default)]
    pub home_efs_file_system_uid: Option<String>,
    /// The user profile Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// A specifier for the type of value specified in single_sign_on_user_value. Currently, the only supported value is UserName. If the Domain's AuthMode is SSO, this field is required. If the Domain's AuthMode is not SSO, this field cannot be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleSignOnUserIdentifier")]
    #[builder(default)]
    pub single_sign_on_user_identifier: Option<String>,
    /// The username of the associated AWS Single Sign-On User for this User Profile. If the Domain's AuthMode is SSO, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not SSO, this field cannot be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleSignOnUserValue")]
    #[builder(default)]
    pub single_sign_on_user_value: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// The name for the User Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileName")]
    #[builder(default)]
    pub user_profile_name: Option<String>,
    /// The user settings. See User Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userSettings")]
    #[builder(default)]
    pub user_settings: Option<UserProfileStatusAtProviderUserSettings>,
}

/// The user settings. See User Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettings {
    /// Indicates whether auto-mounting of an EFS volume is supported for the user profile. The DefaultAsDomain value is only supported for user profiles. Do not use the DefaultAsDomain value when setting this parameter for a domain. Valid values are: Enabled, Disabled, and DefaultAsDomain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMountHomeEfs")]
    #[builder(default)]
    pub auto_mount_home_efs: Option<String>,
    /// The Canvas app settings. See Canvas App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "canvasAppSettings")]
    #[builder(default)]
    pub canvas_app_settings: Option<UserProfileStatusAtProviderUserSettingsCanvasAppSettings>,
    /// The Code Editor application settings. See Code Editor App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeEditorAppSettings")]
    #[builder(default)]
    pub code_editor_app_settings: Option<UserProfileStatusAtProviderUserSettingsCodeEditorAppSettings>,
    /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See Custom File System Config below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customFileSystemConfig")]
    #[builder(default)]
    pub custom_file_system_config: Option<Vec<UserProfileStatusAtProviderUserSettingsCustomFileSystemConfig>>,
    /// Details about the POSIX identity that is used for file system operations. See Custom Posix User Config below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customPosixUserConfig")]
    #[builder(default)]
    pub custom_posix_user_config: Option<UserProfileStatusAtProviderUserSettingsCustomPosixUserConfig>,
    /// The default experience that the user is directed to when accessing the domain. The supported values are: studio::: Indicates that Studio is the default experience. This value can only be passed if StudioWebPortal is set to ENABLED. app:JupyterServer:: Indicates that Studio Classic is the default experience.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultLandingUri")]
    #[builder(default)]
    pub default_landing_uri: Option<String>,
    /// The execution role ARN for the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// The settings for the JupyterLab application. See Jupyter Lab App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jupyterLabAppSettings")]
    #[builder(default)]
    pub jupyter_lab_app_settings: Option<UserProfileStatusAtProviderUserSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See Jupyter Server App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jupyterServerAppSettings")]
    #[builder(default)]
    pub jupyter_server_app_settings: Option<UserProfileStatusAtProviderUserSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See Kernel Gateway App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelGatewayAppSettings")]
    #[builder(default)]
    pub kernel_gateway_app_settings: Option<UserProfileStatusAtProviderUserSettingsKernelGatewayAppSettings>,
    /// The RSession app settings. See RSession App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rSessionAppSettings")]
    #[builder(default)]
    pub r_session_app_settings: Option<UserProfileStatusAtProviderUserSettingsRSessionAppSettings>,
    /// A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rStudioServerProAppSettings")]
    #[builder(default)]
    pub r_studio_server_pro_app_settings: Option<UserProfileStatusAtProviderUserSettingsRStudioServerProAppSettings>,
    /// A list of security group IDs that will be attached to the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The sharing settings. See Sharing Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharingSettings")]
    #[builder(default)]
    pub sharing_settings: Option<UserProfileStatusAtProviderUserSettingsSharingSettings>,
    /// The storage settings for a private space. See Space Storage Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spaceStorageSettings")]
    #[builder(default)]
    pub space_storage_settings: Option<UserProfileStatusAtProviderUserSettingsSpaceStorageSettings>,
    /// Whether the user can access Studio. If this value is set to DISABLED, the user cannot access Studio, even if that is the default experience for the domain. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "studioWebPortal")]
    #[builder(default)]
    pub studio_web_portal: Option<String>,
    /// The Studio Web Portal settings. See studio_web_portal_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "studioWebPortalSettings")]
    #[builder(default)]
    pub studio_web_portal_settings: Option<UserProfileStatusAtProviderUserSettingsStudioWebPortalSettings>,
    /// The TensorBoard app settings. See TensorBoard App Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tensorBoardAppSettings")]
    #[builder(default)]
    pub tensor_board_app_settings: Option<UserProfileStatusAtProviderUserSettingsTensorBoardAppSettings>,
}

/// The Canvas app settings. See Canvas App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCanvasAppSettings {
    /// The model deployment settings for the SageMaker Canvas application. See Direct Deploy Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directDeploySettings")]
    #[builder(default)]
    pub direct_deploy_settings: Option<UserProfileStatusAtProviderUserSettingsCanvasAppSettingsDirectDeploySettings>,
    /// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emrServerlessSettings")]
    #[builder(default)]
    pub emr_serverless_settings: Option<UserProfileStatusAtProviderUserSettingsCanvasAppSettingsEmrServerlessSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generativeAiSettings")]
    #[builder(default)]
    pub generative_ai_settings: Option<UserProfileStatusAtProviderUserSettingsCanvasAppSettingsGenerativeAiSettings>,
    /// The settings for connecting to an external data source with OAuth. See Identity Provider OAuth Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityProviderOauthSettings")]
    #[builder(default)]
    pub identity_provider_oauth_settings: Option<Vec<UserProfileStatusAtProviderUserSettingsCanvasAppSettingsIdentityProviderOauthSettings>>,
    /// The settings for document querying. See Kendra Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kendraSettings")]
    #[builder(default)]
    pub kendra_settings: Option<UserProfileStatusAtProviderUserSettingsCanvasAppSettingsKendraSettings>,
    /// The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelRegisterSettings")]
    #[builder(default)]
    pub model_register_settings: Option<UserProfileStatusAtProviderUserSettingsCanvasAppSettingsModelRegisterSettings>,
    /// Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeSeriesForecastingSettings")]
    #[builder(default)]
    pub time_series_forecasting_settings: Option<UserProfileStatusAtProviderUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings>,
    /// The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workspaceSettings")]
    #[builder(default)]
    pub workspace_settings: Option<UserProfileStatusAtProviderUserSettingsCanvasAppSettingsWorkspaceSettings>,
}

/// The model deployment settings for the SageMaker Canvas application. See Direct Deploy Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCanvasAppSettingsDirectDeploySettings {
    /// Describes whether model deployment permissions are enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCanvasAppSettingsEmrServerlessSettings {
    /// The Amazon Resource Name (ARN) of the AWS IAM role that is assumed for running Amazon EMR Serverless jobs in SageMaker Canvas. This role should have the necessary permissions to read and write data attached and a trust relationship with EMR Serverless.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    #[builder(default)]
    pub execution_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCanvasAppSettingsGenerativeAiSettings {
    /// The user profile Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonBedrockRoleArn")]
    #[builder(default)]
    pub amazon_bedrock_role_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCanvasAppSettingsIdentityProviderOauthSettings {
    /// The name of the data source that you're connecting to. Canvas currently supports OAuth for Snowflake and Salesforce Data Cloud. Valid values are SalesforceGenie and Snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceName")]
    #[builder(default)]
    pub data_source_name: Option<String>,
    /// The ARN of an Amazon Web Services Secrets Manager secret that stores the credentials from your identity provider, such as the client ID and secret, authorization URL, and token URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    #[builder(default)]
    pub secret_arn: Option<String>,
    /// Describes whether OAuth for a data source is enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for document querying. See Kendra Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCanvasAppSettingsKendraSettings {
    /// Describes whether the document querying feature is enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCanvasAppSettingsModelRegisterSettings {
    /// The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossAccountModelRegisterRoleArn")]
    #[builder(default)]
    pub cross_account_model_register_role_arn: Option<String>,
    /// Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings {
    /// The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the AmazonSageMakerCanvasForecastAccess policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amazonForecastRoleArn")]
    #[builder(default)]
    pub amazon_forecast_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCanvasAppSettingsWorkspaceSettings {
    /// The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3ArtifactPath")]
    #[builder(default)]
    pub s3_artifact_path: Option<String>,
    /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3KmsKeyId")]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
}

/// The Code Editor application settings. See Code Editor App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCodeEditorAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLifecycleManagement")]
    #[builder(default)]
    pub app_lifecycle_management: Option<UserProfileStatusAtProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "builtInLifecycleConfigArn")]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of custom SageMaker images that are configured to run as a CodeEditor app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileStatusAtProviderUserSettingsCodeEditorAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileStatusAtProviderUserSettingsCodeEditorAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<UserProfileStatusAtProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeoutInMinutes")]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleManagement")]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdleTimeoutInMinutes")]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIdleTimeoutInMinutes")]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCodeEditorAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCodeEditorAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCustomFileSystemConfig {
    /// The default EBS storage settings for a private space. See EFS File System Config below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "efsFileSystemConfig")]
    #[builder(default)]
    pub efs_file_system_config: Option<Vec<UserProfileStatusAtProviderUserSettingsCustomFileSystemConfigEfsFileSystemConfig>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCustomFileSystemConfigEfsFileSystemConfig {
    /// The ID of your Amazon EFS file system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemPath")]
    #[builder(default)]
    pub file_system_path: Option<String>,
}

/// Details about the POSIX identity that is used for file system operations. See Custom Posix User Config below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsCustomPosixUserConfig {
    /// The POSIX group ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gid: Option<f64>,
    /// The POSIX user ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<f64>,
}

/// The settings for the JupyterLab application. See Jupyter Lab App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterLabAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLifecycleManagement")]
    #[builder(default)]
    pub app_lifecycle_management: Option<UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "builtInLifecycleConfigArn")]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeRepository")]
    #[builder(default)]
    pub code_repository: Option<Vec<UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsCodeRepository>>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsDefaultResourceSpec>,
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emrSettings")]
    #[builder(default)]
    pub emr_settings: Option<UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsEmrSettings>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeoutInMinutes")]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleManagement")]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdleTimeoutInMinutes")]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minIdleTimeoutInMinutes")]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryUrl")]
    #[builder(default)]
    pub repository_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterLabAppSettingsEmrSettings {
    /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different AWS account than the SageMaker domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assumableRoleArns")]
    #[builder(default)]
    pub assumable_role_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other AWS services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other AWS services based on the particular workload requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArns")]
    #[builder(default)]
    pub execution_role_arns: Option<Vec<String>>,
}

/// The Jupyter server's app settings. See Jupyter Server App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeRepository")]
    #[builder(default)]
    pub code_repository: Option<Vec<UserProfileStatusAtProviderUserSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileStatusAtProviderUserSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryUrl")]
    #[builder(default)]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See Kernel Gateway App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileStatusAtProviderUserSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileStatusAtProviderUserSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArns")]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The RSession app settings. See RSession App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsRSessionAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customImage")]
    #[builder(default)]
    pub custom_image: Option<Vec<UserProfileStatusAtProviderUserSettingsRSessionAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileStatusAtProviderUserSettingsRSessionAppSettingsDefaultResourceSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsRSessionAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsRSessionAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsRStudioServerProAppSettings {
    /// Indicates whether the current user has access to the RStudioServerPro app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessStatus")]
    #[builder(default)]
    pub access_status: Option<String>,
    /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to R_STUDIO_USER. The R_STUDIO_ADMIN value allows the user access to the RStudio Administrative Dashboard. Valid values are R_STUDIO_USER and R_STUDIO_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroup")]
    #[builder(default)]
    pub user_group: Option<String>,
}

/// The sharing settings. See Sharing Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsSharingSettings {
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled. Valid values are Allowed and Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notebookOutputOption")]
    #[builder(default)]
    pub notebook_output_option: Option<String>,
    /// When notebook_output_option is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3KmsKeyId")]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
    /// When notebook_output_option is Allowed, the Amazon S3 bucket used to save the notebook cell output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3OutputPath")]
    #[builder(default)]
    pub s3_output_path: Option<String>,
}

/// The storage settings for a private space. See Space Storage Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsSpaceStorageSettings {
    /// The default EBS storage settings for a private space. See Default EBS Storage Settings below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultEbsStorageSettings")]
    #[builder(default)]
    pub default_ebs_storage_settings: Option<UserProfileStatusAtProviderUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings>,
}

/// The default EBS storage settings for a private space. See Default EBS Storage Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings {
    /// The default size of the EBS storage volume for a private space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultEbsVolumeSizeInGb")]
    #[builder(default)]
    pub default_ebs_volume_size_in_gb: Option<f64>,
    /// The maximum size of the EBS storage volume for a private space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumEbsVolumeSizeInGb")]
    #[builder(default)]
    pub maximum_ebs_volume_size_in_gb: Option<f64>,
}

/// The Studio Web Portal settings. See studio_web_portal_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsStudioWebPortalSettings {
    /// The Applications supported in Studio that are hidden from the Studio left navigation pane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiddenAppTypes")]
    #[builder(default)]
    pub hidden_app_types: Option<Vec<String>>,
    /// The instance types you are hiding from the Studio user interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiddenInstanceTypes")]
    #[builder(default)]
    pub hidden_instance_types: Option<Vec<String>>,
    /// The machine learning tools that are hidden from the Studio left navigation pane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiddenMlTools")]
    #[builder(default)]
    pub hidden_ml_tools: Option<Vec<String>>,
}

/// The TensorBoard app settings. See TensorBoard App Settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsTensorBoardAppSettings {
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultResourceSpec")]
    #[builder(default)]
    pub default_resource_spec: Option<UserProfileStatusAtProviderUserSettingsTensorBoardAppSettingsDefaultResourceSpec>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct UserProfileStatusAtProviderUserSettingsTensorBoardAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}


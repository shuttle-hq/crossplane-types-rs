// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// DomainSpec defines the desired state of Domain
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "sagemaker.aws.upbound.io",
    version = "v1beta2",
    kind = "Domain",
    plural = "domains"
)]
#[kube(status = "DomainStatus")]
pub struct DomainSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<DomainDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DomainForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<DomainInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<DomainProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<DomainPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<DomainWriteConnectionSecretToRef>,
}

/// DomainSpec defines the desired state of Domain
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProvider {
    /// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly. Valid values are PublicInternetOnly and VpcOnly.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appNetworkAccessType"
    )]
    #[builder(default)]
    pub app_network_access_type: Option<String>,
    /// The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Valid values are Service and Customer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appSecurityGroupManagement"
    )]
    #[builder(default)]
    pub app_security_group_management: Option<String>,
    /// The mode of authentication that members use to access the domain. Valid values are IAM and SSO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    #[builder(default)]
    pub auth_mode: Option<String>,
    /// The default space settings. See default_space_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultSpaceSettings"
    )]
    #[builder(default)]
    pub default_space_settings: Option<DomainForProviderDefaultSpaceSettings>,
    /// The default user settings. See default_user_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUserSettings"
    )]
    #[builder(default)]
    pub default_user_settings: Option<DomainForProviderDefaultUserSettings>,
    /// The domain name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// The domain settings. See domain_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainSettings"
    )]
    #[builder(default)]
    pub domain_settings: Option<DomainForProviderDomainSettings>,
    /// The AWS KMS customer managed CMK used to encrypt the EFS volume attached to the domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default)]
    pub kms_key_id_ref: Option<DomainForProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default)]
    pub kms_key_id_selector: Option<DomainForProviderKmsKeyIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See retention_policy Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPolicy"
    )]
    #[builder(default)]
    pub retention_policy: Option<DomainForProviderRetentionPolicy>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRefs"
    )]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<DomainForProviderSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default)]
    pub subnet_id_selector: Option<DomainForProviderSubnetIdSelector>,
    /// The VPC subnets that Studio uses for communication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// Indicates whether custom tag propagation is supported for the domain. Defaults to DISABLED. Valid values are: ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagPropagation"
    )]
    #[builder(default)]
    pub tag_propagation: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
    /// Reference to a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdRef")]
    #[builder(default)]
    pub vpc_id_ref: Option<DomainForProviderVpcIdRef>,
    /// Selector for a VPC in ec2 to populate vpcId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcIdSelector"
    )]
    #[builder(default)]
    pub vpc_id_selector: Option<DomainForProviderVpcIdSelector>,
}

/// The default space settings. See default_space_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettings {
    /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See custom_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFileSystemConfig"
    )]
    #[builder(default)]
    pub custom_file_system_config:
        Option<Vec<DomainForProviderDefaultSpaceSettingsCustomFileSystemConfig>>,
    /// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPosixUserConfig"
    )]
    #[builder(default)]
    pub custom_posix_user_config:
        Option<DomainForProviderDefaultSpaceSettingsCustomPosixUserConfig>,
    /// The execution role for the space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRole"
    )]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabAppSettings"
    )]
    #[builder(default)]
    pub jupyter_lab_app_settings:
        Option<DomainForProviderDefaultSpaceSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterServerAppSettings"
    )]
    #[builder(default)]
    pub jupyter_server_app_settings:
        Option<DomainForProviderDefaultSpaceSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayAppSettings"
    )]
    #[builder(default)]
    pub kernel_gateway_app_settings:
        Option<DomainForProviderDefaultSpaceSettingsKernelGatewayAppSettings>,
    /// The security groups for the Amazon Virtual Private Cloud that the space uses for communication.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The storage settings for a private space. See space_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceStorageSettings"
    )]
    #[builder(default)]
    pub space_storage_settings: Option<DomainForProviderDefaultSpaceSettingsSpaceStorageSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsCustomFileSystemConfig {
    /// The default EBS storage settings for a private space. See efs_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsFileSystemConfig"
    )]
    #[builder(default)]
    pub efs_file_system_config:
        Option<DomainForProviderDefaultSpaceSettingsCustomFileSystemConfigEfsFileSystemConfig>,
}

/// The default EBS storage settings for a private space. See efs_file_system_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsCustomFileSystemConfigEfsFileSystemConfig {
    /// The ID of your Amazon EFS file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemPath"
    )]
    #[builder(default)]
    pub file_system_path: Option<String>,
}

/// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsCustomPosixUserConfig {
    /// The POSIX group ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gid: Option<f64>,
    /// The POSIX user ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<f64>,
}

/// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterLabAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default)]
    pub app_lifecycle_management:
        Option<DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "builtInLifecycleConfigArn"
    )]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsCodeRepository>>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec>,
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emrSettings"
    )]
    #[builder(default)]
    pub emr_settings: Option<DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsEmrSettings>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleManagement"
    )]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterLabAppSettingsEmrSettings {
    /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different AWS account than the SageMaker domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assumableRoleArns"
    )]
    #[builder(default)]
    pub assumable_role_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other AWS services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other AWS services based on the particular workload requirements.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArns"
    )]
    #[builder(default)]
    pub execution_role_arns: Option<Vec<String>>,
}

/// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainForProviderDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainForProviderDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The storage settings for a private space. See space_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsSpaceStorageSettings {
    /// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsStorageSettings"
    )]
    #[builder(default)]
    pub default_ebs_storage_settings:
        Option<DomainForProviderDefaultSpaceSettingsSpaceStorageSettingsDefaultEbsStorageSettings>,
}

/// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultSpaceSettingsSpaceStorageSettingsDefaultEbsStorageSettings {
    /// The default size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub default_ebs_volume_size_in_gb: Option<f64>,
    /// The maximum size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub maximum_ebs_volume_size_in_gb: Option<f64>,
}

/// The default user settings. See default_user_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettings {
    /// Indicates whether auto-mounting of an EFS volume is supported for the user profile. The DefaultAsDomain value is only supported for user profiles. Do not use the DefaultAsDomain value when setting this parameter for a domain. Valid values are: Enabled, Disabled, and DefaultAsDomain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoMountHomeEfs"
    )]
    #[builder(default)]
    pub auto_mount_home_efs: Option<String>,
    /// The Canvas app settings. See canvas_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canvasAppSettings"
    )]
    #[builder(default)]
    pub canvas_app_settings: Option<DomainForProviderDefaultUserSettingsCanvasAppSettings>,
    /// The Code Editor application settings. See code_editor_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeEditorAppSettings"
    )]
    #[builder(default)]
    pub code_editor_app_settings: Option<DomainForProviderDefaultUserSettingsCodeEditorAppSettings>,
    /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See custom_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFileSystemConfig"
    )]
    #[builder(default)]
    pub custom_file_system_config:
        Option<Vec<DomainForProviderDefaultUserSettingsCustomFileSystemConfig>>,
    /// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPosixUserConfig"
    )]
    #[builder(default)]
    pub custom_posix_user_config: Option<DomainForProviderDefaultUserSettingsCustomPosixUserConfig>,
    /// The default experience that the user is directed to when accessing the domain. The supported values are: studio::: Indicates that Studio is the default experience. This value can only be passed if StudioWebPortal is set to ENABLED. app:JupyterServer:: Indicates that Studio Classic is the default experience.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultLandingUri"
    )]
    #[builder(default)]
    pub default_landing_uri: Option<String>,
    /// The execution role ARN for the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRole"
    )]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// Reference to a Role in iam to populate executionRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleRef"
    )]
    #[builder(default)]
    pub execution_role_ref: Option<DomainForProviderDefaultUserSettingsExecutionRoleRef>,
    /// Selector for a Role in iam to populate executionRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleSelector"
    )]
    #[builder(default)]
    pub execution_role_selector: Option<DomainForProviderDefaultUserSettingsExecutionRoleSelector>,
    /// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabAppSettings"
    )]
    #[builder(default)]
    pub jupyter_lab_app_settings: Option<DomainForProviderDefaultUserSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterServerAppSettings"
    )]
    #[builder(default)]
    pub jupyter_server_app_settings:
        Option<DomainForProviderDefaultUserSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayAppSettings"
    )]
    #[builder(default)]
    pub kernel_gateway_app_settings:
        Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettings>,
    /// The RSession app settings. See r_session_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rSessionAppSettings"
    )]
    #[builder(default)]
    pub r_session_app_settings: Option<DomainForProviderDefaultUserSettingsRSessionAppSettings>,
    /// A collection of settings that configure user interaction with the RStudioServerPro app. See r_studio_server_pro_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioServerProAppSettings"
    )]
    #[builder(default)]
    pub r_studio_server_pro_app_settings:
        Option<DomainForProviderDefaultUserSettingsRStudioServerProAppSettings>,
    /// A list of security group IDs that will be attached to the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The sharing settings. See sharing_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharingSettings"
    )]
    #[builder(default)]
    pub sharing_settings: Option<DomainForProviderDefaultUserSettingsSharingSettings>,
    /// The storage settings for a private space. See space_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceStorageSettings"
    )]
    #[builder(default)]
    pub space_storage_settings: Option<DomainForProviderDefaultUserSettingsSpaceStorageSettings>,
    /// Whether the user can access Studio. If this value is set to DISABLED, the user cannot access Studio, even if that is the default experience for the domain. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "studioWebPortal"
    )]
    #[builder(default)]
    pub studio_web_portal: Option<String>,
    /// The Studio Web Portal settings. See studio_web_portal_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "studioWebPortalSettings"
    )]
    #[builder(default)]
    pub studio_web_portal_settings:
        Option<DomainForProviderDefaultUserSettingsStudioWebPortalSettings>,
    /// The TensorBoard app settings. See tensor_board_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tensorBoardAppSettings"
    )]
    #[builder(default)]
    pub tensor_board_app_settings:
        Option<DomainForProviderDefaultUserSettingsTensorBoardAppSettings>,
}

/// The Canvas app settings. See canvas_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCanvasAppSettings {
    /// The model deployment settings for the SageMaker Canvas application. See direct_deploy_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directDeploySettings"
    )]
    #[builder(default)]
    pub direct_deploy_settings:
        Option<DomainForProviderDefaultUserSettingsCanvasAppSettingsDirectDeploySettings>,
    /// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emrServerlessSettings"
    )]
    #[builder(default)]
    pub emr_serverless_settings:
        Option<DomainForProviderDefaultUserSettingsCanvasAppSettingsEmrServerlessSettings>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "generativeAiSettings"
    )]
    #[builder(default)]
    pub generative_ai_settings:
        Option<DomainForProviderDefaultUserSettingsCanvasAppSettingsGenerativeAiSettings>,
    /// The settings for connecting to an external data source with OAuth. See identity_provider_oauth_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityProviderOauthSettings"
    )]
    #[builder(default)]
    pub identity_provider_oauth_settings: Option<
        Vec<DomainForProviderDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettings>,
    >,
    /// The settings for document querying. See kendra_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kendraSettings"
    )]
    #[builder(default)]
    pub kendra_settings:
        Option<DomainForProviderDefaultUserSettingsCanvasAppSettingsKendraSettings>,
    /// The model registry settings for the SageMaker Canvas application. See model_register_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modelRegisterSettings"
    )]
    #[builder(default)]
    pub model_register_settings:
        Option<DomainForProviderDefaultUserSettingsCanvasAppSettingsModelRegisterSettings>,
    /// Time series forecast settings for the Canvas app. See time_series_forecasting_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeSeriesForecastingSettings"
    )]
    #[builder(default)]
    pub time_series_forecasting_settings:
        Option<DomainForProviderDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings>,
    /// The workspace settings for the SageMaker Canvas application. See workspace_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceSettings"
    )]
    #[builder(default)]
    pub workspace_settings:
        Option<DomainForProviderDefaultUserSettingsCanvasAppSettingsWorkspaceSettings>,
}

/// The model deployment settings for the SageMaker Canvas application. See direct_deploy_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCanvasAppSettingsDirectDeploySettings {
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCanvasAppSettingsEmrServerlessSettings {
    /// The Amazon Resource Name (ARN) of the AWS IAM role that is assumed for running Amazon EMR Serverless jobs in SageMaker Canvas. This role should have the necessary permissions to read and write data attached and a trust relationship with EMR Serverless.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArn"
    )]
    #[builder(default)]
    pub execution_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCanvasAppSettingsGenerativeAiSettings {
    /// The Amazon Resource Name (ARN) assigned by AWS to this Domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "amazonBedrockRoleArn"
    )]
    #[builder(default)]
    pub amazon_bedrock_role_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettings {
    /// The name of the data source that you're connecting to. Canvas currently supports OAuth for Snowflake and Salesforce Data Cloud. Valid values are SalesforceGenie and Snowflake.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceName"
    )]
    #[builder(default)]
    pub data_source_name: Option<String>,
    /// The ARN of an Amazon Web Services Secrets Manager secret that stores the credentials from your identity provider, such as the client ID and secret, authorization URL, and token URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    #[builder(default)]
    pub secret_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for document querying. See kendra_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCanvasAppSettingsKendraSettings {
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The model registry settings for the SageMaker Canvas application. See model_register_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCanvasAppSettingsModelRegisterSettings {
    /// The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "crossAccountModelRegisterRoleArn"
    )]
    #[builder(default)]
    pub cross_account_model_register_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// Time series forecast settings for the Canvas app. See time_series_forecasting_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings {
    /// The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the AmazonSageMakerCanvasForecastAccess policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "amazonForecastRoleArn"
    )]
    #[builder(default)]
    pub amazon_forecast_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The workspace settings for the SageMaker Canvas application. See workspace_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCanvasAppSettingsWorkspaceSettings {
    /// The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ArtifactPath"
    )]
    #[builder(default)]
    pub s3_artifact_path: Option<String>,
    /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KmsKeyId"
    )]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
}

/// The Code Editor application settings. See code_editor_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCodeEditorAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default)]
    pub app_lifecycle_management:
        Option<DomainForProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "builtInLifecycleConfigArn"
    )]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainForProviderDefaultUserSettingsCodeEditorAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSettings"
    )]
    #[builder(default)]
    pub idle_settings: Option<
        DomainForProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings,
    >,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleManagement"
    )]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCodeEditorAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCustomFileSystemConfig {
    /// The default EBS storage settings for a private space. See efs_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsFileSystemConfig"
    )]
    #[builder(default)]
    pub efs_file_system_config:
        Option<DomainForProviderDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfig>,
}

/// The default EBS storage settings for a private space. See efs_file_system_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfig {
    /// The ID of your Amazon EFS file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemPath"
    )]
    #[builder(default)]
    pub file_system_path: Option<String>,
}

/// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsCustomPosixUserConfig {
    /// The POSIX group ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gid: Option<f64>,
    /// The POSIX user ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<f64>,
}

/// Reference to a Role in iam to populate executionRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsExecutionRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderDefaultUserSettingsExecutionRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsExecutionRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderDefaultUserSettingsExecutionRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderDefaultUserSettingsExecutionRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsExecutionRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsExecutionRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsExecutionRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderDefaultUserSettingsExecutionRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsExecutionRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DomainForProviderDefaultUserSettingsExecutionRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderDefaultUserSettingsExecutionRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsExecutionRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsExecutionRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterLabAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default)]
    pub app_lifecycle_management:
        Option<DomainForProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "builtInLifecycleConfigArn"
    )]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainForProviderDefaultUserSettingsJupyterLabAppSettingsCodeRepository>>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainForProviderDefaultUserSettingsJupyterLabAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpec>,
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emrSettings"
    )]
    #[builder(default)]
    pub emr_settings: Option<DomainForProviderDefaultUserSettingsJupyterLabAppSettingsEmrSettings>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSettings"
    )]
    #[builder(default)]
    pub idle_settings: Option<
        DomainForProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings,
    >,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleManagement"
    )]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterLabAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterLabAppSettingsEmrSettings {
    /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different AWS account than the SageMaker domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assumableRoleArns"
    )]
    #[builder(default)]
    pub assumable_role_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other AWS services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other AWS services based on the particular workload requirements.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArns"
    )]
    #[builder(default)]
    pub execution_role_arns: Option<Vec<String>>,
}

/// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainForProviderDefaultUserSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// Reference to a AppImageConfig in sagemaker to populate appImageConfigName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigNameRef")]
    #[builder(default)]
    pub app_image_config_name_ref: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRef>,
    /// Selector for a AppImageConfig in sagemaker to populate appImageConfigName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigNameSelector")]
    #[builder(default)]
    pub app_image_config_name_selector: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelector>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// Reference to a ImageVersion in sagemaker to populate imageName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageNameRef")]
    #[builder(default)]
    pub image_name_ref: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRef>,
    /// Selector for a ImageVersion in sagemaker to populate imageName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageNameSelector")]
    #[builder(default)]
    pub image_name_selector: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelector>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// Reference to a AppImageConfig in sagemaker to populate appImageConfigName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a AppImageConfig in sagemaker to populate appImageConfigName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a ImageVersion in sagemaker to populate imageName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<
        DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a ImageVersion in sagemaker to populate imageName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The RSession app settings. See r_session_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsRSessionAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainForProviderDefaultUserSettingsRSessionAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsRSessionAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// A collection of settings that configure user interaction with the RStudioServerPro app. See r_studio_server_pro_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsRStudioServerProAppSettings {
    /// Indicates whether the current user has access to the RStudioServerPro app. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessStatus"
    )]
    #[builder(default)]
    pub access_status: Option<String>,
    /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to R_STUDIO_USER. The R_STUDIO_ADMIN value allows the user access to the RStudio Administrative Dashboard. Valid values are R_STUDIO_USER and R_STUDIO_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroup")]
    #[builder(default)]
    pub user_group: Option<String>,
}

/// The sharing settings. See sharing_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsSharingSettings {
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled. Valid values are Allowed and Disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notebookOutputOption"
    )]
    #[builder(default)]
    pub notebook_output_option: Option<String>,
    /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KmsKeyId"
    )]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
    /// When notebook_output_option is Allowed, the Amazon S3 bucket used to save the notebook cell output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3OutputPath"
    )]
    #[builder(default)]
    pub s3_output_path: Option<String>,
}

/// The storage settings for a private space. See space_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsSpaceStorageSettings {
    /// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsStorageSettings"
    )]
    #[builder(default)]
    pub default_ebs_storage_settings:
        Option<DomainForProviderDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings>,
}

/// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings {
    /// The default size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub default_ebs_volume_size_in_gb: Option<f64>,
    /// The maximum size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub maximum_ebs_volume_size_in_gb: Option<f64>,
}

/// The Studio Web Portal settings. See studio_web_portal_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsStudioWebPortalSettings {
    /// The Applications supported in Studio that are hidden from the Studio left navigation pane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenAppTypes"
    )]
    #[builder(default)]
    pub hidden_app_types: Option<Vec<String>>,
    /// The instance types you are hiding from the Studio user interface.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenInstanceTypes"
    )]
    #[builder(default)]
    pub hidden_instance_types: Option<Vec<String>>,
    /// The machine learning tools that are hidden from the Studio left navigation pane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenMlTools"
    )]
    #[builder(default)]
    pub hidden_ml_tools: Option<Vec<String>>,
}

/// The TensorBoard app settings. See tensor_board_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsTensorBoardAppSettings {
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The domain settings. See domain_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDomainSettings {
    /// A collection of settings that configure the domain’s Docker interaction. see docker_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerSettings"
    )]
    #[builder(default)]
    pub docker_settings: Option<DomainForProviderDomainSettingsDockerSettings>,
    /// The configuration for attaching a SageMaker user profile name to the execution role as a sts:SourceIdentity key AWS Docs. Valid values are USER_PROFILE_NAME and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleIdentityConfig"
    )]
    #[builder(default)]
    pub execution_role_identity_config: Option<String>,
    /// A collection of settings that configure the RStudioServerPro Domain-level app. see r_studio_server_pro_domain_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioServerProDomainSettings"
    )]
    #[builder(default)]
    pub r_studio_server_pro_domain_settings:
        Option<DomainForProviderDomainSettingsRStudioServerProDomainSettings>,
    /// The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
}

/// A collection of settings that configure the domain’s Docker interaction. see docker_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDomainSettingsDockerSettings {
    /// Indicates whether the domain can access Docker. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDockerAccess"
    )]
    #[builder(default)]
    pub enable_docker_access: Option<String>,
    /// The list of Amazon Web Services accounts that are trusted when the domain is created in VPC-only mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcOnlyTrustedAccounts"
    )]
    #[builder(default)]
    pub vpc_only_trusted_accounts: Option<Vec<String>>,
}

/// A collection of settings that configure the RStudioServerPro Domain-level app. see r_studio_server_pro_domain_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDomainSettingsRStudioServerProDomainSettings {
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainForProviderDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec>,
    /// The ARN of the execution role for the RStudioServerPro Domain-level app.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainExecutionRoleArn"
    )]
    #[builder(default)]
    pub domain_execution_role_arn: Option<String>,
    /// A URL pointing to an RStudio Connect server.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioConnectUrl"
    )]
    #[builder(default)]
    pub r_studio_connect_url: Option<String>,
    /// A URL pointing to an RStudio Package Manager server.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioPackageManagerUrl"
    )]
    #[builder(default)]
    pub r_studio_package_manager_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See retention_policy Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderRetentionPolicy {
    /// The retention policy for data stored on an Amazon Elastic File System (EFS) volume. Valid values are Retain or Delete.  Default value is Retain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "homeEfsFileSystem"
    )]
    #[builder(default)]
    pub home_efs_file_system: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderVpcIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderVpcIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderVpcIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainForProviderVpcIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainForProviderVpcIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainForProviderVpcIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainForProviderVpcIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainForProviderVpcIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProvider {
    /// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly. Valid values are PublicInternetOnly and VpcOnly.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appNetworkAccessType"
    )]
    #[builder(default)]
    pub app_network_access_type: Option<String>,
    /// The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Valid values are Service and Customer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appSecurityGroupManagement"
    )]
    #[builder(default)]
    pub app_security_group_management: Option<String>,
    /// The mode of authentication that members use to access the domain. Valid values are IAM and SSO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    #[builder(default)]
    pub auth_mode: Option<String>,
    /// The default space settings. See default_space_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultSpaceSettings"
    )]
    #[builder(default)]
    pub default_space_settings: Option<DomainInitProviderDefaultSpaceSettings>,
    /// The default user settings. See default_user_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUserSettings"
    )]
    #[builder(default)]
    pub default_user_settings: Option<DomainInitProviderDefaultUserSettings>,
    /// The domain name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// The domain settings. See domain_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainSettings"
    )]
    #[builder(default)]
    pub domain_settings: Option<DomainInitProviderDomainSettings>,
    /// The AWS KMS customer managed CMK used to encrypt the EFS volume attached to the domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default)]
    pub kms_key_id_ref: Option<DomainInitProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default)]
    pub kms_key_id_selector: Option<DomainInitProviderKmsKeyIdSelector>,
    /// The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See retention_policy Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPolicy"
    )]
    #[builder(default)]
    pub retention_policy: Option<DomainInitProviderRetentionPolicy>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRefs"
    )]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<DomainInitProviderSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default)]
    pub subnet_id_selector: Option<DomainInitProviderSubnetIdSelector>,
    /// The VPC subnets that Studio uses for communication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// Indicates whether custom tag propagation is supported for the domain. Defaults to DISABLED. Valid values are: ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagPropagation"
    )]
    #[builder(default)]
    pub tag_propagation: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
    /// Reference to a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdRef")]
    #[builder(default)]
    pub vpc_id_ref: Option<DomainInitProviderVpcIdRef>,
    /// Selector for a VPC in ec2 to populate vpcId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcIdSelector"
    )]
    #[builder(default)]
    pub vpc_id_selector: Option<DomainInitProviderVpcIdSelector>,
}

/// The default space settings. See default_space_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettings {
    /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See custom_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFileSystemConfig"
    )]
    #[builder(default)]
    pub custom_file_system_config:
        Option<Vec<DomainInitProviderDefaultSpaceSettingsCustomFileSystemConfig>>,
    /// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPosixUserConfig"
    )]
    #[builder(default)]
    pub custom_posix_user_config:
        Option<DomainInitProviderDefaultSpaceSettingsCustomPosixUserConfig>,
    /// The execution role for the space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRole"
    )]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabAppSettings"
    )]
    #[builder(default)]
    pub jupyter_lab_app_settings:
        Option<DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterServerAppSettings"
    )]
    #[builder(default)]
    pub jupyter_server_app_settings:
        Option<DomainInitProviderDefaultSpaceSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayAppSettings"
    )]
    #[builder(default)]
    pub kernel_gateway_app_settings:
        Option<DomainInitProviderDefaultSpaceSettingsKernelGatewayAppSettings>,
    /// The security groups for the Amazon Virtual Private Cloud that the space uses for communication.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The storage settings for a private space. See space_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceStorageSettings"
    )]
    #[builder(default)]
    pub space_storage_settings: Option<DomainInitProviderDefaultSpaceSettingsSpaceStorageSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsCustomFileSystemConfig {
    /// The default EBS storage settings for a private space. See efs_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsFileSystemConfig"
    )]
    #[builder(default)]
    pub efs_file_system_config:
        Option<DomainInitProviderDefaultSpaceSettingsCustomFileSystemConfigEfsFileSystemConfig>,
}

/// The default EBS storage settings for a private space. See efs_file_system_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsCustomFileSystemConfigEfsFileSystemConfig {
    /// The ID of your Amazon EFS file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemPath"
    )]
    #[builder(default)]
    pub file_system_path: Option<String>,
}

/// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsCustomPosixUserConfig {
    /// The POSIX group ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gid: Option<f64>,
    /// The POSIX user ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<f64>,
}

/// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default)]
    pub app_lifecycle_management:
        Option<DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "builtInLifecycleConfigArn"
    )]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsCodeRepository>>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec>,
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emrSettings"
    )]
    #[builder(default)]
    pub emr_settings:
        Option<DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsEmrSettings>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleManagement"
    )]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterLabAppSettingsEmrSettings {
    /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different AWS account than the SageMaker domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assumableRoleArns"
    )]
    #[builder(default)]
    pub assumable_role_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other AWS services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other AWS services based on the particular workload requirements.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArns"
    )]
    #[builder(default)]
    pub execution_role_arns: Option<Vec<String>>,
}

/// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainInitProviderDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainInitProviderDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The storage settings for a private space. See space_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsSpaceStorageSettings {
    /// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsStorageSettings"
    )]
    #[builder(default)]
    pub default_ebs_storage_settings:
        Option<DomainInitProviderDefaultSpaceSettingsSpaceStorageSettingsDefaultEbsStorageSettings>,
}

/// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultSpaceSettingsSpaceStorageSettingsDefaultEbsStorageSettings {
    /// The default size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub default_ebs_volume_size_in_gb: Option<f64>,
    /// The maximum size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub maximum_ebs_volume_size_in_gb: Option<f64>,
}

/// The default user settings. See default_user_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettings {
    /// Indicates whether auto-mounting of an EFS volume is supported for the user profile. The DefaultAsDomain value is only supported for user profiles. Do not use the DefaultAsDomain value when setting this parameter for a domain. Valid values are: Enabled, Disabled, and DefaultAsDomain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoMountHomeEfs"
    )]
    #[builder(default)]
    pub auto_mount_home_efs: Option<String>,
    /// The Canvas app settings. See canvas_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canvasAppSettings"
    )]
    #[builder(default)]
    pub canvas_app_settings: Option<DomainInitProviderDefaultUserSettingsCanvasAppSettings>,
    /// The Code Editor application settings. See code_editor_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeEditorAppSettings"
    )]
    #[builder(default)]
    pub code_editor_app_settings:
        Option<DomainInitProviderDefaultUserSettingsCodeEditorAppSettings>,
    /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See custom_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFileSystemConfig"
    )]
    #[builder(default)]
    pub custom_file_system_config:
        Option<Vec<DomainInitProviderDefaultUserSettingsCustomFileSystemConfig>>,
    /// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPosixUserConfig"
    )]
    #[builder(default)]
    pub custom_posix_user_config:
        Option<DomainInitProviderDefaultUserSettingsCustomPosixUserConfig>,
    /// The default experience that the user is directed to when accessing the domain. The supported values are: studio::: Indicates that Studio is the default experience. This value can only be passed if StudioWebPortal is set to ENABLED. app:JupyterServer:: Indicates that Studio Classic is the default experience.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultLandingUri"
    )]
    #[builder(default)]
    pub default_landing_uri: Option<String>,
    /// The execution role ARN for the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRole"
    )]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// Reference to a Role in iam to populate executionRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleRef"
    )]
    #[builder(default)]
    pub execution_role_ref: Option<DomainInitProviderDefaultUserSettingsExecutionRoleRef>,
    /// Selector for a Role in iam to populate executionRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleSelector"
    )]
    #[builder(default)]
    pub execution_role_selector: Option<DomainInitProviderDefaultUserSettingsExecutionRoleSelector>,
    /// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabAppSettings"
    )]
    #[builder(default)]
    pub jupyter_lab_app_settings:
        Option<DomainInitProviderDefaultUserSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterServerAppSettings"
    )]
    #[builder(default)]
    pub jupyter_server_app_settings:
        Option<DomainInitProviderDefaultUserSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayAppSettings"
    )]
    #[builder(default)]
    pub kernel_gateway_app_settings:
        Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettings>,
    /// The RSession app settings. See r_session_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rSessionAppSettings"
    )]
    #[builder(default)]
    pub r_session_app_settings: Option<DomainInitProviderDefaultUserSettingsRSessionAppSettings>,
    /// A collection of settings that configure user interaction with the RStudioServerPro app. See r_studio_server_pro_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioServerProAppSettings"
    )]
    #[builder(default)]
    pub r_studio_server_pro_app_settings:
        Option<DomainInitProviderDefaultUserSettingsRStudioServerProAppSettings>,
    /// A list of security group IDs that will be attached to the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The sharing settings. See sharing_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharingSettings"
    )]
    #[builder(default)]
    pub sharing_settings: Option<DomainInitProviderDefaultUserSettingsSharingSettings>,
    /// The storage settings for a private space. See space_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceStorageSettings"
    )]
    #[builder(default)]
    pub space_storage_settings: Option<DomainInitProviderDefaultUserSettingsSpaceStorageSettings>,
    /// Whether the user can access Studio. If this value is set to DISABLED, the user cannot access Studio, even if that is the default experience for the domain. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "studioWebPortal"
    )]
    #[builder(default)]
    pub studio_web_portal: Option<String>,
    /// The Studio Web Portal settings. See studio_web_portal_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "studioWebPortalSettings"
    )]
    #[builder(default)]
    pub studio_web_portal_settings:
        Option<DomainInitProviderDefaultUserSettingsStudioWebPortalSettings>,
    /// The TensorBoard app settings. See tensor_board_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tensorBoardAppSettings"
    )]
    #[builder(default)]
    pub tensor_board_app_settings:
        Option<DomainInitProviderDefaultUserSettingsTensorBoardAppSettings>,
}

/// The Canvas app settings. See canvas_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCanvasAppSettings {
    /// The model deployment settings for the SageMaker Canvas application. See direct_deploy_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directDeploySettings"
    )]
    #[builder(default)]
    pub direct_deploy_settings:
        Option<DomainInitProviderDefaultUserSettingsCanvasAppSettingsDirectDeploySettings>,
    /// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emrServerlessSettings"
    )]
    #[builder(default)]
    pub emr_serverless_settings:
        Option<DomainInitProviderDefaultUserSettingsCanvasAppSettingsEmrServerlessSettings>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "generativeAiSettings"
    )]
    #[builder(default)]
    pub generative_ai_settings:
        Option<DomainInitProviderDefaultUserSettingsCanvasAppSettingsGenerativeAiSettings>,
    /// The settings for connecting to an external data source with OAuth. See identity_provider_oauth_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityProviderOauthSettings"
    )]
    #[builder(default)]
    pub identity_provider_oauth_settings: Option<
        Vec<DomainInitProviderDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettings>,
    >,
    /// The settings for document querying. See kendra_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kendraSettings"
    )]
    #[builder(default)]
    pub kendra_settings:
        Option<DomainInitProviderDefaultUserSettingsCanvasAppSettingsKendraSettings>,
    /// The model registry settings for the SageMaker Canvas application. See model_register_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modelRegisterSettings"
    )]
    #[builder(default)]
    pub model_register_settings:
        Option<DomainInitProviderDefaultUserSettingsCanvasAppSettingsModelRegisterSettings>,
    /// Time series forecast settings for the Canvas app. See time_series_forecasting_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeSeriesForecastingSettings"
    )]
    #[builder(default)]
    pub time_series_forecasting_settings:
        Option<DomainInitProviderDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings>,
    /// The workspace settings for the SageMaker Canvas application. See workspace_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceSettings"
    )]
    #[builder(default)]
    pub workspace_settings:
        Option<DomainInitProviderDefaultUserSettingsCanvasAppSettingsWorkspaceSettings>,
}

/// The model deployment settings for the SageMaker Canvas application. See direct_deploy_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCanvasAppSettingsDirectDeploySettings {
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCanvasAppSettingsEmrServerlessSettings {
    /// The Amazon Resource Name (ARN) of the AWS IAM role that is assumed for running Amazon EMR Serverless jobs in SageMaker Canvas. This role should have the necessary permissions to read and write data attached and a trust relationship with EMR Serverless.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArn"
    )]
    #[builder(default)]
    pub execution_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCanvasAppSettingsGenerativeAiSettings {
    /// The Amazon Resource Name (ARN) assigned by AWS to this Domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "amazonBedrockRoleArn"
    )]
    #[builder(default)]
    pub amazon_bedrock_role_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettings {
    /// The name of the data source that you're connecting to. Canvas currently supports OAuth for Snowflake and Salesforce Data Cloud. Valid values are SalesforceGenie and Snowflake.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceName"
    )]
    #[builder(default)]
    pub data_source_name: Option<String>,
    /// The ARN of an Amazon Web Services Secrets Manager secret that stores the credentials from your identity provider, such as the client ID and secret, authorization URL, and token URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    #[builder(default)]
    pub secret_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for document querying. See kendra_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCanvasAppSettingsKendraSettings {
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The model registry settings for the SageMaker Canvas application. See model_register_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCanvasAppSettingsModelRegisterSettings {
    /// The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "crossAccountModelRegisterRoleArn"
    )]
    #[builder(default)]
    pub cross_account_model_register_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// Time series forecast settings for the Canvas app. See time_series_forecasting_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings {
    /// The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the AmazonSageMakerCanvasForecastAccess policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "amazonForecastRoleArn"
    )]
    #[builder(default)]
    pub amazon_forecast_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The workspace settings for the SageMaker Canvas application. See workspace_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCanvasAppSettingsWorkspaceSettings {
    /// The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ArtifactPath"
    )]
    #[builder(default)]
    pub s3_artifact_path: Option<String>,
    /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KmsKeyId"
    )]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
}

/// The Code Editor application settings. See code_editor_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCodeEditorAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default)]
    pub app_lifecycle_management:
        Option<DomainInitProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "builtInLifecycleConfigArn"
    )]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainInitProviderDefaultUserSettingsCodeEditorAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<DomainInitProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleManagement"
    )]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCodeEditorAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCustomFileSystemConfig {
    /// The default EBS storage settings for a private space. See efs_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsFileSystemConfig"
    )]
    #[builder(default)]
    pub efs_file_system_config:
        Option<DomainInitProviderDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfig>,
}

/// The default EBS storage settings for a private space. See efs_file_system_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfig {
    /// The ID of your Amazon EFS file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemPath"
    )]
    #[builder(default)]
    pub file_system_path: Option<String>,
}

/// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsCustomPosixUserConfig {
    /// The POSIX group ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gid: Option<f64>,
    /// The POSIX user ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<f64>,
}

/// Reference to a Role in iam to populate executionRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsExecutionRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderDefaultUserSettingsExecutionRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsExecutionRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderDefaultUserSettingsExecutionRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderDefaultUserSettingsExecutionRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsExecutionRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsExecutionRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsExecutionRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderDefaultUserSettingsExecutionRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsExecutionRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution:
        Option<DomainInitProviderDefaultUserSettingsExecutionRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderDefaultUserSettingsExecutionRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsExecutionRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsExecutionRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterLabAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default)]
    pub app_lifecycle_management:
        Option<DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "builtInLifecycleConfigArn"
    )]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsCodeRepository>>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpec>,
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emrSettings"
    )]
    #[builder(default)]
    pub emr_settings: Option<DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsEmrSettings>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleManagement"
    )]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterLabAppSettingsEmrSettings {
    /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different AWS account than the SageMaker domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assumableRoleArns"
    )]
    #[builder(default)]
    pub assumable_role_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other AWS services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other AWS services based on the particular workload requirements.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArns"
    )]
    #[builder(default)]
    pub execution_role_arns: Option<Vec<String>>,
}

/// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainInitProviderDefaultUserSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigName")]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// Reference to a AppImageConfig in sagemaker to populate appImageConfigName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigNameRef")]
    #[builder(default)]
    pub app_image_config_name_ref: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRef>,
    /// Selector for a AppImageConfig in sagemaker to populate appImageConfigName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appImageConfigNameSelector")]
    #[builder(default)]
    pub app_image_config_name_selector: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelector>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// Reference to a ImageVersion in sagemaker to populate imageName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageNameRef")]
    #[builder(default)]
    pub image_name_ref: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRef>,
    /// Selector for a ImageVersion in sagemaker to populate imageName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageNameSelector")]
    #[builder(default)]
    pub image_name_selector: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelector>,
    /// The version number of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageVersionNumber")]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// Reference to a AppImageConfig in sagemaker to populate appImageConfigName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a AppImageConfig in sagemaker to populate appImageConfigName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageAppImageConfigNameSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a ImageVersion in sagemaker to populate imageName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<
        DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a ImageVersion in sagemaker to populate imageName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImageImageNameSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The RSession app settings. See r_session_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsRSessionAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainInitProviderDefaultUserSettingsRSessionAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsRSessionAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// A collection of settings that configure user interaction with the RStudioServerPro app. See r_studio_server_pro_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsRStudioServerProAppSettings {
    /// Indicates whether the current user has access to the RStudioServerPro app. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessStatus"
    )]
    #[builder(default)]
    pub access_status: Option<String>,
    /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to R_STUDIO_USER. The R_STUDIO_ADMIN value allows the user access to the RStudio Administrative Dashboard. Valid values are R_STUDIO_USER and R_STUDIO_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroup")]
    #[builder(default)]
    pub user_group: Option<String>,
}

/// The sharing settings. See sharing_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsSharingSettings {
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled. Valid values are Allowed and Disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notebookOutputOption"
    )]
    #[builder(default)]
    pub notebook_output_option: Option<String>,
    /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KmsKeyId"
    )]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
    /// When notebook_output_option is Allowed, the Amazon S3 bucket used to save the notebook cell output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3OutputPath"
    )]
    #[builder(default)]
    pub s3_output_path: Option<String>,
}

/// The storage settings for a private space. See space_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsSpaceStorageSettings {
    /// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsStorageSettings"
    )]
    #[builder(default)]
    pub default_ebs_storage_settings:
        Option<DomainInitProviderDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings>,
}

/// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings {
    /// The default size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub default_ebs_volume_size_in_gb: Option<f64>,
    /// The maximum size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub maximum_ebs_volume_size_in_gb: Option<f64>,
}

/// The Studio Web Portal settings. See studio_web_portal_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsStudioWebPortalSettings {
    /// The Applications supported in Studio that are hidden from the Studio left navigation pane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenAppTypes"
    )]
    #[builder(default)]
    pub hidden_app_types: Option<Vec<String>>,
    /// The instance types you are hiding from the Studio user interface.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenInstanceTypes"
    )]
    #[builder(default)]
    pub hidden_instance_types: Option<Vec<String>>,
    /// The machine learning tools that are hidden from the Studio left navigation pane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenMlTools"
    )]
    #[builder(default)]
    pub hidden_ml_tools: Option<Vec<String>>,
}

/// The TensorBoard app settings. See tensor_board_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsTensorBoardAppSettings {
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The domain settings. See domain_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDomainSettings {
    /// A collection of settings that configure the domain’s Docker interaction. see docker_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerSettings"
    )]
    #[builder(default)]
    pub docker_settings: Option<DomainInitProviderDomainSettingsDockerSettings>,
    /// The configuration for attaching a SageMaker user profile name to the execution role as a sts:SourceIdentity key AWS Docs. Valid values are USER_PROFILE_NAME and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleIdentityConfig"
    )]
    #[builder(default)]
    pub execution_role_identity_config: Option<String>,
    /// A collection of settings that configure the RStudioServerPro Domain-level app. see r_studio_server_pro_domain_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioServerProDomainSettings"
    )]
    #[builder(default)]
    pub r_studio_server_pro_domain_settings:
        Option<DomainInitProviderDomainSettingsRStudioServerProDomainSettings>,
    /// The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
}

/// A collection of settings that configure the domain’s Docker interaction. see docker_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDomainSettingsDockerSettings {
    /// Indicates whether the domain can access Docker. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDockerAccess"
    )]
    #[builder(default)]
    pub enable_docker_access: Option<String>,
    /// The list of Amazon Web Services accounts that are trusted when the domain is created in VPC-only mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcOnlyTrustedAccounts"
    )]
    #[builder(default)]
    pub vpc_only_trusted_accounts: Option<Vec<String>>,
}

/// A collection of settings that configure the RStudioServerPro Domain-level app. see r_studio_server_pro_domain_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDomainSettingsRStudioServerProDomainSettings {
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainInitProviderDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec>,
    /// The ARN of the execution role for the RStudioServerPro Domain-level app.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainExecutionRoleArn"
    )]
    #[builder(default)]
    pub domain_execution_role_arn: Option<String>,
    /// A URL pointing to an RStudio Connect server.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioConnectUrl"
    )]
    #[builder(default)]
    pub r_studio_connect_url: Option<String>,
    /// A URL pointing to an RStudio Package Manager server.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioPackageManagerUrl"
    )]
    #[builder(default)]
    pub r_studio_package_manager_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See retention_policy Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderRetentionPolicy {
    /// The retention policy for data stored on an Amazon Elastic File System (EFS) volume. Valid values are Retain or Delete.  Default value is Retain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "homeEfsFileSystem"
    )]
    #[builder(default)]
    pub home_efs_file_system: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderVpcIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderVpcIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderVpcIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainInitProviderVpcIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainInitProviderVpcIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainInitProviderVpcIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainInitProviderVpcIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainInitProviderVpcIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<DomainPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<DomainPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DomainPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DomainPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DomainPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DomainStatus defines the observed state of Domain.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<DomainStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProvider {
    /// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly. Valid values are PublicInternetOnly and VpcOnly.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appNetworkAccessType"
    )]
    #[builder(default)]
    pub app_network_access_type: Option<String>,
    /// The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Valid values are Service and Customer.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appSecurityGroupManagement"
    )]
    #[builder(default)]
    pub app_security_group_management: Option<String>,
    /// The Amazon Resource Name (ARN) assigned by AWS to this Domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// The mode of authentication that members use to access the domain. Valid values are IAM and SSO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    #[builder(default)]
    pub auth_mode: Option<String>,
    /// The default space settings. See default_space_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultSpaceSettings"
    )]
    #[builder(default)]
    pub default_space_settings: Option<DomainStatusAtProviderDefaultSpaceSettings>,
    /// The default user settings. See default_user_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultUserSettings"
    )]
    #[builder(default)]
    pub default_user_settings: Option<DomainStatusAtProviderDefaultUserSettings>,
    /// The domain name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainName"
    )]
    #[builder(default)]
    pub domain_name: Option<String>,
    /// The domain settings. See domain_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainSettings"
    )]
    #[builder(default)]
    pub domain_settings: Option<DomainStatusAtProviderDomainSettings>,
    /// The ID of the Amazon Elastic File System (EFS) managed by this Domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "homeEfsFileSystemId"
    )]
    #[builder(default)]
    pub home_efs_file_system_id: Option<String>,
    /// The ID of the Domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// The AWS KMS customer managed CMK used to encrypt the EFS volume attached to the domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default)]
    pub kms_key_id: Option<String>,
    /// The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See retention_policy Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPolicy"
    )]
    #[builder(default)]
    pub retention_policy: Option<DomainStatusAtProviderRetentionPolicy>,
    /// The ID of the security group that authorizes traffic between the RSessionGateway apps and the RStudioServerPro app.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdForDomainBoundary"
    )]
    #[builder(default)]
    pub security_group_id_for_domain_boundary: Option<String>,
    /// The ARN of the application managed by SageMaker in IAM Identity Center. This value is only returned for domains created after September 19, 2023.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "singleSignOnApplicationArn"
    )]
    #[builder(default)]
    pub single_sign_on_application_arn: Option<String>,
    /// The SSO managed application instance ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "singleSignOnManagedApplicationInstanceId"
    )]
    #[builder(default)]
    pub single_sign_on_managed_application_instance_id: Option<String>,
    /// The VPC subnets that Studio uses for communication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
    /// Indicates whether custom tag propagation is supported for the domain. Defaults to DISABLED. Valid values are: ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tagPropagation"
    )]
    #[builder(default)]
    pub tag_propagation: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// The domain's URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub url: Option<String>,
    /// The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default)]
    pub vpc_id: Option<String>,
}

/// The default space settings. See default_space_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettings {
    /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See custom_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFileSystemConfig"
    )]
    #[builder(default)]
    pub custom_file_system_config:
        Option<Vec<DomainStatusAtProviderDefaultSpaceSettingsCustomFileSystemConfig>>,
    /// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPosixUserConfig"
    )]
    #[builder(default)]
    pub custom_posix_user_config:
        Option<DomainStatusAtProviderDefaultSpaceSettingsCustomPosixUserConfig>,
    /// The execution role for the space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRole"
    )]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabAppSettings"
    )]
    #[builder(default)]
    pub jupyter_lab_app_settings:
        Option<DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterServerAppSettings"
    )]
    #[builder(default)]
    pub jupyter_server_app_settings:
        Option<DomainStatusAtProviderDefaultSpaceSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayAppSettings"
    )]
    #[builder(default)]
    pub kernel_gateway_app_settings:
        Option<DomainStatusAtProviderDefaultSpaceSettingsKernelGatewayAppSettings>,
    /// The security groups for the Amazon Virtual Private Cloud that the space uses for communication.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The storage settings for a private space. See space_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceStorageSettings"
    )]
    #[builder(default)]
    pub space_storage_settings:
        Option<DomainStatusAtProviderDefaultSpaceSettingsSpaceStorageSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsCustomFileSystemConfig {
    /// The default EBS storage settings for a private space. See efs_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsFileSystemConfig"
    )]
    #[builder(default)]
    pub efs_file_system_config:
        Option<DomainStatusAtProviderDefaultSpaceSettingsCustomFileSystemConfigEfsFileSystemConfig>,
}

/// The default EBS storage settings for a private space. See efs_file_system_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsCustomFileSystemConfigEfsFileSystemConfig {
    /// The ID of your Amazon EFS file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemPath"
    )]
    #[builder(default)]
    pub file_system_path: Option<String>,
}

/// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsCustomPosixUserConfig {
    /// The POSIX group ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gid: Option<f64>,
    /// The POSIX user ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<f64>,
}

/// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default)]
    pub app_lifecycle_management: Option<
        DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement,
    >,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "builtInLifecycleConfigArn"
    )]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsCodeRepository>>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec>,
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emrSettings"
    )]
    #[builder(default)]
    pub emr_settings:
        Option<DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsEmrSettings>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleManagement"
    )]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterLabAppSettingsEmrSettings {
    /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different AWS account than the SageMaker domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assumableRoleArns"
    )]
    #[builder(default)]
    pub assumable_role_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other AWS services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other AWS services based on the particular workload requirements.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArns"
    )]
    #[builder(default)]
    pub execution_role_arns: Option<Vec<String>>,
}

/// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository: Option<
        Vec<DomainStatusAtProviderDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository>,
    >,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec: Option<
        DomainStatusAtProviderDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec,
    >,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainStatusAtProviderDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec: Option<
        DomainStatusAtProviderDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec,
    >,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The storage settings for a private space. See space_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsSpaceStorageSettings {
    /// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsStorageSettings"
    )]
    #[builder(default)]
    pub default_ebs_storage_settings: Option<
        DomainStatusAtProviderDefaultSpaceSettingsSpaceStorageSettingsDefaultEbsStorageSettings,
    >,
}

/// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultSpaceSettingsSpaceStorageSettingsDefaultEbsStorageSettings {
    /// The default size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub default_ebs_volume_size_in_gb: Option<f64>,
    /// The maximum size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub maximum_ebs_volume_size_in_gb: Option<f64>,
}

/// The default user settings. See default_user_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettings {
    /// Indicates whether auto-mounting of an EFS volume is supported for the user profile. The DefaultAsDomain value is only supported for user profiles. Do not use the DefaultAsDomain value when setting this parameter for a domain. Valid values are: Enabled, Disabled, and DefaultAsDomain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoMountHomeEfs"
    )]
    #[builder(default)]
    pub auto_mount_home_efs: Option<String>,
    /// The Canvas app settings. See canvas_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canvasAppSettings"
    )]
    #[builder(default)]
    pub canvas_app_settings: Option<DomainStatusAtProviderDefaultUserSettingsCanvasAppSettings>,
    /// The Code Editor application settings. See code_editor_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeEditorAppSettings"
    )]
    #[builder(default)]
    pub code_editor_app_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettings>,
    /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See custom_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFileSystemConfig"
    )]
    #[builder(default)]
    pub custom_file_system_config:
        Option<Vec<DomainStatusAtProviderDefaultUserSettingsCustomFileSystemConfig>>,
    /// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customPosixUserConfig"
    )]
    #[builder(default)]
    pub custom_posix_user_config:
        Option<DomainStatusAtProviderDefaultUserSettingsCustomPosixUserConfig>,
    /// The default experience that the user is directed to when accessing the domain. The supported values are: studio::: Indicates that Studio is the default experience. This value can only be passed if StudioWebPortal is set to ENABLED. app:JupyterServer:: Indicates that Studio Classic is the default experience.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultLandingUri"
    )]
    #[builder(default)]
    pub default_landing_uri: Option<String>,
    /// The execution role ARN for the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRole"
    )]
    #[builder(default)]
    pub execution_role: Option<String>,
    /// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabAppSettings"
    )]
    #[builder(default)]
    pub jupyter_lab_app_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterServerAppSettings"
    )]
    #[builder(default)]
    pub jupyter_server_app_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayAppSettings"
    )]
    #[builder(default)]
    pub kernel_gateway_app_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsKernelGatewayAppSettings>,
    /// The RSession app settings. See r_session_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rSessionAppSettings"
    )]
    #[builder(default)]
    pub r_session_app_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsRSessionAppSettings>,
    /// A collection of settings that configure user interaction with the RStudioServerPro app. See r_studio_server_pro_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioServerProAppSettings"
    )]
    #[builder(default)]
    pub r_studio_server_pro_app_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsRStudioServerProAppSettings>,
    /// A list of security group IDs that will be attached to the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default)]
    pub security_groups: Option<Vec<String>>,
    /// The sharing settings. See sharing_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharingSettings"
    )]
    #[builder(default)]
    pub sharing_settings: Option<DomainStatusAtProviderDefaultUserSettingsSharingSettings>,
    /// The storage settings for a private space. See space_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceStorageSettings"
    )]
    #[builder(default)]
    pub space_storage_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsSpaceStorageSettings>,
    /// Whether the user can access Studio. If this value is set to DISABLED, the user cannot access Studio, even if that is the default experience for the domain. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "studioWebPortal"
    )]
    #[builder(default)]
    pub studio_web_portal: Option<String>,
    /// The Studio Web Portal settings. See studio_web_portal_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "studioWebPortalSettings"
    )]
    #[builder(default)]
    pub studio_web_portal_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsStudioWebPortalSettings>,
    /// The TensorBoard app settings. See tensor_board_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tensorBoardAppSettings"
    )]
    #[builder(default)]
    pub tensor_board_app_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsTensorBoardAppSettings>,
}

/// The Canvas app settings. See canvas_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCanvasAppSettings {
    /// The model deployment settings for the SageMaker Canvas application. See direct_deploy_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directDeploySettings"
    )]
    #[builder(default)]
    pub direct_deploy_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsDirectDeploySettings>,
    /// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emrServerlessSettings"
    )]
    #[builder(default)]
    pub emr_serverless_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsEmrServerlessSettings>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "generativeAiSettings"
    )]
    #[builder(default)]
    pub generative_ai_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsGenerativeAiSettings>,
    /// The settings for connecting to an external data source with OAuth. See identity_provider_oauth_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityProviderOauthSettings"
    )]
    #[builder(default)]
    pub identity_provider_oauth_settings: Option<
        Vec<
            DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettings,
        >,
    >,
    /// The settings for document querying. See kendra_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kendraSettings"
    )]
    #[builder(default)]
    pub kendra_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsKendraSettings>,
    /// The model registry settings for the SageMaker Canvas application. See model_register_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modelRegisterSettings"
    )]
    #[builder(default)]
    pub model_register_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsModelRegisterSettings>,
    /// Time series forecast settings for the Canvas app. See time_series_forecasting_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeSeriesForecastingSettings"
    )]
    #[builder(default)]
    pub time_series_forecasting_settings: Option<
        DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings,
    >,
    /// The workspace settings for the SageMaker Canvas application. See workspace_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceSettings"
    )]
    #[builder(default)]
    pub workspace_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsWorkspaceSettings>,
}

/// The model deployment settings for the SageMaker Canvas application. See direct_deploy_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsDirectDeploySettings {
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas. See emr_serverless_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsEmrServerlessSettings {
    /// The Amazon Resource Name (ARN) of the AWS IAM role that is assumed for running Amazon EMR Serverless jobs in SageMaker Canvas. This role should have the necessary permissions to read and write data attached and a trust relationship with EMR Serverless.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArn"
    )]
    #[builder(default)]
    pub execution_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsGenerativeAiSettings {
    /// The Amazon Resource Name (ARN) assigned by AWS to this Domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "amazonBedrockRoleArn"
    )]
    #[builder(default)]
    pub amazon_bedrock_role_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettings {
    /// The name of the data source that you're connecting to. Canvas currently supports OAuth for Snowflake and Salesforce Data Cloud. Valid values are SalesforceGenie and Snowflake.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceName"
    )]
    #[builder(default)]
    pub data_source_name: Option<String>,
    /// The ARN of an Amazon Web Services Secrets Manager secret that stores the credentials from your identity provider, such as the client ID and secret, authorization URL, and token URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    #[builder(default)]
    pub secret_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The settings for document querying. See kendra_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsKendraSettings {
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The model registry settings for the SageMaker Canvas application. See model_register_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsModelRegisterSettings {
    /// The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "crossAccountModelRegisterRoleArn"
    )]
    #[builder(default)]
    pub cross_account_model_register_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// Time series forecast settings for the Canvas app. See time_series_forecasting_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings {
    /// The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the AmazonSageMakerCanvasForecastAccess policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "amazonForecastRoleArn"
    )]
    #[builder(default)]
    pub amazon_forecast_role_arn: Option<String>,
    /// Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub status: Option<String>,
}

/// The workspace settings for the SageMaker Canvas application. See workspace_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCanvasAppSettingsWorkspaceSettings {
    /// The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ArtifactPath"
    )]
    #[builder(default)]
    pub s3_artifact_path: Option<String>,
    /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KmsKeyId"
    )]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
}

/// The Code Editor application settings. See code_editor_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default)]
    pub app_lifecycle_management: Option<
        DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagement,
    >,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "builtInLifecycleConfigArn"
    )]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleManagement"
    )]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCustomFileSystemConfig {
    /// The default EBS storage settings for a private space. See efs_file_system_config Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsFileSystemConfig"
    )]
    #[builder(default)]
    pub efs_file_system_config:
        Option<DomainStatusAtProviderDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfig>,
}

/// The default EBS storage settings for a private space. See efs_file_system_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfig {
    /// The ID of your Amazon EFS file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default)]
    pub file_system_id: Option<String>,
    /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemPath"
    )]
    #[builder(default)]
    pub file_system_path: Option<String>,
}

/// Details about the POSIX identity that is used for file system operations. See custom_posix_user_config Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsCustomPosixUserConfig {
    /// The POSIX group ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub gid: Option<f64>,
    /// The POSIX user ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub uid: Option<f64>,
}

/// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettings {
    /// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default)]
    pub app_lifecycle_management: Option<
        DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagement,
    >,
    /// The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "builtInLifecycleConfigArn"
    )]
    #[builder(default)]
    pub built_in_lifecycle_config_arn: Option<String>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository:
        Option<Vec<DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsCodeRepository>>,
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpec>,
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emrSettings"
    )]
    #[builder(default)]
    pub emr_settings:
        Option<DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsEmrSettings>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

/// Indicates whether idle shutdown is activated for JupyterLab applications. see app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleSettings")]
    #[builder(default)]
    pub idle_settings: Option<DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings>,
}

/// Settings related to idle shutdown of Studio applications. see idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub idle_timeout_in_minutes: Option<f64>,
    /// Indicates whether idle shutdown is activated for the application type. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleManagement"
    )]
    #[builder(default)]
    pub lifecycle_management: Option<String>,
    /// The maximum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub max_idle_timeout_in_minutes: Option<f64>,
    /// The minimum value in minutes that custom idle shutdown can be set to by the user. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minIdleTimeoutInMinutes"
    )]
    #[builder(default)]
    pub min_idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications. see emr_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterLabAppSettingsEmrSettings {
    /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different AWS account than the SageMaker domain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assumableRoleArns"
    )]
    #[builder(default)]
    pub assumable_role_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other AWS services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other AWS services based on the particular workload requirements.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArns"
    )]
    #[builder(default)]
    pub execution_role_arns: Option<Vec<String>>,
}

/// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default)]
    pub code_repository: Option<
        Vec<DomainStatusAtProviderDefaultUserSettingsJupyterServerAppSettingsCodeRepository>,
    >,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec: Option<
        DomainStatusAtProviderDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec,
    >,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default)]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainStatusAtProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec: Option<
        DomainStatusAtProviderDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec,
    >,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default)]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The RSession app settings. See r_session_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsRSessionAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. see custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default)]
    pub custom_image:
        Option<Vec<DomainStatusAtProviderDefaultUserSettingsRSessionAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainStatusAtProviderDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsRSessionAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default)]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default)]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// A collection of settings that configure user interaction with the RStudioServerPro app. See r_studio_server_pro_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsRStudioServerProAppSettings {
    /// Indicates whether the current user has access to the RStudioServerPro app. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessStatus"
    )]
    #[builder(default)]
    pub access_status: Option<String>,
    /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to R_STUDIO_USER. The R_STUDIO_ADMIN value allows the user access to the RStudio Administrative Dashboard. Valid values are R_STUDIO_USER and R_STUDIO_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroup")]
    #[builder(default)]
    pub user_group: Option<String>,
}

/// The sharing settings. See sharing_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsSharingSettings {
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled. Valid values are Allowed and Disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notebookOutputOption"
    )]
    #[builder(default)]
    pub notebook_output_option: Option<String>,
    /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KmsKeyId"
    )]
    #[builder(default)]
    pub s3_kms_key_id: Option<String>,
    /// When notebook_output_option is Allowed, the Amazon S3 bucket used to save the notebook cell output.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3OutputPath"
    )]
    #[builder(default)]
    pub s3_output_path: Option<String>,
}

/// The storage settings for a private space. See space_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsSpaceStorageSettings {
    /// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsStorageSettings"
    )]
    #[builder(default)]
    pub default_ebs_storage_settings: Option<
        DomainStatusAtProviderDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings,
    >,
}

/// The default EBS storage settings for a private space. See default_ebs_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettings {
    /// The default size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub default_ebs_volume_size_in_gb: Option<f64>,
    /// The maximum size of the EBS storage volume for a private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumEbsVolumeSizeInGb"
    )]
    #[builder(default)]
    pub maximum_ebs_volume_size_in_gb: Option<f64>,
}

/// The Studio Web Portal settings. See studio_web_portal_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsStudioWebPortalSettings {
    /// The Applications supported in Studio that are hidden from the Studio left navigation pane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenAppTypes"
    )]
    #[builder(default)]
    pub hidden_app_types: Option<Vec<String>>,
    /// The instance types you are hiding from the Studio user interface.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenInstanceTypes"
    )]
    #[builder(default)]
    pub hidden_instance_types: Option<Vec<String>>,
    /// The machine learning tools that are hidden from the Studio left navigation pane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenMlTools"
    )]
    #[builder(default)]
    pub hidden_ml_tools: Option<Vec<String>>,
}

/// The TensorBoard app settings. See tensor_board_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsTensorBoardAppSettings {
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec:
        Option<DomainStatusAtProviderDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The domain settings. See domain_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDomainSettings {
    /// A collection of settings that configure the domain’s Docker interaction. see docker_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerSettings"
    )]
    #[builder(default)]
    pub docker_settings: Option<DomainStatusAtProviderDomainSettingsDockerSettings>,
    /// The configuration for attaching a SageMaker user profile name to the execution role as a sts:SourceIdentity key AWS Docs. Valid values are USER_PROFILE_NAME and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleIdentityConfig"
    )]
    #[builder(default)]
    pub execution_role_identity_config: Option<String>,
    /// A collection of settings that configure the RStudioServerPro Domain-level app. see r_studio_server_pro_domain_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioServerProDomainSettings"
    )]
    #[builder(default)]
    pub r_studio_server_pro_domain_settings:
        Option<DomainStatusAtProviderDomainSettingsRStudioServerProDomainSettings>,
    /// The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
}

/// A collection of settings that configure the domain’s Docker interaction. see docker_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDomainSettingsDockerSettings {
    /// Indicates whether the domain can access Docker. Valid values are ENABLED and DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDockerAccess"
    )]
    #[builder(default)]
    pub enable_docker_access: Option<String>,
    /// The list of Amazon Web Services accounts that are trusted when the domain is created in VPC-only mode.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcOnlyTrustedAccounts"
    )]
    #[builder(default)]
    pub vpc_only_trusted_accounts: Option<Vec<String>>,
}

/// A collection of settings that configure the RStudioServerPro Domain-level app. see r_studio_server_pro_domain_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDomainSettingsRStudioServerProDomainSettings {
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default)]
    pub default_resource_spec: Option<
        DomainStatusAtProviderDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec,
    >,
    /// The ARN of the execution role for the RStudioServerPro Domain-level app.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainExecutionRoleArn"
    )]
    #[builder(default)]
    pub domain_execution_role_arn: Option<String>,
    /// A URL pointing to an RStudio Connect server.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioConnectUrl"
    )]
    #[builder(default)]
    pub r_studio_connect_url: Option<String>,
    /// A URL pointing to an RStudio Package Manager server.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rStudioPackageManagerUrl"
    )]
    #[builder(default)]
    pub r_studio_package_manager_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec {
    /// The instance type that the image version runs on.. For valid values see SageMaker Instance Types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default)]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default)]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default)]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default)]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See retention_policy Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DomainStatusAtProviderRetentionPolicy {
    /// The retention policy for data stored on an Amazon Elastic File System (EFS) volume. Valid values are Retain or Delete.  Default value is Retain.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "homeEfsFileSystem"
    )]
    #[builder(default)]
    pub home_efs_file_system: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ImageBuilderSpec defines the desired state of ImageBuilder
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "appstream.aws.upbound.io", version = "v1beta2", kind = "ImageBuilder", plural = "imagebuilders")]
#[kube(status = "ImageBuilderStatus")]
pub struct ImageBuilderSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<ImageBuilderDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ImageBuilderForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<ImageBuilderInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<ImageBuilderProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<ImageBuilderPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<ImageBuilderWriteConnectionSecretToRef>,
}

/// ImageBuilderSpec defines the desired state of ImageBuilder
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProvider {
    /// Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessEndpoint")]
    #[builder(default)]
    pub access_endpoint: Option<Vec<ImageBuilderForProviderAccessEndpoint>>,
    /// Version of the AppStream 2.0 agent to use for this image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appstreamAgentVersion")]
    #[builder(default)]
    pub appstream_agent_version: Option<String>,
    /// Description to display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Human-readable friendly name for the AppStream image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainJoinInfo")]
    #[builder(default)]
    pub domain_join_info: Option<ImageBuilderForProviderDomainJoinInfo>,
    /// Enables or disables default internet access for the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDefaultInternetAccess")]
    #[builder(default)]
    pub enable_default_internet_access: Option<bool>,
    /// ARN of the IAM role to apply to the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArn")]
    #[builder(default)]
    pub iam_role_arn: Option<String>,
    /// Reference to a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnRef")]
    #[builder(default)]
    pub iam_role_arn_ref: Option<ImageBuilderForProviderIamRoleArnRef>,
    /// Selector for a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnSelector")]
    #[builder(default)]
    pub iam_role_arn_selector: Option<ImageBuilderForProviderIamRoleArnSelector>,
    /// ARN of the public, private, or shared image to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageArn")]
    #[builder(default)]
    pub image_arn: Option<String>,
    /// Instance type to use when launching the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block for the VPC configuration for the image builder. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    #[builder(default)]
    pub vpc_config: Option<ImageBuilderForProviderVpcConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderAccessEndpoint {
    /// Type of interface endpoint. For valid values, refer to the AWS documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointType")]
    #[builder(default)]
    pub endpoint_type: Option<String>,
    /// Identifier (ID) of the interface VPC endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpceId")]
    #[builder(default)]
    pub vpce_id: Option<String>,
}

/// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderDomainJoinInfo {
    /// Fully qualified name of the directory (for example, corp.example.com).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryName")]
    #[builder(default)]
    pub directory_name: Option<String>,
    /// Distinguished name of the organizational unit for computer accounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitDistinguishedName")]
    #[builder(default)]
    pub organizational_unit_distinguished_name: Option<String>,
}

/// Reference to a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderIamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderForProviderIamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderIamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderForProviderIamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderForProviderIamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderForProviderIamRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderForProviderIamRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderIamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderForProviderIamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderIamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderForProviderIamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderForProviderIamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderForProviderIamRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderForProviderIamRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for the VPC configuration for the image builder. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderVpcConfig {
    /// Identifiers of the security groups for the image builder or image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRefs")]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<ImageBuilderForProviderVpcConfigSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    #[builder(default)]
    pub subnet_id_selector: Option<ImageBuilderForProviderVpcConfigSubnetIdSelector>,
    /// Identifier of the subnet to which a network interface is attached from the image builder instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderVpcConfigSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderForProviderVpcConfigSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderVpcConfigSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderForProviderVpcConfigSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderForProviderVpcConfigSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderForProviderVpcConfigSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderForProviderVpcConfigSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderVpcConfigSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderForProviderVpcConfigSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderForProviderVpcConfigSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderForProviderVpcConfigSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderForProviderVpcConfigSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderForProviderVpcConfigSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderForProviderVpcConfigSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProvider {
    /// Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessEndpoint")]
    #[builder(default)]
    pub access_endpoint: Option<Vec<ImageBuilderInitProviderAccessEndpoint>>,
    /// Version of the AppStream 2.0 agent to use for this image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appstreamAgentVersion")]
    #[builder(default)]
    pub appstream_agent_version: Option<String>,
    /// Description to display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Human-readable friendly name for the AppStream image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainJoinInfo")]
    #[builder(default)]
    pub domain_join_info: Option<ImageBuilderInitProviderDomainJoinInfo>,
    /// Enables or disables default internet access for the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDefaultInternetAccess")]
    #[builder(default)]
    pub enable_default_internet_access: Option<bool>,
    /// ARN of the IAM role to apply to the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArn")]
    #[builder(default)]
    pub iam_role_arn: Option<String>,
    /// Reference to a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnRef")]
    #[builder(default)]
    pub iam_role_arn_ref: Option<ImageBuilderInitProviderIamRoleArnRef>,
    /// Selector for a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnSelector")]
    #[builder(default)]
    pub iam_role_arn_selector: Option<ImageBuilderInitProviderIamRoleArnSelector>,
    /// ARN of the public, private, or shared image to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageArn")]
    #[builder(default)]
    pub image_arn: Option<String>,
    /// Instance type to use when launching the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block for the VPC configuration for the image builder. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    #[builder(default)]
    pub vpc_config: Option<ImageBuilderInitProviderVpcConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderAccessEndpoint {
    /// Type of interface endpoint. For valid values, refer to the AWS documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointType")]
    #[builder(default)]
    pub endpoint_type: Option<String>,
    /// Identifier (ID) of the interface VPC endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpceId")]
    #[builder(default)]
    pub vpce_id: Option<String>,
}

/// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderDomainJoinInfo {
    /// Fully qualified name of the directory (for example, corp.example.com).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryName")]
    #[builder(default)]
    pub directory_name: Option<String>,
    /// Distinguished name of the organizational unit for computer accounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitDistinguishedName")]
    #[builder(default)]
    pub organizational_unit_distinguished_name: Option<String>,
}

/// Reference to a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderIamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderInitProviderIamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderIamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderInitProviderIamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderInitProviderIamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderInitProviderIamRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderInitProviderIamRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderIamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderInitProviderIamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderIamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderInitProviderIamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderInitProviderIamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderInitProviderIamRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderInitProviderIamRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for the VPC configuration for the image builder. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderVpcConfig {
    /// Identifiers of the security groups for the image builder or image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRefs")]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<ImageBuilderInitProviderVpcConfigSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    #[builder(default)]
    pub subnet_id_selector: Option<ImageBuilderInitProviderVpcConfigSubnetIdSelector>,
    /// Identifier of the subnet to which a network interface is attached from the image builder instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderVpcConfigSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderInitProviderVpcConfigSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderVpcConfigSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderInitProviderVpcConfigSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderInitProviderVpcConfigSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderInitProviderVpcConfigSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderInitProviderVpcConfigSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderVpcConfigSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderInitProviderVpcConfigSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderInitProviderVpcConfigSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderInitProviderVpcConfigSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderInitProviderVpcConfigSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderInitProviderVpcConfigSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderInitProviderVpcConfigSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<ImageBuilderPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<ImageBuilderPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<ImageBuilderPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<ImageBuilderPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<ImageBuilderPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageBuilderPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ImageBuilderStatus defines the observed state of ImageBuilder.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<ImageBuilderStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderStatusAtProvider {
    /// Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessEndpoint")]
    #[builder(default)]
    pub access_endpoint: Option<Vec<ImageBuilderStatusAtProviderAccessEndpoint>>,
    /// Version of the AppStream 2.0 agent to use for this image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appstreamAgentVersion")]
    #[builder(default)]
    pub appstream_agent_version: Option<String>,
    /// ARN of the appstream image builder.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Date and time, in UTC and extended RFC 3339 format, when the image builder was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdTime")]
    #[builder(default)]
    pub created_time: Option<String>,
    /// Description to display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Human-readable friendly name for the AppStream image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainJoinInfo")]
    #[builder(default)]
    pub domain_join_info: Option<ImageBuilderStatusAtProviderDomainJoinInfo>,
    /// Enables or disables default internet access for the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDefaultInternetAccess")]
    #[builder(default)]
    pub enable_default_internet_access: Option<bool>,
    /// ARN of the IAM role to apply to the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArn")]
    #[builder(default)]
    pub iam_role_arn: Option<String>,
    /// Name of the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// ARN of the public, private, or shared image to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageArn")]
    #[builder(default)]
    pub image_arn: Option<String>,
    /// Name of the image used to create the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// Instance type to use when launching the image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// State of the image builder. For valid values, refer to the AWS documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Configuration block for the VPC configuration for the image builder. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    #[builder(default)]
    pub vpc_config: Option<ImageBuilderStatusAtProviderVpcConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderStatusAtProviderAccessEndpoint {
    /// Type of interface endpoint. For valid values, refer to the AWS documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointType")]
    #[builder(default)]
    pub endpoint_type: Option<String>,
    /// Identifier (ID) of the interface VPC endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpceId")]
    #[builder(default)]
    pub vpce_id: Option<String>,
}

/// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderStatusAtProviderDomainJoinInfo {
    /// Fully qualified name of the directory (for example, corp.example.com).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryName")]
    #[builder(default)]
    pub directory_name: Option<String>,
    /// Distinguished name of the organizational unit for computer accounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitDistinguishedName")]
    #[builder(default)]
    pub organizational_unit_distinguished_name: Option<String>,
}

/// Configuration block for the VPC configuration for the image builder. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct ImageBuilderStatusAtProviderVpcConfig {
    /// Identifiers of the security groups for the image builder or image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// Identifier of the subnet to which a network interface is attached from the image builder instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}


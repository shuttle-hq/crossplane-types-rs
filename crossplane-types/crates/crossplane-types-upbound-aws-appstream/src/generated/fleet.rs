// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FleetSpec defines the desired state of Fleet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "appstream.aws.upbound.io", version = "v1beta2", kind = "Fleet", plural = "fleet")]
#[kube(status = "FleetStatus")]
pub struct FleetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<FleetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FleetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<FleetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<FleetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<FleetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<FleetWriteConnectionSecretToRef>,
}

/// FleetSpec defines the desired state of Fleet
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProvider {
    /// Configuration block for the desired capacity of the fleet. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeCapacity")]
    #[builder(default)]
    pub compute_capacity: Option<FleetForProviderComputeCapacity>,
    /// Description to display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Amount of time that a streaming session remains active after users disconnect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disconnectTimeoutInSeconds")]
    #[builder(default)]
    pub disconnect_timeout_in_seconds: Option<f64>,
    /// Human-readable friendly name for the AppStream fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainJoinInfo")]
    #[builder(default)]
    pub domain_join_info: Option<FleetForProviderDomainJoinInfo>,
    /// Enables or disables default internet access for the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDefaultInternetAccess")]
    #[builder(default)]
    pub enable_default_internet_access: Option<bool>,
    /// Fleet type. Valid values are: ON_DEMAND, ALWAYS_ON
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetType")]
    #[builder(default)]
    pub fleet_type: Option<String>,
    /// ARN of the IAM role to apply to the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArn")]
    #[builder(default)]
    pub iam_role_arn: Option<String>,
    /// Reference to a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnRef")]
    #[builder(default)]
    pub iam_role_arn_ref: Option<FleetForProviderIamRoleArnRef>,
    /// Selector for a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnSelector")]
    #[builder(default)]
    pub iam_role_arn_selector: Option<FleetForProviderIamRoleArnSelector>,
    /// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect_timeout_in_seconds time interval begins. Defaults to 0. Valid value is between 60 and 3600 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleDisconnectTimeoutInSeconds")]
    #[builder(default)]
    pub idle_disconnect_timeout_in_seconds: Option<f64>,
    /// ARN of the public, private, or shared image to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageArn")]
    #[builder(default)]
    pub image_arn: Option<String>,
    /// Name of the image used to create the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// Instance type to use when launching fleet instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The maximum number of user sessions on an instance. This only applies to multi-session fleets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSessionsPerInstance")]
    #[builder(default)]
    pub max_sessions_per_instance: Option<f64>,
    /// Maximum amount of time that a streaming session can remain active, in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUserDurationInSeconds")]
    #[builder(default)]
    pub max_user_duration_in_seconds: Option<f64>,
    /// Unique name for the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When APP is specified, only the windows of applications opened by users display. When DESKTOP is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to APP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamView")]
    #[builder(default)]
    pub stream_view: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block for the VPC configuration for the image builder. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    #[builder(default)]
    pub vpc_config: Option<FleetForProviderVpcConfig>,
}

/// Configuration block for the desired capacity of the fleet. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderComputeCapacity {
    /// Desired number of streaming instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredInstances")]
    #[builder(default)]
    pub desired_instances: Option<f64>,
    /// Desired number of user sessions for a multi-session fleet. This is not allowed for single-session fleets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredSessions")]
    #[builder(default)]
    pub desired_sessions: Option<f64>,
}

/// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderDomainJoinInfo {
    /// Fully qualified name of the directory (for example, corp.example.com).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryName")]
    #[builder(default)]
    pub directory_name: Option<String>,
    /// Distinguished name of the organizational unit for computer accounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitDistinguishedName")]
    #[builder(default)]
    pub organizational_unit_distinguished_name: Option<String>,
}

/// Reference to a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderIamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetForProviderIamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderIamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetForProviderIamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetForProviderIamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderIamRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderIamRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderIamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetForProviderIamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderIamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetForProviderIamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetForProviderIamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderIamRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderIamRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for the VPC configuration for the image builder. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderVpcConfig {
    /// Identifiers of the security groups for the fleet or image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRefs")]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<FleetForProviderVpcConfigSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    #[builder(default)]
    pub subnet_id_selector: Option<FleetForProviderVpcConfigSubnetIdSelector>,
    /// Identifiers of the subnets to which a network interface is attached from the fleet instance or image builder instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderVpcConfigSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetForProviderVpcConfigSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderVpcConfigSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetForProviderVpcConfigSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetForProviderVpcConfigSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderVpcConfigSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderVpcConfigSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderVpcConfigSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetForProviderVpcConfigSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetForProviderVpcConfigSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetForProviderVpcConfigSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetForProviderVpcConfigSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderVpcConfigSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderVpcConfigSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProvider {
    /// Configuration block for the desired capacity of the fleet. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeCapacity")]
    #[builder(default)]
    pub compute_capacity: Option<FleetInitProviderComputeCapacity>,
    /// Description to display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Amount of time that a streaming session remains active after users disconnect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disconnectTimeoutInSeconds")]
    #[builder(default)]
    pub disconnect_timeout_in_seconds: Option<f64>,
    /// Human-readable friendly name for the AppStream fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainJoinInfo")]
    #[builder(default)]
    pub domain_join_info: Option<FleetInitProviderDomainJoinInfo>,
    /// Enables or disables default internet access for the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDefaultInternetAccess")]
    #[builder(default)]
    pub enable_default_internet_access: Option<bool>,
    /// Fleet type. Valid values are: ON_DEMAND, ALWAYS_ON
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetType")]
    #[builder(default)]
    pub fleet_type: Option<String>,
    /// ARN of the IAM role to apply to the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArn")]
    #[builder(default)]
    pub iam_role_arn: Option<String>,
    /// Reference to a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnRef")]
    #[builder(default)]
    pub iam_role_arn_ref: Option<FleetInitProviderIamRoleArnRef>,
    /// Selector for a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnSelector")]
    #[builder(default)]
    pub iam_role_arn_selector: Option<FleetInitProviderIamRoleArnSelector>,
    /// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect_timeout_in_seconds time interval begins. Defaults to 0. Valid value is between 60 and 3600 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleDisconnectTimeoutInSeconds")]
    #[builder(default)]
    pub idle_disconnect_timeout_in_seconds: Option<f64>,
    /// ARN of the public, private, or shared image to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageArn")]
    #[builder(default)]
    pub image_arn: Option<String>,
    /// Name of the image used to create the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// Instance type to use when launching fleet instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The maximum number of user sessions on an instance. This only applies to multi-session fleets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSessionsPerInstance")]
    #[builder(default)]
    pub max_sessions_per_instance: Option<f64>,
    /// Maximum amount of time that a streaming session can remain active, in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUserDurationInSeconds")]
    #[builder(default)]
    pub max_user_duration_in_seconds: Option<f64>,
    /// Unique name for the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When APP is specified, only the windows of applications opened by users display. When DESKTOP is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to APP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamView")]
    #[builder(default)]
    pub stream_view: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block for the VPC configuration for the image builder. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    #[builder(default)]
    pub vpc_config: Option<FleetInitProviderVpcConfig>,
}

/// Configuration block for the desired capacity of the fleet. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderComputeCapacity {
    /// Desired number of streaming instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredInstances")]
    #[builder(default)]
    pub desired_instances: Option<f64>,
    /// Desired number of user sessions for a multi-session fleet. This is not allowed for single-session fleets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredSessions")]
    #[builder(default)]
    pub desired_sessions: Option<f64>,
}

/// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderDomainJoinInfo {
    /// Fully qualified name of the directory (for example, corp.example.com).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryName")]
    #[builder(default)]
    pub directory_name: Option<String>,
    /// Distinguished name of the organizational unit for computer accounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitDistinguishedName")]
    #[builder(default)]
    pub organizational_unit_distinguished_name: Option<String>,
}

/// Reference to a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderIamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetInitProviderIamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderIamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetInitProviderIamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetInitProviderIamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderIamRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderIamRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderIamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetInitProviderIamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderIamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetInitProviderIamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetInitProviderIamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderIamRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderIamRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for the VPC configuration for the image builder. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderVpcConfig {
    /// Identifiers of the security groups for the fleet or image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRefs")]
    #[builder(default)]
    pub subnet_id_refs: Option<Vec<FleetInitProviderVpcConfigSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    #[builder(default)]
    pub subnet_id_selector: Option<FleetInitProviderVpcConfigSubnetIdSelector>,
    /// Identifiers of the subnets to which a network interface is attached from the fleet instance or image builder instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderVpcConfigSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetInitProviderVpcConfigSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderVpcConfigSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetInitProviderVpcConfigSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetInitProviderVpcConfigSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderVpcConfigSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderVpcConfigSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderVpcConfigSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetInitProviderVpcConfigSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetInitProviderVpcConfigSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetInitProviderVpcConfigSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetInitProviderVpcConfigSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderVpcConfigSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderVpcConfigSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<FleetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<FleetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<FleetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<FleetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<FleetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FleetStatus defines the observed state of Fleet.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<FleetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProvider {
    /// ARN of the appstream fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// Configuration block for the desired capacity of the fleet. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeCapacity")]
    #[builder(default)]
    pub compute_capacity: Option<FleetStatusAtProviderComputeCapacity>,
    /// Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdTime")]
    #[builder(default)]
    pub created_time: Option<String>,
    /// Description to display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Amount of time that a streaming session remains active after users disconnect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disconnectTimeoutInSeconds")]
    #[builder(default)]
    pub disconnect_timeout_in_seconds: Option<f64>,
    /// Human-readable friendly name for the AppStream fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    #[builder(default)]
    pub display_name: Option<String>,
    /// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainJoinInfo")]
    #[builder(default)]
    pub domain_join_info: Option<FleetStatusAtProviderDomainJoinInfo>,
    /// Enables or disables default internet access for the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDefaultInternetAccess")]
    #[builder(default)]
    pub enable_default_internet_access: Option<bool>,
    /// Fleet type. Valid values are: ON_DEMAND, ALWAYS_ON
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetType")]
    #[builder(default)]
    pub fleet_type: Option<String>,
    /// ARN of the IAM role to apply to the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArn")]
    #[builder(default)]
    pub iam_role_arn: Option<String>,
    /// Unique identifier (ID) of the appstream fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect_timeout_in_seconds time interval begins. Defaults to 0. Valid value is between 60 and 3600 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleDisconnectTimeoutInSeconds")]
    #[builder(default)]
    pub idle_disconnect_timeout_in_seconds: Option<f64>,
    /// ARN of the public, private, or shared image to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageArn")]
    #[builder(default)]
    pub image_arn: Option<String>,
    /// Name of the image used to create the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default)]
    pub image_name: Option<String>,
    /// Instance type to use when launching fleet instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default)]
    pub instance_type: Option<String>,
    /// The maximum number of user sessions on an instance. This only applies to multi-session fleets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSessionsPerInstance")]
    #[builder(default)]
    pub max_sessions_per_instance: Option<f64>,
    /// Maximum amount of time that a streaming session can remain active, in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUserDurationInSeconds")]
    #[builder(default)]
    pub max_user_duration_in_seconds: Option<f64>,
    /// Unique name for the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// State of the fleet. Can be STARTING, RUNNING, STOPPING or STOPPED
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When APP is specified, only the windows of applications opened by users display. When DESKTOP is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to APP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamView")]
    #[builder(default)]
    pub stream_view: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
    /// Configuration block for the VPC configuration for the image builder. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    #[builder(default)]
    pub vpc_config: Option<FleetStatusAtProviderVpcConfig>,
}

/// Configuration block for the desired capacity of the fleet. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderComputeCapacity {
    /// Number of currently available instances that can be used to stream sessions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub available: Option<f64>,
    /// Desired number of streaming instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredInstances")]
    #[builder(default)]
    pub desired_instances: Option<f64>,
    /// Desired number of user sessions for a multi-session fleet. This is not allowed for single-session fleets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredSessions")]
    #[builder(default)]
    pub desired_sessions: Option<f64>,
    /// Number of instances in use for streaming.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inUse")]
    #[builder(default)]
    pub in_use: Option<f64>,
    /// Total number of simultaneous streaming instances that are running.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub running: Option<f64>,
}

/// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderDomainJoinInfo {
    /// Fully qualified name of the directory (for example, corp.example.com).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryName")]
    #[builder(default)]
    pub directory_name: Option<String>,
    /// Distinguished name of the organizational unit for computer accounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitDistinguishedName")]
    #[builder(default)]
    pub organizational_unit_distinguished_name: Option<String>,
}

/// Configuration block for the VPC configuration for the image builder. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct FleetStatusAtProviderVpcConfig {
    /// Identifiers of the security groups for the fleet or image builder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    #[builder(default)]
    pub security_group_ids: Option<Vec<String>>,
    /// Identifiers of the subnets to which a network interface is attached from the fleet instance or image builder instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default)]
    pub subnet_ids: Option<Vec<String>>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TrustConfigSpec defines the desired state of TrustConfig
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "certificatemanager.gcp.upbound.io", version = "v1beta1", kind = "TrustConfig", plural = "trustconfigs")]
#[kube(status = "TrustConfigStatus")]
pub struct TrustConfigSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<TrustConfigDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TrustConfigForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<TrustConfigInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<TrustConfigProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<TrustConfigPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<TrustConfigWriteConnectionSecretToRef>,
}

/// TrustConfigSpec defines the desired state of TrustConfig
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrustConfigDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigForProvider {
    /// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
    /// the certificate is parseable, proof of private key possession is established, and constraints on the certificate's SAN field are met.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowlistedCertificates")]
    #[builder(default)]
    pub allowlisted_certificates: Option<Vec<TrustConfigForProviderAllowlistedCertificates>>,
    /// One or more paragraphs of text description of a trust config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Set of label tags associated with the trust config.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The trust config location.
    pub location: String,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Set of trust stores to perform validation against.
    /// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustStores")]
    #[builder(default)]
    pub trust_stores: Option<Vec<TrustConfigForProviderTrustStores>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigForProviderAllowlistedCertificates {
    /// PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCertificate")]
    #[builder(default)]
    pub pem_certificate: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigForProviderTrustStores {
    /// Set of intermediate CA certificates used for the path building phase of chain validation.
    /// The field is currently not supported if trust config is used for the workload certificate feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intermediateCas")]
    #[builder(default)]
    pub intermediate_cas: Option<Vec<TrustConfigForProviderTrustStoresIntermediateCas>>,
    /// List of Trust Anchors to be used while performing validation against a given TrustStore.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustAnchors")]
    #[builder(default)]
    pub trust_anchors: Option<Vec<TrustConfigForProviderTrustStoresTrustAnchors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigForProviderTrustStoresIntermediateCas {
    /// PEM root certificate of the PKI used for validation.
    /// Each certificate provided in PEM format may occupy up to 5kB.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCertificateSecretRef")]
    #[builder(default)]
    pub pem_certificate_secret_ref: Option<TrustConfigForProviderTrustStoresIntermediateCasPemCertificateSecretRef>,
}

/// PEM root certificate of the PKI used for validation.
/// Each certificate provided in PEM format may occupy up to 5kB.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigForProviderTrustStoresIntermediateCasPemCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigForProviderTrustStoresTrustAnchors {
    /// PEM root certificate of the PKI used for validation.
    /// Each certificate provided in PEM format may occupy up to 5kB.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCertificateSecretRef")]
    #[builder(default)]
    pub pem_certificate_secret_ref: Option<TrustConfigForProviderTrustStoresTrustAnchorsPemCertificateSecretRef>,
}

/// PEM root certificate of the PKI used for validation.
/// Each certificate provided in PEM format may occupy up to 5kB.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigForProviderTrustStoresTrustAnchorsPemCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigInitProvider {
    /// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
    /// the certificate is parseable, proof of private key possession is established, and constraints on the certificate's SAN field are met.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowlistedCertificates")]
    #[builder(default)]
    pub allowlisted_certificates: Option<Vec<TrustConfigInitProviderAllowlistedCertificates>>,
    /// One or more paragraphs of text description of a trust config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// Set of label tags associated with the trust config.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// Set of trust stores to perform validation against.
    /// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustStores")]
    #[builder(default)]
    pub trust_stores: Option<Vec<TrustConfigInitProviderTrustStores>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigInitProviderAllowlistedCertificates {
    /// PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCertificate")]
    #[builder(default)]
    pub pem_certificate: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigInitProviderTrustStores {
    /// Set of intermediate CA certificates used for the path building phase of chain validation.
    /// The field is currently not supported if trust config is used for the workload certificate feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intermediateCas")]
    #[builder(default)]
    pub intermediate_cas: Option<Vec<TrustConfigInitProviderTrustStoresIntermediateCas>>,
    /// List of Trust Anchors to be used while performing validation against a given TrustStore.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustAnchors")]
    #[builder(default)]
    pub trust_anchors: Option<Vec<TrustConfigInitProviderTrustStoresTrustAnchors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigInitProviderTrustStoresIntermediateCas {
    /// PEM root certificate of the PKI used for validation.
    /// Each certificate provided in PEM format may occupy up to 5kB.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCertificateSecretRef")]
    #[builder(default)]
    pub pem_certificate_secret_ref: Option<TrustConfigInitProviderTrustStoresIntermediateCasPemCertificateSecretRef>,
}

/// PEM root certificate of the PKI used for validation.
/// Each certificate provided in PEM format may occupy up to 5kB.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigInitProviderTrustStoresIntermediateCasPemCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigInitProviderTrustStoresTrustAnchors {
    /// PEM root certificate of the PKI used for validation.
    /// Each certificate provided in PEM format may occupy up to 5kB.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCertificateSecretRef")]
    #[builder(default)]
    pub pem_certificate_secret_ref: Option<TrustConfigInitProviderTrustStoresTrustAnchorsPemCertificateSecretRef>,
}

/// PEM root certificate of the PKI used for validation.
/// Each certificate provided in PEM format may occupy up to 5kB.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigInitProviderTrustStoresTrustAnchorsPemCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TrustConfigProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TrustConfigProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TrustConfigProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrustConfigProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrustConfigProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<TrustConfigPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<TrustConfigPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<TrustConfigPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<TrustConfigPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<TrustConfigPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrustConfigPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrustConfigPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TrustConfigStatus defines the observed state of TrustConfig.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<TrustConfigStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigStatusAtProvider {
    /// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
    /// the certificate is parseable, proof of private key possession is established, and constraints on the certificate's SAN field are met.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowlistedCertificates")]
    #[builder(default)]
    pub allowlisted_certificates: Option<Vec<TrustConfigStatusAtProviderAllowlistedCertificates>>,
    /// The creation timestamp of a TrustConfig.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
    /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    #[builder(default)]
    pub create_time: Option<String>,
    /// One or more paragraphs of text description of a trust config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    #[builder(default)]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/trustConfigs/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Set of label tags associated with the trust config.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// The trust config location.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub project: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    #[builder(default)]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Set of trust stores to perform validation against.
    /// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustStores")]
    #[builder(default)]
    pub trust_stores: Option<Vec<TrustConfigStatusAtProviderTrustStores>>,
    /// The last update timestamp of a TrustConfig.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
    /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    #[builder(default)]
    pub update_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigStatusAtProviderAllowlistedCertificates {
    /// PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCertificate")]
    #[builder(default)]
    pub pem_certificate: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigStatusAtProviderTrustStores {
    /// Set of intermediate CA certificates used for the path building phase of chain validation.
    /// The field is currently not supported if trust config is used for the workload certificate feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intermediateCas")]
    #[builder(default)]
    pub intermediate_cas: Option<Vec<TrustConfigStatusAtProviderTrustStoresIntermediateCas>>,
    /// List of Trust Anchors to be used while performing validation against a given TrustStore.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustAnchors")]
    #[builder(default)]
    pub trust_anchors: Option<Vec<TrustConfigStatusAtProviderTrustStoresTrustAnchors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigStatusAtProviderTrustStoresIntermediateCas {
    /// PEM root certificate of the PKI used for validation.
    /// Each certificate provided in PEM format may occupy up to 5kB.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCertificateSecretRef")]
    #[builder(default)]
    pub pem_certificate_secret_ref: Option<TrustConfigStatusAtProviderTrustStoresIntermediateCasPemCertificateSecretRef>,
}

/// PEM root certificate of the PKI used for validation.
/// Each certificate provided in PEM format may occupy up to 5kB.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigStatusAtProviderTrustStoresIntermediateCasPemCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigStatusAtProviderTrustStoresTrustAnchors {
    /// PEM root certificate of the PKI used for validation.
    /// Each certificate provided in PEM format may occupy up to 5kB.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pemCertificateSecretRef")]
    #[builder(default)]
    pub pem_certificate_secret_ref: Option<TrustConfigStatusAtProviderTrustStoresTrustAnchorsPemCertificateSecretRef>,
}

/// PEM root certificate of the PKI used for validation.
/// Each certificate provided in PEM format may occupy up to 5kB.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct TrustConfigStatusAtProviderTrustStoresTrustAnchorsPemCertificateSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}


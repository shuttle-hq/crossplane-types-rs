// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// DataLakeSettingsSpec defines the desired state of DataLakeSettings
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(
    group = "lakeformation.aws.upbound.io",
    version = "v1beta1",
    kind = "DataLakeSettings",
    plural = "datalakesettings"
)]
#[kube(status = "DataLakeSettingsStatus")]
pub struct DataLakeSettingsSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default)]
    pub deletion_policy: Option<DataLakeSettingsDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DataLakeSettingsForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default)]
    pub init_provider: Option<DataLakeSettingsInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default)]
    pub provider_config_ref: Option<DataLakeSettingsProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default)]
    pub publish_connection_details_to: Option<DataLakeSettingsPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<DataLakeSettingsWriteConnectionSecretToRef>,
}

/// DataLakeSettingsSpec defines the desired state of DataLakeSettings
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsForProvider {
    /// –  Set of ARNs of AWS Lake Formation principals (IAM users or roles).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub admins: Option<Vec<String>>,
    /// References to User in iam to populate admins.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminsRefs"
    )]
    #[builder(default)]
    pub admins_refs: Option<Vec<DataLakeSettingsForProviderAdminsRefs>>,
    /// Selector for a list of User in iam to populate admins.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminsSelector"
    )]
    #[builder(default)]
    pub admins_selector: Option<DataLakeSettingsForProviderAdminsSelector>,
    /// Whether to allow Amazon EMR clusters to access data managed by Lake Formation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowExternalDataFiltering"
    )]
    #[builder(default)]
    pub allow_external_data_filtering: Option<bool>,
    /// Whether to allow a third-party query engine to get data access credentials without session tags when a caller has full data access permissions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowFullTableExternalDataAccess"
    )]
    #[builder(default)]
    pub allow_full_table_external_data_access: Option<bool>,
    /// Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizedSessionTagValueList"
    )]
    #[builder(default)]
    pub authorized_session_tag_value_list: Option<Vec<String>>,
    /// –  Identifier for the Data Catalog. By default, the account ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    #[builder(default)]
    pub catalog_id: Option<String>,
    /// Up to three configuration blocks of principal permissions for default create database permissions. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createDatabaseDefaultPermissions"
    )]
    #[builder(default)]
    pub create_database_default_permissions:
        Option<Vec<DataLakeSettingsForProviderCreateDatabaseDefaultPermissions>>,
    /// Up to three configuration blocks of principal permissions for default create table permissions. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createTableDefaultPermissions"
    )]
    #[builder(default)]
    pub create_table_default_permissions:
        Option<Vec<DataLakeSettingsForProviderCreateTableDefaultPermissions>>,
    /// A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "externalDataFilteringAllowList"
    )]
    #[builder(default)]
    pub external_data_filtering_allow_list: Option<Vec<String>>,
    /// Key-value map of additional configuration. Valid values for the CROSS_ACCOUNT_VERSION key are "1", "2", "3", or "4". SET_CONTEXT is also returned with a value of TRUE. In a fresh account, prior to configuring, CROSS_ACCOUNT_VERSION is "1". Destroying this resource sets the CROSS_ACCOUNT_VERSION to "1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<HashMap<String, String>>,
    /// –  Set of ARNs of AWS Lake Formation principals (IAM users or roles) with only view access to the resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readOnlyAdmins"
    )]
    #[builder(default)]
    pub read_only_admins: Option<Vec<String>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// owning account IDs that the caller's account can use to share their user access details (user ARNs).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trustedResourceOwners"
    )]
    #[builder(default)]
    pub trusted_resource_owners: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsForProviderAdminsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DataLakeSettingsForProviderAdminsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsForProviderAdminsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DataLakeSettingsForProviderAdminsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DataLakeSettingsForProviderAdminsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsForProviderAdminsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsForProviderAdminsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of User in iam to populate admins.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsForProviderAdminsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DataLakeSettingsForProviderAdminsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsForProviderAdminsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DataLakeSettingsForProviderAdminsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DataLakeSettingsForProviderAdminsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsForProviderAdminsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsForProviderAdminsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsForProviderCreateDatabaseDefaultPermissions {
    /// List of permissions that are granted to the principal. Valid values may include ALL, SELECT, ALTER, DROP, DELETE, INSERT, DESCRIBE, and CREATE_TABLE. For more details, see Lake Formation Permissions Reference.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub permissions: Option<Vec<String>>,
    /// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set principal to IAM_ALLOWED_PRINCIPALS and permissions to ["ALL"].
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub principal: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsForProviderCreateTableDefaultPermissions {
    /// List of permissions that are granted to the principal. Valid values may include ALL, SELECT, ALTER, DROP, DELETE, INSERT, and DESCRIBE. For more details, see Lake Formation Permissions Reference.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub permissions: Option<Vec<String>>,
    /// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set principal to IAM_ALLOWED_PRINCIPALS and permissions to ["ALL"].
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub principal: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsInitProvider {
    /// –  Set of ARNs of AWS Lake Formation principals (IAM users or roles).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub admins: Option<Vec<String>>,
    /// References to User in iam to populate admins.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminsRefs"
    )]
    #[builder(default)]
    pub admins_refs: Option<Vec<DataLakeSettingsInitProviderAdminsRefs>>,
    /// Selector for a list of User in iam to populate admins.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminsSelector"
    )]
    #[builder(default)]
    pub admins_selector: Option<DataLakeSettingsInitProviderAdminsSelector>,
    /// Whether to allow Amazon EMR clusters to access data managed by Lake Formation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowExternalDataFiltering"
    )]
    #[builder(default)]
    pub allow_external_data_filtering: Option<bool>,
    /// Whether to allow a third-party query engine to get data access credentials without session tags when a caller has full data access permissions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowFullTableExternalDataAccess"
    )]
    #[builder(default)]
    pub allow_full_table_external_data_access: Option<bool>,
    /// Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizedSessionTagValueList"
    )]
    #[builder(default)]
    pub authorized_session_tag_value_list: Option<Vec<String>>,
    /// –  Identifier for the Data Catalog. By default, the account ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    #[builder(default)]
    pub catalog_id: Option<String>,
    /// Up to three configuration blocks of principal permissions for default create database permissions. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createDatabaseDefaultPermissions"
    )]
    #[builder(default)]
    pub create_database_default_permissions:
        Option<Vec<DataLakeSettingsInitProviderCreateDatabaseDefaultPermissions>>,
    /// Up to three configuration blocks of principal permissions for default create table permissions. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createTableDefaultPermissions"
    )]
    #[builder(default)]
    pub create_table_default_permissions:
        Option<Vec<DataLakeSettingsInitProviderCreateTableDefaultPermissions>>,
    /// A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "externalDataFilteringAllowList"
    )]
    #[builder(default)]
    pub external_data_filtering_allow_list: Option<Vec<String>>,
    /// Key-value map of additional configuration. Valid values for the CROSS_ACCOUNT_VERSION key are "1", "2", "3", or "4". SET_CONTEXT is also returned with a value of TRUE. In a fresh account, prior to configuring, CROSS_ACCOUNT_VERSION is "1". Destroying this resource sets the CROSS_ACCOUNT_VERSION to "1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<HashMap<String, String>>,
    /// –  Set of ARNs of AWS Lake Formation principals (IAM users or roles) with only view access to the resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readOnlyAdmins"
    )]
    #[builder(default)]
    pub read_only_admins: Option<Vec<String>>,
    /// owning account IDs that the caller's account can use to share their user access details (user ARNs).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trustedResourceOwners"
    )]
    #[builder(default)]
    pub trusted_resource_owners: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsInitProviderAdminsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DataLakeSettingsInitProviderAdminsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsInitProviderAdminsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DataLakeSettingsInitProviderAdminsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DataLakeSettingsInitProviderAdminsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsInitProviderAdminsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsInitProviderAdminsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of User in iam to populate admins.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsInitProviderAdminsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DataLakeSettingsInitProviderAdminsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsInitProviderAdminsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DataLakeSettingsInitProviderAdminsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DataLakeSettingsInitProviderAdminsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsInitProviderAdminsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsInitProviderAdminsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsInitProviderCreateDatabaseDefaultPermissions {
    /// List of permissions that are granted to the principal. Valid values may include ALL, SELECT, ALTER, DROP, DELETE, INSERT, DESCRIBE, and CREATE_TABLE. For more details, see Lake Formation Permissions Reference.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub permissions: Option<Vec<String>>,
    /// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set principal to IAM_ALLOWED_PRINCIPALS and permissions to ["ALL"].
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub principal: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsInitProviderCreateTableDefaultPermissions {
    /// List of permissions that are granted to the principal. Valid values may include ALL, SELECT, ALTER, DROP, DELETE, INSERT, and DESCRIBE. For more details, see Lake Formation Permissions Reference.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub permissions: Option<Vec<String>>,
    /// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set principal to IAM_ALLOWED_PRINCIPALS and permissions to ["ALL"].
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub principal: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DataLakeSettingsProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DataLakeSettingsProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DataLakeSettingsProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<DataLakeSettingsPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<DataLakeSettingsPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<DataLakeSettingsPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<DataLakeSettingsPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<DataLakeSettingsPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataLakeSettingsPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DataLakeSettingsStatus defines the observed state of DataLakeSettings.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default)]
    pub at_provider: Option<DataLakeSettingsStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsStatusAtProvider {
    /// –  Set of ARNs of AWS Lake Formation principals (IAM users or roles).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub admins: Option<Vec<String>>,
    /// Whether to allow Amazon EMR clusters to access data managed by Lake Formation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowExternalDataFiltering"
    )]
    #[builder(default)]
    pub allow_external_data_filtering: Option<bool>,
    /// Whether to allow a third-party query engine to get data access credentials without session tags when a caller has full data access permissions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowFullTableExternalDataAccess"
    )]
    #[builder(default)]
    pub allow_full_table_external_data_access: Option<bool>,
    /// Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizedSessionTagValueList"
    )]
    #[builder(default)]
    pub authorized_session_tag_value_list: Option<Vec<String>>,
    /// –  Identifier for the Data Catalog. By default, the account ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    #[builder(default)]
    pub catalog_id: Option<String>,
    /// Up to three configuration blocks of principal permissions for default create database permissions. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createDatabaseDefaultPermissions"
    )]
    #[builder(default)]
    pub create_database_default_permissions:
        Option<Vec<DataLakeSettingsStatusAtProviderCreateDatabaseDefaultPermissions>>,
    /// Up to three configuration blocks of principal permissions for default create table permissions. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createTableDefaultPermissions"
    )]
    #[builder(default)]
    pub create_table_default_permissions:
        Option<Vec<DataLakeSettingsStatusAtProviderCreateTableDefaultPermissions>>,
    /// A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "externalDataFilteringAllowList"
    )]
    #[builder(default)]
    pub external_data_filtering_allow_list: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// Key-value map of additional configuration. Valid values for the CROSS_ACCOUNT_VERSION key are "1", "2", "3", or "4". SET_CONTEXT is also returned with a value of TRUE. In a fresh account, prior to configuring, CROSS_ACCOUNT_VERSION is "1". Destroying this resource sets the CROSS_ACCOUNT_VERSION to "1".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<HashMap<String, String>>,
    /// –  Set of ARNs of AWS Lake Formation principals (IAM users or roles) with only view access to the resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readOnlyAdmins"
    )]
    #[builder(default)]
    pub read_only_admins: Option<Vec<String>>,
    /// owning account IDs that the caller's account can use to share their user access details (user ARNs).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trustedResourceOwners"
    )]
    #[builder(default)]
    pub trusted_resource_owners: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsStatusAtProviderCreateDatabaseDefaultPermissions {
    /// List of permissions that are granted to the principal. Valid values may include ALL, SELECT, ALTER, DROP, DELETE, INSERT, DESCRIBE, and CREATE_TABLE. For more details, see Lake Formation Permissions Reference.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub permissions: Option<Vec<String>>,
    /// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set principal to IAM_ALLOWED_PRINCIPALS and permissions to ["ALL"].
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub principal: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct DataLakeSettingsStatusAtProviderCreateTableDefaultPermissions {
    /// List of permissions that are granted to the principal. Valid values may include ALL, SELECT, ALTER, DROP, DELETE, INSERT, and DESCRIBE. For more details, see Lake Formation Permissions Reference.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub permissions: Option<Vec<String>>,
    /// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set principal to IAM_ALLOWED_PRINCIPALS and permissions to ["ALL"].
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub principal: Option<String>,
}

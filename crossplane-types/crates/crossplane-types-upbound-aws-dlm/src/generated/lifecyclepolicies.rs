// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// LifecyclePolicySpec defines the desired state of LifecyclePolicy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
#[kube(group = "dlm.aws.upbound.io", version = "v1beta2", kind = "LifecyclePolicy", plural = "lifecyclepolicies")]
#[kube(status = "LifecyclePolicyStatus")]
pub struct LifecyclePolicySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    #[builder(default)]
    pub deletion_policy: Option<LifecyclePolicyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: LifecyclePolicyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    #[builder(default)]
    pub init_provider: Option<LifecyclePolicyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    #[builder(default)]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    #[builder(default)]
    pub provider_config_ref: Option<LifecyclePolicyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    #[builder(default)]
    pub publish_connection_details_to: Option<LifecyclePolicyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    #[builder(default)]
    pub write_connection_secret_to_ref: Option<LifecyclePolicyWriteConnectionSecretToRef>,
}

/// LifecyclePolicySpec defines the desired state of LifecyclePolicy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProvider {
    /// A description for the DLM lifecycle policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The ARN of an IAM role that is able to be assumed by the DLM service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    #[builder(default)]
    pub execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnRef")]
    #[builder(default)]
    pub execution_role_arn_ref: Option<LifecyclePolicyForProviderExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnSelector")]
    #[builder(default)]
    pub execution_role_arn_selector: Option<LifecyclePolicyForProviderExecutionRoleArnSelector>,
    /// See the policy_details configuration block. Max of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyDetails")]
    #[builder(default)]
    pub policy_details: Option<LifecyclePolicyForProviderPolicyDetails>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Whether the lifecycle policy should be enabled or disabled. ENABLED or DISABLED are valid values. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyForProviderExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyForProviderExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyForProviderExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyForProviderExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyForProviderExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyForProviderExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyForProviderExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyForProviderExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyForProviderExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyForProviderExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// See the policy_details configuration block. Max of 1.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetails {
    /// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<LifecyclePolicyForProviderPolicyDetailsAction>,
    /// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSource")]
    #[builder(default)]
    pub event_source: Option<LifecyclePolicyForProviderPolicyDetailsEventSource>,
    /// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<LifecyclePolicyForProviderPolicyDetailsParameters>,
    /// The valid target resource types and actions a policy can manage. Specify EBS_SNAPSHOT_MANAGEMENT to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify IMAGE_MANAGEMENT to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify EVENT_BASED_POLICY to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is EBS_SNAPSHOT_MANAGEMENT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyType")]
    #[builder(default)]
    pub policy_type: Option<String>,
    /// The location of the resources to backup. If the source resources are located in an AWS Region, specify CLOUD. If the source resources are located on an Outpost in your account, specify OUTPOST. If you specify OUTPOST, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are CLOUD and OUTPOST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLocations")]
    #[builder(default)]
    pub resource_locations: Option<Vec<String>>,
    /// A list of resource types that should be targeted by the lifecycle policy. Valid values are VOLUME and INSTANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTypes")]
    #[builder(default)]
    pub resource_types: Option<Vec<String>>,
    /// See the schedule configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schedule: Option<Vec<LifecyclePolicyForProviderPolicyDetailsSchedule>>,
    /// A map of tag keys and their values. Any resources that match the resource_types and are tagged with any of these tags will be targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTags")]
    #[builder(default)]
    pub target_tags: Option<HashMap<String, String>>,
}

/// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsAction {
    /// The rule for copying shared snapshots across Regions. See the cross_region_copy configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossRegionCopy")]
    #[builder(default)]
    pub cross_region_copy: Option<Vec<LifecyclePolicyForProviderPolicyDetailsActionCrossRegionCopy>>,
    /// A descriptive name for the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsActionCrossRegionCopy {
    /// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    #[builder(default)]
    pub encryption_configuration: Option<LifecyclePolicyForProviderPolicyDetailsActionCrossRegionCopyEncryptionConfiguration>,
    /// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainRule")]
    #[builder(default)]
    pub retain_rule: Option<LifecyclePolicyForProviderPolicyDetailsActionCrossRegionCopyRetainRule>,
    /// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

/// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsActionCrossRegionCopyEncryptionConfiguration {
    /// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArn")]
    #[builder(default)]
    pub cmk_arn: Option<String>,
    /// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
}

/// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsActionCrossRegionCopyRetainRule {
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsEventSource {
    /// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<LifecyclePolicyForProviderPolicyDetailsEventSourceParameters>,
    /// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are MANAGED_CWE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsEventSourceParameters {
    /// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptionRegex")]
    #[builder(default)]
    pub description_regex: Option<String>,
    /// The type of event. Currently, only shareSnapshot events are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventType")]
    #[builder(default)]
    pub event_type: Option<String>,
    /// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotOwner")]
    #[builder(default)]
    pub snapshot_owner: Option<Vec<String>>,
}

/// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsParameters {
    /// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeBootVolume")]
    #[builder(default)]
    pub exclude_boot_volume: Option<bool>,
    /// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. true indicates that targeted instances are not rebooted when the policy runs. false indicates that target instances are rebooted when the policy runs. The default is true (instances are not rebooted).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noReboot")]
    #[builder(default)]
    pub no_reboot: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsSchedule {
    /// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTags")]
    #[builder(default)]
    pub copy_tags: Option<bool>,
    /// See the create_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createRule")]
    #[builder(default)]
    pub create_rule: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCreateRule>,
    /// See the cross_region_copy_rule block. Max of 3 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossRegionCopyRule")]
    #[builder(default)]
    pub cross_region_copy_rule: Option<Vec<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRule>>,
    /// See the deprecate_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deprecateRule")]
    #[builder(default)]
    pub deprecate_rule: Option<LifecyclePolicyForProviderPolicyDetailsScheduleDeprecateRule>,
    /// See the fast_restore_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastRestoreRule")]
    #[builder(default)]
    pub fast_restore_rule: Option<LifecyclePolicyForProviderPolicyDetailsScheduleFastRestoreRule>,
    /// A descriptive name for the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainRule")]
    #[builder(default)]
    pub retain_rule: Option<LifecyclePolicyForProviderPolicyDetailsScheduleRetainRule>,
    /// See the share_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareRule")]
    #[builder(default)]
    pub share_rule: Option<LifecyclePolicyForProviderPolicyDetailsScheduleShareRule>,
    /// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsToAdd")]
    #[builder(default)]
    pub tags_to_add: Option<HashMap<String, String>>,
    /// A map of tag keys and variable values, where the values are determined when the policy is executed. Only $(instance-id) or $(timestamp) are valid values. Can only be used when resource_types is INSTANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "variableTags")]
    #[builder(default)]
    pub variable_tags: Option<HashMap<String, String>>,
}

/// See the create_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleCreateRule {
    /// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. Conflicts with interval, interval_unit, and times.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cronExpression")]
    #[builder(default)]
    pub cron_expression: Option<String>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
    /// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify CLOUD. To create snapshots on the same Outpost as the source resource, specify OUTPOST_LOCAL. If you omit this parameter, CLOUD is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are CLOUD and OUTPOST_LOCAL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub times: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRule {
    /// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArn")]
    #[builder(default)]
    pub cmk_arn: Option<String>,
    /// Reference to a Key in kms to populate cmkArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArnRef")]
    #[builder(default)]
    pub cmk_arn_ref: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRef>,
    /// Selector for a Key in kms to populate cmkArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArnSelector")]
    #[builder(default)]
    pub cmk_arn_selector: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelector>,
    /// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTags")]
    #[builder(default)]
    pub copy_tags: Option<bool>,
    /// See the deprecate_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deprecateRule")]
    #[builder(default)]
    pub deprecate_rule: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule>,
    /// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainRule")]
    #[builder(default)]
    pub retain_rule: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleRetainRule>,
    /// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

/// Reference to a Key in kms to populate cmkArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate cmkArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// See the deprecate_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule {
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleCrossRegionCopyRuleRetainRule {
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// See the deprecate_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleDeprecateRule {
    /// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000. Conflicts with interval and interval_unit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub count: Option<f64>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// See the fast_restore_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleFastRestoreRule {
    /// The Availability Zones in which to enable fast snapshot restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZones")]
    #[builder(default)]
    pub availability_zones: Option<Vec<String>>,
    /// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000. Conflicts with interval and interval_unit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub count: Option<f64>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleRetainRule {
    /// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000. Conflicts with interval and interval_unit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub count: Option<f64>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// See the share_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyForProviderPolicyDetailsScheduleShareRule {
    /// The IDs of the AWS accounts with which to share the snapshots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAccounts")]
    #[builder(default)]
    pub target_accounts: Option<Vec<String>>,
    /// The period after which snapshots that are shared with other AWS accounts are automatically unshared.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unshareInterval")]
    #[builder(default)]
    pub unshare_interval: Option<f64>,
    /// The unit of time for the automatic unsharing interval. Valid values are DAYS, WEEKS, MONTHS, YEARS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unshareIntervalUnit")]
    #[builder(default)]
    pub unshare_interval_unit: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProvider {
    /// A description for the DLM lifecycle policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The ARN of an IAM role that is able to be assumed by the DLM service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    #[builder(default)]
    pub execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnRef")]
    #[builder(default)]
    pub execution_role_arn_ref: Option<LifecyclePolicyInitProviderExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnSelector")]
    #[builder(default)]
    pub execution_role_arn_selector: Option<LifecyclePolicyInitProviderExecutionRoleArnSelector>,
    /// See the policy_details configuration block. Max of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyDetails")]
    #[builder(default)]
    pub policy_details: Option<LifecyclePolicyInitProviderPolicyDetails>,
    /// Whether the lifecycle policy should be enabled or disabled. ENABLED or DISABLED are valid values. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyInitProviderExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyInitProviderExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyInitProviderExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyInitProviderExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyInitProviderExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyInitProviderExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyInitProviderExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyInitProviderExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyInitProviderExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyInitProviderExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// See the policy_details configuration block. Max of 1.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetails {
    /// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<LifecyclePolicyInitProviderPolicyDetailsAction>,
    /// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSource")]
    #[builder(default)]
    pub event_source: Option<LifecyclePolicyInitProviderPolicyDetailsEventSource>,
    /// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<LifecyclePolicyInitProviderPolicyDetailsParameters>,
    /// The valid target resource types and actions a policy can manage. Specify EBS_SNAPSHOT_MANAGEMENT to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify IMAGE_MANAGEMENT to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify EVENT_BASED_POLICY to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is EBS_SNAPSHOT_MANAGEMENT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyType")]
    #[builder(default)]
    pub policy_type: Option<String>,
    /// The location of the resources to backup. If the source resources are located in an AWS Region, specify CLOUD. If the source resources are located on an Outpost in your account, specify OUTPOST. If you specify OUTPOST, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are CLOUD and OUTPOST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLocations")]
    #[builder(default)]
    pub resource_locations: Option<Vec<String>>,
    /// A list of resource types that should be targeted by the lifecycle policy. Valid values are VOLUME and INSTANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTypes")]
    #[builder(default)]
    pub resource_types: Option<Vec<String>>,
    /// See the schedule configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schedule: Option<Vec<LifecyclePolicyInitProviderPolicyDetailsSchedule>>,
    /// A map of tag keys and their values. Any resources that match the resource_types and are tagged with any of these tags will be targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTags")]
    #[builder(default)]
    pub target_tags: Option<HashMap<String, String>>,
}

/// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsAction {
    /// The rule for copying shared snapshots across Regions. See the cross_region_copy configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossRegionCopy")]
    #[builder(default)]
    pub cross_region_copy: Option<Vec<LifecyclePolicyInitProviderPolicyDetailsActionCrossRegionCopy>>,
    /// A descriptive name for the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsActionCrossRegionCopy {
    /// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    #[builder(default)]
    pub encryption_configuration: Option<LifecyclePolicyInitProviderPolicyDetailsActionCrossRegionCopyEncryptionConfiguration>,
    /// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainRule")]
    #[builder(default)]
    pub retain_rule: Option<LifecyclePolicyInitProviderPolicyDetailsActionCrossRegionCopyRetainRule>,
    /// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

/// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsActionCrossRegionCopyEncryptionConfiguration {
    /// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArn")]
    #[builder(default)]
    pub cmk_arn: Option<String>,
    /// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
}

/// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsActionCrossRegionCopyRetainRule {
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsEventSource {
    /// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<LifecyclePolicyInitProviderPolicyDetailsEventSourceParameters>,
    /// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are MANAGED_CWE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsEventSourceParameters {
    /// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptionRegex")]
    #[builder(default)]
    pub description_regex: Option<String>,
    /// The type of event. Currently, only shareSnapshot events are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventType")]
    #[builder(default)]
    pub event_type: Option<String>,
    /// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotOwner")]
    #[builder(default)]
    pub snapshot_owner: Option<Vec<String>>,
}

/// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsParameters {
    /// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeBootVolume")]
    #[builder(default)]
    pub exclude_boot_volume: Option<bool>,
    /// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. true indicates that targeted instances are not rebooted when the policy runs. false indicates that target instances are rebooted when the policy runs. The default is true (instances are not rebooted).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noReboot")]
    #[builder(default)]
    pub no_reboot: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsSchedule {
    /// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTags")]
    #[builder(default)]
    pub copy_tags: Option<bool>,
    /// See the create_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createRule")]
    #[builder(default)]
    pub create_rule: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCreateRule>,
    /// See the cross_region_copy_rule block. Max of 3 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossRegionCopyRule")]
    #[builder(default)]
    pub cross_region_copy_rule: Option<Vec<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRule>>,
    /// See the deprecate_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deprecateRule")]
    #[builder(default)]
    pub deprecate_rule: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleDeprecateRule>,
    /// See the fast_restore_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastRestoreRule")]
    #[builder(default)]
    pub fast_restore_rule: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleFastRestoreRule>,
    /// A descriptive name for the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainRule")]
    #[builder(default)]
    pub retain_rule: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleRetainRule>,
    /// See the share_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareRule")]
    #[builder(default)]
    pub share_rule: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleShareRule>,
    /// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsToAdd")]
    #[builder(default)]
    pub tags_to_add: Option<HashMap<String, String>>,
    /// A map of tag keys and variable values, where the values are determined when the policy is executed. Only $(instance-id) or $(timestamp) are valid values. Can only be used when resource_types is INSTANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "variableTags")]
    #[builder(default)]
    pub variable_tags: Option<HashMap<String, String>>,
}

/// See the create_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleCreateRule {
    /// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. Conflicts with interval, interval_unit, and times.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cronExpression")]
    #[builder(default)]
    pub cron_expression: Option<String>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
    /// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify CLOUD. To create snapshots on the same Outpost as the source resource, specify OUTPOST_LOCAL. If you omit this parameter, CLOUD is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are CLOUD and OUTPOST_LOCAL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub times: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRule {
    /// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArn")]
    #[builder(default)]
    pub cmk_arn: Option<String>,
    /// Reference to a Key in kms to populate cmkArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArnRef")]
    #[builder(default)]
    pub cmk_arn_ref: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRef>,
    /// Selector for a Key in kms to populate cmkArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArnSelector")]
    #[builder(default)]
    pub cmk_arn_selector: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelector>,
    /// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTags")]
    #[builder(default)]
    pub copy_tags: Option<bool>,
    /// See the deprecate_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deprecateRule")]
    #[builder(default)]
    pub deprecate_rule: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule>,
    /// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainRule")]
    #[builder(default)]
    pub retain_rule: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleRetainRule>,
    /// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

/// Reference to a Key in kms to populate cmkArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate cmkArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default)]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default)]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleCmkArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// See the deprecate_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule {
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleCrossRegionCopyRuleRetainRule {
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// See the deprecate_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleDeprecateRule {
    /// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000. Conflicts with interval and interval_unit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub count: Option<f64>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// See the fast_restore_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleFastRestoreRule {
    /// The Availability Zones in which to enable fast snapshot restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZones")]
    #[builder(default)]
    pub availability_zones: Option<Vec<String>>,
    /// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000. Conflicts with interval and interval_unit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub count: Option<f64>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleRetainRule {
    /// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000. Conflicts with interval and interval_unit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub count: Option<f64>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// See the share_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyInitProviderPolicyDetailsScheduleShareRule {
    /// The IDs of the AWS accounts with which to share the snapshots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAccounts")]
    #[builder(default)]
    pub target_accounts: Option<Vec<String>>,
    /// The period after which snapshots that are shared with other AWS accounts are automatically unshared.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unshareInterval")]
    #[builder(default)]
    pub unshare_interval: Option<f64>,
    /// The unit of time for the automatic unsharing interval. Valid values are DAYS, WEEKS, MONTHS, YEARS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unshareIntervalUnit")]
    #[builder(default)]
    pub unshare_interval_unit: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default)]
    pub config_ref: Option<LifecyclePolicyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub metadata: Option<LifecyclePolicyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub policy: Option<LifecyclePolicyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolution: Option<LifecyclePolicyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub resolve: Option<LifecyclePolicyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LifecyclePolicyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// LifecyclePolicyStatus defines the observed state of LifecyclePolicy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    #[builder(default)]
    pub at_provider: Option<LifecyclePolicyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    #[builder(default)]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProvider {
    /// Amazon Resource Name (ARN) of the DLM Lifecycle Policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub arn: Option<String>,
    /// A description for the DLM lifecycle policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub description: Option<String>,
    /// The ARN of an IAM role that is able to be assumed by the DLM service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    #[builder(default)]
    pub execution_role_arn: Option<String>,
    /// Identifier of the DLM Lifecycle Policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub id: Option<String>,
    /// See the policy_details configuration block. Max of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyDetails")]
    #[builder(default)]
    pub policy_details: Option<LifecyclePolicyStatusAtProviderPolicyDetails>,
    /// Whether the lifecycle policy should be enabled or disabled. ENABLED or DISABLED are valid values. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default)]
    pub tags_all: Option<HashMap<String, String>>,
}

/// See the policy_details configuration block. Max of 1.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetails {
    /// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub action: Option<LifecyclePolicyStatusAtProviderPolicyDetailsAction>,
    /// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSource")]
    #[builder(default)]
    pub event_source: Option<LifecyclePolicyStatusAtProviderPolicyDetailsEventSource>,
    /// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<LifecyclePolicyStatusAtProviderPolicyDetailsParameters>,
    /// The valid target resource types and actions a policy can manage. Specify EBS_SNAPSHOT_MANAGEMENT to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify IMAGE_MANAGEMENT to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify EVENT_BASED_POLICY to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is EBS_SNAPSHOT_MANAGEMENT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyType")]
    #[builder(default)]
    pub policy_type: Option<String>,
    /// The location of the resources to backup. If the source resources are located in an AWS Region, specify CLOUD. If the source resources are located on an Outpost in your account, specify OUTPOST. If you specify OUTPOST, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are CLOUD and OUTPOST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceLocations")]
    #[builder(default)]
    pub resource_locations: Option<Vec<String>>,
    /// A list of resource types that should be targeted by the lifecycle policy. Valid values are VOLUME and INSTANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTypes")]
    #[builder(default)]
    pub resource_types: Option<Vec<String>>,
    /// See the schedule configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub schedule: Option<Vec<LifecyclePolicyStatusAtProviderPolicyDetailsSchedule>>,
    /// A map of tag keys and their values. Any resources that match the resource_types and are tagged with any of these tags will be targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTags")]
    #[builder(default)]
    pub target_tags: Option<HashMap<String, String>>,
}

/// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsAction {
    /// The rule for copying shared snapshots across Regions. See the cross_region_copy configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossRegionCopy")]
    #[builder(default)]
    pub cross_region_copy: Option<Vec<LifecyclePolicyStatusAtProviderPolicyDetailsActionCrossRegionCopy>>,
    /// A descriptive name for the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsActionCrossRegionCopy {
    /// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    #[builder(default)]
    pub encryption_configuration: Option<LifecyclePolicyStatusAtProviderPolicyDetailsActionCrossRegionCopyEncryptionConfiguration>,
    /// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainRule")]
    #[builder(default)]
    pub retain_rule: Option<LifecyclePolicyStatusAtProviderPolicyDetailsActionCrossRegionCopyRetainRule>,
    /// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

/// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsActionCrossRegionCopyEncryptionConfiguration {
    /// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArn")]
    #[builder(default)]
    pub cmk_arn: Option<String>,
    /// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
}

/// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsActionCrossRegionCopyRetainRule {
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsEventSource {
    /// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub parameters: Option<LifecyclePolicyStatusAtProviderPolicyDetailsEventSourceParameters>,
    /// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are MANAGED_CWE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default)]
    pub r#type: Option<String>,
}

/// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsEventSourceParameters {
    /// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptionRegex")]
    #[builder(default)]
    pub description_regex: Option<String>,
    /// The type of event. Currently, only shareSnapshot events are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventType")]
    #[builder(default)]
    pub event_type: Option<String>,
    /// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotOwner")]
    #[builder(default)]
    pub snapshot_owner: Option<Vec<String>>,
}

/// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsParameters {
    /// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeBootVolume")]
    #[builder(default)]
    pub exclude_boot_volume: Option<bool>,
    /// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. true indicates that targeted instances are not rebooted when the policy runs. false indicates that target instances are rebooted when the policy runs. The default is true (instances are not rebooted).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noReboot")]
    #[builder(default)]
    pub no_reboot: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsSchedule {
    /// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTags")]
    #[builder(default)]
    pub copy_tags: Option<bool>,
    /// See the create_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createRule")]
    #[builder(default)]
    pub create_rule: Option<LifecyclePolicyStatusAtProviderPolicyDetailsScheduleCreateRule>,
    /// See the cross_region_copy_rule block. Max of 3 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossRegionCopyRule")]
    #[builder(default)]
    pub cross_region_copy_rule: Option<Vec<LifecyclePolicyStatusAtProviderPolicyDetailsScheduleCrossRegionCopyRule>>,
    /// See the deprecate_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deprecateRule")]
    #[builder(default)]
    pub deprecate_rule: Option<LifecyclePolicyStatusAtProviderPolicyDetailsScheduleDeprecateRule>,
    /// See the fast_restore_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastRestoreRule")]
    #[builder(default)]
    pub fast_restore_rule: Option<LifecyclePolicyStatusAtProviderPolicyDetailsScheduleFastRestoreRule>,
    /// A descriptive name for the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub name: Option<String>,
    /// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainRule")]
    #[builder(default)]
    pub retain_rule: Option<LifecyclePolicyStatusAtProviderPolicyDetailsScheduleRetainRule>,
    /// See the share_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareRule")]
    #[builder(default)]
    pub share_rule: Option<LifecyclePolicyStatusAtProviderPolicyDetailsScheduleShareRule>,
    /// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsToAdd")]
    #[builder(default)]
    pub tags_to_add: Option<HashMap<String, String>>,
    /// A map of tag keys and variable values, where the values are determined when the policy is executed. Only $(instance-id) or $(timestamp) are valid values. Can only be used when resource_types is INSTANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "variableTags")]
    #[builder(default)]
    pub variable_tags: Option<HashMap<String, String>>,
}

/// See the create_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsScheduleCreateRule {
    /// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. Conflicts with interval, interval_unit, and times.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cronExpression")]
    #[builder(default)]
    pub cron_expression: Option<String>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
    /// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify CLOUD. To create snapshots on the same Outpost as the source resource, specify OUTPOST_LOCAL. If you omit this parameter, CLOUD is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are CLOUD and OUTPOST_LOCAL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub location: Option<String>,
    /// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub times: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsScheduleCrossRegionCopyRule {
    /// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cmkArn")]
    #[builder(default)]
    pub cmk_arn: Option<String>,
    /// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTags")]
    #[builder(default)]
    pub copy_tags: Option<bool>,
    /// See the deprecate_rule block. Max of 1 per schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deprecateRule")]
    #[builder(default)]
    pub deprecate_rule: Option<LifecyclePolicyStatusAtProviderPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule>,
    /// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub encrypted: Option<bool>,
    /// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainRule")]
    #[builder(default)]
    pub retain_rule: Option<LifecyclePolicyStatusAtProviderPolicyDetailsScheduleCrossRegionCopyRuleRetainRule>,
    /// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub target: Option<String>,
}

/// See the deprecate_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule {
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsScheduleCrossRegionCopyRuleRetainRule {
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// See the deprecate_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsScheduleDeprecateRule {
    /// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000. Conflicts with interval and interval_unit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub count: Option<f64>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// See the fast_restore_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsScheduleFastRestoreRule {
    /// The Availability Zones in which to enable fast snapshot restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZones")]
    #[builder(default)]
    pub availability_zones: Option<Vec<String>>,
    /// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000. Conflicts with interval and interval_unit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub count: Option<f64>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsScheduleRetainRule {
    /// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000. Conflicts with interval and interval_unit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub count: Option<f64>,
    /// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values. Conflicts with cron_expression. If set, interval_unit and times must also be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub interval: Option<f64>,
    /// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value. Conflicts with cron_expression. Must be set if interval is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalUnit")]
    #[builder(default)]
    pub interval_unit: Option<String>,
}

/// See the share_rule block. Max of 1 per schedule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[builder(field_defaults(setter(strip_option(ignore_invalid))))]
pub struct LifecyclePolicyStatusAtProviderPolicyDetailsScheduleShareRule {
    /// The IDs of the AWS accounts with which to share the snapshots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAccounts")]
    #[builder(default)]
    pub target_accounts: Option<Vec<String>>,
    /// The period after which snapshots that are shared with other AWS accounts are automatically unshared.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unshareInterval")]
    #[builder(default)]
    pub unshare_interval: Option<f64>,
    /// The unit of time for the automatic unsharing interval. Valid values are DAYS, WEEKS, MONTHS, YEARS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unshareIntervalUnit")]
    #[builder(default)]
    pub unshare_interval_unit: Option<String>,
}


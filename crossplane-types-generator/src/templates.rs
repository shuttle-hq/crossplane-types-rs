use std::path::PathBuf;

/// The generated meta-crate
///
/// ```askama
/// {%- block manifest -%}
///
/// [package]
/// name = "crossplane-types"
/// version = { workspace = true }
/// authors = { workspace = true }
/// edition = { workspace = true }
/// license = { workspace = true }
/// publish = { workspace = true }
/// repository = { workspace = true }
///
/// [lints]
/// workspace = true
///
/// [features]
/// default = []
/// {%- for pkg in provider_crates %}
/// {{ pkg.feature_name }} = ["dep:{{ pkg.crate_name }}"]
/// {%- endfor %}
///
/// [dependencies]
/// {%- for pkg in provider_crates %}
/// {%- let crate_path = pkg.crate_path.display().to_string() %}
/// {{ pkg.crate_name }} = { version = "{{ version }}", path = "{{ crate_path }}", optional = true }
/// {%- endfor %}
/// {#+ #}
/// [dev-dependencies]
/// k8s-openapi = { workspace = true, features = ["latest", "schemars"] }
/// {#+ #}
/// {%- endblock -%}
///
/// {%- block generated_lib -%}
///
/// mod generated;
///
/// #[allow(unused_imports)]
/// pub use generated::*;
/// {#+ #}
/// {%- endblock -%}
///
/// {%- block generated_mod -%}
/// // WARNING: automatically generated by `{{ env!("CARGO_PKG_NAME") }} (v{{ env!("CARGO_PKG_VERSION") }})` - manual changes will be overwritten
/// {#+ #}
/// {%- for pkg in provider_crates %}
/// {%- let crate_name = crate::utils::replace(pkg.crate_name, "-", "_") %}
/// {%- let module_name = crate::utils::replace(pkg.feature_name, "-", "_") %}
/// #[cfg(feature = "{{ pkg.feature_name }}")]
/// pub use {{ crate_name }} as {{ module_name }};
/// {#+ #}
/// {%- endfor -%}
/// {#+ #}
/// {%- endblock -%}
/// ```
#[derive(Clone, Debug, askama::Template)]
#[template(
    in_doc = true,
    ext = "toml",
    escape = "none",
    blocks = ["manifest", "generated_lib", "generated_mod"],
)]
pub struct MetaCrate<'a> {
    pub version: &'a str,
    pub provider_crates: Vec<ProviderCrate<'a>>,
}

impl Default for MetaCrate<'_> {
    fn default() -> Self {
        Self {
            provider_crates: Default::default(),
            version: crate::utils::workspace_version(),
        }
    }
}

/// A generated provider types crate
///
/// ```askama
/// {%- block manifest -%}
///
/// [package]
/// name = "{{ crate_name }}"
/// version = { workspace = true }
/// authors = { workspace = true }
/// edition = { workspace = true }
/// license = { workspace = true }
/// publish = { workspace = true }
/// repository = { workspace = true }
///
/// [package.metadata.crossplane.provider]
/// name = "{{ provider_name }}"
/// {%- if let Some(family) = provider_family %}
/// family = "{{ family }}"
/// {%- endif %}
/// src-version = "{{ src_version }}"
/// managed-resources = [
/// {%- for resource in managed_resources %}
///     "{{ resource }}",
/// {%- endfor %}
/// ]
///
/// [lints]
/// workspace = true
///
/// [dependencies]
/// k8s-openapi = { workspace = true }
/// kube = { workspace = true }
/// schemars = { workspace = true }
/// serde = { workspace = true }
/// serde_json = { workspace = true }
/// typed-builder = { workspace = true }
/// {#+ #}
/// [dev-dependencies]
/// k8s-openapi = { workspace = true, features = ["latest", "schemars"] }
/// {#+ #}
/// {%- endblock -%}
///
/// {%- block generated_lib -%}
///
/// mod generated;
///
/// pub use generated::*;
/// {#+ #}
/// {%- endblock -%}
///
/// {%- block generated_mod -%}
/// // WARNING: automatically generated by `{{ env!("CARGO_PKG_NAME") }} (v{{ env!("CARGO_PKG_VERSION") }})` - manual changes will be overwritten
/// {#+ #}
/// {%- for resource in managed_resources %}
/// pub mod {{ resource }};
/// {%- endfor %}
/// {#+ #}
/// {%- for resource in managed_resources %}
/// pub use {{ resource }}::*;
/// {%- endfor %}
/// {#+ #}
/// pub const PROVIDER_NAME: &str = "{{ provider_name }}";
/// {%- if let Some(family) = provider_family %}
/// pub const PROVIDER_FAMILY: &str = "{{ family }}";
/// {%- endif %}
/// pub const PROVIDER_SRC_VERSION: &str = "{{ src_version }}";
/// {#+ #}
/// {%- endblock -%}
/// ```
#[derive(Clone, Debug, askama::Template)]
#[template(
    in_doc = true,
    ext = "toml",
    escape = "none",
    blocks = ["manifest", "generated_lib", "generated_mod"],
)]
pub struct ProviderCrate<'a> {
    pub crate_name: String,
    pub crate_path: PathBuf,
    pub src_version: &'a str,
    pub feature_name: String,
    pub provider_name: &'a crate::ProviderName,
    pub provider_family: Option<&'a str>,
    pub managed_resources: Vec<&'a str>,
}

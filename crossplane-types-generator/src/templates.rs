use std::{collections::HashMap, path::PathBuf};

use crate::utils::WORKSPACE_MANIFEST;

#[derive(Copy, Clone, Debug, serde::Serialize)]
pub struct WorkspaceConfig {
    version: &'static str,
    authors: &'static [String],
    edition: &'static cargo_toml::Edition,
    license: &'static str,
    publish: &'static cargo_toml::Publish,
    repository: &'static str,

    #[serde(skip_serializing)]
    lints: &'static HashMap<&'static str, &'static cargo_toml::LintGroups>,

    #[serde(skip_serializing)]
    dependencies: &'static cargo_toml::DepsSet,

    #[serde(skip_serializing)]
    k8s_openapi_version: &'static str,
}

impl Default for WorkspaceConfig {
    fn default() -> Self {
        use crate::utils::{WORKSPACE_LINTS, WORKSPACE_PACKAGE};

        let version = WORKSPACE_PACKAGE.version.as_deref().expect(
            "workspace `Cargo.toml` manifest missing required `workspace.package.version` field",
        );

        let authors = WORKSPACE_PACKAGE.authors.as_deref().expect(
            "workspace `Cargo.toml` manifest missing required `workspace.package.authors` field",
        );

        let edition = WORKSPACE_PACKAGE.edition.as_ref().expect(
            "workspace `Cargo.toml` manifest missing required `workspace.package.edition` field",
        );

        let license = WORKSPACE_PACKAGE.license.as_deref().expect(
            "workspace `Cargo.toml` manifest missing required `workspace.package.license` field",
        );

        let publish = &WORKSPACE_PACKAGE.publish;

        let repository = WORKSPACE_PACKAGE.repository.as_deref().expect(
            "workspace `Cargo.toml` manifest missing required `workspace.package.repository` field",
        );

        let k8s_openapi_version = WORKSPACE_MANIFEST
            .dependencies
            .get("k8s-openapi")
            .expect("workspace `Cargo.toml` manifest missing expected `k8s-openapi` dependency")
            .req();

        Self {
            version,
            authors,
            edition,
            license,
            publish,
            repository,
            k8s_openapi_version,
            lints: &WORKSPACE_LINTS,
            dependencies: &WORKSPACE_MANIFEST.dependencies,
        }
    }
}

/// A generated provider types crate
///
/// ```askama
/// {%- block manifest -%}
///
/// [package]
/// name = "{{ crate_name }}"
/// {{ crate::utils::to_toml(workspace) -}}
/// {#+ #}
/// [package.metadata.crossplane.provider]
/// name = "{{ provider_name }}"
/// {%- if let Some(family) = provider_family %}
/// family = "{{ family }}"
/// {%- endif %}
/// src-version = "{{ src_version }}"
/// managed-resources = [
/// {%- for resource in managed_resources %}
///     "{{ resource }}",
/// {%- endfor %}
/// ]
/// {#+ #}
/// {{- crate::utils::to_toml(workspace.lints) -}}
/// {#+ #}
/// {%- for (pkg, spec) in workspace.dependencies %}
/// [dependencies.{{ pkg }}]
/// {{ crate::utils::to_toml(spec) -}}
/// {#+ #}
/// {%- endfor %}
/// [dev-dependencies]
/// k8s-openapi = { version = "{{ workspace.k8s_openapi_version }}", features = ["latest"] }
/// {#+ #}
/// {%- endblock -%}
///
/// {%- block generated_lib -%}
///
/// mod generated;
///
/// pub use generated::*;
/// {#+ #}
/// {%- endblock -%}
///
/// {%- block generated_mod -%}
/// // WARNING: automatically generated by `{{ env!("CARGO_PKG_NAME") }} (v{{ env!("CARGO_PKG_VERSION") }})` - manual changes will be overwritten
/// {#+ #}
/// {%- for resource in managed_resources %}
/// pub mod {{ resource }};
/// {%- endfor %}
/// {#+ #}
/// {%- for resource in managed_resources %}
/// pub use {{ resource }}::*;
/// {%- endfor %}
/// {#+ #}
/// pub const PROVIDER_NAME: &str = "{{ provider_name }}";
/// {%- if let Some(family) = provider_family %}
/// pub const PROVIDER_FAMILY: &str = "{{ family }}";
/// {%- endif %}
/// pub const PROVIDER_SRC_VERSION: &str = "{{ src_version }}";
/// {#+ #}
/// {%- endblock -%}
/// ```
#[derive(Clone, Debug, askama::Template)]
#[template(
    in_doc = true,
    ext = "toml",
    escape = "none",
    blocks = ["manifest", "generated_lib", "generated_mod"],
)]
pub struct ProviderCrate<'a> {
    pub workspace: WorkspaceConfig,
    pub crate_name: String,
    pub crate_path: PathBuf,
    pub src_version: &'a str,
    pub feature_name: String,
    pub provider_name: &'a crate::ProviderName,
    pub provider_family: Option<&'a str>,
    pub managed_resources: Vec<&'a str>,
}
